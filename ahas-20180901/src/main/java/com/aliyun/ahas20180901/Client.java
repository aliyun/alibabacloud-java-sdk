// This file is auto-generated, don't edit it. Thanks.
package com.aliyun.ahas20180901;

import com.aliyun.tea.*;
import com.aliyun.ahas20180901.models.*;
import com.aliyun.teautil.*;
import com.aliyun.teautil.models.*;
import com.aliyun.teaopenapi.*;
import com.aliyun.teaopenapi.models.*;
import com.aliyun.openapiutil.*;
import com.aliyun.endpointutil.*;

public class Client extends com.aliyun.teaopenapi.Client {

    public Client(Config config) throws Exception {
        super(config);
        this._endpointRule = "";
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("ahas", _regionId, _endpointRule, _network, _suffix, _endpointMap, _endpoint);
    }


    public String getEndpoint(String productId, String regionId, String endpointRule, String network, String suffix, java.util.Map<String, String> endpointMap, String endpoint) throws Exception {
        if (!com.aliyun.teautil.Common.empty(endpoint)) {
            return endpoint;
        }

        if (!com.aliyun.teautil.Common.isUnset(endpointMap) && !com.aliyun.teautil.Common.empty(endpointMap.get(regionId))) {
            return endpointMap.get(regionId);
        }

        return com.aliyun.endpointutil.Client.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }

    public AddAlarmRuleResponse addAlarmRuleWithOptions(AddAlarmRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alarmOn)) {
            query.put("AlarmOn", request.alarmOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertGroup)) {
            query.put("AlertGroup", request.alertGroup);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertName)) {
            query.put("AlertName", request.alertName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.andOr)) {
            query.put("AndOr", request.andOr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.conditions)) {
            query.put("Conditions", request.conditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repeatInterval)) {
            query.put("RepeatInterval", request.repeatInterval);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.silencePeriod)) {
            query.put("SilencePeriod", request.silencePeriod);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddAlarmRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddAlarmRuleResponse());
    }

    public AddAlarmRuleResponse addAlarmRule(AddAlarmRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addAlarmRuleWithOptions(request, runtime);
    }

    public AddCategoryResponse addCategoryWithOptions(AddCategoryRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddCategory"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddCategoryResponse());
    }

    public AddCategoryResponse addCategory(AddCategoryRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addCategoryWithOptions(request, runtime);
    }

    public AddNamespaceResponse addNamespaceWithOptions(AddNamespaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddNamespace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddNamespaceResponse());
    }

    public AddNamespaceResponse addNamespace(AddNamespaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addNamespaceWithOptions(request, runtime);
    }

    public AddOrUpdateContactResponse addOrUpdateContactWithOptions(AddOrUpdateContactRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.contact)) {
            query.put("Contact", request.contact);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddOrUpdateContact"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddOrUpdateContactResponse());
    }

    public AddOrUpdateContactResponse addOrUpdateContact(AddOrUpdateContactRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addOrUpdateContactWithOptions(request, runtime);
    }

    public AddPermanentTopologyNodesResponse addPermanentTopologyNodesWithOptions(AddPermanentTopologyNodesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configurations)) {
            query.put("Configurations", request.configurations);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ports)) {
            query.put("Ports", request.ports);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.product)) {
            query.put("Product", request.product);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddPermanentTopologyNodes"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddPermanentTopologyNodesResponse());
    }

    public AddPermanentTopologyNodesResponse addPermanentTopologyNodes(AddPermanentTopologyNodesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addPermanentTopologyNodesWithOptions(request, runtime);
    }

    public AddSceneFunctionResponse addSceneFunctionWithOptions(AddSceneFunctionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSceneFunction"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddSceneFunctionResponse());
    }

    public AddSceneFunctionResponse addSceneFunction(AddSceneFunctionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addSceneFunctionWithOptions(request, runtime);
    }

    public AddSceneFunctionParameterResponse addSceneFunctionParameterWithOptions(AddSceneFunctionParameterRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSceneFunctionParameter"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddSceneFunctionParameterResponse());
    }

    public AddSceneFunctionParameterResponse addSceneFunctionParameter(AddSceneFunctionParameterRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addSceneFunctionParameterWithOptions(request, runtime);
    }

    public AddScriptSceneFunctionResponse addScriptSceneFunctionWithOptions(AddScriptSceneFunctionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddScriptSceneFunction"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddScriptSceneFunctionResponse());
    }

    public AddScriptSceneFunctionResponse addScriptSceneFunction(AddScriptSceneFunctionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addScriptSceneFunctionWithOptions(request, runtime);
    }

    public AddSentinelHotParamItemsResponse addSentinelHotParamItemsWithOptions(AddSentinelHotParamItemsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.items)) {
            query.put("Items", request.items);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSentinelHotParamItems"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddSentinelHotParamItemsResponse());
    }

    public AddSentinelHotParamItemsResponse addSentinelHotParamItems(AddSentinelHotParamItemsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addSentinelHotParamItemsWithOptions(request, runtime);
    }

    public AddSentinelHotParamRuleResponse addSentinelHotParamRuleWithOptions(AddSentinelHotParamRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.burstCount)) {
            query.put("BurstCount", request.burstCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.durationInSec)) {
            query.put("DurationInSec", request.durationInSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeMs)) {
            query.put("MaxQueueingTimeMs", request.maxQueueingTimeMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.paramIdx)) {
            query.put("ParamIdx", request.paramIdx);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSentinelHotParamRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddSentinelHotParamRuleResponse());
    }

    public AddSentinelHotParamRuleResponse addSentinelHotParamRule(AddSentinelHotParamRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addSentinelHotParamRuleWithOptions(request, runtime);
    }

    public AddTagResponse addTagWithOptions(AddTagRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddTag"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddTagResponse());
    }

    public AddTagResponse addTag(AddTagRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addTagWithOptions(request, runtime);
    }

    public AddUserAuthorityResponse addUserAuthorityWithOptions(AddUserAuthorityRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authItems)) {
            query.put("AuthItems", request.authItems);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddUserAuthority"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddUserAuthorityResponse());
    }

    public AddUserAuthorityResponse addUserAuthority(AddUserAuthorityRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addUserAuthorityWithOptions(request, runtime);
    }

    public AddWorkspaceResponse addWorkspaceWithOptions(AddWorkspaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddWorkspace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddWorkspaceResponse());
    }

    public AddWorkspaceResponse addWorkspace(AddWorkspaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addWorkspaceWithOptions(request, runtime);
    }

    public AddWorkspaceExperimentResponse addWorkspaceExperimentWithOptions(AddWorkspaceExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddWorkspaceExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddWorkspaceExperimentResponse());
    }

    public AddWorkspaceExperimentResponse addWorkspaceExperiment(AddWorkspaceExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addWorkspaceExperimentWithOptions(request, runtime);
    }

    public AddWorkspaceMemberResponse addWorkspaceMemberWithOptions(AddWorkspaceMemberRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddWorkspaceMember"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddWorkspaceMemberResponse());
    }

    public AddWorkspaceMemberResponse addWorkspaceMember(AddWorkspaceMemberRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.addWorkspaceMemberWithOptions(request, runtime);
    }

    public AllNodeExceptionStatisticsResponse allNodeExceptionStatisticsWithOptions(AllNodeExceptionStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AllNodeExceptionStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AllNodeExceptionStatisticsResponse());
    }

    public AllNodeExceptionStatisticsResponse allNodeExceptionStatistics(AllNodeExceptionStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.allNodeExceptionStatisticsWithOptions(request, runtime);
    }

    public AppEventsResponse appEventsWithOptions(AppEventsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AppEvents"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AppEventsResponse());
    }

    public AppEventsResponse appEvents(AppEventsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.appEventsWithOptions(request, runtime);
    }

    public AppProtectionsResponse appProtectionsWithOptions(AppProtectionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AppProtections"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AppProtectionsResponse());
    }

    public AppProtectionsResponse appProtections(AppProtectionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.appProtectionsWithOptions(request, runtime);
    }

    public ApplicationExceptionStatisticsResponse applicationExceptionStatisticsWithOptions(ApplicationExceptionStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ApplicationExceptionStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ApplicationExceptionStatisticsResponse());
    }

    public ApplicationExceptionStatisticsResponse applicationExceptionStatistics(ApplicationExceptionStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.applicationExceptionStatisticsWithOptions(request, runtime);
    }

    public ApplicationExceptionsWithTimeResponse applicationExceptionsWithTimeWithOptions(ApplicationExceptionsWithTimeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ApplicationExceptionsWithTime"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ApplicationExceptionsWithTimeResponse());
    }

    public ApplicationExceptionsWithTimeResponse applicationExceptionsWithTime(ApplicationExceptionsWithTimeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.applicationExceptionsWithTimeWithOptions(request, runtime);
    }

    public ApplicationLatestExceptionsResponse applicationLatestExceptionsWithOptions(ApplicationLatestExceptionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ApplicationLatestExceptions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ApplicationLatestExceptionsResponse());
    }

    public ApplicationLatestExceptionsResponse applicationLatestExceptions(ApplicationLatestExceptionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.applicationLatestExceptionsWithOptions(request, runtime);
    }

    public BatchDisableSentinelParamDegradeRulesResponse batchDisableSentinelParamDegradeRulesWithOptions(BatchDisableSentinelParamDegradeRulesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            body.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchDisableSentinelParamDegradeRules"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchDisableSentinelParamDegradeRulesResponse());
    }

    public BatchDisableSentinelParamDegradeRulesResponse batchDisableSentinelParamDegradeRules(BatchDisableSentinelParamDegradeRulesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.batchDisableSentinelParamDegradeRulesWithOptions(request, runtime);
    }

    public BatchEnableSentinelDefaultCircuitBreakerRulesResponse batchEnableSentinelDefaultCircuitBreakerRulesWithOptions(BatchEnableSentinelDefaultCircuitBreakerRulesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchEnableSentinelDefaultCircuitBreakerRules"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchEnableSentinelDefaultCircuitBreakerRulesResponse());
    }

    public BatchEnableSentinelDefaultCircuitBreakerRulesResponse batchEnableSentinelDefaultCircuitBreakerRules(BatchEnableSentinelDefaultCircuitBreakerRulesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.batchEnableSentinelDefaultCircuitBreakerRulesWithOptions(request, runtime);
    }

    public BatchEnableSentinelParamDegradeRulesResponse batchEnableSentinelParamDegradeRulesWithOptions(BatchEnableSentinelParamDegradeRulesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            body.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchEnableSentinelParamDegradeRules"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchEnableSentinelParamDegradeRulesResponse());
    }

    public BatchEnableSentinelParamDegradeRulesResponse batchEnableSentinelParamDegradeRules(BatchEnableSentinelParamDegradeRulesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.batchEnableSentinelParamDegradeRulesWithOptions(request, runtime);
    }

    public BatchInstallPluginResponse batchInstallPluginWithOptions(BatchInstallPluginRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appGroupName)) {
            query.put("AppGroupName", request.appGroupName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchInstallPlugin"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchInstallPluginResponse());
    }

    public BatchInstallPluginResponse batchInstallPlugin(BatchInstallPluginRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.batchInstallPluginWithOptions(request, runtime);
    }

    public BatchQueryExperimentTaskConsumedAmountResponse batchQueryExperimentTaskConsumedAmountWithOptions(BatchQueryExperimentTaskConsumedAmountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchQueryExperimentTaskConsumedAmount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchQueryExperimentTaskConsumedAmountResponse());
    }

    public BatchQueryExperimentTaskConsumedAmountResponse batchQueryExperimentTaskConsumedAmount(BatchQueryExperimentTaskConsumedAmountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.batchQueryExperimentTaskConsumedAmountWithOptions(request, runtime);
    }

    public BatchQueryPluginStatusResponse batchQueryPluginStatusWithOptions(BatchQueryPluginStatusRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchQueryPluginStatus"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchQueryPluginStatusResponse());
    }

    public BatchQueryPluginStatusResponse batchQueryPluginStatus(BatchQueryPluginStatusRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.batchQueryPluginStatusWithOptions(request, runtime);
    }

    public BindSentinelBlockFallbackDefinitionResponse bindSentinelBlockFallbackDefinitionWithOptions(BindSentinelBlockFallbackDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BindSentinelBlockFallbackDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BindSentinelBlockFallbackDefinitionResponse());
    }

    public BindSentinelBlockFallbackDefinitionResponse bindSentinelBlockFallbackDefinition(BindSentinelBlockFallbackDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.bindSentinelBlockFallbackDefinitionWithOptions(request, runtime);
    }

    public CaculatePriceResponse caculatePriceWithOptions(CaculatePriceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.days)) {
            query.put("Days", request.days);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.numNodes)) {
            query.put("NumNodes", request.numNodes);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CaculatePrice"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CaculatePriceResponse());
    }

    public CaculatePriceResponse caculatePrice(CaculatePriceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.caculatePriceWithOptions(request, runtime);
    }

    public CancelInspectionResponse cancelInspectionWithOptions(CancelInspectionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inspectResultId)) {
            query.put("InspectResultId", request.inspectResultId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CancelInspection"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CancelInspectionResponse());
    }

    public CancelInspectionResponse cancelInspection(CancelInspectionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.cancelInspectionWithOptions(request, runtime);
    }

    public ChaosDeleteNamespaceResponse chaosDeleteNamespaceWithOptions(ChaosDeleteNamespaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChaosDeleteNamespace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChaosDeleteNamespaceResponse());
    }

    public ChaosDeleteNamespaceResponse chaosDeleteNamespace(ChaosDeleteNamespaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.chaosDeleteNamespaceWithOptions(request, runtime);
    }

    public ChaosPayCanRefundCallbackResponse chaosPayCanRefundCallbackWithOptions(ChaosPayCanRefundCallbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChaosPayCanRefundCallback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChaosPayCanRefundCallbackResponse());
    }

    public ChaosPayCanRefundCallbackResponse chaosPayCanRefundCallback(ChaosPayCanRefundCallbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.chaosPayCanRefundCallbackWithOptions(request, runtime);
    }

    public ChaosPayOrderCallbackResponse chaosPayOrderCallbackWithOptions(ChaosPayOrderCallbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChaosPayOrderCallback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChaosPayOrderCallbackResponse());
    }

    public ChaosPayOrderCallbackResponse chaosPayOrderCallback(ChaosPayOrderCallbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.chaosPayOrderCallbackWithOptions(request, runtime);
    }

    public ChaosPayOrderVerifyCallbackResponse chaosPayOrderVerifyCallbackWithOptions(ChaosPayOrderVerifyCallbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChaosPayOrderVerifyCallback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChaosPayOrderVerifyCallbackResponse());
    }

    public ChaosPayOrderVerifyCallbackResponse chaosPayOrderVerifyCallback(ChaosPayOrderVerifyCallbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.chaosPayOrderVerifyCallbackWithOptions(request, runtime);
    }

    public ChaosPayProductCompleteCallbackResponse chaosPayProductCompleteCallbackWithOptions(ChaosPayProductCompleteCallbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChaosPayProductCompleteCallback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChaosPayProductCompleteCallbackResponse());
    }

    public ChaosPayProductCompleteCallbackResponse chaosPayProductCompleteCallback(ChaosPayProductCompleteCallbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.chaosPayProductCompleteCallbackWithOptions(request, runtime);
    }

    public ChaosPayRefundCallbackResponse chaosPayRefundCallbackWithOptions(ChaosPayRefundCallbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChaosPayRefundCallback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChaosPayRefundCallbackResponse());
    }

    public ChaosPayRefundCallbackResponse chaosPayRefundCallback(ChaosPayRefundCallbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.chaosPayRefundCallbackWithOptions(request, runtime);
    }

    public CheckActivityGroupDefinitionResponse checkActivityGroupDefinitionWithOptions(CheckActivityGroupDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckActivityGroupDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckActivityGroupDefinitionResponse());
    }

    public CheckActivityGroupDefinitionResponse checkActivityGroupDefinition(CheckActivityGroupDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.checkActivityGroupDefinitionWithOptions(request, runtime);
    }

    public CheckOpenAhasStatusResponse checkOpenAhasStatusWithOptions(CheckOpenAhasStatusRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.buyerId)) {
            query.put("BuyerId", request.buyerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isInternational)) {
            query.put("IsInternational", request.isInternational);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.openType)) {
            query.put("OpenType", request.openType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.product)) {
            query.put("Product", request.product);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckOpenAhasStatus"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckOpenAhasStatusResponse());
    }

    public CheckOpenAhasStatusResponse checkOpenAhasStatus(CheckOpenAhasStatusRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.checkOpenAhasStatusWithOptions(request, runtime);
    }

    public CheckServiceLinkedRoleForDeletingResponse checkServiceLinkedRoleForDeletingWithOptions(CheckServiceLinkedRoleForDeletingRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountId)) {
            query.put("AccountId", request.accountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.deletionTaskId)) {
            query.put("DeletionTaskId", request.deletionTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.roleArn)) {
            query.put("RoleArn", request.roleArn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.SPIRegionId)) {
            query.put("SPIRegionId", request.SPIRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceName)) {
            query.put("ServiceName", request.serviceName);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckServiceLinkedRoleForDeleting"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckServiceLinkedRoleForDeletingResponse());
    }

    public CheckServiceLinkedRoleForDeletingResponse checkServiceLinkedRoleForDeleting(CheckServiceLinkedRoleForDeletingRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.checkServiceLinkedRoleForDeletingWithOptions(request, runtime);
    }

    public CheckSwitchPostUserResponse checkSwitchPostUserWithOptions(CheckSwitchPostUserRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckSwitchPostUser"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckSwitchPostUserResponse());
    }

    public CheckSwitchPostUserResponse checkSwitchPostUser(CheckSwitchPostUserRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.checkSwitchPostUserWithOptions(request, runtime);
    }

    public CheckUserPayPackPermissionResponse checkUserPayPackPermissionWithOptions(CheckUserPayPackPermissionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckUserPayPackPermission"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckUserPayPackPermissionResponse());
    }

    public CheckUserPayPackPermissionResponse checkUserPayPackPermission(CheckUserPayPackPermissionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.checkUserPayPackPermissionWithOptions(request, runtime);
    }

    public CloneExperimentResponse cloneExperimentWithOptions(CloneExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CloneExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CloneExperimentResponse());
    }

    public CloneExperimentResponse cloneExperiment(CloneExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.cloneExperimentWithOptions(request, runtime);
    }

    public CloneExpertiseResponse cloneExpertiseWithOptions(CloneExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CloneExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CloneExpertiseResponse());
    }

    public CloneExpertiseResponse cloneExpertise(CloneExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.cloneExpertiseWithOptions(request, runtime);
    }

    public ClusterOffResponse clusterOffWithOptions(ClusterOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ClusterOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ClusterOffResponse());
    }

    public ClusterOffResponse clusterOff(ClusterOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.clusterOffWithOptions(request, runtime);
    }

    public ClusterOnResponse clusterOnWithOptions(ClusterOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ClusterOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ClusterOnResponse());
    }

    public ClusterOnResponse clusterOn(ClusterOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.clusterOnWithOptions(request, runtime);
    }

    public ConvertExperimentToExpertiseResponse convertExperimentToExpertiseWithOptions(ConvertExperimentToExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ConvertExperimentToExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ConvertExperimentToExpertiseResponse());
    }

    public ConvertExperimentToExpertiseResponse convertExperimentToExpertise(ConvertExperimentToExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.convertExperimentToExpertiseWithOptions(request, runtime);
    }

    public CountExperimentScopeInvocationResponse countExperimentScopeInvocationWithOptions(CountExperimentScopeInvocationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CountExperimentScopeInvocation"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CountExperimentScopeInvocationResponse());
    }

    public CountExperimentScopeInvocationResponse countExperimentScopeInvocation(CountExperimentScopeInvocationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.countExperimentScopeInvocationWithOptions(request, runtime);
    }

    public CountExperimentScopeSceneFunctionCountResponse countExperimentScopeSceneFunctionCountWithOptions(CountExperimentScopeSceneFunctionCountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CountExperimentScopeSceneFunctionCount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CountExperimentScopeSceneFunctionCountResponse());
    }

    public CountExperimentScopeSceneFunctionCountResponse countExperimentScopeSceneFunctionCount(CountExperimentScopeSceneFunctionCountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.countExperimentScopeSceneFunctionCountWithOptions(request, runtime);
    }

    public CountExperimentTaskByDayResponse countExperimentTaskByDayWithOptions(CountExperimentTaskByDayRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CountExperimentTaskByDay"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CountExperimentTaskByDayResponse());
    }

    public CountExperimentTaskByDayResponse countExperimentTaskByDay(CountExperimentTaskByDayRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.countExperimentTaskByDayWithOptions(request, runtime);
    }

    public CountFunctionInvocationResponse countFunctionInvocationWithOptions(CountFunctionInvocationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CountFunctionInvocation"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CountFunctionInvocationResponse());
    }

    public CountFunctionInvocationResponse countFunctionInvocation(CountFunctionInvocationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.countFunctionInvocationWithOptions(request, runtime);
    }

    public CreateAppsRelationshipResponse createAppsRelationshipWithOptions(CreateAppsRelationshipRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.edges)) {
            query.put("Edges", request.edges);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAppsRelationship"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAppsRelationshipResponse());
    }

    public CreateAppsRelationshipResponse createAppsRelationship(CreateAppsRelationshipRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createAppsRelationshipWithOptions(request, runtime);
    }

    public CreateAttackSuiteResponse createAttackSuiteWithOptions(CreateAttackSuiteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scenarioDisplayVO)) {
            body.put("ScenarioDisplayVO", request.scenarioDisplayVO);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAttackSuite"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAttackSuiteResponse());
    }

    public CreateAttackSuiteResponse createAttackSuite(CreateAttackSuiteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createAttackSuiteWithOptions(request, runtime);
    }

    public CreateBatchPublishOrderResponse createBatchPublishOrderWithOptions(CreateBatchPublishOrderRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.batchNum)) {
            query.put("BatchNum", request.batchNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pauseType)) {
            query.put("PauseType", request.pauseType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchName)) {
            query.put("SwitchName", request.switchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchNameSpace)) {
            query.put("SwitchNameSpace", request.switchNameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchValue)) {
            query.put("SwitchValue", request.switchValue);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateBatchPublishOrder"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateBatchPublishOrderResponse());
    }

    public CreateBatchPublishOrderResponse createBatchPublishOrder(CreateBatchPublishOrderRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createBatchPublishOrderWithOptions(request, runtime);
    }

    public CreateExperimentBasicInfoResponse createExperimentBasicInfoWithOptions(CreateExperimentBasicInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateExperimentBasicInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateExperimentBasicInfoResponse());
    }

    public CreateExperimentBasicInfoResponse createExperimentBasicInfo(CreateExperimentBasicInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createExperimentBasicInfoWithOptions(request, runtime);
    }

    public CreateExperimentFlowDefinitionResponse createExperimentFlowDefinitionWithOptions(CreateExperimentFlowDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateExperimentFlowDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateExperimentFlowDefinitionResponse());
    }

    public CreateExperimentFlowDefinitionResponse createExperimentFlowDefinition(CreateExperimentFlowDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createExperimentFlowDefinitionWithOptions(request, runtime);
    }

    public CreateExpertiseResponse createExpertiseWithOptions(CreateExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateExpertiseResponse());
    }

    public CreateExpertiseResponse createExpertise(CreateExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createExpertiseWithOptions(request, runtime);
    }

    public CreateFreeLicenseKeyResponse createFreeLicenseKeyWithOptions(CreateFreeLicenseKeyRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFreeLicenseKey"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFreeLicenseKeyResponse());
    }

    public CreateFreeLicenseKeyResponse createFreeLicenseKey(CreateFreeLicenseKeyRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createFreeLicenseKeyWithOptions(request, runtime);
    }

    public CreateInspectJobResponse createInspectJobWithOptions(CreateInspectJobRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cron)) {
            query.put("Cron", request.cron);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.date)) {
            query.put("Date", request.date);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.day)) {
            query.put("Day", request.day);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.terminationDate)) {
            query.put("TerminationDate", request.terminationDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.terminationTime)) {
            query.put("TerminationTime", request.terminationTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.week)) {
            query.put("Week", request.week);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateInspectJob"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateInspectJobResponse());
    }

    public CreateInspectJobResponse createInspectJob(CreateInspectJobRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createInspectJobWithOptions(request, runtime);
    }

    public CreateNamespaceResponse createNamespaceWithOptions(CreateNamespaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateNamespace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateNamespaceResponse());
    }

    public CreateNamespaceResponse createNamespace(CreateNamespaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createNamespaceWithOptions(request, runtime);
    }

    public CreateSentinelBlockFallbackDefinitionResponse createSentinelBlockFallbackDefinitionWithOptions(CreateSentinelBlockFallbackDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackBehavior)) {
            query.put("FallbackBehavior", request.fallbackBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceClassification)) {
            query.put("ResourceClassification", request.resourceClassification);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSentinelBlockFallbackDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSentinelBlockFallbackDefinitionResponse());
    }

    public CreateSentinelBlockFallbackDefinitionResponse createSentinelBlockFallbackDefinition(CreateSentinelBlockFallbackDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createSentinelBlockFallbackDefinitionWithOptions(request, runtime);
    }

    public CreateSentinelDefaultCircuitBreakerRuleResponse createSentinelDefaultCircuitBreakerRuleWithOptions(CreateSentinelDefaultCircuitBreakerRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenBaseAmountPerStep)) {
            query.put("HalfOpenBaseAmountPerStep", request.halfOpenBaseAmountPerStep);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenRecoveryStepNum)) {
            query.put("HalfOpenRecoveryStepNum", request.halfOpenRecoveryStepNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minRequestAmount)) {
            query.put("MinRequestAmount", request.minRequestAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.slowRatioThreshold)) {
            query.put("SlowRatioThreshold", request.slowRatioThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statIntervalMs)) {
            query.put("StatIntervalMs", request.statIntervalMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeWindow)) {
            query.put("TimeWindow", request.timeWindow);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSentinelDefaultCircuitBreakerRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSentinelDefaultCircuitBreakerRuleResponse());
    }

    public CreateSentinelDefaultCircuitBreakerRuleResponse createSentinelDefaultCircuitBreakerRule(CreateSentinelDefaultCircuitBreakerRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
    }

    public CreateSentinelParamDegradeRuleResponse createSentinelParamDegradeRuleWithOptions(CreateSentinelParamDegradeRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appGroup)) {
            body.put("AppGroup", request.appGroup);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            body.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            body.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            body.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenBaseAmountPerStep)) {
            body.put("HalfOpenBaseAmountPerStep", request.halfOpenBaseAmountPerStep);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenRecoveryStepNum)) {
            body.put("HalfOpenRecoveryStepNum", request.halfOpenRecoveryStepNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minRequestAmount)) {
            body.put("MinRequestAmount", request.minRequestAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            body.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statIntervalMs)) {
            body.put("StatIntervalMs", request.statIntervalMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            body.put("Tags", request.tags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeWindow)) {
            body.put("TimeWindow", request.timeWindow);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSentinelParamDegradeRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSentinelParamDegradeRuleResponse());
    }

    public CreateSentinelParamDegradeRuleResponse createSentinelParamDegradeRule(CreateSentinelParamDegradeRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.createSentinelParamDegradeRuleWithOptions(request, runtime);
    }

    public DeleteAlarmRuleResponse deleteAlarmRuleWithOptions(DeleteAlarmRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alarmIds)) {
            query.put("AlarmIds", request.alarmIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteAlarmRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteAlarmRuleResponse());
    }

    public DeleteAlarmRuleResponse deleteAlarmRule(DeleteAlarmRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteAlarmRuleWithOptions(request, runtime);
    }

    public DeleteCategoryResponse deleteCategoryWithOptions(DeleteCategoryRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCategory"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCategoryResponse());
    }

    public DeleteCategoryResponse deleteCategory(DeleteCategoryRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteCategoryWithOptions(request, runtime);
    }

    public DeleteContactResponse deleteContactWithOptions(DeleteContactRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.contactId)) {
            query.put("ContactId", request.contactId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteContact"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteContactResponse());
    }

    public DeleteContactResponse deleteContact(DeleteContactRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteContactWithOptions(request, runtime);
    }

    public DeleteExperimentResponse deleteExperimentWithOptions(DeleteExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteExperimentResponse());
    }

    public DeleteExperimentResponse deleteExperiment(DeleteExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteExperimentWithOptions(request, runtime);
    }

    public DeleteExpertiseResponse deleteExpertiseWithOptions(DeleteExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteExpertiseResponse());
    }

    public DeleteExpertiseResponse deleteExpertise(DeleteExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteExpertiseWithOptions(request, runtime);
    }

    public DeleteInspectJobResponse deleteInspectJobWithOptions(DeleteInspectJobRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteInspectJob"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteInspectJobResponse());
    }

    public DeleteInspectJobResponse deleteInspectJob(DeleteInspectJobRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteInspectJobWithOptions(request, runtime);
    }

    public DeleteNamespaceResponse deleteNamespaceWithOptions(DeleteNamespaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespaceId)) {
            query.put("NamespaceId", request.namespaceId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteNamespace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteNamespaceResponse());
    }

    public DeleteNamespaceResponse deleteNamespace(DeleteNamespaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteNamespaceWithOptions(request, runtime);
    }

    public DeletePermanentTopologyNodesResponse deletePermanentTopologyNodesWithOptions(DeletePermanentTopologyNodesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configurations)) {
            query.put("Configurations", request.configurations);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.product)) {
            query.put("Product", request.product);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeletePermanentTopologyNodes"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeletePermanentTopologyNodesResponse());
    }

    public DeletePermanentTopologyNodesResponse deletePermanentTopologyNodes(DeletePermanentTopologyNodesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deletePermanentTopologyNodesWithOptions(request, runtime);
    }

    public DeleteSceneResponse deleteSceneWithOptions(DeleteSceneRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteScene"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSceneResponse());
    }

    public DeleteSceneResponse deleteScene(DeleteSceneRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteSceneWithOptions(request, runtime);
    }

    public DeleteSceneFunctionResponse deleteSceneFunctionWithOptions(DeleteSceneFunctionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSceneFunction"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSceneFunctionResponse());
    }

    public DeleteSceneFunctionResponse deleteSceneFunction(DeleteSceneFunctionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteSceneFunctionWithOptions(request, runtime);
    }

    public DeleteSceneFunctionParameterResponse deleteSceneFunctionParameterWithOptions(DeleteSceneFunctionParameterRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSceneFunctionParameter"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSceneFunctionParameterResponse());
    }

    public DeleteSceneFunctionParameterResponse deleteSceneFunctionParameter(DeleteSceneFunctionParameterRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteSceneFunctionParameterWithOptions(request, runtime);
    }

    public DeleteSentinelBlockFallbackDefinitionResponse deleteSentinelBlockFallbackDefinitionWithOptions(DeleteSentinelBlockFallbackDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSentinelBlockFallbackDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSentinelBlockFallbackDefinitionResponse());
    }

    public DeleteSentinelBlockFallbackDefinitionResponse deleteSentinelBlockFallbackDefinition(DeleteSentinelBlockFallbackDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteSentinelBlockFallbackDefinitionWithOptions(request, runtime);
    }

    public DeleteSentinelDefaultCircuitBreakerRuleResponse deleteSentinelDefaultCircuitBreakerRuleWithOptions(DeleteSentinelDefaultCircuitBreakerRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSentinelDefaultCircuitBreakerRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSentinelDefaultCircuitBreakerRuleResponse());
    }

    public DeleteSentinelDefaultCircuitBreakerRuleResponse deleteSentinelDefaultCircuitBreakerRule(DeleteSentinelDefaultCircuitBreakerRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
    }

    public DeleteSentinelMeshEnvoyRlsRuleResponse deleteSentinelMeshEnvoyRlsRuleWithOptions(DeleteSentinelMeshEnvoyRlsRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSentinelMeshEnvoyRlsRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSentinelMeshEnvoyRlsRuleResponse());
    }

    public DeleteSentinelMeshEnvoyRlsRuleResponse deleteSentinelMeshEnvoyRlsRule(DeleteSentinelMeshEnvoyRlsRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteSentinelMeshEnvoyRlsRuleWithOptions(request, runtime);
    }

    public DeleteSentinelParamDegradeRuleResponse deleteSentinelParamDegradeRuleWithOptions(DeleteSentinelParamDegradeRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            body.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSentinelParamDegradeRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSentinelParamDegradeRuleResponse());
    }

    public DeleteSentinelParamDegradeRuleResponse deleteSentinelParamDegradeRule(DeleteSentinelParamDegradeRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteSentinelParamDegradeRuleWithOptions(request, runtime);
    }

    public DeleteUserAuthorityResponse deleteUserAuthorityWithOptions(DeleteUserAuthorityRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteUserAuthority"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteUserAuthorityResponse());
    }

    public DeleteUserAuthorityResponse deleteUserAuthority(DeleteUserAuthorityRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteUserAuthorityWithOptions(request, runtime);
    }

    public DeleteWorkspaceResponse deleteWorkspaceWithOptions(DeleteWorkspaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteWorkspace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteWorkspaceResponse());
    }

    public DeleteWorkspaceResponse deleteWorkspace(DeleteWorkspaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteWorkspaceWithOptions(request, runtime);
    }

    public DeleteWorkspaceExperimentResponse deleteWorkspaceExperimentWithOptions(DeleteWorkspaceExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteWorkspaceExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteWorkspaceExperimentResponse());
    }

    public DeleteWorkspaceExperimentResponse deleteWorkspaceExperiment(DeleteWorkspaceExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteWorkspaceExperimentWithOptions(request, runtime);
    }

    public DeleteWorkspaceMemberResponse deleteWorkspaceMemberWithOptions(DeleteWorkspaceMemberRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteWorkspaceMember"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteWorkspaceMemberResponse());
    }

    public DeleteWorkspaceMemberResponse deleteWorkspaceMember(DeleteWorkspaceMemberRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.deleteWorkspaceMemberWithOptions(request, runtime);
    }

    public DescribeLastInspectResultResponse describeLastInspectResultWithOptions(DescribeLastInspectResultRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLastInspectResult"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLastInspectResultResponse());
    }

    public DescribeLastInspectResultResponse describeLastInspectResult(DescribeLastInspectResultRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.describeLastInspectResultWithOptions(request, runtime);
    }

    public DescribePluginDetailResponse describePluginDetailWithOptions(DescribePluginDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePluginDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePluginDetailResponse());
    }

    public DescribePluginDetailResponse describePluginDetail(DescribePluginDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.describePluginDetailWithOptions(request, runtime);
    }

    public DescribePluginRateResponse describePluginRateWithOptions(DescribePluginRateRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pluginType)) {
            query.put("PluginType", request.pluginType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePluginRate"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePluginRateResponse());
    }

    public DescribePluginRateResponse describePluginRate(DescribePluginRateRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.describePluginRateWithOptions(request, runtime);
    }

    public DescribeRdsErrorLogsResponse describeRdsErrorLogsWithOptions(DescribeRdsErrorLogsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dbInstanceId)) {
            query.put("DbInstanceId", request.dbInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRdsErrorLogs"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRdsErrorLogsResponse());
    }

    public DescribeRdsErrorLogsResponse describeRdsErrorLogs(DescribeRdsErrorLogsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.describeRdsErrorLogsWithOptions(request, runtime);
    }

    public DescribeRdsSlowLogRecordsResponse describeRdsSlowLogRecordsWithOptions(DescribeRdsSlowLogRecordsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dbInstanceId)) {
            query.put("DbInstanceId", request.dbInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRdsSlowLogRecords"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRdsSlowLogRecordsResponse());
    }

    public DescribeRdsSlowLogRecordsResponse describeRdsSlowLogRecords(DescribeRdsSlowLogRecordsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.describeRdsSlowLogRecordsWithOptions(request, runtime);
    }

    public DescribeRdsSlowLogsResponse describeRdsSlowLogsWithOptions(DescribeRdsSlowLogsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dbInstanceId)) {
            query.put("DbInstanceId", request.dbInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRdsSlowLogs"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRdsSlowLogsResponse());
    }

    public DescribeRdsSlowLogsResponse describeRdsSlowLogs(DescribeRdsSlowLogsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.describeRdsSlowLogsWithOptions(request, runtime);
    }

    public DescribeRegionsResponse describeRegionsWithOptions(DescribeRegionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRegions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRegionsResponse());
    }

    public DescribeRegionsResponse describeRegions(DescribeRegionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.describeRegionsWithOptions(request, runtime);
    }

    public DisableExpertiseResponse disableExpertiseWithOptions(DisableExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DisableExpertiseResponse());
    }

    public DisableExpertiseResponse disableExpertise(DisableExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.disableExpertiseWithOptions(request, runtime);
    }

    public DisableInspectRuleResponse disableInspectRuleWithOptions(DisableInspectRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.functionId)) {
            query.put("FunctionId", request.functionId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableInspectRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DisableInspectRuleResponse());
    }

    public DisableInspectRuleResponse disableInspectRule(DisableInspectRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.disableInspectRuleWithOptions(request, runtime);
    }

    public DisableSentinelDefaultCircuitBreakerRuleResponse disableSentinelDefaultCircuitBreakerRuleWithOptions(DisableSentinelDefaultCircuitBreakerRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableSentinelDefaultCircuitBreakerRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DisableSentinelDefaultCircuitBreakerRuleResponse());
    }

    public DisableSentinelDefaultCircuitBreakerRuleResponse disableSentinelDefaultCircuitBreakerRule(DisableSentinelDefaultCircuitBreakerRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.disableSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
    }

    public DisableSentinelMeshEnvoyRlsRuleResponse disableSentinelMeshEnvoyRlsRuleWithOptions(DisableSentinelMeshEnvoyRlsRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableSentinelMeshEnvoyRlsRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DisableSentinelMeshEnvoyRlsRuleResponse());
    }

    public DisableSentinelMeshEnvoyRlsRuleResponse disableSentinelMeshEnvoyRlsRule(DisableSentinelMeshEnvoyRlsRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.disableSentinelMeshEnvoyRlsRuleWithOptions(request, runtime);
    }

    public DisableSentinelParamDegradeRuleResponse disableSentinelParamDegradeRuleWithOptions(DisableSentinelParamDegradeRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            body.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableSentinelParamDegradeRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DisableSentinelParamDegradeRuleResponse());
    }

    public DisableSentinelParamDegradeRuleResponse disableSentinelParamDegradeRule(DisableSentinelParamDegradeRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.disableSentinelParamDegradeRuleWithOptions(request, runtime);
    }

    public EditSentinelDefaultCircuitBreakerRuleResponse editSentinelDefaultCircuitBreakerRuleWithOptions(EditSentinelDefaultCircuitBreakerRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenBaseAmountPerStep)) {
            query.put("HalfOpenBaseAmountPerStep", request.halfOpenBaseAmountPerStep);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenRecoveryStepNum)) {
            query.put("HalfOpenRecoveryStepNum", request.halfOpenRecoveryStepNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minRequestAmount)) {
            query.put("MinRequestAmount", request.minRequestAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.slowRatioThreshold)) {
            query.put("SlowRatioThreshold", request.slowRatioThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statIntervalMs)) {
            query.put("StatIntervalMs", request.statIntervalMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeWindow)) {
            query.put("TimeWindow", request.timeWindow);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EditSentinelDefaultCircuitBreakerRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EditSentinelDefaultCircuitBreakerRuleResponse());
    }

    public EditSentinelDefaultCircuitBreakerRuleResponse editSentinelDefaultCircuitBreakerRule(EditSentinelDefaultCircuitBreakerRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.editSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
    }

    public EditSentinelHotParamRuleResponse editSentinelHotParamRuleWithOptions(EditSentinelHotParamRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.burstCount)) {
            query.put("BurstCount", request.burstCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.durationInSec)) {
            query.put("DurationInSec", request.durationInSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeMs)) {
            query.put("MaxQueueingTimeMs", request.maxQueueingTimeMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.paramIdx)) {
            query.put("ParamIdx", request.paramIdx);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EditSentinelHotParamRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EditSentinelHotParamRuleResponse());
    }

    public EditSentinelHotParamRuleResponse editSentinelHotParamRule(EditSentinelHotParamRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.editSentinelHotParamRuleWithOptions(request, runtime);
    }

    public EditSentinelParamDegradeRuleResponse editSentinelParamDegradeRuleWithOptions(EditSentinelParamDegradeRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appGroup)) {
            body.put("AppGroup", request.appGroup);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            body.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenBaseAmountPerStep)) {
            body.put("HalfOpenBaseAmountPerStep", request.halfOpenBaseAmountPerStep);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenRecoveryStepNum)) {
            body.put("HalfOpenRecoveryStepNum", request.halfOpenRecoveryStepNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            body.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minRequestAmount)) {
            body.put("MinRequestAmount", request.minRequestAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statIntervalMs)) {
            body.put("StatIntervalMs", request.statIntervalMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            body.put("Tags", request.tags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeWindow)) {
            body.put("TimeWindow", request.timeWindow);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EditSentinelParamDegradeRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EditSentinelParamDegradeRuleResponse());
    }

    public EditSentinelParamDegradeRuleResponse editSentinelParamDegradeRule(EditSentinelParamDegradeRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.editSentinelParamDegradeRuleWithOptions(request, runtime);
    }

    public EnableExpertiseResponse enableExpertiseWithOptions(EnableExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableExpertiseResponse());
    }

    public EnableExpertiseResponse enableExpertise(EnableExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.enableExpertiseWithOptions(request, runtime);
    }

    public EnableInspectRuleResponse enableInspectRuleWithOptions(EnableInspectRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.functionId)) {
            query.put("FunctionId", request.functionId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableInspectRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableInspectRuleResponse());
    }

    public EnableInspectRuleResponse enableInspectRule(EnableInspectRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.enableInspectRuleWithOptions(request, runtime);
    }

    public EnableSentinelDefaulCircuitBreakerRuleResponse enableSentinelDefaulCircuitBreakerRuleWithOptions(EnableSentinelDefaulCircuitBreakerRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableSentinelDefaulCircuitBreakerRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableSentinelDefaulCircuitBreakerRuleResponse());
    }

    public EnableSentinelDefaulCircuitBreakerRuleResponse enableSentinelDefaulCircuitBreakerRule(EnableSentinelDefaulCircuitBreakerRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.enableSentinelDefaulCircuitBreakerRuleWithOptions(request, runtime);
    }

    public EnableSentinelMeshEnvoyRlsRuleResponse enableSentinelMeshEnvoyRlsRuleWithOptions(EnableSentinelMeshEnvoyRlsRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableSentinelMeshEnvoyRlsRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableSentinelMeshEnvoyRlsRuleResponse());
    }

    public EnableSentinelMeshEnvoyRlsRuleResponse enableSentinelMeshEnvoyRlsRule(EnableSentinelMeshEnvoyRlsRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.enableSentinelMeshEnvoyRlsRuleWithOptions(request, runtime);
    }

    public EnableSentinelParamDegradeRuleResponse enableSentinelParamDegradeRuleWithOptions(EnableSentinelParamDegradeRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            body.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableSentinelParamDegradeRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableSentinelParamDegradeRuleResponse());
    }

    public EnableSentinelParamDegradeRuleResponse enableSentinelParamDegradeRule(EnableSentinelParamDegradeRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.enableSentinelParamDegradeRuleWithOptions(request, runtime);
    }

    public ExperimentTaskCostResponse experimentTaskCostWithOptions(ExperimentTaskCostRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExperimentTaskCost"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExperimentTaskCostResponse());
    }

    public ExperimentTaskCostResponse experimentTaskCost(ExperimentTaskCostRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.experimentTaskCostWithOptions(request, runtime);
    }

    public ExperimentTaskCountResponse experimentTaskCountWithOptions(ExperimentTaskCountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExperimentTaskCount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExperimentTaskCountResponse());
    }

    public ExperimentTaskCountResponse experimentTaskCount(ExperimentTaskCountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.experimentTaskCountWithOptions(request, runtime);
    }

    public ExperimentTaskOverviewResponse experimentTaskOverviewWithOptions(ExperimentTaskOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExperimentTaskOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExperimentTaskOverviewResponse());
    }

    public ExperimentTaskOverviewResponse experimentTaskOverview(ExperimentTaskOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.experimentTaskOverviewWithOptions(request, runtime);
    }

    public ExperimentTaskOverviewIgnoreNamespaceResponse experimentTaskOverviewIgnoreNamespaceWithOptions(ExperimentTaskOverviewIgnoreNamespaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExperimentTaskOverviewIgnoreNamespace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExperimentTaskOverviewIgnoreNamespaceResponse());
    }

    public ExperimentTaskOverviewIgnoreNamespaceResponse experimentTaskOverviewIgnoreNamespace(ExperimentTaskOverviewIgnoreNamespaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.experimentTaskOverviewIgnoreNamespaceWithOptions(request, runtime);
    }

    public ExperimentTaskResultCountResponse experimentTaskResultCountWithOptions(ExperimentTaskResultCountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExperimentTaskResultCount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExperimentTaskResultCountResponse());
    }

    public ExperimentTaskResultCountResponse experimentTaskResultCount(ExperimentTaskResultCountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.experimentTaskResultCountWithOptions(request, runtime);
    }

    public ExperimentTaskSummaryPageableQueryResponse experimentTaskSummaryPageableQueryWithOptions(ExperimentTaskSummaryPageableQueryRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExperimentTaskSummaryPageableQuery"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExperimentTaskSummaryPageableQueryResponse());
    }

    public ExperimentTaskSummaryPageableQueryResponse experimentTaskSummaryPageableQuery(ExperimentTaskSummaryPageableQueryRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.experimentTaskSummaryPageableQueryWithOptions(request, runtime);
    }

    public ExportSceneFunctionConfigResponse exportSceneFunctionConfigWithOptions(ExportSceneFunctionConfigRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportSceneFunctionConfig"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExportSceneFunctionConfigResponse());
    }

    public ExportSceneFunctionConfigResponse exportSceneFunctionConfig(ExportSceneFunctionConfigRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.exportSceneFunctionConfigWithOptions(request, runtime);
    }

    public FissionSceneFunctionResponse fissionSceneFunctionWithOptions(FissionSceneFunctionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "FissionSceneFunction"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new FissionSceneFunctionResponse());
    }

    public FissionSceneFunctionResponse fissionSceneFunction(FissionSceneFunctionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.fissionSceneFunctionWithOptions(request, runtime);
    }

    public ForecastExperimentAmountResponse forecastExperimentAmountWithOptions(ForecastExperimentAmountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ForecastExperimentAmount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ForecastExperimentAmountResponse());
    }

    public ForecastExperimentAmountResponse forecastExperimentAmount(ForecastExperimentAmountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.forecastExperimentAmountWithOptions(request, runtime);
    }

    public GatewayProtectionsResponse gatewayProtectionsWithOptions(GatewayProtectionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GatewayProtections"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GatewayProtectionsResponse());
    }

    public GatewayProtectionsResponse gatewayProtections(GatewayProtectionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.gatewayProtectionsWithOptions(request, runtime);
    }

    public GetAppMachinesResponse getAppMachinesWithOptions(GetAppMachinesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAppMachines"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAppMachinesResponse());
    }

    public GetAppMachinesResponse getAppMachines(GetAppMachinesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getAppMachinesWithOptions(request, runtime);
    }

    public GetAppSwitchLogResponse getAppSwitchLogWithOptions(GetAppSwitchLogRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAppSwitchLog"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAppSwitchLogResponse());
    }

    public GetAppSwitchLogResponse getAppSwitchLog(GetAppSwitchLogRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getAppSwitchLogWithOptions(request, runtime);
    }

    public GetAppUnFinishedPublishOrderResponse getAppUnFinishedPublishOrderWithOptions(GetAppUnFinishedPublishOrderRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAppUnFinishedPublishOrder"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAppUnFinishedPublishOrderResponse());
    }

    public GetAppUnFinishedPublishOrderResponse getAppUnFinishedPublishOrder(GetAppUnFinishedPublishOrderRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getAppUnFinishedPublishOrderWithOptions(request, runtime);
    }

    public GetApplicationBasicResponse getApplicationBasicWithOptions(GetApplicationBasicRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetApplicationBasic"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetApplicationBasicResponse());
    }

    public GetApplicationBasicResponse getApplicationBasic(GetApplicationBasicRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getApplicationBasicWithOptions(request, runtime);
    }

    public GetApplicationEmpIdRelationResponse getApplicationEmpIdRelationWithOptions(GetApplicationEmpIdRelationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetApplicationEmpIdRelation"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetApplicationEmpIdRelationResponse());
    }

    public GetApplicationEmpIdRelationResponse getApplicationEmpIdRelation(GetApplicationEmpIdRelationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getApplicationEmpIdRelationWithOptions(request, runtime);
    }

    public GetApplicationExperimentTasksResponse getApplicationExperimentTasksWithOptions(GetApplicationExperimentTasksRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetApplicationExperimentTasks"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetApplicationExperimentTasksResponse());
    }

    public GetApplicationExperimentTasksResponse getApplicationExperimentTasks(GetApplicationExperimentTasksRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getApplicationExperimentTasksWithOptions(request, runtime);
    }

    public GetApplicationHostsResponse getApplicationHostsWithOptions(GetApplicationHostsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetApplicationHosts"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetApplicationHostsResponse());
    }

    public GetApplicationHostsResponse getApplicationHosts(GetApplicationHostsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getApplicationHostsWithOptions(request, runtime);
    }

    public GetContactsResponse getContactsWithOptions(GetContactsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetContacts"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetContactsResponse());
    }

    public GetContactsResponse getContacts(GetContactsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getContactsWithOptions(request, runtime);
    }

    public GetDiskDeviceParamOptionsResponse getDiskDeviceParamOptionsWithOptions(GetDiskDeviceParamOptionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetDiskDeviceParamOptions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetDiskDeviceParamOptionsResponse());
    }

    public GetDiskDeviceParamOptionsResponse getDiskDeviceParamOptions(GetDiskDeviceParamOptionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getDiskDeviceParamOptionsWithOptions(request, runtime);
    }

    public GetExperimentSummaryResponse getExperimentSummaryWithOptions(GetExperimentSummaryRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetExperimentSummary"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetExperimentSummaryResponse());
    }

    public GetExperimentSummaryResponse getExperimentSummary(GetExperimentSummaryRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getExperimentSummaryWithOptions(request, runtime);
    }

    public GetExperimentSummaryIn30DaysResponse getExperimentSummaryIn30DaysWithOptions(GetExperimentSummaryIn30DaysRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetExperimentSummaryIn30Days"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetExperimentSummaryIn30DaysResponse());
    }

    public GetExperimentSummaryIn30DaysResponse getExperimentSummaryIn30Days(GetExperimentSummaryIn30DaysRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getExperimentSummaryIn30DaysWithOptions(request, runtime);
    }

    public GetExperimentTaskFeedbackResponse getExperimentTaskFeedbackWithOptions(GetExperimentTaskFeedbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetExperimentTaskFeedback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetExperimentTaskFeedbackResponse());
    }

    public GetExperimentTaskFeedbackResponse getExperimentTaskFeedback(GetExperimentTaskFeedbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getExperimentTaskFeedbackWithOptions(request, runtime);
    }

    public GetGeneralWorkSpaceBaseInfoResponse getGeneralWorkSpaceBaseInfoWithOptions(GetGeneralWorkSpaceBaseInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetGeneralWorkSpaceBaseInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetGeneralWorkSpaceBaseInfoResponse());
    }

    public GetGeneralWorkSpaceBaseInfoResponse getGeneralWorkSpaceBaseInfo(GetGeneralWorkSpaceBaseInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getGeneralWorkSpaceBaseInfoWithOptions(request, runtime);
    }

    public GetGeneralWorkSpaceStatInfoResponse getGeneralWorkSpaceStatInfoWithOptions(GetGeneralWorkSpaceStatInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetGeneralWorkSpaceStatInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetGeneralWorkSpaceStatInfoResponse());
    }

    public GetGeneralWorkSpaceStatInfoResponse getGeneralWorkSpaceStatInfo(GetGeneralWorkSpaceStatInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getGeneralWorkSpaceStatInfoWithOptions(request, runtime);
    }

    public GetIngressDomainsResponse getIngressDomainsWithOptions(GetIngressDomainsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetIngressDomains"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetIngressDomainsResponse());
    }

    public GetIngressDomainsResponse getIngressDomains(GetIngressDomainsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getIngressDomainsWithOptions(request, runtime);
    }

    public GetLogItemByExpIdResponse getLogItemByExpIdWithOptions(GetLogItemByExpIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetLogItemByExpId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetLogItemByExpIdResponse());
    }

    public GetLogItemByExpIdResponse getLogItemByExpId(GetLogItemByExpIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getLogItemByExpIdWithOptions(request, runtime);
    }

    public GetMemorySwitchLogResponse getMemorySwitchLogWithOptions(GetMemorySwitchLogRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetMemorySwitchLog"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetMemorySwitchLogResponse());
    }

    public GetMemorySwitchLogResponse getMemorySwitchLog(GetMemorySwitchLogRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getMemorySwitchLogWithOptions(request, runtime);
    }

    public GetMetricKeysResponse getMetricKeysWithOptions(GetMetricKeysRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetMetricKeys"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetMetricKeysResponse());
    }

    public GetMetricKeysResponse getMetricKeys(GetMetricKeysRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getMetricKeysWithOptions(request, runtime);
    }

    public GetMyJoinWorkspaceResponse getMyJoinWorkspaceWithOptions(GetMyJoinWorkspaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetMyJoinWorkspace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetMyJoinWorkspaceResponse());
    }

    public GetMyJoinWorkspaceResponse getMyJoinWorkspace(GetMyJoinWorkspaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getMyJoinWorkspaceWithOptions(request, runtime);
    }

    public GetMyManageWorkspaceResponse getMyManageWorkspaceWithOptions(GetMyManageWorkspaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetMyManageWorkspace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetMyManageWorkspaceResponse());
    }

    public GetMyManageWorkspaceResponse getMyManageWorkspace(GetMyManageWorkspaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getMyManageWorkspaceWithOptions(request, runtime);
    }

    public GetMyWorkspaceBaseInfoResponse getMyWorkspaceBaseInfoWithOptions(GetMyWorkspaceBaseInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetMyWorkspaceBaseInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetMyWorkspaceBaseInfoResponse());
    }

    public GetMyWorkspaceBaseInfoResponse getMyWorkspaceBaseInfo(GetMyWorkspaceBaseInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getMyWorkspaceBaseInfoWithOptions(request, runtime);
    }

    public GetNamespaceListByUserIdResponse getNamespaceListByUserIdWithOptions(GetNamespaceListByUserIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetNamespaceListByUserId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetNamespaceListByUserIdResponse());
    }

    public GetNamespaceListByUserIdResponse getNamespaceListByUserId(GetNamespaceListByUserIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getNamespaceListByUserIdWithOptions(request, runtime);
    }

    public GetNetworkDeviceParamOptionsResponse getNetworkDeviceParamOptionsWithOptions(GetNetworkDeviceParamOptionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetNetworkDeviceParamOptions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetNetworkDeviceParamOptionsResponse());
    }

    public GetNetworkDeviceParamOptionsResponse getNetworkDeviceParamOptions(GetNetworkDeviceParamOptionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getNetworkDeviceParamOptionsWithOptions(request, runtime);
    }

    public GetParamOptionsResponse getParamOptionsWithOptions(GetParamOptionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetParamOptions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetParamOptionsResponse());
    }

    public GetParamOptionsResponse getParamOptions(GetParamOptionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getParamOptionsWithOptions(request, runtime);
    }

    public GetPublishOrderStatusResponse getPublishOrderStatusWithOptions(GetPublishOrderStatusRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.publishOrderId)) {
            query.put("PublishOrderId", request.publishOrderId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetPublishOrderStatus"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetPublishOrderStatusResponse());
    }

    public GetPublishOrderStatusResponse getPublishOrderStatus(GetPublishOrderStatusRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getPublishOrderStatusWithOptions(request, runtime);
    }

    public GetResourcesPDFReportResponse getResourcesPDFReportWithOptions(GetResourcesPDFReportRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportUUID)) {
            query.put("ReportUUID", request.reportUUID);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resources)) {
            query.put("Resources", request.resources);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetResourcesPDFReport"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetResourcesPDFReportResponse());
    }

    public GetResourcesPDFReportResponse getResourcesPDFReport(GetResourcesPDFReportRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getResourcesPDFReportWithOptions(request, runtime);
    }

    public GetScopesByApplicationResponse getScopesByApplicationWithOptions(GetScopesByApplicationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetScopesByApplication"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetScopesByApplicationResponse());
    }

    public GetScopesByApplicationResponse getScopesByApplication(GetScopesByApplicationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getScopesByApplicationWithOptions(request, runtime);
    }

    public GetSentinelAdaptiveFlowSettingOfAppResponse getSentinelAdaptiveFlowSettingOfAppWithOptions(GetSentinelAdaptiveFlowSettingOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSentinelAdaptiveFlowSettingOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSentinelAdaptiveFlowSettingOfAppResponse());
    }

    public GetSentinelAdaptiveFlowSettingOfAppResponse getSentinelAdaptiveFlowSettingOfApp(GetSentinelAdaptiveFlowSettingOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSentinelAdaptiveFlowSettingOfAppWithOptions(request, runtime);
    }

    public GetSentinelClientVersionOfAppResponse getSentinelClientVersionOfAppWithOptions(GetSentinelClientVersionOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSentinelClientVersionOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSentinelClientVersionOfAppResponse());
    }

    public GetSentinelClientVersionOfAppResponse getSentinelClientVersionOfApp(GetSentinelClientVersionOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSentinelClientVersionOfAppWithOptions(request, runtime);
    }

    public GetSentinelMeshFlowGroupDetailResponse getSentinelMeshFlowGroupDetailWithOptions(GetSentinelMeshFlowGroupDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSentinelMeshFlowGroupDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSentinelMeshFlowGroupDetailResponse());
    }

    public GetSentinelMeshFlowGroupDetailResponse getSentinelMeshFlowGroupDetail(GetSentinelMeshFlowGroupDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSentinelMeshFlowGroupDetailWithOptions(request, runtime);
    }

    public GetSwitchAppListResponse getSwitchAppListWithOptions(GetSwitchAppListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appTypes)) {
            query.put("AppTypes", request.appTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyWord)) {
            query.put("KeyWord", request.keyWord);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSwitchAppList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSwitchAppListResponse());
    }

    public GetSwitchAppListResponse getSwitchAppList(GetSwitchAppListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSwitchAppListWithOptions(request, runtime);
    }

    public GetSwitchDescriptionResponse getSwitchDescriptionWithOptions(GetSwitchDescriptionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSwitchDescription"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSwitchDescriptionResponse());
    }

    public GetSwitchDescriptionResponse getSwitchDescription(GetSwitchDescriptionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSwitchDescriptionWithOptions(request, runtime);
    }

    public GetSwitchNameSpacesResponse getSwitchNameSpacesWithOptions(GetSwitchNameSpacesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSwitchNameSpaces"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSwitchNameSpacesResponse());
    }

    public GetSwitchNameSpacesResponse getSwitchNameSpaces(GetSwitchNameSpacesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSwitchNameSpacesWithOptions(request, runtime);
    }

    public GetSwitchPersistValueResponse getSwitchPersistValueWithOptions(GetSwitchPersistValueRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchName)) {
            query.put("SwitchName", request.switchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchNameSpace)) {
            query.put("SwitchNameSpace", request.switchNameSpace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSwitchPersistValue"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSwitchPersistValueResponse());
    }

    public GetSwitchPersistValueResponse getSwitchPersistValue(GetSwitchPersistValueRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSwitchPersistValueWithOptions(request, runtime);
    }

    public GetSwitchStatisticResponse getSwitchStatisticWithOptions(GetSwitchStatisticRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchName)) {
            query.put("SwitchName", request.switchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchNameSpace)) {
            query.put("SwitchNameSpace", request.switchNameSpace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSwitchStatistic"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSwitchStatisticResponse());
    }

    public GetSwitchStatisticResponse getSwitchStatistic(GetSwitchStatisticRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getSwitchStatisticWithOptions(request, runtime);
    }

    public GetUnFinishedPublishOrderResponse getUnFinishedPublishOrderWithOptions(GetUnFinishedPublishOrderRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchName)) {
            query.put("SwitchName", request.switchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchNameSpace)) {
            query.put("SwitchNameSpace", request.switchNameSpace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUnFinishedPublishOrder"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetUnFinishedPublishOrderResponse());
    }

    public GetUnFinishedPublishOrderResponse getUnFinishedPublishOrder(GetUnFinishedPublishOrderRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getUnFinishedPublishOrderWithOptions(request, runtime);
    }

    public GetUserApplicationGroupsResponse getUserApplicationGroupsWithOptions(GetUserApplicationGroupsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUserApplicationGroups"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetUserApplicationGroupsResponse());
    }

    public GetUserApplicationGroupsResponse getUserApplicationGroups(GetUserApplicationGroupsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getUserApplicationGroupsWithOptions(request, runtime);
    }

    public GetUserApplicationSummariesResponse getUserApplicationSummariesWithOptions(GetUserApplicationSummariesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUserApplicationSummaries"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetUserApplicationSummariesResponse());
    }

    public GetUserApplicationSummariesResponse getUserApplicationSummaries(GetUserApplicationSummariesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getUserApplicationSummariesWithOptions(request, runtime);
    }

    public GetUserApplicationsResponse getUserApplicationsWithOptions(GetUserApplicationsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUserApplications"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetUserApplicationsResponse());
    }

    public GetUserApplicationsResponse getUserApplications(GetUserApplicationsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getUserApplicationsWithOptions(request, runtime);
    }

    public GetUserSummaryResponse getUserSummaryWithOptions(GetUserSummaryRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUserSummary"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetUserSummaryResponse());
    }

    public GetUserSummaryResponse getUserSummary(GetUserSummaryRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getUserSummaryWithOptions(request, runtime);
    }

    public GetUserWorkspacesResponse getUserWorkspacesWithOptions(GetUserWorkspacesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUserWorkspaces"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetUserWorkspacesResponse());
    }

    public GetUserWorkspacesResponse getUserWorkspaces(GetUserWorkspacesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getUserWorkspacesWithOptions(request, runtime);
    }

    public GetWorkspaceResponse getWorkspaceWithOptions(GetWorkspaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetWorkspace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetWorkspaceResponse());
    }

    public GetWorkspaceResponse getWorkspace(GetWorkspaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getWorkspaceWithOptions(request, runtime);
    }

    public GetWorkspaceByExperimentIdResponse getWorkspaceByExperimentIdWithOptions(GetWorkspaceByExperimentIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetWorkspaceByExperimentId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetWorkspaceByExperimentIdResponse());
    }

    public GetWorkspaceByExperimentIdResponse getWorkspaceByExperimentId(GetWorkspaceByExperimentIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getWorkspaceByExperimentIdWithOptions(request, runtime);
    }

    public GetWorkspaceExperimentsResponse getWorkspaceExperimentsWithOptions(GetWorkspaceExperimentsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetWorkspaceExperiments"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetWorkspaceExperimentsResponse());
    }

    public GetWorkspaceExperimentsResponse getWorkspaceExperiments(GetWorkspaceExperimentsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getWorkspaceExperimentsWithOptions(request, runtime);
    }

    public GetWorkspaceMembersResponse getWorkspaceMembersWithOptions(GetWorkspaceMembersRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetWorkspaceMembers"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetWorkspaceMembersResponse());
    }

    public GetWorkspaceMembersResponse getWorkspaceMembers(GetWorkspaceMembersRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.getWorkspaceMembersWithOptions(request, runtime);
    }

    public GiveAwayCouponsResponse giveAwayCouponsWithOptions(GiveAwayCouponsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GiveAwayCoupons"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GiveAwayCouponsResponse());
    }

    public GiveAwayCouponsResponse giveAwayCoupons(GiveAwayCouponsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.giveAwayCouponsWithOptions(request, runtime);
    }

    public HasCouponsResponse hasCouponsWithOptions(HasCouponsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "HasCoupons"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new HasCouponsResponse());
    }

    public HasCouponsResponse hasCoupons(HasCouponsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.hasCouponsWithOptions(request, runtime);
    }

    public InitExperimentByAppCodeResponse initExperimentByAppCodeWithOptions(InitExperimentByAppCodeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InitExperimentByAppCode"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InitExperimentByAppCodeResponse());
    }

    public InitExperimentByAppCodeResponse initExperimentByAppCode(InitExperimentByAppCodeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.initExperimentByAppCodeWithOptions(request, runtime);
    }

    public InitExperimentByExpertiseResponse initExperimentByExpertiseWithOptions(InitExperimentByExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InitExperimentByExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InitExperimentByExpertiseResponse());
    }

    public InitExperimentByExpertiseResponse initExperimentByExpertise(InitExperimentByExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.initExperimentByExpertiseWithOptions(request, runtime);
    }

    public InitFlowByExpertiseResponse initFlowByExpertiseWithOptions(InitFlowByExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InitFlowByExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InitFlowByExpertiseResponse());
    }

    public InitFlowByExpertiseResponse initFlowByExpertise(InitFlowByExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.initFlowByExpertiseWithOptions(request, runtime);
    }

    public InitMiniFlowByAppCodeResponse initMiniFlowByAppCodeWithOptions(InitMiniFlowByAppCodeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InitMiniFlowByAppCode"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InitMiniFlowByAppCodeResponse());
    }

    public InitMiniFlowByAppCodeResponse initMiniFlowByAppCode(InitMiniFlowByAppCodeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.initMiniFlowByAppCodeWithOptions(request, runtime);
    }

    public InitMiniFlowByQuickSceneResponse initMiniFlowByQuickSceneWithOptions(InitMiniFlowByQuickSceneRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InitMiniFlowByQuickScene"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InitMiniFlowByQuickSceneResponse());
    }

    public InitMiniFlowByQuickSceneResponse initMiniFlowByQuickScene(InitMiniFlowByQuickSceneRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.initMiniFlowByQuickSceneWithOptions(request, runtime);
    }

    public InstallPluginResponse installPluginWithOptions(InstallPluginRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appGroupName)) {
            query.put("AppGroupName", request.appGroupName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallPlugin"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InstallPluginResponse());
    }

    public InstallPluginResponse installPlugin(InstallPluginRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.installPluginWithOptions(request, runtime);
    }

    public ListAhasAgentMetricsResponse listAhasAgentMetricsWithOptions(ListAhasAgentMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricNames)) {
            query.put("MetricNames", request.metricNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAhasAgentMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAhasAgentMetricsResponse());
    }

    public ListAhasAgentMetricsResponse listAhasAgentMetrics(ListAhasAgentMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listAhasAgentMetricsWithOptions(request, runtime);
    }

    public ListApplicationConfigurationsResponse listApplicationConfigurationsWithOptions(ListApplicationConfigurationsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListApplicationConfigurations"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListApplicationConfigurationsResponse());
    }

    public ListApplicationConfigurationsResponse listApplicationConfigurations(ListApplicationConfigurationsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listApplicationConfigurationsWithOptions(request, runtime);
    }

    public ListApplicationNameResponse listApplicationNameWithOptions(ListApplicationNameRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.applicationName)) {
            query.put("ApplicationName", request.applicationName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListApplicationName"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListApplicationNameResponse());
    }

    public ListApplicationNameResponse listApplicationName(ListApplicationNameRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listApplicationNameWithOptions(request, runtime);
    }

    public ListEcsMetricsResponse listEcsMetricsWithOptions(ListEcsMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListEcsMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListEcsMetricsResponse());
    }

    public ListEcsMetricsResponse listEcsMetrics(ListEcsMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listEcsMetricsWithOptions(request, runtime);
    }

    public ListEipMetricsResponse listEipMetricsWithOptions(ListEipMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListEipMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListEipMetricsResponse());
    }

    public ListEipMetricsResponse listEipMetrics(ListEipMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listEipMetricsWithOptions(request, runtime);
    }

    public ListExperimentOperationLogsResponse listExperimentOperationLogsWithOptions(ListExperimentOperationLogsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListExperimentOperationLogs"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListExperimentOperationLogsResponse());
    }

    public ListExperimentOperationLogsResponse listExperimentOperationLogs(ListExperimentOperationLogsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listExperimentOperationLogsWithOptions(request, runtime);
    }

    public ListExperimentTagsResponse listExperimentTagsWithOptions(ListExperimentTagsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListExperimentTags"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListExperimentTagsResponse());
    }

    public ListExperimentTagsResponse listExperimentTags(ListExperimentTagsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listExperimentTagsWithOptions(request, runtime);
    }

    public ListExperimentTasksByApplicationInVisionResponse listExperimentTasksByApplicationInVisionWithOptions(ListExperimentTasksByApplicationInVisionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListExperimentTasksByApplicationInVision"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListExperimentTasksByApplicationInVisionResponse());
    }

    public ListExperimentTasksByApplicationInVisionResponse listExperimentTasksByApplicationInVision(ListExperimentTasksByApplicationInVisionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listExperimentTasksByApplicationInVisionWithOptions(request, runtime);
    }

    public ListExperimentTasksByApplicationScopeInVisionResponse listExperimentTasksByApplicationScopeInVisionWithOptions(ListExperimentTasksByApplicationScopeInVisionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListExperimentTasksByApplicationScopeInVision"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListExperimentTasksByApplicationScopeInVisionResponse());
    }

    public ListExperimentTasksByApplicationScopeInVisionResponse listExperimentTasksByApplicationScopeInVision(ListExperimentTasksByApplicationScopeInVisionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listExperimentTasksByApplicationScopeInVisionWithOptions(request, runtime);
    }

    public ListExpertiseTagsResponse listExpertiseTagsWithOptions(ListExpertiseTagsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListExpertiseTags"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListExpertiseTagsResponse());
    }

    public ListExpertiseTagsResponse listExpertiseTags(ListExpertiseTagsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listExpertiseTagsWithOptions(request, runtime);
    }

    public ListGeneralWorkspaceExperimentTagsResponse listGeneralWorkspaceExperimentTagsWithOptions(ListGeneralWorkspaceExperimentTagsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListGeneralWorkspaceExperimentTags"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListGeneralWorkspaceExperimentTagsResponse());
    }

    public ListGeneralWorkspaceExperimentTagsResponse listGeneralWorkspaceExperimentTags(ListGeneralWorkspaceExperimentTagsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listGeneralWorkspaceExperimentTagsWithOptions(request, runtime);
    }

    public ListGraphNodeExperimentTasksResponse listGraphNodeExperimentTasksWithOptions(ListGraphNodeExperimentTasksRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListGraphNodeExperimentTasks"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListGraphNodeExperimentTasksResponse());
    }

    public ListGraphNodeExperimentTasksResponse listGraphNodeExperimentTasks(ListGraphNodeExperimentTasksRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listGraphNodeExperimentTasksWithOptions(request, runtime);
    }

    public ListInspectRuleResponse listInspectRuleWithOptions(ListInspectRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.categoryId)) {
            query.put("CategoryId", request.categoryId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hideExcludeFunction)) {
            query.put("HideExcludeFunction", request.hideExcludeFunction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hideNotEnableFunction)) {
            query.put("HideNotEnableFunction", request.hideNotEnableFunction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInspectRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListInspectRuleResponse());
    }

    public ListInspectRuleResponse listInspectRule(ListInspectRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listInspectRuleWithOptions(request, runtime);
    }

    public ListKubernetesClusterResponse listKubernetesClusterWithOptions(ListKubernetesClusterRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterKey)) {
            query.put("ClusterKey", request.clusterKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListKubernetesCluster"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListKubernetesClusterResponse());
    }

    public ListKubernetesClusterResponse listKubernetesCluster(ListKubernetesClusterRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listKubernetesClusterWithOptions(request, runtime);
    }

    public ListLastInspectResultDetailResponse listLastInspectResultDetailWithOptions(ListLastInspectResultDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListLastInspectResultDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListLastInspectResultDetailResponse());
    }

    public ListLastInspectResultDetailResponse listLastInspectResultDetail(ListLastInspectResultDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listLastInspectResultDetailWithOptions(request, runtime);
    }

    public ListLastScheduledInspectResultDetailResponse listLastScheduledInspectResultDetailWithOptions(ListLastScheduledInspectResultDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListLastScheduledInspectResultDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListLastScheduledInspectResultDetailResponse());
    }

    public ListLastScheduledInspectResultDetailResponse listLastScheduledInspectResultDetail(ListLastScheduledInspectResultDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listLastScheduledInspectResultDetailWithOptions(request, runtime);
    }

    public ListMetricsResponse listMetricsWithOptions(ListMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.group)) {
            query.put("Group", request.group);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceType)) {
            query.put("InstanceType", request.instanceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricNames)) {
            query.put("MetricNames", request.metricNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListMetricsResponse());
    }

    public ListMetricsResponse listMetrics(ListMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listMetricsWithOptions(request, runtime);
    }

    public ListPermanentTopologyResourcessResponse listPermanentTopologyResourcessWithOptions(ListPermanentTopologyResourcessRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.product)) {
            query.put("Product", request.product);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.queryParamValue)) {
            query.put("QueryParamValue", request.queryParamValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPermanentTopologyResourcess"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPermanentTopologyResourcessResponse());
    }

    public ListPermanentTopologyResourcessResponse listPermanentTopologyResourcess(ListPermanentTopologyResourcessRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listPermanentTopologyResourcessWithOptions(request, runtime);
    }

    public ListPtsPerfHistoryDataResponse listPtsPerfHistoryDataWithOptions(ListPtsPerfHistoryDataRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceType)) {
            query.put("InstanceType", request.instanceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceId)) {
            query.put("SourceId", request.sourceId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPtsPerfHistoryData"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPtsPerfHistoryDataResponse());
    }

    public ListPtsPerfHistoryDataResponse listPtsPerfHistoryData(ListPtsPerfHistoryDataRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listPtsPerfHistoryDataWithOptions(request, runtime);
    }

    public ListPtsPerfLatestDataResponse listPtsPerfLatestDataWithOptions(ListPtsPerfLatestDataRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceType)) {
            query.put("InstanceType", request.instanceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceId)) {
            query.put("SourceId", request.sourceId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPtsPerfLatestData"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPtsPerfLatestDataResponse());
    }

    public ListPtsPerfLatestDataResponse listPtsPerfLatestData(ListPtsPerfLatestDataRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listPtsPerfLatestDataWithOptions(request, runtime);
    }

    public ListPtsPerfMonitorStatusReportDataResponse listPtsPerfMonitorStatusReportDataWithOptions(ListPtsPerfMonitorStatusReportDataRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceId)) {
            query.put("SourceId", request.sourceId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPtsPerfMonitorStatusReportData"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPtsPerfMonitorStatusReportDataResponse());
    }

    public ListPtsPerfMonitorStatusReportDataResponse listPtsPerfMonitorStatusReportData(ListPtsPerfMonitorStatusReportDataRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listPtsPerfMonitorStatusReportDataWithOptions(request, runtime);
    }

    public ListPtsPerfRealDataResponse listPtsPerfRealDataWithOptions(ListPtsPerfRealDataRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceType)) {
            query.put("InstanceType", request.instanceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceId)) {
            query.put("SourceId", request.sourceId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPtsPerfRealData"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPtsPerfRealDataResponse());
    }

    public ListPtsPerfRealDataResponse listPtsPerfRealData(ListPtsPerfRealDataRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listPtsPerfRealDataWithOptions(request, runtime);
    }

    public ListRdsMetricsResponse listRdsMetricsWithOptions(ListRdsMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListRdsMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListRdsMetricsResponse());
    }

    public ListRdsMetricsResponse listRdsMetrics(ListRdsMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listRdsMetricsWithOptions(request, runtime);
    }

    public ListRedisMetricsResponse listRedisMetricsWithOptions(ListRedisMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListRedisMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListRedisMetricsResponse());
    }

    public ListRedisMetricsResponse listRedisMetrics(ListRedisMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listRedisMetricsWithOptions(request, runtime);
    }

    public ListRevealApplicationFilterResponse listRevealApplicationFilterWithOptions(ListRevealApplicationFilterRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListRevealApplicationFilter"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListRevealApplicationFilterResponse());
    }

    public ListRevealApplicationFilterResponse listRevealApplicationFilter(ListRevealApplicationFilterRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listRevealApplicationFilterWithOptions(request, runtime);
    }

    public ListSentinelAllDefaultCircuitBreakerRuleResponse listSentinelAllDefaultCircuitBreakerRuleWithOptions(ListSentinelAllDefaultCircuitBreakerRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSentinelAllDefaultCircuitBreakerRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSentinelAllDefaultCircuitBreakerRuleResponse());
    }

    public ListSentinelAllDefaultCircuitBreakerRuleResponse listSentinelAllDefaultCircuitBreakerRule(ListSentinelAllDefaultCircuitBreakerRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listSentinelAllDefaultCircuitBreakerRuleWithOptions(request, runtime);
    }

    public ListSentinelAllParamDegradeRuleResponse listSentinelAllParamDegradeRuleWithOptions(ListSentinelAllParamDegradeRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            body.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            body.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            body.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSentinelAllParamDegradeRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSentinelAllParamDegradeRuleResponse());
    }

    public ListSentinelAllParamDegradeRuleResponse listSentinelAllParamDegradeRule(ListSentinelAllParamDegradeRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listSentinelAllParamDegradeRuleWithOptions(request, runtime);
    }

    public ListSentinelBlockFallbackDefinitionsResponse listSentinelBlockFallbackDefinitionsWithOptions(ListSentinelBlockFallbackDefinitionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.classificationSet)) {
            query.put("ClassificationSet", request.classificationSet);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSentinelBlockFallbackDefinitions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSentinelBlockFallbackDefinitionsResponse());
    }

    public ListSentinelBlockFallbackDefinitionsResponse listSentinelBlockFallbackDefinitions(ListSentinelBlockFallbackDefinitionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listSentinelBlockFallbackDefinitionsWithOptions(request, runtime);
    }

    public ListSentinelMeshEnvoyRlsRulesOfGroupResponse listSentinelMeshEnvoyRlsRulesOfGroupWithOptions(ListSentinelMeshEnvoyRlsRulesOfGroupRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSentinelMeshEnvoyRlsRulesOfGroup"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSentinelMeshEnvoyRlsRulesOfGroupResponse());
    }

    public ListSentinelMeshEnvoyRlsRulesOfGroupResponse listSentinelMeshEnvoyRlsRulesOfGroup(ListSentinelMeshEnvoyRlsRulesOfGroupRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listSentinelMeshEnvoyRlsRulesOfGroupWithOptions(request, runtime);
    }

    public ListSentinelMeshFlowGroupsResponse listSentinelMeshFlowGroupsWithOptions(ListSentinelMeshFlowGroupsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSentinelMeshFlowGroups"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSentinelMeshFlowGroupsResponse());
    }

    public ListSentinelMeshFlowGroupsResponse listSentinelMeshFlowGroups(ListSentinelMeshFlowGroupsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listSentinelMeshFlowGroupsWithOptions(request, runtime);
    }

    public ListSlbMetricsResponse listSlbMetricsWithOptions(ListSlbMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vip)) {
            query.put("Vip", request.vip);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSlbMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSlbMetricsResponse());
    }

    public ListSlbMetricsResponse listSlbMetrics(ListSlbMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listSlbMetricsWithOptions(request, runtime);
    }

    public ListSubUsersResponse listSubUsersWithOptions(ListSubUsersRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSubUsers"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSubUsersResponse());
    }

    public ListSubUsersResponse listSubUsers(ListSubUsersRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listSubUsersWithOptions(request, runtime);
    }

    public ListTopologyGroupRiskValuesResponse listTopologyGroupRiskValuesWithOptions(ListTopologyGroupRiskValuesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.size)) {
            query.put("Size", request.size);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.zone)) {
            query.put("Zone", request.zone);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListTopologyGroupRiskValues"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListTopologyGroupRiskValuesResponse());
    }

    public ListTopologyGroupRiskValuesResponse listTopologyGroupRiskValues(ListTopologyGroupRiskValuesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listTopologyGroupRiskValuesWithOptions(request, runtime);
    }

    public ListTopologyRiskValuesResponse listTopologyRiskValuesWithOptions(ListTopologyRiskValuesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.size)) {
            query.put("Size", request.size);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListTopologyRiskValues"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListTopologyRiskValuesResponse());
    }

    public ListTopologyRiskValuesResponse listTopologyRiskValues(ListTopologyRiskValuesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listTopologyRiskValuesWithOptions(request, runtime);
    }

    public ListTopologyViewResponse listTopologyViewWithOptions(ListTopologyViewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListTopologyView"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListTopologyViewResponse());
    }

    public ListTopologyViewResponse listTopologyView(ListTopologyViewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listTopologyViewWithOptions(request, runtime);
    }

    public ListWorkspaceMemberResponse listWorkspaceMemberWithOptions(ListWorkspaceMemberRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListWorkspaceMember"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListWorkspaceMemberResponse());
    }

    public ListWorkspaceMemberResponse listWorkspaceMember(ListWorkspaceMemberRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.listWorkspaceMemberWithOptions(request, runtime);
    }

    public MarkAttackTaskStopFinishResponse markAttackTaskStopFinishWithOptions(MarkAttackTaskStopFinishRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "MarkAttackTaskStopFinish"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new MarkAttackTaskStopFinishResponse());
    }

    public MarkAttackTaskStopFinishResponse markAttackTaskStopFinish(MarkAttackTaskStopFinishRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.markAttackTaskStopFinishWithOptions(request, runtime);
    }

    public NodeExceptionStatisticsResponse nodeExceptionStatisticsWithOptions(NodeExceptionStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.node)) {
            query.put("Node", request.node);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "NodeExceptionStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new NodeExceptionStatisticsResponse());
    }

    public NodeExceptionStatisticsResponse nodeExceptionStatistics(NodeExceptionStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.nodeExceptionStatisticsWithOptions(request, runtime);
    }

    public NodeExceptionsResponse nodeExceptionsWithOptions(NodeExceptionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.node)) {
            query.put("Node", request.node);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "NodeExceptions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new NodeExceptionsResponse());
    }

    public NodeExceptionsResponse nodeExceptions(NodeExceptionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.nodeExceptionsWithOptions(request, runtime);
    }

    public NodeExceptionsWithTimeResponse nodeExceptionsWithTimeWithOptions(NodeExceptionsWithTimeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.node)) {
            query.put("Node", request.node);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "NodeExceptionsWithTime"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new NodeExceptionsWithTimeResponse());
    }

    public NodeExceptionsWithTimeResponse nodeExceptionsWithTime(NodeExceptionsWithTimeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.nodeExceptionsWithTimeWithOptions(request, runtime);
    }

    public OpenAhasCommercialResponse openAhasCommercialWithOptions(OpenAhasCommercialRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.buyerId)) {
            query.put("BuyerId", request.buyerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isInternational)) {
            query.put("IsInternational", request.isInternational);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.openType)) {
            query.put("OpenType", request.openType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.product)) {
            query.put("Product", request.product);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OpenAhasCommercial"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OpenAhasCommercialResponse());
    }

    public OpenAhasCommercialResponse openAhasCommercial(OpenAhasCommercialRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.openAhasCommercialWithOptions(request, runtime);
    }

    public OperateAttackSuiteResponse operateAttackSuiteWithOptions(OperateAttackSuiteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteId)) {
            query.put("AttackSuiteId", request.attackSuiteId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ops)) {
            query.put("Ops", request.ops);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateAttackSuite"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateAttackSuiteResponse());
    }

    public OperateAttackSuiteResponse operateAttackSuite(OperateAttackSuiteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.operateAttackSuiteWithOptions(request, runtime);
    }

    public OverViewOfAppsWithRelationshipResponse overViewOfAppsWithRelationshipWithOptions(OverViewOfAppsWithRelationshipRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OverViewOfAppsWithRelationship"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OverViewOfAppsWithRelationshipResponse());
    }

    public OverViewOfAppsWithRelationshipResponse overViewOfAppsWithRelationship(OverViewOfAppsWithRelationshipRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.overViewOfAppsWithRelationshipWithOptions(request, runtime);
    }

    public OverViewOfAppsWithoutRelationshipResponse overViewOfAppsWithoutRelationshipWithOptions(OverViewOfAppsWithoutRelationshipRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OverViewOfAppsWithoutRelationship"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OverViewOfAppsWithoutRelationshipResponse());
    }

    public OverViewOfAppsWithoutRelationshipResponse overViewOfAppsWithoutRelationship(OverViewOfAppsWithoutRelationshipRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.overViewOfAppsWithoutRelationshipWithOptions(request, runtime);
    }

    public PageableGeneralExperimentsResponse pageableGeneralExperimentsWithOptions(PageableGeneralExperimentsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PageableGeneralExperiments"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PageableGeneralExperimentsResponse());
    }

    public PageableGeneralExperimentsResponse pageableGeneralExperiments(PageableGeneralExperimentsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.pageableGeneralExperimentsWithOptions(request, runtime);
    }

    public PageableQueryExperimentScopesResponse pageableQueryExperimentScopesWithOptions(PageableQueryExperimentScopesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PageableQueryExperimentScopes"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PageableQueryExperimentScopesResponse());
    }

    public PageableQueryExperimentScopesResponse pageableQueryExperimentScopes(PageableQueryExperimentScopesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.pageableQueryExperimentScopesWithOptions(request, runtime);
    }

    public PageableQueryExperimentTaskByScopeResponse pageableQueryExperimentTaskByScopeWithOptions(PageableQueryExperimentTaskByScopeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PageableQueryExperimentTaskByScope"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PageableQueryExperimentTaskByScopeResponse());
    }

    public PageableQueryExperimentTaskByScopeResponse pageableQueryExperimentTaskByScope(PageableQueryExperimentTaskByScopeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.pageableQueryExperimentTaskByScopeWithOptions(request, runtime);
    }

    public PageableQueryExpertiseResponse pageableQueryExpertiseWithOptions(PageableQueryExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PageableQueryExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PageableQueryExpertiseResponse());
    }

    public PageableQueryExpertiseResponse pageableQueryExpertise(PageableQueryExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.pageableQueryExpertiseWithOptions(request, runtime);
    }

    public PageableQueryUserExperimentsResponse pageableQueryUserExperimentsWithOptions(PageableQueryUserExperimentsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PageableQueryUserExperiments"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PageableQueryUserExperimentsResponse());
    }

    public PageableQueryUserExperimentsResponse pageableQueryUserExperiments(PageableQueryUserExperimentsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.pageableQueryUserExperimentsWithOptions(request, runtime);
    }

    public PluginInstallWizardResponse pluginInstallWizardWithOptions(PluginInstallWizardRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PluginInstallWizard"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PluginInstallWizardResponse());
    }

    public PluginInstallWizardResponse pluginInstallWizard(PluginInstallWizardRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.pluginInstallWizardWithOptions(request, runtime);
    }

    public PublishAppSwitchTargetBatchResponse publishAppSwitchTargetBatchWithOptions(PublishAppSwitchTargetBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.publishOrderId)) {
            query.put("PublishOrderId", request.publishOrderId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchName)) {
            query.put("SwitchName", request.switchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchNameSpace)) {
            query.put("SwitchNameSpace", request.switchNameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchValue)) {
            query.put("SwitchValue", request.switchValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetBatch)) {
            query.put("TargetBatch", request.targetBatch);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PublishAppSwitchTargetBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PublishAppSwitchTargetBatchResponse());
    }

    public PublishAppSwitchTargetBatchResponse publishAppSwitchTargetBatch(PublishAppSwitchTargetBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.publishAppSwitchTargetBatchWithOptions(request, runtime);
    }

    public QuertInspectJobListResponse quertInspectJobListWithOptions(QuertInspectJobListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hideNotEnable)) {
            query.put("HideNotEnable", request.hideNotEnable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuertInspectJobList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuertInspectJobListResponse());
    }

    public QuertInspectJobListResponse quertInspectJobList(QuertInspectJobListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.quertInspectJobListWithOptions(request, runtime);
    }

    public QueryActivityTaskResponse queryActivityTaskWithOptions(QueryActivityTaskRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryActivityTask"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryActivityTaskResponse());
    }

    public QueryActivityTaskResponse queryActivityTask(QueryActivityTaskRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryActivityTaskWithOptions(request, runtime);
    }

    public QueryActivityTaskLogResponse queryActivityTaskLogWithOptions(QueryActivityTaskLogRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryActivityTaskLog"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryActivityTaskLogResponse());
    }

    public QueryActivityTaskLogResponse queryActivityTaskLog(QueryActivityTaskLogRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryActivityTaskLogWithOptions(request, runtime);
    }

    public QueryActivityTaskMetricResponse queryActivityTaskMetricWithOptions(QueryActivityTaskMetricRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryActivityTaskMetric"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryActivityTaskMetricResponse());
    }

    public QueryActivityTaskMetricResponse queryActivityTaskMetric(QueryActivityTaskMetricRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryActivityTaskMetricWithOptions(request, runtime);
    }

    public QueryAhasAgentPluginEnabledResponse queryAhasAgentPluginEnabledWithOptions(QueryAhasAgentPluginEnabledRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAhasAgentPluginEnabled"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAhasAgentPluginEnabledResponse());
    }

    public QueryAhasAgentPluginEnabledResponse queryAhasAgentPluginEnabled(QueryAhasAgentPluginEnabledRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAhasAgentPluginEnabledWithOptions(request, runtime);
    }

    public QueryAhasAgentPluginInstallScriptResponse queryAhasAgentPluginInstallScriptWithOptions(QueryAhasAgentPluginInstallScriptRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAhasAgentPluginInstallScript"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAhasAgentPluginInstallScriptResponse());
    }

    public QueryAhasAgentPluginInstallScriptResponse queryAhasAgentPluginInstallScript(QueryAhasAgentPluginInstallScriptRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAhasAgentPluginInstallScriptWithOptions(request, runtime);
    }

    public QueryAhasPostStatusResponse queryAhasPostStatusWithOptions(QueryAhasPostStatusRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAhasPostStatus"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAhasPostStatusResponse());
    }

    public QueryAhasPostStatusResponse queryAhasPostStatus(QueryAhasPostStatusRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAhasPostStatusWithOptions(request, runtime);
    }

    public QueryAlarmRecordsResponse queryAlarmRecordsWithOptions(QueryAlarmRecordsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertName)) {
            query.put("AlertName", request.alertName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAlarmRecords"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAlarmRecordsResponse());
    }

    public QueryAlarmRecordsResponse queryAlarmRecords(QueryAlarmRecordsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAlarmRecordsWithOptions(request, runtime);
    }

    public QueryAlarmRuleOperRecordsResponse queryAlarmRuleOperRecordsWithOptions(QueryAlarmRuleOperRecordsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operUser)) {
            query.put("OperUser", request.operUser);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAlarmRuleOperRecords"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAlarmRuleOperRecordsResponse());
    }

    public QueryAlarmRuleOperRecordsResponse queryAlarmRuleOperRecords(QueryAlarmRuleOperRecordsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAlarmRuleOperRecordsWithOptions(request, runtime);
    }

    public QueryAlarmRulesResponse queryAlarmRulesWithOptions(QueryAlarmRulesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertName)) {
            query.put("AlertName", request.alertName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.group)) {
            query.put("Group", request.group);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAlarmRules"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAlarmRulesResponse());
    }

    public QueryAlarmRulesResponse queryAlarmRules(QueryAlarmRulesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAlarmRulesWithOptions(request, runtime);
    }

    public QueryAlarmRulesByResourceResponse queryAlarmRulesByResourceWithOptions(QueryAlarmRulesByResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertName)) {
            query.put("AlertName", request.alertName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAlarmRulesByResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAlarmRulesByResourceResponse());
    }

    public QueryAlarmRulesByResourceResponse queryAlarmRulesByResource(QueryAlarmRulesByResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAlarmRulesByResourceWithOptions(request, runtime);
    }

    public QueryAllAlarmRulesResponse queryAllAlarmRulesWithOptions(QueryAllAlarmRulesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAllAlarmRules"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAllAlarmRulesResponse());
    }

    public QueryAllAlarmRulesResponse queryAllAlarmRules(QueryAllAlarmRulesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAllAlarmRulesWithOptions(request, runtime);
    }

    public QueryAppEventsResponse queryAppEventsWithOptions(QueryAppEventsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAppEvents"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAppEventsResponse());
    }

    public QueryAppEventsResponse queryAppEvents(QueryAppEventsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAppEventsWithOptions(request, runtime);
    }

    public QueryAppListSentinelAppsResponse queryAppListSentinelAppsWithOptions(QueryAppListSentinelAppsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appType)) {
            query.put("AppType", request.appType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minHeartBeat)) {
            query.put("MinHeartBeat", request.minHeartBeat);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAppListSentinelApps"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAppListSentinelAppsResponse());
    }

    public QueryAppListSentinelAppsResponse queryAppListSentinelApps(QueryAppListSentinelAppsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAppListSentinelAppsWithOptions(request, runtime);
    }

    public QueryAppPanoramicGraphResponse queryAppPanoramicGraphWithOptions(QueryAppPanoramicGraphRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.applicationName)) {
            query.put("ApplicationName", request.applicationName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAppPanoramicGraph"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAppPanoramicGraphResponse());
    }

    public QueryAppPanoramicGraphResponse queryAppPanoramicGraph(QueryAppPanoramicGraphRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAppPanoramicGraphWithOptions(request, runtime);
    }

    public QueryAppProtectionInfoResponse queryAppProtectionInfoWithOptions(QueryAppProtectionInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.simple)) {
            query.put("Simple", request.simple);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAppProtectionInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAppProtectionInfoResponse());
    }

    public QueryAppProtectionInfoResponse queryAppProtectionInfo(QueryAppProtectionInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAppProtectionInfoWithOptions(request, runtime);
    }

    public QueryAppProtectionsResponse queryAppProtectionsWithOptions(QueryAppProtectionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAppProtections"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAppProtectionsResponse());
    }

    public QueryAppProtectionsResponse queryAppProtections(QueryAppProtectionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAppProtectionsWithOptions(request, runtime);
    }

    public QueryAppStatisticsInfoResponse queryAppStatisticsInfoWithOptions(QueryAppStatisticsInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appTypes)) {
            query.put("AppTypes", request.appTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minHeartbeat)) {
            query.put("MinHeartbeat", request.minHeartbeat);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAppStatisticsInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAppStatisticsInfoResponse());
    }

    public QueryAppStatisticsInfoResponse queryAppStatisticsInfo(QueryAppStatisticsInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAppStatisticsInfoWithOptions(request, runtime);
    }

    public QueryAttackInstanceResponse queryAttackInstanceWithOptions(QueryAttackInstanceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteInstanceId)) {
            query.put("AttackSuiteInstanceId", request.attackSuiteInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackInstance"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackInstanceResponse());
    }

    public QueryAttackInstanceResponse queryAttackInstance(QueryAttackInstanceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackInstanceWithOptions(request, runtime);
    }

    public QueryAttackInstanceListResponse queryAttackInstanceListWithOptions(QueryAttackInstanceListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteId)) {
            query.put("AttackSuiteId", request.attackSuiteId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNO)) {
            query.put("PageNO", request.pageNO);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackInstanceList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackInstanceListResponse());
    }

    public QueryAttackInstanceListResponse queryAttackInstanceList(QueryAttackInstanceListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackInstanceListWithOptions(request, runtime);
    }

    public QueryAttackInstanceReportResponse queryAttackInstanceReportWithOptions(QueryAttackInstanceReportRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteInstanceId)) {
            query.put("AttackSuiteInstanceId", request.attackSuiteInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackInstanceReport"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackInstanceReportResponse());
    }

    public QueryAttackInstanceReportResponse queryAttackInstanceReport(QueryAttackInstanceReportRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackInstanceReportWithOptions(request, runtime);
    }

    public QueryAttackScenarioDetailResponse queryAttackScenarioDetailWithOptions(QueryAttackScenarioDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenarioId)) {
            query.put("ScenarioId", request.scenarioId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackScenarioDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackScenarioDetailResponse());
    }

    public QueryAttackScenarioDetailResponse queryAttackScenarioDetail(QueryAttackScenarioDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackScenarioDetailWithOptions(request, runtime);
    }

    public QueryAttackSuiteListResponse queryAttackSuiteListWithOptions(QueryAttackSuiteListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackName)) {
            query.put("AttackName", request.attackName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackStatus)) {
            query.put("AttackStatus", request.attackStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackSuiteList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackSuiteListResponse());
    }

    public QueryAttackSuiteListResponse queryAttackSuiteList(QueryAttackSuiteListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackSuiteListWithOptions(request, runtime);
    }

    public QueryAttackSuiteStatusResponse queryAttackSuiteStatusWithOptions(QueryAttackSuiteStatusRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteId)) {
            query.put("AttackSuiteId", request.attackSuiteId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackSuiteStatus"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackSuiteStatusResponse());
    }

    public QueryAttackSuiteStatusResponse queryAttackSuiteStatus(QueryAttackSuiteStatusRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackSuiteStatusWithOptions(request, runtime);
    }

    public QueryAttackSuiteTargetListResponse queryAttackSuiteTargetListWithOptions(QueryAttackSuiteTargetListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenarioId)) {
            query.put("ScenarioId", request.scenarioId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackSuiteTargetList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackSuiteTargetListResponse());
    }

    public QueryAttackSuiteTargetListResponse queryAttackSuiteTargetList(QueryAttackSuiteTargetListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackSuiteTargetListWithOptions(request, runtime);
    }

    public QueryAttackSuiteTaskListResponse queryAttackSuiteTaskListWithOptions(QueryAttackSuiteTaskListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteInstanceId)) {
            query.put("AttackSuiteInstanceId", request.attackSuiteInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackSuiteTaskList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackSuiteTaskListResponse());
    }

    public QueryAttackSuiteTaskListResponse queryAttackSuiteTaskList(QueryAttackSuiteTaskListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryAttackSuiteTaskListWithOptions(request, runtime);
    }

    public QueryClusterResourcesResponse queryClusterResourcesWithOptions(QueryClusterResourcesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryClusterResources"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryClusterResourcesResponse());
    }

    public QueryClusterResourcesResponse queryClusterResources(QueryClusterResourcesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryClusterResourcesWithOptions(request, runtime);
    }

    public QueryClusterStatisticsResponse queryClusterStatisticsWithOptions(QueryClusterStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.end)) {
            query.put("End", request.end);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.start)) {
            query.put("Start", request.start);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryClusterStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryClusterStatisticsResponse());
    }

    public QueryClusterStatisticsResponse queryClusterStatistics(QueryClusterStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryClusterStatisticsWithOptions(request, runtime);
    }

    public QueryClusterTimeStatisticsResponse queryClusterTimeStatisticsWithOptions(QueryClusterTimeStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryClusterTimeStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryClusterTimeStatisticsResponse());
    }

    public QueryClusterTimeStatisticsResponse queryClusterTimeStatistics(QueryClusterTimeStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryClusterTimeStatisticsWithOptions(request, runtime);
    }

    public QueryClusterTypeStatisticsResponse queryClusterTypeStatisticsWithOptions(QueryClusterTypeStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryClusterTypeStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryClusterTypeStatisticsResponse());
    }

    public QueryClusterTypeStatisticsResponse queryClusterTypeStatistics(QueryClusterTypeStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryClusterTypeStatisticsWithOptions(request, runtime);
    }

    public QueryComponentLayoutsResponse queryComponentLayoutsWithOptions(QueryComponentLayoutsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryComponentLayouts"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryComponentLayoutsResponse());
    }

    public QueryComponentLayoutsResponse queryComponentLayouts(QueryComponentLayoutsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryComponentLayoutsWithOptions(request, runtime);
    }

    public QueryControlListResponse queryControlListWithOptions(QueryControlListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryControlList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryControlListResponse());
    }

    public QueryControlListResponse queryControlList(QueryControlListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryControlListWithOptions(request, runtime);
    }

    public QueryEventDetailResponse queryEventDetailWithOptions(QueryEventDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryEventDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryEventDetailResponse());
    }

    public QueryEventDetailResponse queryEventDetail(QueryEventDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryEventDetailWithOptions(request, runtime);
    }

    public QueryEventsResponse queryEventsWithOptions(QueryEventsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryEvents"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryEventsResponse());
    }

    public QueryEventsResponse queryEvents(QueryEventsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryEventsWithOptions(request, runtime);
    }

    public QueryExperimentResponse queryExperimentWithOptions(QueryExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentResponse());
    }

    public QueryExperimentResponse queryExperiment(QueryExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentWithOptions(request, runtime);
    }

    public QueryExperimentAmountResponse queryExperimentAmountWithOptions(QueryExperimentAmountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentAmount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentAmountResponse());
    }

    public QueryExperimentAmountResponse queryExperimentAmount(QueryExperimentAmountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentAmountWithOptions(request, runtime);
    }

    public QueryExperimentBasicInfoResponse queryExperimentBasicInfoWithOptions(QueryExperimentBasicInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentBasicInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentBasicInfoResponse());
    }

    public QueryExperimentBasicInfoResponse queryExperimentBasicInfo(QueryExperimentBasicInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentBasicInfoWithOptions(request, runtime);
    }

    public QueryExperimentFlowDefinitionResponse queryExperimentFlowDefinitionWithOptions(QueryExperimentFlowDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentFlowDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentFlowDefinitionResponse());
    }

    public QueryExperimentFlowDefinitionResponse queryExperimentFlowDefinition(QueryExperimentFlowDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentFlowDefinitionWithOptions(request, runtime);
    }

    public QueryExperimentTaskResponse queryExperimentTaskWithOptions(QueryExperimentTaskRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTask"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTaskResponse());
    }

    public QueryExperimentTaskResponse queryExperimentTask(QueryExperimentTaskRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTaskWithOptions(request, runtime);
    }

    public QueryExperimentTaskBasicResponse queryExperimentTaskBasicWithOptions(QueryExperimentTaskBasicRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTaskBasic"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTaskBasicResponse());
    }

    public QueryExperimentTaskBasicResponse queryExperimentTaskBasic(QueryExperimentTaskBasicRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTaskBasicWithOptions(request, runtime);
    }

    public QueryExperimentTaskConsumedAmountResponse queryExperimentTaskConsumedAmountWithOptions(QueryExperimentTaskConsumedAmountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTaskConsumedAmount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTaskConsumedAmountResponse());
    }

    public QueryExperimentTaskConsumedAmountResponse queryExperimentTaskConsumedAmount(QueryExperimentTaskConsumedAmountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTaskConsumedAmountWithOptions(request, runtime);
    }

    public QueryExperimentTaskGuardInfoResponse queryExperimentTaskGuardInfoWithOptions(QueryExperimentTaskGuardInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTaskGuardInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTaskGuardInfoResponse());
    }

    public QueryExperimentTaskGuardInfoResponse queryExperimentTaskGuardInfo(QueryExperimentTaskGuardInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTaskGuardInfoWithOptions(request, runtime);
    }

    public QueryExperimentTaskLogResponse queryExperimentTaskLogWithOptions(QueryExperimentTaskLogRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTaskLog"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTaskLogResponse());
    }

    public QueryExperimentTaskLogResponse queryExperimentTaskLog(QueryExperimentTaskLogRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTaskLogWithOptions(request, runtime);
    }

    public QueryExperimentTasksByExperimentIdResponse queryExperimentTasksByExperimentIdWithOptions(QueryExperimentTasksByExperimentIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTasksByExperimentId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTasksByExperimentIdResponse());
    }

    public QueryExperimentTasksByExperimentIdResponse queryExperimentTasksByExperimentId(QueryExperimentTasksByExperimentIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTasksByExperimentIdWithOptions(request, runtime);
    }

    public QueryExperimentTasksResultByExperimentIdResponse queryExperimentTasksResultByExperimentIdWithOptions(QueryExperimentTasksResultByExperimentIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTasksResultByExperimentId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTasksResultByExperimentIdResponse());
    }

    public QueryExperimentTasksResultByExperimentIdResponse queryExperimentTasksResultByExperimentId(QueryExperimentTasksResultByExperimentIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTasksResultByExperimentIdWithOptions(request, runtime);
    }

    public QueryExperimentTasksSimpleByExperimentIdResponse queryExperimentTasksSimpleByExperimentIdWithOptions(QueryExperimentTasksSimpleByExperimentIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperimentTasksSimpleByExperimentId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentTasksSimpleByExperimentIdResponse());
    }

    public QueryExperimentTasksSimpleByExperimentIdResponse queryExperimentTasksSimpleByExperimentId(QueryExperimentTasksSimpleByExperimentIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentTasksSimpleByExperimentIdWithOptions(request, runtime);
    }

    public QueryExperimentsResponse queryExperimentsWithOptions(QueryExperimentsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExperiments"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExperimentsResponse());
    }

    public QueryExperimentsResponse queryExperiments(QueryExperimentsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExperimentsWithOptions(request, runtime);
    }

    public QueryExpertiseDetailsResponse queryExpertiseDetailsWithOptions(QueryExpertiseDetailsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryExpertiseDetails"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryExpertiseDetailsResponse());
    }

    public QueryExpertiseDetailsResponse queryExpertiseDetails(QueryExpertiseDetailsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryExpertiseDetailsWithOptions(request, runtime);
    }

    public QueryFissionSceneFunctionsResponse queryFissionSceneFunctionsWithOptions(QueryFissionSceneFunctionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryFissionSceneFunctions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryFissionSceneFunctionsResponse());
    }

    public QueryFissionSceneFunctionsResponse queryFissionSceneFunctions(QueryFissionSceneFunctionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryFissionSceneFunctionsWithOptions(request, runtime);
    }

    public QueryFlowStatisticsResponse queryFlowStatisticsWithOptions(QueryFlowStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryFlowStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryFlowStatisticsResponse());
    }

    public QueryFlowStatisticsResponse queryFlowStatistics(QueryFlowStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryFlowStatisticsWithOptions(request, runtime);
    }

    public QueryGatewayProtectionsResponse queryGatewayProtectionsWithOptions(QueryGatewayProtectionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGatewayProtections"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGatewayProtectionsResponse());
    }

    public QueryGatewayProtectionsResponse queryGatewayProtections(QueryGatewayProtectionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryGatewayProtectionsWithOptions(request, runtime);
    }

    public QueryGlobalDataResponse queryGlobalDataWithOptions(QueryGlobalDataRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGlobalData"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGlobalDataResponse());
    }

    public QueryGlobalDataResponse queryGlobalData(QueryGlobalDataRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryGlobalDataWithOptions(request, runtime);
    }

    public QueryGlobalGuardSceneFunctionCategoriesResponse queryGlobalGuardSceneFunctionCategoriesWithOptions(QueryGlobalGuardSceneFunctionCategoriesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGlobalGuardSceneFunctionCategories"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGlobalGuardSceneFunctionCategoriesResponse());
    }

    public QueryGlobalGuardSceneFunctionCategoriesResponse queryGlobalGuardSceneFunctionCategories(QueryGlobalGuardSceneFunctionCategoriesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryGlobalGuardSceneFunctionCategoriesWithOptions(request, runtime);
    }

    public QueryGlobalMonitorSceneFunctionCategoriesResponse queryGlobalMonitorSceneFunctionCategoriesWithOptions(QueryGlobalMonitorSceneFunctionCategoriesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGlobalMonitorSceneFunctionCategories"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGlobalMonitorSceneFunctionCategoriesResponse());
    }

    public QueryGlobalMonitorSceneFunctionCategoriesResponse queryGlobalMonitorSceneFunctionCategories(QueryGlobalMonitorSceneFunctionCategoriesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryGlobalMonitorSceneFunctionCategoriesWithOptions(request, runtime);
    }

    public QueryGuardSceneFunctionRulesResponse queryGuardSceneFunctionRulesWithOptions(QueryGuardSceneFunctionRulesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGuardSceneFunctionRules"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGuardSceneFunctionRulesResponse());
    }

    public QueryGuardSceneFunctionRulesResponse queryGuardSceneFunctionRules(QueryGuardSceneFunctionRulesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryGuardSceneFunctionRulesWithOptions(request, runtime);
    }

    public QueryHelmPackageAddressResponse queryHelmPackageAddressWithOptions(QueryHelmPackageAddressRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryHelmPackageAddress"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryHelmPackageAddressResponse());
    }

    public QueryHelmPackageAddressResponse queryHelmPackageAddress(QueryHelmPackageAddressRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryHelmPackageAddressWithOptions(request, runtime);
    }

    public QueryHistoryListResponse queryHistoryListWithOptions(QueryHistoryListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryHistoryList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryHistoryListResponse());
    }

    public QueryHistoryListResponse queryHistoryList(QueryHistoryListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryHistoryListWithOptions(request, runtime);
    }

    public QueryInspectFailCountChartResponse queryInspectFailCountChartWithOptions(QueryInspectFailCountChartRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dayCount)) {
            query.put("DayCount", request.dayCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryInspectFailCountChart"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryInspectFailCountChartResponse());
    }

    public QueryInspectFailCountChartResponse queryInspectFailCountChart(QueryInspectFailCountChartRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryInspectFailCountChartWithOptions(request, runtime);
    }

    public QueryInspectItemResponse queryInspectItemWithOptions(QueryInspectItemRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inspectId)) {
            query.put("InspectId", request.inspectId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryInspectItem"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryInspectItemResponse());
    }

    public QueryInspectItemResponse queryInspectItem(QueryInspectItemRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryInspectItemWithOptions(request, runtime);
    }

    public QueryInspectJobResponse queryInspectJobWithOptions(QueryInspectJobRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryInspectJob"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryInspectJobResponse());
    }

    public QueryInspectJobResponse queryInspectJob(QueryInspectJobRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryInspectJobWithOptions(request, runtime);
    }

    public QueryInstallCommandResponse queryInstallCommandWithOptions(QueryInstallCommandRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.helmVersion)) {
            query.put("HelmVersion", request.helmVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.osType)) {
            query.put("OsType", request.osType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryInstallCommand"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryInstallCommandResponse());
    }

    public QueryInstallCommandResponse queryInstallCommand(QueryInstallCommandRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryInstallCommandWithOptions(request, runtime);
    }

    public QueryLicenseKeyResponse queryLicenseKeyWithOptions(QueryLicenseKeyRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryLicenseKey"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryLicenseKeyResponse());
    }

    public QueryLicenseKeyResponse queryLicenseKey(QueryLicenseKeyRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryLicenseKeyWithOptions(request, runtime);
    }

    public QueryLivedPluginCountResponse queryLivedPluginCountWithOptions(QueryLivedPluginCountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespaceId)) {
            query.put("NamespaceId", request.namespaceId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryLivedPluginCount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryLivedPluginCountResponse());
    }

    public QueryLivedPluginCountResponse queryLivedPluginCount(QueryLivedPluginCountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryLivedPluginCountWithOptions(request, runtime);
    }

    public QueryMiniAppTaskResponse queryMiniAppTaskWithOptions(QueryMiniAppTaskRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryMiniAppTask"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryMiniAppTaskResponse());
    }

    public QueryMiniAppTaskResponse queryMiniAppTask(QueryMiniAppTaskRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryMiniAppTaskWithOptions(request, runtime);
    }

    public QueryMiniAppTaskLogResponse queryMiniAppTaskLogWithOptions(QueryMiniAppTaskLogRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryMiniAppTaskLog"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryMiniAppTaskLogResponse());
    }

    public QueryMiniAppTaskLogResponse queryMiniAppTaskLog(QueryMiniAppTaskLogRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryMiniAppTaskLogWithOptions(request, runtime);
    }

    public QueryNamespaceListResponse queryNamespaceListWithOptions(QueryNamespaceListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryNamespaceList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryNamespaceListResponse());
    }

    public QueryNamespaceListResponse queryNamespaceList(QueryNamespaceListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryNamespaceListWithOptions(request, runtime);
    }

    public QueryNextCronListResponse queryNextCronListWithOptions(QueryNextCronListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cron)) {
            query.put("Cron", request.cron);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.date)) {
            query.put("Date", request.date);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.day)) {
            query.put("Day", request.day);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.terminationDate)) {
            query.put("TerminationDate", request.terminationDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.terminationTime)) {
            query.put("TerminationTime", request.terminationTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.week)) {
            query.put("Week", request.week);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryNextCronList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryNextCronListResponse());
    }

    public QueryNextCronListResponse queryNextCronList(QueryNextCronListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryNextCronListWithOptions(request, runtime);
    }

    public QueryNoticeResponse queryNoticeWithOptions(QueryNoticeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryNotice"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryNoticeResponse());
    }

    public QueryNoticeResponse queryNotice(QueryNoticeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryNoticeWithOptions(request, runtime);
    }

    public QueryOptionalArgumentsResponse queryOptionalArgumentsWithOptions(QueryOptionalArgumentsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryOptionalArguments"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryOptionalArgumentsResponse());
    }

    public QueryOptionalArgumentsResponse queryOptionalArguments(QueryOptionalArgumentsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryOptionalArgumentsWithOptions(request, runtime);
    }

    public QueryOverviewBasicResponse queryOverviewBasicWithOptions(QueryOverviewBasicRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryOverviewBasic"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryOverviewBasicResponse());
    }

    public QueryOverviewBasicResponse queryOverviewBasic(QueryOverviewBasicRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryOverviewBasicWithOptions(request, runtime);
    }

    public QueryOverviewEventsResponse queryOverviewEventsWithOptions(QueryOverviewEventsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryOverviewEvents"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryOverviewEventsResponse());
    }

    public QueryOverviewEventsResponse queryOverviewEvents(QueryOverviewEventsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryOverviewEventsWithOptions(request, runtime);
    }

    public QueryPageableExpenseRecordsResponse queryPageableExpenseRecordsWithOptions(QueryPageableExpenseRecordsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryPageableExpenseRecords"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryPageableExpenseRecordsResponse());
    }

    public QueryPageableExpenseRecordsResponse queryPageableExpenseRecords(QueryPageableExpenseRecordsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryPageableExpenseRecordsWithOptions(request, runtime);
    }

    public QueryPageableOrderRecordsResponse queryPageableOrderRecordsWithOptions(QueryPageableOrderRecordsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryPageableOrderRecords"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryPageableOrderRecordsResponse());
    }

    public QueryPageableOrderRecordsResponse queryPageableOrderRecords(QueryPageableOrderRecordsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryPageableOrderRecordsWithOptions(request, runtime);
    }

    public QueryParamHotKeysResponse queryParamHotKeysWithOptions(QueryParamHotKeysRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamHotKeys"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamHotKeysResponse());
    }

    public QueryParamHotKeysResponse queryParamHotKeys(QueryParamHotKeysRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamHotKeysWithOptions(request, runtime);
    }

    public QueryParamRuleHotKeyOnNodesResponse queryParamRuleHotKeyOnNodesWithOptions(QueryParamRuleHotKeyOnNodesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hotKey)) {
            query.put("HotKey", request.hotKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamRuleHotKeyOnNodes"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamRuleHotKeyOnNodesResponse());
    }

    public QueryParamRuleHotKeyOnNodesResponse queryParamRuleHotKeyOnNodes(QueryParamRuleHotKeyOnNodesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamRuleHotKeyOnNodesWithOptions(request, runtime);
    }

    public QueryParamRuleHotKeyStatisticsResponse queryParamRuleHotKeyStatisticsWithOptions(QueryParamRuleHotKeyStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hotKey)) {
            query.put("HotKey", request.hotKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamRuleHotKeyStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamRuleHotKeyStatisticsResponse());
    }

    public QueryParamRuleHotKeyStatisticsResponse queryParamRuleHotKeyStatistics(QueryParamRuleHotKeyStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamRuleHotKeyStatisticsWithOptions(request, runtime);
    }

    public QueryParamRuleHotKeyStatisticsOnNodeResponse queryParamRuleHotKeyStatisticsOnNodeWithOptions(QueryParamRuleHotKeyStatisticsOnNodeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hotKey)) {
            query.put("HotKey", request.hotKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamRuleHotKeyStatisticsOnNode"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamRuleHotKeyStatisticsOnNodeResponse());
    }

    public QueryParamRuleHotKeyStatisticsOnNodeResponse queryParamRuleHotKeyStatisticsOnNode(QueryParamRuleHotKeyStatisticsOnNodeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamRuleHotKeyStatisticsOnNodeWithOptions(request, runtime);
    }

    public QueryParamRuleHotKeysResponse queryParamRuleHotKeysWithOptions(QueryParamRuleHotKeysRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamRuleHotKeys"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamRuleHotKeysResponse());
    }

    public QueryParamRuleHotKeysResponse queryParamRuleHotKeys(QueryParamRuleHotKeysRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamRuleHotKeysWithOptions(request, runtime);
    }

    public QueryParamRuleHotKeysWithNameResponse queryParamRuleHotKeysWithNameWithOptions(QueryParamRuleHotKeysWithNameRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.key)) {
            query.put("Key", request.key);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamRuleHotKeysWithName"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamRuleHotKeysWithNameResponse());
    }

    public QueryParamRuleHotKeysWithNameResponse queryParamRuleHotKeysWithName(QueryParamRuleHotKeysWithNameRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamRuleHotKeysWithNameWithOptions(request, runtime);
    }

    public QueryParamRulesResponse queryParamRulesWithOptions(QueryParamRulesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamRules"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamRulesResponse());
    }

    public QueryParamRulesResponse queryParamRules(QueryParamRulesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamRulesWithOptions(request, runtime);
    }

    public QueryParamRulesWithNameResponse queryParamRulesWithNameWithOptions(QueryParamRulesWithNameRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParamRulesWithName"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParamRulesWithNameResponse());
    }

    public QueryParamRulesWithNameResponse queryParamRulesWithName(QueryParamRulesWithNameRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParamRulesWithNameWithOptions(request, runtime);
    }

    public QueryParameHotKeysResponse queryParameHotKeysWithOptions(QueryParameHotKeysRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rule)) {
            query.put("Rule", request.rule);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryParameHotKeys"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryParameHotKeysResponse());
    }

    public QueryParameHotKeysResponse queryParameHotKeys(QueryParameHotKeysRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryParameHotKeysWithOptions(request, runtime);
    }

    public QueryPluginStatusResponse queryPluginStatusWithOptions(QueryPluginStatusRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryPluginStatus"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryPluginStatusResponse());
    }

    public QueryPluginStatusResponse queryPluginStatus(QueryPluginStatusRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryPluginStatusWithOptions(request, runtime);
    }

    public QueryPluginsResponse queryPluginsWithOptions(QueryPluginsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pluginStatus)) {
            query.put("PluginStatus", request.pluginStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pluginType)) {
            query.put("PluginType", request.pluginType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryPlugins"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryPluginsResponse());
    }

    public QueryPluginsResponse queryPlugins(QueryPluginsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryPluginsWithOptions(request, runtime);
    }

    public QueryQuickSceneByCategoryResponse queryQuickSceneByCategoryWithOptions(QueryQuickSceneByCategoryRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryQuickSceneByCategory"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryQuickSceneByCategoryResponse());
    }

    public QueryQuickSceneByCategoryResponse queryQuickSceneByCategory(QueryQuickSceneByCategoryRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryQuickSceneByCategoryWithOptions(request, runtime);
    }

    public QueryQuickSceneCategoriesResponse queryQuickSceneCategoriesWithOptions(QueryQuickSceneCategoriesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryQuickSceneCategories"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryQuickSceneCategoriesResponse());
    }

    public QueryQuickSceneCategoriesResponse queryQuickSceneCategories(QueryQuickSceneCategoriesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryQuickSceneCategoriesWithOptions(request, runtime);
    }

    public QueryRdsMetricsResponse queryRdsMetricsWithOptions(QueryRdsMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryRdsMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryRdsMetricsResponse());
    }

    public QueryRdsMetricsResponse queryRdsMetrics(QueryRdsMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryRdsMetricsWithOptions(request, runtime);
    }

    public QueryRecentlyInstalledAhasAgentResponse queryRecentlyInstalledAhasAgentWithOptions(QueryRecentlyInstalledAhasAgentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryRecentlyInstalledAhasAgent"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryRecentlyInstalledAhasAgentResponse());
    }

    public QueryRecentlyInstalledAhasAgentResponse queryRecentlyInstalledAhasAgent(QueryRecentlyInstalledAhasAgentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryRecentlyInstalledAhasAgentWithOptions(request, runtime);
    }

    public QueryRecentlyInstalledJavaAgentResponse queryRecentlyInstalledJavaAgentWithOptions(QueryRecentlyInstalledJavaAgentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryRecentlyInstalledJavaAgent"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryRecentlyInstalledJavaAgentResponse());
    }

    public QueryRecentlyInstalledJavaAgentResponse queryRecentlyInstalledJavaAgent(QueryRecentlyInstalledJavaAgentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryRecentlyInstalledJavaAgentWithOptions(request, runtime);
    }

    public QueryRedisMetricsResponse queryRedisMetricsWithOptions(QueryRedisMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vip)) {
            query.put("Vip", request.vip);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryRedisMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryRedisMetricsResponse());
    }

    public QueryRedisMetricsResponse queryRedisMetrics(QueryRedisMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryRedisMetricsWithOptions(request, runtime);
    }

    public QueryRelativeRatioQpsStatisticsResponse queryRelativeRatioQpsStatisticsWithOptions(QueryRelativeRatioQpsStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.end)) {
            query.put("End", request.end);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.start)) {
            query.put("Start", request.start);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryRelativeRatioQpsStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryRelativeRatioQpsStatisticsResponse());
    }

    public QueryRelativeRatioQpsStatisticsResponse queryRelativeRatioQpsStatistics(QueryRelativeRatioQpsStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryRelativeRatioQpsStatisticsWithOptions(request, runtime);
    }

    public QueryScenarioListResponse queryScenarioListWithOptions(QueryScenarioListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryScenarioList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryScenarioListResponse());
    }

    public QueryScenarioListResponse queryScenarioList(QueryScenarioListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryScenarioListWithOptions(request, runtime);
    }

    public QueryScenarioModifyResponse queryScenarioModifyWithOptions(QueryScenarioModifyRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteId)) {
            query.put("AttackSuiteId", request.attackSuiteId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryScenarioModify"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryScenarioModifyResponse());
    }

    public QueryScenarioModifyResponse queryScenarioModify(QueryScenarioModifyRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryScenarioModifyWithOptions(request, runtime);
    }

    public QuerySceneFunctionByCategoryIdResponse querySceneFunctionByCategoryIdWithOptions(QuerySceneFunctionByCategoryIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionByCategoryId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionByCategoryIdResponse());
    }

    public QuerySceneFunctionByCategoryIdResponse querySceneFunctionByCategoryId(QuerySceneFunctionByCategoryIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionByCategoryIdWithOptions(request, runtime);
    }

    public QuerySceneFunctionByIdResponse querySceneFunctionByIdWithOptions(QuerySceneFunctionByIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionById"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionByIdResponse());
    }

    public QuerySceneFunctionByIdResponse querySceneFunctionById(QuerySceneFunctionByIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionByIdWithOptions(request, runtime);
    }

    public QuerySceneFunctionCategoriesResponse querySceneFunctionCategoriesWithOptions(QuerySceneFunctionCategoriesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionCategories"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionCategoriesResponse());
    }

    public QuerySceneFunctionCategoriesResponse querySceneFunctionCategories(QuerySceneFunctionCategoriesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionCategoriesWithOptions(request, runtime);
    }

    public QuerySceneFunctionChangeLogResponse querySceneFunctionChangeLogWithOptions(QuerySceneFunctionChangeLogRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionChangeLog"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionChangeLogResponse());
    }

    public QuerySceneFunctionChangeLogResponse querySceneFunctionChangeLog(QuerySceneFunctionChangeLogRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionChangeLogWithOptions(request, runtime);
    }

    public QuerySceneFunctionPageableResponse querySceneFunctionPageableWithOptions(QuerySceneFunctionPageableRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionPageable"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionPageableResponse());
    }

    public QuerySceneFunctionPageableResponse querySceneFunctionPageable(QuerySceneFunctionPageableRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionPageableWithOptions(request, runtime);
    }

    public QuerySceneFunctionParametersResponse querySceneFunctionParametersWithOptions(QuerySceneFunctionParametersRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionParameters"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionParametersResponse());
    }

    public QuerySceneFunctionParametersResponse querySceneFunctionParameters(QuerySceneFunctionParametersRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionParametersWithOptions(request, runtime);
    }

    public QuerySceneFunctionUsedCountByIdResponse querySceneFunctionUsedCountByIdWithOptions(QuerySceneFunctionUsedCountByIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionUsedCountById"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionUsedCountByIdResponse());
    }

    public QuerySceneFunctionUsedCountByIdResponse querySceneFunctionUsedCountById(QuerySceneFunctionUsedCountByIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionUsedCountByIdWithOptions(request, runtime);
    }

    public QuerySceneFunctionsByCodeResponse querySceneFunctionsByCodeWithOptions(QuerySceneFunctionsByCodeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionsByCode"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionsByCodeResponse());
    }

    public QuerySceneFunctionsByCodeResponse querySceneFunctionsByCode(QuerySceneFunctionsByCodeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionsByCodeWithOptions(request, runtime);
    }

    public QuerySceneFunctionsBySceneResponse querySceneFunctionsBySceneWithOptions(QuerySceneFunctionsBySceneRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySceneFunctionsByScene"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySceneFunctionsBySceneResponse());
    }

    public QuerySceneFunctionsBySceneResponse querySceneFunctionsByScene(QuerySceneFunctionsBySceneRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySceneFunctionsBySceneWithOptions(request, runtime);
    }

    public QueryScenePageableResponse queryScenePageableWithOptions(QueryScenePageableRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryScenePageable"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryScenePageableResponse());
    }

    public QueryScenePageableResponse queryScenePageable(QueryScenePageableRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryScenePageableWithOptions(request, runtime);
    }

    public QueryScopeInfoResponse queryScopeInfoWithOptions(QueryScopeInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryScopeInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryScopeInfoResponse());
    }

    public QueryScopeInfoResponse queryScopeInfo(QueryScopeInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryScopeInfoWithOptions(request, runtime);
    }

    public QuerySentinelAppSummaryMetricOverviewResponse querySentinelAppSummaryMetricOverviewWithOptions(QuerySentinelAppSummaryMetricOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySentinelAppSummaryMetricOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySentinelAppSummaryMetricOverviewResponse());
    }

    public QuerySentinelAppSummaryMetricOverviewResponse querySentinelAppSummaryMetricOverview(QuerySentinelAppSummaryMetricOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySentinelAppSummaryMetricOverviewWithOptions(request, runtime);
    }

    public QuerySentinelHistoryMetricsOfResourceResponse querySentinelHistoryMetricsOfResourceWithOptions(QuerySentinelHistoryMetricsOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySentinelHistoryMetricsOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySentinelHistoryMetricsOfResourceResponse());
    }

    public QuerySentinelHistoryMetricsOfResourceResponse querySentinelHistoryMetricsOfResource(QuerySentinelHistoryMetricsOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySentinelHistoryMetricsOfResourceWithOptions(request, runtime);
    }

    public QuerySentinelHotparamRuleResponse querySentinelHotparamRuleWithOptions(QuerySentinelHotparamRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySentinelHotparamRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySentinelHotparamRuleResponse());
    }

    public QuerySentinelHotparamRuleResponse querySentinelHotparamRule(QuerySentinelHotparamRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySentinelHotparamRuleWithOptions(request, runtime);
    }

    public QuerySentinelHotparamRuleOfResourceResponse querySentinelHotparamRuleOfResourceWithOptions(QuerySentinelHotparamRuleOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySentinelHotparamRuleOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySentinelHotparamRuleOfResourceResponse());
    }

    public QuerySentinelHotparamRuleOfResourceResponse querySentinelHotparamRuleOfResource(QuerySentinelHotparamRuleOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySentinelHotparamRuleOfResourceWithOptions(request, runtime);
    }

    public QuerySentinelMacMetricsOfResourceResponse querySentinelMacMetricsOfResourceWithOptions(QuerySentinelMacMetricsOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySentinelMacMetricsOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySentinelMacMetricsOfResourceResponse());
    }

    public QuerySentinelMacMetricsOfResourceResponse querySentinelMacMetricsOfResource(QuerySentinelMacMetricsOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySentinelMacMetricsOfResourceWithOptions(request, runtime);
    }

    public QuerySentinelMetricsOfResourceResponse querySentinelMetricsOfResourceWithOptions(QuerySentinelMetricsOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySentinelMetricsOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySentinelMetricsOfResourceResponse());
    }

    public QuerySentinelMetricsOfResourceResponse querySentinelMetricsOfResource(QuerySentinelMetricsOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySentinelMetricsOfResourceWithOptions(request, runtime);
    }

    public QuerySentinelRuleInfoResponse querySentinelRuleInfoWithOptions(QuerySentinelRuleInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySentinelRuleInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySentinelRuleInfoResponse());
    }

    public QuerySentinelRuleInfoResponse querySentinelRuleInfo(QuerySentinelRuleInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySentinelRuleInfoWithOptions(request, runtime);
    }

    public QuerySingleSystemResourceMetricOfResourceResponse querySingleSystemResourceMetricOfResourceWithOptions(QuerySingleSystemResourceMetricOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.group)) {
            query.put("Group", request.group);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySingleSystemResourceMetricOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySingleSystemResourceMetricOfResourceResponse());
    }

    public QuerySingleSystemResourceMetricOfResourceResponse querySingleSystemResourceMetricOfResource(QuerySingleSystemResourceMetricOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySingleSystemResourceMetricOfResourceWithOptions(request, runtime);
    }

    public QuerySingleSystemResourceMetricOfResourceOnNodeResponse querySingleSystemResourceMetricOfResourceOnNodeWithOptions(QuerySingleSystemResourceMetricOfResourceOnNodeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.group)) {
            query.put("Group", request.group);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySingleSystemResourceMetricOfResourceOnNode"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySingleSystemResourceMetricOfResourceOnNodeResponse());
    }

    public QuerySingleSystemResourceMetricOfResourceOnNodeResponse querySingleSystemResourceMetricOfResourceOnNode(QuerySingleSystemResourceMetricOfResourceOnNodeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySingleSystemResourceMetricOfResourceOnNodeWithOptions(request, runtime);
    }

    public QuerySlbMetricsResponse querySlbMetricsWithOptions(QuerySlbMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyword)) {
            query.put("Keyword", request.keyword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNo)) {
            query.put("PageNo", request.pageNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vip)) {
            query.put("Vip", request.vip);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySlbMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySlbMetricsResponse());
    }

    public QuerySlbMetricsResponse querySlbMetrics(QuerySlbMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySlbMetricsWithOptions(request, runtime);
    }

    public QueryStatusNotFineOfApplicationResponse queryStatusNotFineOfApplicationWithOptions(QueryStatusNotFineOfApplicationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryStatusNotFineOfApplication"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryStatusNotFineOfApplicationResponse());
    }

    public QueryStatusNotFineOfApplicationResponse queryStatusNotFineOfApplication(QueryStatusNotFineOfApplicationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryStatusNotFineOfApplicationWithOptions(request, runtime);
    }

    public QueryStatusNotFineOfResourceResponse queryStatusNotFineOfResourceWithOptions(QueryStatusNotFineOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryStatusNotFineOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryStatusNotFineOfResourceResponse());
    }

    public QueryStatusNotFineOfResourceResponse queryStatusNotFineOfResource(QueryStatusNotFineOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryStatusNotFineOfResourceWithOptions(request, runtime);
    }

    public QueryStatusNotFineOfResourceOnNodeResponse queryStatusNotFineOfResourceOnNodeWithOptions(QueryStatusNotFineOfResourceOnNodeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryStatusNotFineOfResourceOnNode"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryStatusNotFineOfResourceOnNodeResponse());
    }

    public QueryStatusNotFineOfResourceOnNodeResponse queryStatusNotFineOfResourceOnNode(QueryStatusNotFineOfResourceOnNodeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryStatusNotFineOfResourceOnNodeWithOptions(request, runtime);
    }

    public QueryStatusTopOfApplicationResponse queryStatusTopOfApplicationWithOptions(QueryStatusTopOfApplicationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryStatusTopOfApplication"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryStatusTopOfApplicationResponse());
    }

    public QueryStatusTopOfApplicationResponse queryStatusTopOfApplication(QueryStatusTopOfApplicationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryStatusTopOfApplicationWithOptions(request, runtime);
    }

    public QueryStatusTopOfResourceResponse queryStatusTopOfResourceWithOptions(QueryStatusTopOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryStatusTopOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryStatusTopOfResourceResponse());
    }

    public QueryStatusTopOfResourceResponse queryStatusTopOfResource(QueryStatusTopOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryStatusTopOfResourceWithOptions(request, runtime);
    }

    public QuerySubUserAuthListResponse querySubUserAuthListWithOptions(QuerySubUserAuthListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySubUserAuthList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySubUserAuthListResponse());
    }

    public QuerySubUserAuthListResponse querySubUserAuthList(QuerySubUserAuthListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySubUserAuthListWithOptions(request, runtime);
    }

    public QuerySummaryExpressResponse querySummaryExpressWithOptions(QuerySummaryExpressRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySummaryExpress"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySummaryExpressResponse());
    }

    public QuerySummaryExpressResponse querySummaryExpress(QuerySummaryExpressRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySummaryExpressWithOptions(request, runtime);
    }

    public QuerySummaryNoticeResponse querySummaryNoticeWithOptions(QuerySummaryNoticeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySummaryNotice"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySummaryNoticeResponse());
    }

    public QuerySummaryNoticeResponse querySummaryNotice(QuerySummaryNoticeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySummaryNoticeWithOptions(request, runtime);
    }

    public QuerySwitchDetailResponse querySwitchDetailWithOptions(QuerySwitchDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySwitchDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySwitchDetailResponse());
    }

    public QuerySwitchDetailResponse querySwitchDetail(QuerySwitchDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySwitchDetailWithOptions(request, runtime);
    }

    public QuerySystemEnumsResponse querySystemEnumsWithOptions(QuerySystemEnumsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySystemEnums"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySystemEnumsResponse());
    }

    public QuerySystemEnumsResponse querySystemEnums(QuerySystemEnumsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySystemEnumsWithOptions(request, runtime);
    }

    public QuerySystemResourceMetricOfGroupResponse querySystemResourceMetricOfGroupWithOptions(QuerySystemResourceMetricOfGroupRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.group)) {
            query.put("Group", request.group);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySystemResourceMetricOfGroup"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySystemResourceMetricOfGroupResponse());
    }

    public QuerySystemResourceMetricOfGroupResponse querySystemResourceMetricOfGroup(QuerySystemResourceMetricOfGroupRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySystemResourceMetricOfGroupWithOptions(request, runtime);
    }

    public QuerySystemResourceMetricOfGroupOnNodeResponse querySystemResourceMetricOfGroupOnNodeWithOptions(QuerySystemResourceMetricOfGroupOnNodeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.group)) {
            query.put("Group", request.group);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySystemResourceMetricOfGroupOnNode"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySystemResourceMetricOfGroupOnNodeResponse());
    }

    public QuerySystemResourceMetricOfGroupOnNodeResponse querySystemResourceMetricOfGroupOnNode(QuerySystemResourceMetricOfGroupOnNodeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySystemResourceMetricOfGroupOnNodeWithOptions(request, runtime);
    }

    public QuerySystemStatResourceMetricOfResourceResponse querySystemStatResourceMetricOfResourceWithOptions(QuerySystemStatResourceMetricOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.group)) {
            query.put("Group", request.group);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QuerySystemStatResourceMetricOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QuerySystemStatResourceMetricOfResourceResponse());
    }

    public QuerySystemStatResourceMetricOfResourceResponse querySystemStatResourceMetricOfResource(QuerySystemStatResourceMetricOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.querySystemStatResourceMetricOfResourceWithOptions(request, runtime);
    }

    public QueryThermodynamicDataResponse queryThermodynamicDataWithOptions(QueryThermodynamicDataRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ahasTimestamp)) {
            query.put("AhasTimestamp", request.ahasTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryThermodynamicData"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryThermodynamicDataResponse());
    }

    public QueryThermodynamicDataResponse queryThermodynamicData(QueryThermodynamicDataRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryThermodynamicDataWithOptions(request, runtime);
    }

    public QueryTopologyCloudNodeDetailResponse queryTopologyCloudNodeDetailWithOptions(QueryTopologyCloudNodeDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeType)) {
            query.put("NodeType", request.nodeType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyCloudNodeDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyCloudNodeDetailResponse());
    }

    public QueryTopologyCloudNodeDetailResponse queryTopologyCloudNodeDetail(QueryTopologyCloudNodeDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyCloudNodeDetailWithOptions(request, runtime);
    }

    public QueryTopologyContainerOverviewResponse queryTopologyContainerOverviewWithOptions(QueryTopologyContainerOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hostConfigurationId)) {
            query.put("HostConfigurationId", request.hostConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tierId)) {
            query.put("TierId", request.tierId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyContainerOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyContainerOverviewResponse());
    }

    public QueryTopologyContainerOverviewResponse queryTopologyContainerOverview(QueryTopologyContainerOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyContainerOverviewWithOptions(request, runtime);
    }

    public QueryTopologyGraphResponse queryTopologyGraphWithOptions(QueryTopologyGraphRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.applicationName)) {
            query.put("ApplicationName", request.applicationName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.atomicViewId)) {
            query.put("AtomicViewId", request.atomicViewId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hostConfigurationId)) {
            query.put("HostConfigurationId", request.hostConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.loop)) {
            query.put("Loop", request.loop);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.revealApp)) {
            query.put("RevealApp", request.revealApp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.showUnconnected)) {
            query.put("ShowUnconnected", request.showUnconnected);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.state)) {
            query.put("State", request.state);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.token)) {
            query.put("Token", request.token);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewMode)) {
            query.put("ViewMode", request.viewMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewType)) {
            query.put("ViewType", request.viewType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyGraph"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyGraphResponse());
    }

    public QueryTopologyGraphResponse queryTopologyGraph(QueryTopologyGraphRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyGraphWithOptions(request, runtime);
    }

    public QueryTopologyHostOverviewResponse queryTopologyHostOverviewWithOptions(QueryTopologyHostOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tierId)) {
            query.put("TierId", request.tierId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyHostOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyHostOverviewResponse());
    }

    public QueryTopologyHostOverviewResponse queryTopologyHostOverview(QueryTopologyHostOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyHostOverviewWithOptions(request, runtime);
    }

    public QueryTopologyIngressMetricResponse queryTopologyIngressMetricWithOptions(QueryTopologyIngressMetricRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceName)) {
            query.put("ServiceName", request.serviceName);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyIngressMetric"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyIngressMetricResponse());
    }

    public QueryTopologyIngressMetricResponse queryTopologyIngressMetric(QueryTopologyIngressMetricRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyIngressMetricWithOptions(request, runtime);
    }

    public QueryTopologyKubDeploymentNodeDetailResponse queryTopologyKubDeploymentNodeDetailWithOptions(QueryTopologyKubDeploymentNodeDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hostConfigurationId)) {
            query.put("HostConfigurationId", request.hostConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyKubDeploymentNodeDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyKubDeploymentNodeDetailResponse());
    }

    public QueryTopologyKubDeploymentNodeDetailResponse queryTopologyKubDeploymentNodeDetail(QueryTopologyKubDeploymentNodeDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyKubDeploymentNodeDetailWithOptions(request, runtime);
    }

    public QueryTopologyKubDeploymentOverviewResponse queryTopologyKubDeploymentOverviewWithOptions(QueryTopologyKubDeploymentOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tierId)) {
            query.put("TierId", request.tierId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyKubDeploymentOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyKubDeploymentOverviewResponse());
    }

    public QueryTopologyKubDeploymentOverviewResponse queryTopologyKubDeploymentOverview(QueryTopologyKubDeploymentOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyKubDeploymentOverviewWithOptions(request, runtime);
    }

    public QueryTopologyKubNamespaceListResponse queryTopologyKubNamespaceListWithOptions(QueryTopologyKubNamespaceListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyKubNamespaceList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyKubNamespaceListResponse());
    }

    public QueryTopologyKubNamespaceListResponse queryTopologyKubNamespaceList(QueryTopologyKubNamespaceListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyKubNamespaceListWithOptions(request, runtime);
    }

    public QueryTopologyKubPodNodeDetailResponse queryTopologyKubPodNodeDetailWithOptions(QueryTopologyKubPodNodeDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hostConfigurationId)) {
            query.put("HostConfigurationId", request.hostConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyKubPodNodeDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyKubPodNodeDetailResponse());
    }

    public QueryTopologyKubPodNodeDetailResponse queryTopologyKubPodNodeDetail(QueryTopologyKubPodNodeDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyKubPodNodeDetailWithOptions(request, runtime);
    }

    public QueryTopologyKubPodOverviewResponse queryTopologyKubPodOverviewWithOptions(QueryTopologyKubPodOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tierId)) {
            query.put("TierId", request.tierId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyKubPodOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyKubPodOverviewResponse());
    }

    public QueryTopologyKubPodOverviewResponse queryTopologyKubPodOverview(QueryTopologyKubPodOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyKubPodOverviewWithOptions(request, runtime);
    }

    public QueryTopologyKubServiceNodeDetailResponse queryTopologyKubServiceNodeDetailWithOptions(QueryTopologyKubServiceNodeDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hostConfigurationId)) {
            query.put("HostConfigurationId", request.hostConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyKubServiceNodeDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyKubServiceNodeDetailResponse());
    }

    public QueryTopologyKubServiceNodeDetailResponse queryTopologyKubServiceNodeDetail(QueryTopologyKubServiceNodeDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyKubServiceNodeDetailWithOptions(request, runtime);
    }

    public QueryTopologyKubServiceOverviewResponse queryTopologyKubServiceOverviewWithOptions(QueryTopologyKubServiceOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tierId)) {
            query.put("TierId", request.tierId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyKubServiceOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyKubServiceOverviewResponse());
    }

    public QueryTopologyKubServiceOverviewResponse queryTopologyKubServiceOverview(QueryTopologyKubServiceOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyKubServiceOverviewWithOptions(request, runtime);
    }

    public QueryTopologyNodeDetailResponse queryTopologyNodeDetailWithOptions(QueryTopologyNodeDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hostConfigurationId)) {
            query.put("HostConfigurationId", request.hostConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyNodeDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyNodeDetailResponse());
    }

    public QueryTopologyNodeDetailResponse queryTopologyNodeDetail(QueryTopologyNodeDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyNodeDetailWithOptions(request, runtime);
    }

    public QueryTopologyNodeMetricResponse queryTopologyNodeMetricWithOptions(QueryTopologyNodeMetricRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricKey)) {
            query.put("MetricKey", request.metricKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyNodeMetric"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyNodeMetricResponse());
    }

    public QueryTopologyNodeMetricResponse queryTopologyNodeMetric(QueryTopologyNodeMetricRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyNodeMetricWithOptions(request, runtime);
    }

    public QueryTopologyOverviewResponse queryTopologyOverviewWithOptions(QueryTopologyOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tierId)) {
            query.put("TierId", request.tierId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyOverviewResponse());
    }

    public QueryTopologyOverviewResponse queryTopologyOverview(QueryTopologyOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyOverviewWithOptions(request, runtime);
    }

    public QueryTopologyOverviewStatisticsResponse queryTopologyOverviewStatisticsWithOptions(QueryTopologyOverviewStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyOverviewStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyOverviewStatisticsResponse());
    }

    public QueryTopologyOverviewStatisticsResponse queryTopologyOverviewStatistics(QueryTopologyOverviewStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyOverviewStatisticsWithOptions(request, runtime);
    }

    public QueryTopologyTableResponse queryTopologyTableWithOptions(QueryTopologyTableRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.loop)) {
            query.put("Loop", request.loop);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.viewId)) {
            query.put("ViewId", request.viewId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryTopologyTable"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyTableResponse());
    }

    public QueryTopologyTableResponse queryTopologyTable(QueryTopologyTableRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyTableWithOptions(request, runtime);
    }

    public QueryUninstallCommandResponse queryUninstallCommandWithOptions(QueryUninstallCommandRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryUninstallCommand"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryUninstallCommandResponse());
    }

    public QueryUninstallCommandResponse queryUninstallCommand(QueryUninstallCommandRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryUninstallCommandWithOptions(request, runtime);
    }

    public QueryUserArrearsAmountResponse queryUserArrearsAmountWithOptions(QueryUserArrearsAmountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryUserArrearsAmount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryUserArrearsAmountResponse());
    }

    public QueryUserArrearsAmountResponse queryUserArrearsAmount(QueryUserArrearsAmountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryUserArrearsAmountWithOptions(request, runtime);
    }

    public QueryUserConsumedAmountResponse queryUserConsumedAmountWithOptions(QueryUserConsumedAmountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryUserConsumedAmount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryUserConsumedAmountResponse());
    }

    public QueryUserConsumedAmountResponse queryUserConsumedAmount(QueryUserConsumedAmountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryUserConsumedAmountWithOptions(request, runtime);
    }

    public QueryUserRemainingAmountResponse queryUserRemainingAmountWithOptions(QueryUserRemainingAmountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryUserRemainingAmount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryUserRemainingAmountResponse());
    }

    public QueryUserRemainingAmountResponse queryUserRemainingAmount(QueryUserRemainingAmountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryUserRemainingAmountWithOptions(request, runtime);
    }

    public QueryUserSceneFunctionsResponse queryUserSceneFunctionsWithOptions(QueryUserSceneFunctionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryUserSceneFunctions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryUserSceneFunctionsResponse());
    }

    public QueryUserSceneFunctionsResponse queryUserSceneFunctions(QueryUserSceneFunctionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryUserSceneFunctionsWithOptions(request, runtime);
    }

    public QueryUserScenesResponse queryUserScenesWithOptions(QueryUserScenesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryUserScenes"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryUserScenesResponse());
    }

    public QueryUserScenesResponse queryUserScenes(QueryUserScenesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryUserScenesWithOptions(request, runtime);
    }

    public QueryWaitInstallPluginResponse queryWaitInstallPluginWithOptions(QueryWaitInstallPluginRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.EIpList)) {
            query.put("EIpList", request.EIpList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceNameList)) {
            query.put("InstanceNameList", request.instanceNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.privateIpList)) {
            query.put("PrivateIpList", request.privateIpList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.publicIpList)) {
            query.put("PublicIpList", request.publicIpList);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryWaitInstallPlugin"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryWaitInstallPluginResponse());
    }

    public QueryWaitInstallPluginResponse queryWaitInstallPlugin(QueryWaitInstallPluginRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryWaitInstallPluginWithOptions(request, runtime);
    }

    public ReImplementRuleInspectionResponse reImplementRuleInspectionWithOptions(ReImplementRuleInspectionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.functionResultId)) {
            query.put("FunctionResultId", request.functionResultId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ReImplementRuleInspection"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ReImplementRuleInspectionResponse());
    }

    public ReImplementRuleInspectionResponse reImplementRuleInspection(ReImplementRuleInspectionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.reImplementRuleInspectionWithOptions(request, runtime);
    }

    public ReloadMetricActivityResponse reloadMetricActivityWithOptions(ReloadMetricActivityRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ReloadMetricActivity"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ReloadMetricActivityResponse());
    }

    public ReloadMetricActivityResponse reloadMetricActivity(ReloadMetricActivityRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.reloadMetricActivityWithOptions(request, runtime);
    }

    public ResourceExceptionStatisticsResponse resourceExceptionStatisticsWithOptions(ResourceExceptionStatisticsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ResourceExceptionStatistics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ResourceExceptionStatisticsResponse());
    }

    public ResourceExceptionStatisticsResponse resourceExceptionStatistics(ResourceExceptionStatisticsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.resourceExceptionStatisticsWithOptions(request, runtime);
    }

    public ResourceExceptionsWithTimeResponse resourceExceptionsWithTimeWithOptions(ResourceExceptionsWithTimeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ResourceExceptionsWithTime"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ResourceExceptionsWithTimeResponse());
    }

    public ResourceExceptionsWithTimeResponse resourceExceptionsWithTime(ResourceExceptionsWithTimeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.resourceExceptionsWithTimeWithOptions(request, runtime);
    }

    public ResourceLatestExceptionsResponse resourceLatestExceptionsWithOptions(ResourceLatestExceptionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ResourceLatestExceptions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ResourceLatestExceptionsResponse());
    }

    public ResourceLatestExceptionsResponse resourceLatestExceptions(ResourceLatestExceptionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.resourceLatestExceptionsWithOptions(request, runtime);
    }

    public RetryActivityTaskResponse retryActivityTaskWithOptions(RetryActivityTaskRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RetryActivityTask"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RetryActivityTaskResponse());
    }

    public RetryActivityTaskResponse retryActivityTask(RetryActivityTaskRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.retryActivityTaskWithOptions(request, runtime);
    }

    public RollBackPublishOrderResponse rollBackPublishOrderWithOptions(RollBackPublishOrderRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.publishOrderId)) {
            query.put("PublishOrderId", request.publishOrderId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rollbackValue)) {
            query.put("RollbackValue", request.rollbackValue);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RollBackPublishOrder"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RollBackPublishOrderResponse());
    }

    public RollBackPublishOrderResponse rollBackPublishOrder(RollBackPublishOrderRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.rollBackPublishOrderWithOptions(request, runtime);
    }

    public RunExperimentResponse runExperimentWithOptions(RunExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RunExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RunExperimentResponse());
    }

    public RunExperimentResponse runExperiment(RunExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.runExperimentWithOptions(request, runtime);
    }

    public RunInspectionResponse runInspectionWithOptions(RunInspectionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RunInspection"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RunInspectionResponse());
    }

    public RunInspectionResponse runInspection(RunInspectionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.runInspectionWithOptions(request, runtime);
    }

    public SearchApplicationHostsResponse searchApplicationHostsWithOptions(SearchApplicationHostsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchApplicationHosts"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchApplicationHostsResponse());
    }

    public SearchApplicationHostsResponse searchApplicationHosts(SearchApplicationHostsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchApplicationHostsWithOptions(request, runtime);
    }

    public SearchApplicationInVisionResponse searchApplicationInVisionWithOptions(SearchApplicationInVisionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchApplicationInVision"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchApplicationInVisionResponse());
    }

    public SearchApplicationInVisionResponse searchApplicationInVision(SearchApplicationInVisionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchApplicationInVisionWithOptions(request, runtime);
    }

    public SearchApplicationsResponse searchApplicationsWithOptions(SearchApplicationsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchApplications"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchApplicationsResponse());
    }

    public SearchApplicationsResponse searchApplications(SearchApplicationsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchApplicationsWithOptions(request, runtime);
    }

    public SearchClusterNamespaceResponse searchClusterNamespaceWithOptions(SearchClusterNamespaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchClusterNamespace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchClusterNamespaceResponse());
    }

    public SearchClusterNamespaceResponse searchClusterNamespace(SearchClusterNamespaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchClusterNamespaceWithOptions(request, runtime);
    }

    public SearchExperimentsResponse searchExperimentsWithOptions(SearchExperimentsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchExperiments"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchExperimentsResponse());
    }

    public SearchExperimentsResponse searchExperiments(SearchExperimentsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchExperimentsWithOptions(request, runtime);
    }

    public SearchExpertiseResponse searchExpertiseWithOptions(SearchExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchExpertiseResponse());
    }

    public SearchExpertiseResponse searchExpertise(SearchExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchExpertiseWithOptions(request, runtime);
    }

    public SearchSceneDraftResponse searchSceneDraftWithOptions(SearchSceneDraftRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchSceneDraft"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchSceneDraftResponse());
    }

    public SearchSceneDraftResponse searchSceneDraft(SearchSceneDraftRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchSceneDraftWithOptions(request, runtime);
    }

    public SearchSceneFunctionResponse searchSceneFunctionWithOptions(SearchSceneFunctionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchSceneFunction"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchSceneFunctionResponse());
    }

    public SearchSceneFunctionResponse searchSceneFunction(SearchSceneFunctionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchSceneFunctionWithOptions(request, runtime);
    }

    public SearchSceneFunctionsResponse searchSceneFunctionsWithOptions(SearchSceneFunctionsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchSceneFunctions"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchSceneFunctionsResponse());
    }

    public SearchSceneFunctionsResponse searchSceneFunctions(SearchSceneFunctionsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchSceneFunctionsWithOptions(request, runtime);
    }

    public SearchScopesByApplicationInVisionResponse searchScopesByApplicationInVisionWithOptions(SearchScopesByApplicationInVisionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchScopesByApplicationInVision"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchScopesByApplicationInVisionResponse());
    }

    public SearchScopesByApplicationInVisionResponse searchScopesByApplicationInVision(SearchScopesByApplicationInVisionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchScopesByApplicationInVisionWithOptions(request, runtime);
    }

    public SearchTagsResponse searchTagsWithOptions(SearchTagsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchTags"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchTagsResponse());
    }

    public SearchTagsResponse searchTags(SearchTagsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchTagsWithOptions(request, runtime);
    }

    public SearchUserSceneFunctionResponse searchUserSceneFunctionWithOptions(SearchUserSceneFunctionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchUserSceneFunction"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchUserSceneFunctionResponse());
    }

    public SearchUserSceneFunctionResponse searchUserSceneFunction(SearchUserSceneFunctionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchUserSceneFunctionWithOptions(request, runtime);
    }

    public SearchWorkspaceMemberResponse searchWorkspaceMemberWithOptions(SearchWorkspaceMemberRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SearchWorkspaceMember"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SearchWorkspaceMemberResponse());
    }

    public SearchWorkspaceMemberResponse searchWorkspaceMember(SearchWorkspaceMemberRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.searchWorkspaceMemberWithOptions(request, runtime);
    }

    public SecurityCheckResourceResponse securityCheckResourceWithOptions(SecurityCheckResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bid)) {
            query.put("Bid", request.bid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.country)) {
            query.put("Country", request.country);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.gmtWakeup)) {
            query.put("GmtWakeup", request.gmtWakeup);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hid)) {
            query.put("Hid", request.hid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interrupt)) {
            query.put("Interrupt", request.interrupt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.invoker)) {
            query.put("Invoker", request.invoker);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.level)) {
            query.put("Level", request.level);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.message)) {
            query.put("Message", request.message);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pk)) {
            query.put("Pk", request.pk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.prompt)) {
            query.put("Prompt", request.prompt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.success)) {
            query.put("Success", request.success);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskExtraData)) {
            query.put("TaskExtraData", request.taskExtraData);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskIdentifier)) {
            query.put("TaskIdentifier", request.taskIdentifier);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.url)) {
            query.put("Url", request.url);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SecurityCheckResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SecurityCheckResourceResponse());
    }

    public SecurityCheckResourceResponse securityCheckResource(SecurityCheckResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.securityCheckResourceWithOptions(request, runtime);
    }

    public SecurityLogicalDeleteResourceResponse securityLogicalDeleteResourceWithOptions(SecurityLogicalDeleteResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bid)) {
            query.put("Bid", request.bid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.country)) {
            query.put("Country", request.country);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.gmtWakeup)) {
            query.put("GmtWakeup", request.gmtWakeup);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hid)) {
            query.put("Hid", request.hid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interrupt)) {
            query.put("Interrupt", request.interrupt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.invoker)) {
            query.put("Invoker", request.invoker);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.level)) {
            query.put("Level", request.level);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.message)) {
            query.put("Message", request.message);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pk)) {
            query.put("Pk", request.pk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.prompt)) {
            query.put("Prompt", request.prompt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.success)) {
            query.put("Success", request.success);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskExtraData)) {
            query.put("TaskExtraData", request.taskExtraData);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskIdentifier)) {
            query.put("TaskIdentifier", request.taskIdentifier);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.url)) {
            query.put("Url", request.url);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SecurityLogicalDeleteResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SecurityLogicalDeleteResourceResponse());
    }

    public SecurityLogicalDeleteResourceResponse securityLogicalDeleteResource(SecurityLogicalDeleteResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.securityLogicalDeleteResourceWithOptions(request, runtime);
    }

    public SecurityPhysicalDeleteResourceResponse securityPhysicalDeleteResourceWithOptions(SecurityPhysicalDeleteResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bid)) {
            query.put("Bid", request.bid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.country)) {
            query.put("Country", request.country);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.gmtWakeup)) {
            query.put("GmtWakeup", request.gmtWakeup);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hid)) {
            query.put("Hid", request.hid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interrupt)) {
            query.put("Interrupt", request.interrupt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.invoker)) {
            query.put("Invoker", request.invoker);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.level)) {
            query.put("Level", request.level);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.message)) {
            query.put("Message", request.message);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pk)) {
            query.put("Pk", request.pk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.prompt)) {
            query.put("Prompt", request.prompt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.success)) {
            query.put("Success", request.success);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskExtraData)) {
            query.put("TaskExtraData", request.taskExtraData);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskIdentifier)) {
            query.put("TaskIdentifier", request.taskIdentifier);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.url)) {
            query.put("Url", request.url);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SecurityPhysicalDeleteResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SecurityPhysicalDeleteResourceResponse());
    }

    public SecurityPhysicalDeleteResourceResponse securityPhysicalDeleteResource(SecurityPhysicalDeleteResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.securityPhysicalDeleteResourceWithOptions(request, runtime);
    }

    public SentinelAddMonitorDashboardResponse sentinelAddMonitorDashboardWithOptions(SentinelAddMonitorDashboardRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dashboardName)) {
            query.put("DashboardName", request.dashboardName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAddMonitorDashboard"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAddMonitorDashboardResponse());
    }

    public SentinelAddMonitorDashboardResponse sentinelAddMonitorDashboard(SentinelAddMonitorDashboardRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAddMonitorDashboardWithOptions(request, runtime);
    }

    public SentinelAddOrUpdateMonitorDashboardItemsResponse sentinelAddOrUpdateMonitorDashboardItemsWithOptions(SentinelAddOrUpdateMonitorDashboardItemsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dashboardItems)) {
            query.put("DashboardItems", request.dashboardItems);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAddOrUpdateMonitorDashboardItems"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAddOrUpdateMonitorDashboardItemsResponse());
    }

    public SentinelAddOrUpdateMonitorDashboardItemsResponse sentinelAddOrUpdateMonitorDashboardItems(SentinelAddOrUpdateMonitorDashboardItemsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAddOrUpdateMonitorDashboardItemsWithOptions(request, runtime);
    }

    public SentinelAppEventsResponse sentinelAppEventsWithOptions(SentinelAppEventsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.queryLevel)) {
            query.put("QueryLevel", request.queryLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppEvents"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppEventsResponse());
    }

    public SentinelAppEventsResponse sentinelAppEvents(SentinelAppEventsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppEventsWithOptions(request, runtime);
    }

    public SentinelAppEventsByTypeResponse sentinelAppEventsByTypeWithOptions(SentinelAppEventsByTypeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.queryLevel)) {
            query.put("QueryLevel", request.queryLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("eventType", request.eventType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppEventsByType"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppEventsByTypeResponse());
    }

    public SentinelAppEventsByTypeResponse sentinelAppEventsByType(SentinelAppEventsByTypeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppEventsByTypeWithOptions(request, runtime);
    }

    public SentinelAppListByUserIdResponse sentinelAppListByUserIdWithOptions(SentinelAppListByUserIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppListByUserId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppListByUserIdResponse());
    }

    public SentinelAppListByUserIdResponse sentinelAppListByUserId(SentinelAppListByUserIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppListByUserIdWithOptions(request, runtime);
    }

    public SentinelAppListSentinelAppsResponse sentinelAppListSentinelAppsWithOptions(SentinelAppListSentinelAppsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appType)) {
            query.put("AppType", request.appType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minHeartBeat)) {
            query.put("MinHeartBeat", request.minHeartBeat);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppListSentinelApps"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppListSentinelAppsResponse());
    }

    public SentinelAppListSentinelAppsResponse sentinelAppListSentinelApps(SentinelAppListSentinelAppsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppListSentinelAppsWithOptions(request, runtime);
    }

    public SentinelAppMachineListResponse sentinelAppMachineListWithOptions(SentinelAppMachineListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppMachineList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppMachineListResponse());
    }

    public SentinelAppMachineListResponse sentinelAppMachineList(SentinelAppMachineListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppMachineListWithOptions(request, runtime);
    }

    public SentinelAppMachineListByPageResponse sentinelAppMachineListByPageWithOptions(SentinelAppMachineListByPageRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppMachineListByPage"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppMachineListByPageResponse());
    }

    public SentinelAppMachineListByPageResponse sentinelAppMachineListByPage(SentinelAppMachineListByPageRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppMachineListByPageWithOptions(request, runtime);
    }

    public SentinelAppMachineListByUserIdResponse sentinelAppMachineListByUserIdWithOptions(SentinelAppMachineListByUserIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppMachineListByUserId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppMachineListByUserIdResponse());
    }

    public SentinelAppMachineListByUserIdResponse sentinelAppMachineListByUserId(SentinelAppMachineListByUserIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppMachineListByUserIdWithOptions(request, runtime);
    }

    public SentinelAppResourceEventsResponse sentinelAppResourceEventsWithOptions(SentinelAppResourceEventsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppResourceEvents"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppResourceEventsResponse());
    }

    public SentinelAppResourceEventsResponse sentinelAppResourceEvents(SentinelAppResourceEventsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppResourceEventsWithOptions(request, runtime);
    }

    public SentinelAppSummaryMetricListTopNAppsSummaryMetricResponse sentinelAppSummaryMetricListTopNAppsSummaryMetricWithOptions(SentinelAppSummaryMetricListTopNAppsSummaryMetricRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appType)) {
            query.put("AppType", request.appType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.desc)) {
            query.put("Desc", request.desc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minHeartBeat)) {
            query.put("MinHeartBeat", request.minHeartBeat);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppSummaryMetricListTopNAppsSummaryMetric"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppSummaryMetricListTopNAppsSummaryMetricResponse());
    }

    public SentinelAppSummaryMetricListTopNAppsSummaryMetricResponse sentinelAppSummaryMetricListTopNAppsSummaryMetric(SentinelAppSummaryMetricListTopNAppsSummaryMetricRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppSummaryMetricListTopNAppsSummaryMetricWithOptions(request, runtime);
    }

    public SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponse sentinelAppSummaryMetricQuerySummaryMetricsOfAppWithOptions(SentinelAppSummaryMetricQuerySummaryMetricsOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelAppSummaryMetricQuerySummaryMetricsOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponse());
    }

    public SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponse sentinelAppSummaryMetricQuerySummaryMetricsOfApp(SentinelAppSummaryMetricQuerySummaryMetricsOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelAppSummaryMetricQuerySummaryMetricsOfAppWithOptions(request, runtime);
    }

    public SentinelChangeModelResponse sentinelChangeModelWithOptions(SentinelChangeModelRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.newModel)) {
            query.put("NewModel", request.newModel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.oldModel)) {
            query.put("OldModel", request.oldModel);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelChangeModel"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelChangeModelResponse());
    }

    public SentinelChangeModelResponse sentinelChangeModel(SentinelChangeModelRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelChangeModelWithOptions(request, runtime);
    }

    public SentinelCheckSubUserAuthResponse sentinelCheckSubUserAuthWithOptions(SentinelCheckSubUserAuthRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelCheckSubUserAuth"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelCheckSubUserAuthResponse());
    }

    public SentinelCheckSubUserAuthResponse sentinelCheckSubUserAuth(SentinelCheckSubUserAuthRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelCheckSubUserAuthWithOptions(request, runtime);
    }

    public SentinelClusterAssignGetNewAssignPageDataResponse sentinelClusterAssignGetNewAssignPageDataWithOptions(SentinelClusterAssignGetNewAssignPageDataRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterAssignGetNewAssignPageData"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterAssignGetNewAssignPageDataResponse());
    }

    public SentinelClusterAssignGetNewAssignPageDataResponse sentinelClusterAssignGetNewAssignPageData(SentinelClusterAssignGetNewAssignPageDataRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterAssignGetNewAssignPageDataWithOptions(request, runtime);
    }

    public SentinelClusterAssignMapListForAppResponse sentinelClusterAssignMapListForAppWithOptions(SentinelClusterAssignMapListForAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterAssignMapListForApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterAssignMapListForAppResponse());
    }

    public SentinelClusterAssignMapListForAppResponse sentinelClusterAssignMapListForApp(SentinelClusterAssignMapListForAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterAssignMapListForAppWithOptions(request, runtime);
    }

    public SentinelClusterAssignMapNewResponse sentinelClusterAssignMapNewWithOptions(SentinelClusterAssignMapNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clientSet)) {
            query.put("ClientSet", request.clientSet);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxAllowedQps)) {
            query.put("MaxAllowedQps", request.maxAllowedQps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pid)) {
            query.put("Pid", request.pid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serverIp)) {
            query.put("ServerIp", request.serverIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serverMachineId)) {
            query.put("ServerMachineId", request.serverMachineId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serverPort)) {
            query.put("ServerPort", request.serverPort);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterAssignMapNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterAssignMapNewResponse());
    }

    public SentinelClusterAssignMapNewResponse sentinelClusterAssignMapNew(SentinelClusterAssignMapNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterAssignMapNewWithOptions(request, runtime);
    }

    public SentinelClusterAssignMapUnbindSingleResponse sentinelClusterAssignMapUnbindSingleWithOptions(SentinelClusterAssignMapUnbindSingleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assignId)) {
            query.put("AssignId", request.assignId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterAssignMapUnbindSingle"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterAssignMapUnbindSingleResponse());
    }

    public SentinelClusterAssignMapUnbindSingleResponse sentinelClusterAssignMapUnbindSingle(SentinelClusterAssignMapUnbindSingleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterAssignMapUnbindSingleWithOptions(request, runtime);
    }

    public SentinelClusterAssignMapUpdateResponse sentinelClusterAssignMapUpdateWithOptions(SentinelClusterAssignMapUpdateRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assignId)) {
            query.put("AssignId", request.assignId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clientSet)) {
            query.put("ClientSet", request.clientSet);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxAllowedQps)) {
            query.put("MaxAllowedQps", request.maxAllowedQps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serverPort)) {
            query.put("ServerPort", request.serverPort);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterAssignMapUpdate"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterAssignMapUpdateResponse());
    }

    public SentinelClusterAssignMapUpdateResponse sentinelClusterAssignMapUpdate(SentinelClusterAssignMapUpdateRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterAssignMapUpdateWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwDeleteFlowRuleResponse sentinelClusterV2AliyunAgwDeleteFlowRuleWithOptions(SentinelClusterV2AliyunAgwDeleteFlowRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwDeleteFlowRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwDeleteFlowRuleResponse());
    }

    public SentinelClusterV2AliyunAgwDeleteFlowRuleResponse sentinelClusterV2AliyunAgwDeleteFlowRule(SentinelClusterV2AliyunAgwDeleteFlowRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwDeleteFlowRuleWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponse sentinelClusterV2AliyunAgwGetAllFlowRulesForPushWithOptions(SentinelClusterV2AliyunAgwGetAllFlowRulesForPushRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwGetAllFlowRulesForPush"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponse());
    }

    public SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponse sentinelClusterV2AliyunAgwGetAllFlowRulesForPush(SentinelClusterV2AliyunAgwGetAllFlowRulesForPushRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwGetAllFlowRulesForPushWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwGetAssignListResponse sentinelClusterV2AliyunAgwGetAssignListWithOptions(SentinelClusterV2AliyunAgwGetAssignListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwGetAssignList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwGetAssignListResponse());
    }

    public SentinelClusterV2AliyunAgwGetAssignListResponse sentinelClusterV2AliyunAgwGetAssignList(SentinelClusterV2AliyunAgwGetAssignListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwGetAssignListWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwNewFlowRuleResponse sentinelClusterV2AliyunAgwNewFlowRuleWithOptions(SentinelClusterV2AliyunAgwNewFlowRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.apiGroupId)) {
            query.put("ApiGroupId", request.apiGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiId)) {
            query.put("ApiId", request.apiId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiThreshold)) {
            query.put("ApiThreshold", request.apiThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enabled)) {
            query.put("Enabled", request.enabled);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.envId)) {
            query.put("EnvId", request.envId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interval)) {
            query.put("Interval", request.interval);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalUnit)) {
            query.put("IntervalUnit", request.intervalUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwNewFlowRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwNewFlowRuleResponse());
    }

    public SentinelClusterV2AliyunAgwNewFlowRuleResponse sentinelClusterV2AliyunAgwNewFlowRule(SentinelClusterV2AliyunAgwNewFlowRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwNewFlowRuleWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwUpdateFlowRuleResponse sentinelClusterV2AliyunAgwUpdateFlowRuleWithOptions(SentinelClusterV2AliyunAgwUpdateFlowRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.apiGroupId)) {
            query.put("ApiGroupId", request.apiGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiId)) {
            query.put("ApiId", request.apiId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiThreshold)) {
            query.put("ApiThreshold", request.apiThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.envId)) {
            query.put("EnvId", request.envId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interval)) {
            query.put("Interval", request.interval);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalUnit)) {
            query.put("IntervalUnit", request.intervalUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwUpdateFlowRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwUpdateFlowRuleResponse());
    }

    public SentinelClusterV2AliyunAgwUpdateFlowRuleResponse sentinelClusterV2AliyunAgwUpdateFlowRule(SentinelClusterV2AliyunAgwUpdateFlowRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwUpdateFlowRuleWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOffResponse sentinelClusterV2AliyunAgwUpdateRuleOffWithOptions(SentinelClusterV2AliyunAgwUpdateRuleOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwUpdateRuleOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwUpdateRuleOffResponse());
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOffResponse sentinelClusterV2AliyunAgwUpdateRuleOff(SentinelClusterV2AliyunAgwUpdateRuleOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwUpdateRuleOffWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponse sentinelClusterV2AliyunAgwUpdateRuleOffBatchWithOptions(SentinelClusterV2AliyunAgwUpdateRuleOffBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwUpdateRuleOffBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponse());
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponse sentinelClusterV2AliyunAgwUpdateRuleOffBatch(SentinelClusterV2AliyunAgwUpdateRuleOffBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwUpdateRuleOffBatchWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOnResponse sentinelClusterV2AliyunAgwUpdateRuleOnWithOptions(SentinelClusterV2AliyunAgwUpdateRuleOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwUpdateRuleOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwUpdateRuleOnResponse());
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOnResponse sentinelClusterV2AliyunAgwUpdateRuleOn(SentinelClusterV2AliyunAgwUpdateRuleOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwUpdateRuleOnWithOptions(request, runtime);
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponse sentinelClusterV2AliyunAgwUpdateRuleOnBatchWithOptions(SentinelClusterV2AliyunAgwUpdateRuleOnBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2AliyunAgwUpdateRuleOnBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponse());
    }

    public SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponse sentinelClusterV2AliyunAgwUpdateRuleOnBatch(SentinelClusterV2AliyunAgwUpdateRuleOnBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2AliyunAgwUpdateRuleOnBatchWithOptions(request, runtime);
    }

    public SentinelClusterV2UpdateManagedTokenServerResponse sentinelClusterV2UpdateManagedTokenServerWithOptions(SentinelClusterV2UpdateManagedTokenServerRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.hbTimestamp)) {
            query.put("HbTimestamp", request.hbTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.privateIp)) {
            query.put("PrivateIp", request.privateIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.publicIp)) {
            query.put("PublicIp", request.publicIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serverHost)) {
            query.put("ServerHost", request.serverHost);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serverPort)) {
            query.put("ServerPort", request.serverPort);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serverType)) {
            query.put("ServerType", request.serverType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelClusterV2UpdateManagedTokenServer"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelClusterV2UpdateManagedTokenServerResponse());
    }

    public SentinelClusterV2UpdateManagedTokenServerResponse sentinelClusterV2UpdateManagedTokenServer(SentinelClusterV2UpdateManagedTokenServerRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelClusterV2UpdateManagedTokenServerWithOptions(request, runtime);
    }

    public SentinelCreateMultiModelResponse sentinelCreateMultiModelWithOptions(SentinelCreateMultiModelRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.modelName)) {
            query.put("ModelName", request.modelName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelCreateMultiModel"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelCreateMultiModelResponse());
    }

    public SentinelCreateMultiModelResponse sentinelCreateMultiModel(SentinelCreateMultiModelRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelCreateMultiModelWithOptions(request, runtime);
    }

    public SentinelDegradeRuleDeleteResponse sentinelDegradeRuleDeleteWithOptions(SentinelDegradeRuleDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleDeleteResponse());
    }

    public SentinelDegradeRuleDeleteResponse sentinelDegradeRuleDelete(SentinelDegradeRuleDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleDeleteWithOptions(request, runtime);
    }

    public SentinelDegradeRuleEditResponse sentinelDegradeRuleEditWithOptions(SentinelDegradeRuleEditRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenBaseAmountPerStep)) {
            query.put("HalfOpenBaseAmountPerStep", request.halfOpenBaseAmountPerStep);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenRecoveryStepNum)) {
            query.put("HalfOpenRecoveryStepNum", request.halfOpenRecoveryStepNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minRequestAmount)) {
            query.put("MinRequestAmount", request.minRequestAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.slowRatioThreshold)) {
            query.put("SlowRatioThreshold", request.slowRatioThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statIntervalMs)) {
            query.put("StatIntervalMs", request.statIntervalMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeWindow)) {
            query.put("TimeWindow", request.timeWindow);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleEdit"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleEditResponse());
    }

    public SentinelDegradeRuleEditResponse sentinelDegradeRuleEdit(SentinelDegradeRuleEditRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleEditWithOptions(request, runtime);
    }

    public SentinelDegradeRuleListAllResponse sentinelDegradeRuleListAllWithOptions(SentinelDegradeRuleListAllRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleListAll"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleListAllResponse());
    }

    public SentinelDegradeRuleListAllResponse sentinelDegradeRuleListAll(SentinelDegradeRuleListAllRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleListAllWithOptions(request, runtime);
    }

    public SentinelDegradeRuleListByPageResponse sentinelDegradeRuleListByPageWithOptions(SentinelDegradeRuleListByPageRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleListByPage"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleListByPageResponse());
    }

    public SentinelDegradeRuleListByPageResponse sentinelDegradeRuleListByPage(SentinelDegradeRuleListByPageRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleListByPageWithOptions(request, runtime);
    }

    public SentinelDegradeRuleListRulesOfResourceResponse sentinelDegradeRuleListRulesOfResourceWithOptions(SentinelDegradeRuleListRulesOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleListRulesOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleListRulesOfResourceResponse());
    }

    public SentinelDegradeRuleListRulesOfResourceResponse sentinelDegradeRuleListRulesOfResource(SentinelDegradeRuleListRulesOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleListRulesOfResourceWithOptions(request, runtime);
    }

    public SentinelDegradeRuleNewResponse sentinelDegradeRuleNewWithOptions(SentinelDegradeRuleNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenBaseAmountPerStep)) {
            query.put("HalfOpenBaseAmountPerStep", request.halfOpenBaseAmountPerStep);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenRecoveryStepNum)) {
            query.put("HalfOpenRecoveryStepNum", request.halfOpenRecoveryStepNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minRequestAmount)) {
            query.put("MinRequestAmount", request.minRequestAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.slowRatioThreshold)) {
            query.put("SlowRatioThreshold", request.slowRatioThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statIntervalMs)) {
            query.put("StatIntervalMs", request.statIntervalMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeWindow)) {
            query.put("TimeWindow", request.timeWindow);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleNewResponse());
    }

    public SentinelDegradeRuleNewResponse sentinelDegradeRuleNew(SentinelDegradeRuleNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleNewWithOptions(request, runtime);
    }

    public SentinelDegradeRuleOffResponse sentinelDegradeRuleOffWithOptions(SentinelDegradeRuleOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleOffResponse());
    }

    public SentinelDegradeRuleOffResponse sentinelDegradeRuleOff(SentinelDegradeRuleOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleOffWithOptions(request, runtime);
    }

    public SentinelDegradeRuleOffBatchResponse sentinelDegradeRuleOffBatchWithOptions(SentinelDegradeRuleOffBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleOffBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleOffBatchResponse());
    }

    public SentinelDegradeRuleOffBatchResponse sentinelDegradeRuleOffBatch(SentinelDegradeRuleOffBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleOffBatchWithOptions(request, runtime);
    }

    public SentinelDegradeRuleOnResponse sentinelDegradeRuleOnWithOptions(SentinelDegradeRuleOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleOnResponse());
    }

    public SentinelDegradeRuleOnResponse sentinelDegradeRuleOn(SentinelDegradeRuleOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleOnWithOptions(request, runtime);
    }

    public SentinelDegradeRuleOnBatchResponse sentinelDegradeRuleOnBatchWithOptions(SentinelDegradeRuleOnBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleOnBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleOnBatchResponse());
    }

    public SentinelDegradeRuleOnBatchResponse sentinelDegradeRuleOnBatch(SentinelDegradeRuleOnBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleOnBatchWithOptions(request, runtime);
    }

    public SentinelDegradeRuleOverviewResponse sentinelDegradeRuleOverviewWithOptions(SentinelDegradeRuleOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenBaseAmountPerStep)) {
            query.put("HalfOpenBaseAmountPerStep", request.halfOpenBaseAmountPerStep);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.halfOpenRecoveryStepNum)) {
            query.put("HalfOpenRecoveryStepNum", request.halfOpenRecoveryStepNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minRequestAmount)) {
            query.put("MinRequestAmount", request.minRequestAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.slowRatioThreshold)) {
            query.put("SlowRatioThreshold", request.slowRatioThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statIntervalMs)) {
            query.put("StatIntervalMs", request.statIntervalMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeWindow)) {
            query.put("TimeWindow", request.timeWindow);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDegradeRuleOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDegradeRuleOverviewResponse());
    }

    public SentinelDegradeRuleOverviewResponse sentinelDegradeRuleOverview(SentinelDegradeRuleOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDegradeRuleOverviewWithOptions(request, runtime);
    }

    public SentinelDeleteMonitorDashboardResponse sentinelDeleteMonitorDashboardWithOptions(SentinelDeleteMonitorDashboardRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dashboardId)) {
            query.put("DashboardId", request.dashboardId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDeleteMonitorDashboard"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDeleteMonitorDashboardResponse());
    }

    public SentinelDeleteMonitorDashboardResponse sentinelDeleteMonitorDashboard(SentinelDeleteMonitorDashboardRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDeleteMonitorDashboardWithOptions(request, runtime);
    }

    public SentinelDeleteMonitorDashboardItemsResponse sentinelDeleteMonitorDashboardItemsWithOptions(SentinelDeleteMonitorDashboardItemsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dashboardItemIds)) {
            query.put("DashboardItemIds", request.dashboardItemIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDeleteMonitorDashboardItems"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDeleteMonitorDashboardItemsResponse());
    }

    public SentinelDeleteMonitorDashboardItemsResponse sentinelDeleteMonitorDashboardItems(SentinelDeleteMonitorDashboardItemsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDeleteMonitorDashboardItemsWithOptions(request, runtime);
    }

    public SentinelDeleteMultiModelResponse sentinelDeleteMultiModelWithOptions(SentinelDeleteMultiModelRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelDeleteMultiModel"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelDeleteMultiModelResponse());
    }

    public SentinelDeleteMultiModelResponse sentinelDeleteMultiModel(SentinelDeleteMultiModelRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelDeleteMultiModelWithOptions(request, runtime);
    }

    public SentinelEventsCountResponse sentinelEventsCountWithOptions(SentinelEventsCountRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.beginTime)) {
            query.put("BeginTime", request.beginTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelEventsCount"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelEventsCountResponse());
    }

    public SentinelEventsCountResponse sentinelEventsCount(SentinelEventsCountRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelEventsCountWithOptions(request, runtime);
    }

    public SentinelFavoriteAddFavoriteAppResponse sentinelFavoriteAddFavoriteAppWithOptions(SentinelFavoriteAddFavoriteAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appType)) {
            query.put("AppType", request.appType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFavoriteAddFavoriteApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFavoriteAddFavoriteAppResponse());
    }

    public SentinelFavoriteAddFavoriteAppResponse sentinelFavoriteAddFavoriteApp(SentinelFavoriteAddFavoriteAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFavoriteAddFavoriteAppWithOptions(request, runtime);
    }

    public SentinelFavoriteAddFavoriteResourceResponse sentinelFavoriteAddFavoriteResourceWithOptions(SentinelFavoriteAddFavoriteResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFavoriteAddFavoriteResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFavoriteAddFavoriteResourceResponse());
    }

    public SentinelFavoriteAddFavoriteResourceResponse sentinelFavoriteAddFavoriteResource(SentinelFavoriteAddFavoriteResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFavoriteAddFavoriteResourceWithOptions(request, runtime);
    }

    public SentinelFavoriteDeleteFavoriteAppResponse sentinelFavoriteDeleteFavoriteAppWithOptions(SentinelFavoriteDeleteFavoriteAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appType)) {
            query.put("AppType", request.appType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFavoriteDeleteFavoriteApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFavoriteDeleteFavoriteAppResponse());
    }

    public SentinelFavoriteDeleteFavoriteAppResponse sentinelFavoriteDeleteFavoriteApp(SentinelFavoriteDeleteFavoriteAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFavoriteDeleteFavoriteAppWithOptions(request, runtime);
    }

    public SentinelFavoriteDeleteFavoriteResourceResponse sentinelFavoriteDeleteFavoriteResourceWithOptions(SentinelFavoriteDeleteFavoriteResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFavoriteDeleteFavoriteResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFavoriteDeleteFavoriteResourceResponse());
    }

    public SentinelFavoriteDeleteFavoriteResourceResponse sentinelFavoriteDeleteFavoriteResource(SentinelFavoriteDeleteFavoriteResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFavoriteDeleteFavoriteResourceWithOptions(request, runtime);
    }

    public SentinelFavoriteListFavoriteAppsResponse sentinelFavoriteListFavoriteAppsWithOptions(SentinelFavoriteListFavoriteAppsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appTypes)) {
            query.put("AppTypes", request.appTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFavoriteListFavoriteApps"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFavoriteListFavoriteAppsResponse());
    }

    public SentinelFavoriteListFavoriteAppsResponse sentinelFavoriteListFavoriteApps(SentinelFavoriteListFavoriteAppsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFavoriteListFavoriteAppsWithOptions(request, runtime);
    }

    public SentinelFavoriteListFavoriteResourcesResponse sentinelFavoriteListFavoriteResourcesWithOptions(SentinelFavoriteListFavoriteResourcesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFavoriteListFavoriteResources"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFavoriteListFavoriteResourcesResponse());
    }

    public SentinelFavoriteListFavoriteResourcesResponse sentinelFavoriteListFavoriteResources(SentinelFavoriteListFavoriteResourcesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFavoriteListFavoriteResourcesWithOptions(request, runtime);
    }

    public SentinelFlowRuleDeleteResponse sentinelFlowRuleDeleteWithOptions(SentinelFlowRuleDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleDeleteResponse());
    }

    public SentinelFlowRuleDeleteResponse sentinelFlowRuleDelete(SentinelFlowRuleDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleDeleteWithOptions(request, runtime);
    }

    public SentinelFlowRuleEditResponse sentinelFlowRuleEditWithOptions(SentinelFlowRuleEditRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.autoAdjustFallbackThresholdEnabled)) {
            query.put("AutoAdjustFallbackThresholdEnabled", request.autoAdjustFallbackThresholdEnabled);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterFallbackThreshold)) {
            query.put("ClusterFallbackThreshold", request.clusterFallbackThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterMode)) {
            query.put("ClusterMode", request.clusterMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterRequestMode)) {
            query.put("ClusterRequestMode", request.clusterRequestMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterThresholdType)) {
            query.put("ClusterThresholdType", request.clusterThresholdType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.estimatedMaxClusterQps)) {
            query.put("EstimatedMaxClusterQps", request.estimatedMaxClusterQps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackThresholdAdjustMargin)) {
            query.put("FallbackThresholdAdjustMargin", request.fallbackThresholdAdjustMargin);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackToLocalWhenFail)) {
            query.put("FallbackToLocalWhenFail", request.fallbackToLocalWhenFail);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.limitApp)) {
            query.put("LimitApp", request.limitApp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeMs)) {
            query.put("MaxQueueingTimeMs", request.maxQueueingTimeMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.refResource)) {
            query.put("RefResource", request.refResource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sampleCount)) {
            query.put("SampleCount", request.sampleCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategy)) {
            query.put("Strategy", request.strategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.thresholdMode)) {
            query.put("ThresholdMode", request.thresholdMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.warmUpPeriodSec)) {
            query.put("WarmUpPeriodSec", request.warmUpPeriodSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.windowIntervalMs)) {
            query.put("WindowIntervalMs", request.windowIntervalMs);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleEdit"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleEditResponse());
    }

    public SentinelFlowRuleEditResponse sentinelFlowRuleEdit(SentinelFlowRuleEditRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleEditWithOptions(request, runtime);
    }

    public SentinelFlowRuleListAllResponse sentinelFlowRuleListAllWithOptions(SentinelFlowRuleListAllRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleListAll"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleListAllResponse());
    }

    public SentinelFlowRuleListAllResponse sentinelFlowRuleListAll(SentinelFlowRuleListAllRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleListAllWithOptions(request, runtime);
    }

    public SentinelFlowRuleListByPageResponse sentinelFlowRuleListByPageWithOptions(SentinelFlowRuleListByPageRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleListByPage"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleListByPageResponse());
    }

    public SentinelFlowRuleListByPageResponse sentinelFlowRuleListByPage(SentinelFlowRuleListByPageRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleListByPageWithOptions(request, runtime);
    }

    public SentinelFlowRuleListRulesOfResourceResponse sentinelFlowRuleListRulesOfResourceWithOptions(SentinelFlowRuleListRulesOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleListRulesOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleListRulesOfResourceResponse());
    }

    public SentinelFlowRuleListRulesOfResourceResponse sentinelFlowRuleListRulesOfResource(SentinelFlowRuleListRulesOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleListRulesOfResourceWithOptions(request, runtime);
    }

    public SentinelFlowRuleNewResponse sentinelFlowRuleNewWithOptions(SentinelFlowRuleNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.autoAdjustFallbackThresholdEnabled)) {
            query.put("AutoAdjustFallbackThresholdEnabled", request.autoAdjustFallbackThresholdEnabled);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterFallbackThreshold)) {
            query.put("ClusterFallbackThreshold", request.clusterFallbackThreshold);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterMode)) {
            query.put("ClusterMode", request.clusterMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterRequestMode)) {
            query.put("ClusterRequestMode", request.clusterRequestMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterThresholdType)) {
            query.put("ClusterThresholdType", request.clusterThresholdType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.estimatedMaxClusterQps)) {
            query.put("EstimatedMaxClusterQps", request.estimatedMaxClusterQps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackThresholdAdjustMargin)) {
            query.put("FallbackThresholdAdjustMargin", request.fallbackThresholdAdjustMargin);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackToLocalWhenFail)) {
            query.put("FallbackToLocalWhenFail", request.fallbackToLocalWhenFail);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.limitApp)) {
            query.put("LimitApp", request.limitApp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeMs)) {
            query.put("MaxQueueingTimeMs", request.maxQueueingTimeMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.refResource)) {
            query.put("RefResource", request.refResource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sampleCount)) {
            query.put("SampleCount", request.sampleCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategy)) {
            query.put("Strategy", request.strategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.thresholdMode)) {
            query.put("ThresholdMode", request.thresholdMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.warmUpPeriodSec)) {
            query.put("WarmUpPeriodSec", request.warmUpPeriodSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.windowIntervalMs)) {
            query.put("WindowIntervalMs", request.windowIntervalMs);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleNewResponse());
    }

    public SentinelFlowRuleNewResponse sentinelFlowRuleNew(SentinelFlowRuleNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleNewWithOptions(request, runtime);
    }

    public SentinelFlowRuleOffResponse sentinelFlowRuleOffWithOptions(SentinelFlowRuleOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleOffResponse());
    }

    public SentinelFlowRuleOffResponse sentinelFlowRuleOff(SentinelFlowRuleOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleOffWithOptions(request, runtime);
    }

    public SentinelFlowRuleOffBatchResponse sentinelFlowRuleOffBatchWithOptions(SentinelFlowRuleOffBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleOffBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleOffBatchResponse());
    }

    public SentinelFlowRuleOffBatchResponse sentinelFlowRuleOffBatch(SentinelFlowRuleOffBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleOffBatchWithOptions(request, runtime);
    }

    public SentinelFlowRuleOnResponse sentinelFlowRuleOnWithOptions(SentinelFlowRuleOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleOnResponse());
    }

    public SentinelFlowRuleOnResponse sentinelFlowRuleOn(SentinelFlowRuleOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleOnWithOptions(request, runtime);
    }

    public SentinelFlowRuleOnBatchResponse sentinelFlowRuleOnBatchWithOptions(SentinelFlowRuleOnBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelFlowRuleOnBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelFlowRuleOnBatchResponse());
    }

    public SentinelFlowRuleOnBatchResponse sentinelFlowRuleOnBatch(SentinelFlowRuleOnBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelFlowRuleOnBatchWithOptions(request, runtime);
    }

    public SentinelGatewayApiDefinitionDeleteResponse sentinelGatewayApiDefinitionDeleteWithOptions(SentinelGatewayApiDefinitionDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayApiDefinitionDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayApiDefinitionDeleteResponse());
    }

    public SentinelGatewayApiDefinitionDeleteResponse sentinelGatewayApiDefinitionDelete(SentinelGatewayApiDefinitionDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayApiDefinitionDeleteWithOptions(request, runtime);
    }

    public SentinelGatewayApiDefinitionNewResponse sentinelGatewayApiDefinitionNewWithOptions(SentinelGatewayApiDefinitionNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiItems)) {
            query.put("ApiItems", request.apiItems);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiName)) {
            query.put("ApiName", request.apiName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayApiDefinitionNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayApiDefinitionNewResponse());
    }

    public SentinelGatewayApiDefinitionNewResponse sentinelGatewayApiDefinitionNew(SentinelGatewayApiDefinitionNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayApiDefinitionNewWithOptions(request, runtime);
    }

    public SentinelGatewayApiDefinitionUpdateResponse sentinelGatewayApiDefinitionUpdateWithOptions(SentinelGatewayApiDefinitionUpdateRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiItems)) {
            query.put("ApiItems", request.apiItems);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayApiDefinitionUpdate"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayApiDefinitionUpdateResponse());
    }

    public SentinelGatewayApiDefinitionUpdateResponse sentinelGatewayApiDefinitionUpdate(SentinelGatewayApiDefinitionUpdateRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayApiDefinitionUpdateWithOptions(request, runtime);
    }

    public SentinelGatewayApiDefinitionsListForAppResponse sentinelGatewayApiDefinitionsListForAppWithOptions(SentinelGatewayApiDefinitionsListForAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayApiDefinitionsListForApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayApiDefinitionsListForAppResponse());
    }

    public SentinelGatewayApiDefinitionsListForAppResponse sentinelGatewayApiDefinitionsListForApp(SentinelGatewayApiDefinitionsListForAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayApiDefinitionsListForAppWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleDeleteResponse sentinelGatewayFlowRuleDeleteWithOptions(SentinelGatewayFlowRuleDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleDeleteResponse());
    }

    public SentinelGatewayFlowRuleDeleteResponse sentinelGatewayFlowRuleDelete(SentinelGatewayFlowRuleDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleDeleteWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleEditResponse sentinelGatewayFlowRuleEditWithOptions(SentinelGatewayFlowRuleEditRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.burst)) {
            query.put("Burst", request.burst);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hasParam)) {
            query.put("HasParam", request.hasParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalSec)) {
            query.put("IntervalSec", request.intervalSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.matchStrategy)) {
            query.put("MatchStrategy", request.matchStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeoutMs)) {
            query.put("MaxQueueingTimeoutMs", request.maxQueueingTimeoutMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parseStrategy)) {
            query.put("ParseStrategy", request.parseStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pattern)) {
            query.put("Pattern", request.pattern);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceMode)) {
            query.put("ResourceMode", request.resourceMode);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleEdit"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleEditResponse());
    }

    public SentinelGatewayFlowRuleEditResponse sentinelGatewayFlowRuleEdit(SentinelGatewayFlowRuleEditRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleEditWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleListAllResponse sentinelGatewayFlowRuleListAllWithOptions(SentinelGatewayFlowRuleListAllRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleListAll"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleListAllResponse());
    }

    public SentinelGatewayFlowRuleListAllResponse sentinelGatewayFlowRuleListAll(SentinelGatewayFlowRuleListAllRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleListAllWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleListRulesOfResourceResponse sentinelGatewayFlowRuleListRulesOfResourceWithOptions(SentinelGatewayFlowRuleListRulesOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleListRulesOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleListRulesOfResourceResponse());
    }

    public SentinelGatewayFlowRuleListRulesOfResourceResponse sentinelGatewayFlowRuleListRulesOfResource(SentinelGatewayFlowRuleListRulesOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleListRulesOfResourceWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleNewResponse sentinelGatewayFlowRuleNewWithOptions(SentinelGatewayFlowRuleNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.burst)) {
            query.put("Burst", request.burst);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hasParam)) {
            query.put("HasParam", request.hasParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalSec)) {
            query.put("IntervalSec", request.intervalSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.matchStrategy)) {
            query.put("MatchStrategy", request.matchStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeoutMs)) {
            query.put("MaxQueueingTimeoutMs", request.maxQueueingTimeoutMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parseStrategy)) {
            query.put("ParseStrategy", request.parseStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pattern)) {
            query.put("Pattern", request.pattern);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceMode)) {
            query.put("ResourceMode", request.resourceMode);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleNewResponse());
    }

    public SentinelGatewayFlowRuleNewResponse sentinelGatewayFlowRuleNew(SentinelGatewayFlowRuleNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleNewWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleOffResponse sentinelGatewayFlowRuleOffWithOptions(SentinelGatewayFlowRuleOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleOffResponse());
    }

    public SentinelGatewayFlowRuleOffResponse sentinelGatewayFlowRuleOff(SentinelGatewayFlowRuleOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleOffWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleOffBatchResponse sentinelGatewayFlowRuleOffBatchWithOptions(SentinelGatewayFlowRuleOffBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleOffBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleOffBatchResponse());
    }

    public SentinelGatewayFlowRuleOffBatchResponse sentinelGatewayFlowRuleOffBatch(SentinelGatewayFlowRuleOffBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleOffBatchWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleOnResponse sentinelGatewayFlowRuleOnWithOptions(SentinelGatewayFlowRuleOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleOnResponse());
    }

    public SentinelGatewayFlowRuleOnResponse sentinelGatewayFlowRuleOn(SentinelGatewayFlowRuleOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleOnWithOptions(request, runtime);
    }

    public SentinelGatewayFlowRuleOnBatchResponse sentinelGatewayFlowRuleOnBatchWithOptions(SentinelGatewayFlowRuleOnBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGatewayFlowRuleOnBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGatewayFlowRuleOnBatchResponse());
    }

    public SentinelGatewayFlowRuleOnBatchResponse sentinelGatewayFlowRuleOnBatch(SentinelGatewayFlowRuleOnBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGatewayFlowRuleOnBatchWithOptions(request, runtime);
    }

    public SentinelGetAdapterSettingOfAppResponse sentinelGetAdapterSettingOfAppWithOptions(SentinelGetAdapterSettingOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetAdapterSettingOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetAdapterSettingOfAppResponse());
    }

    public SentinelGetAdapterSettingOfAppResponse sentinelGetAdapterSettingOfApp(SentinelGetAdapterSettingOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetAdapterSettingOfAppWithOptions(request, runtime);
    }

    public SentinelGetClusterClientDetailListForAssignResponse sentinelGetClusterClientDetailListForAssignWithOptions(SentinelGetClusterClientDetailListForAssignRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assignId)) {
            query.put("AssignId", request.assignId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetClusterClientDetailListForAssign"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetClusterClientDetailListForAssignResponse());
    }

    public SentinelGetClusterClientDetailListForAssignResponse sentinelGetClusterClientDetailListForAssign(SentinelGetClusterClientDetailListForAssignRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetClusterClientDetailListForAssignWithOptions(request, runtime);
    }

    public SentinelGetClusterServerDetailForAssignResponse sentinelGetClusterServerDetailForAssignWithOptions(SentinelGetClusterServerDetailForAssignRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assignId)) {
            query.put("AssignId", request.assignId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetClusterServerDetailForAssign"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetClusterServerDetailForAssignResponse());
    }

    public SentinelGetClusterServerDetailForAssignResponse sentinelGetClusterServerDetailForAssign(SentinelGetClusterServerDetailForAssignRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetClusterServerDetailForAssignWithOptions(request, runtime);
    }

    public SentinelGetGeneralSettingOfAppResponse sentinelGetGeneralSettingOfAppWithOptions(SentinelGetGeneralSettingOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetGeneralSettingOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetGeneralSettingOfAppResponse());
    }

    public SentinelGetGeneralSettingOfAppResponse sentinelGetGeneralSettingOfApp(SentinelGetGeneralSettingOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetGeneralSettingOfAppWithOptions(request, runtime);
    }

    public SentinelGetModelDetailResponse sentinelGetModelDetailWithOptions(SentinelGetModelDetailRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetModelDetail"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetModelDetailResponse());
    }

    public SentinelGetModelDetailResponse sentinelGetModelDetail(SentinelGetModelDetailRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetModelDetailWithOptions(request, runtime);
    }

    public SentinelGetModelListResponse sentinelGetModelListWithOptions(SentinelGetModelListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetModelList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetModelListResponse());
    }

    public SentinelGetModelListResponse sentinelGetModelList(SentinelGetModelListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetModelListWithOptions(request, runtime);
    }

    public SentinelGetMonitorDashboardItemsResponse sentinelGetMonitorDashboardItemsWithOptions(SentinelGetMonitorDashboardItemsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dashboardId)) {
            query.put("DashboardId", request.dashboardId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetMonitorDashboardItems"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetMonitorDashboardItemsResponse());
    }

    public SentinelGetMonitorDashboardItemsResponse sentinelGetMonitorDashboardItems(SentinelGetMonitorDashboardItemsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetMonitorDashboardItemsWithOptions(request, runtime);
    }

    public SentinelGetMonitorDashboardsResponse sentinelGetMonitorDashboardsWithOptions(SentinelGetMonitorDashboardsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetMonitorDashboards"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetMonitorDashboardsResponse());
    }

    public SentinelGetMonitorDashboardsResponse sentinelGetMonitorDashboards(SentinelGetMonitorDashboardsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetMonitorDashboardsWithOptions(request, runtime);
    }

    public SentinelGetResourceFallbackResponse sentinelGetResourceFallbackWithOptions(SentinelGetResourceFallbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.blockType)) {
            query.put("BlockType", request.blockType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelGetResourceFallback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelGetResourceFallbackResponse());
    }

    public SentinelGetResourceFallbackResponse sentinelGetResourceFallback(SentinelGetResourceFallbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelGetResourceFallbackWithOptions(request, runtime);
    }

    public SentinelHotParamRuleDeleteResponse sentinelHotParamRuleDeleteWithOptions(SentinelHotParamRuleDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHotParamRuleDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHotParamRuleDeleteResponse());
    }

    public SentinelHotParamRuleDeleteResponse sentinelHotParamRuleDelete(SentinelHotParamRuleDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHotParamRuleDeleteWithOptions(request, runtime);
    }

    public SentinelHotParamRuleOffResponse sentinelHotParamRuleOffWithOptions(SentinelHotParamRuleOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHotParamRuleOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHotParamRuleOffResponse());
    }

    public SentinelHotParamRuleOffResponse sentinelHotParamRuleOff(SentinelHotParamRuleOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHotParamRuleOffWithOptions(request, runtime);
    }

    public SentinelHotParamRuleOffBatchResponse sentinelHotParamRuleOffBatchWithOptions(SentinelHotParamRuleOffBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHotParamRuleOffBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHotParamRuleOffBatchResponse());
    }

    public SentinelHotParamRuleOffBatchResponse sentinelHotParamRuleOffBatch(SentinelHotParamRuleOffBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHotParamRuleOffBatchWithOptions(request, runtime);
    }

    public SentinelHotParamRuleOnResponse sentinelHotParamRuleOnWithOptions(SentinelHotParamRuleOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHotParamRuleOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHotParamRuleOnResponse());
    }

    public SentinelHotParamRuleOnResponse sentinelHotParamRuleOn(SentinelHotParamRuleOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHotParamRuleOnWithOptions(request, runtime);
    }

    public SentinelHotParamRuleOnBatchResponse sentinelHotParamRuleOnBatchWithOptions(SentinelHotParamRuleOnBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHotParamRuleOnBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHotParamRuleOnBatchResponse());
    }

    public SentinelHotParamRuleOnBatchResponse sentinelHotParamRuleOnBatch(SentinelHotParamRuleOnBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHotParamRuleOnBatchWithOptions(request, runtime);
    }

    public SentinelHttpApiMatchDeleteResponse sentinelHttpApiMatchDeleteWithOptions(SentinelHttpApiMatchDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHttpApiMatchDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHttpApiMatchDeleteResponse());
    }

    public SentinelHttpApiMatchDeleteResponse sentinelHttpApiMatchDelete(SentinelHttpApiMatchDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHttpApiMatchDeleteWithOptions(request, runtime);
    }

    public SentinelHttpApiMatchNewResponse sentinelHttpApiMatchNewWithOptions(SentinelHttpApiMatchNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.httpApiMatch)) {
            query.put("HttpApiMatch", request.httpApiMatch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHttpApiMatchNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHttpApiMatchNewResponse());
    }

    public SentinelHttpApiMatchNewResponse sentinelHttpApiMatchNew(SentinelHttpApiMatchNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHttpApiMatchNewWithOptions(request, runtime);
    }

    public SentinelHttpApiMatchQueryForAppResponse sentinelHttpApiMatchQueryForAppWithOptions(SentinelHttpApiMatchQueryForAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHttpApiMatchQueryForApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHttpApiMatchQueryForAppResponse());
    }

    public SentinelHttpApiMatchQueryForAppResponse sentinelHttpApiMatchQueryForApp(SentinelHttpApiMatchQueryForAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHttpApiMatchQueryForAppWithOptions(request, runtime);
    }

    public SentinelHttpApiMatchUpdateResponse sentinelHttpApiMatchUpdateWithOptions(SentinelHttpApiMatchUpdateRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.httpApiMatch)) {
            query.put("HttpApiMatch", request.httpApiMatch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHttpApiMatchUpdate"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHttpApiMatchUpdateResponse());
    }

    public SentinelHttpApiMatchUpdateResponse sentinelHttpApiMatchUpdate(SentinelHttpApiMatchUpdateRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHttpApiMatchUpdateWithOptions(request, runtime);
    }

    public SentinelHttpApiMatchUpdateDefaultResponse sentinelHttpApiMatchUpdateDefaultWithOptions(SentinelHttpApiMatchUpdateDefaultRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategy)) {
            query.put("Strategy", request.strategy);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelHttpApiMatchUpdateDefault"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelHttpApiMatchUpdateDefaultResponse());
    }

    public SentinelHttpApiMatchUpdateDefaultResponse sentinelHttpApiMatchUpdateDefault(SentinelHttpApiMatchUpdateDefaultRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelHttpApiMatchUpdateDefaultWithOptions(request, runtime);
    }

    public SentinelListAppsOfTypesResponse sentinelListAppsOfTypesWithOptions(SentinelListAppsOfTypesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appTypes)) {
            query.put("AppTypes", request.appTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minHeartBeat)) {
            query.put("MinHeartBeat", request.minHeartBeat);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelListAppsOfTypes"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelListAppsOfTypesResponse());
    }

    public SentinelListAppsOfTypesResponse sentinelListAppsOfTypes(SentinelListAppsOfTypesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelListAppsOfTypesWithOptions(request, runtime);
    }

    public SentinelListTopNAppsSummaryMetricOfAppTypeResponse sentinelListTopNAppsSummaryMetricOfAppTypeWithOptions(SentinelListTopNAppsSummaryMetricOfAppTypeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appTypes)) {
            query.put("AppTypes", request.appTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.desc)) {
            query.put("Desc", request.desc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.minHeartBeat)) {
            query.put("MinHeartBeat", request.minHeartBeat);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelListTopNAppsSummaryMetricOfAppType"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelListTopNAppsSummaryMetricOfAppTypeResponse());
    }

    public SentinelListTopNAppsSummaryMetricOfAppTypeResponse sentinelListTopNAppsSummaryMetricOfAppType(SentinelListTopNAppsSummaryMetricOfAppTypeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelListTopNAppsSummaryMetricOfAppTypeWithOptions(request, runtime);
    }

    public SentinelMacTopNResourcesResponse sentinelMacTopNResourcesWithOptions(SentinelMacTopNResourcesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ahasTimestamp)) {
            query.put("AhasTimestamp", request.ahasTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.desc)) {
            query.put("Desc", request.desc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceType)) {
            query.put("ResourceType", request.resourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMacTopNResources"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMacTopNResourcesResponse());
    }

    public SentinelMacTopNResourcesResponse sentinelMacTopNResources(SentinelMacTopNResourcesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMacTopNResourcesWithOptions(request, runtime);
    }

    public SentinelMachineSecurityInfoListResponse sentinelMachineSecurityInfoListWithOptions(SentinelMachineSecurityInfoListRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMachineSecurityInfoList"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMachineSecurityInfoListResponse());
    }

    public SentinelMachineSecurityInfoListResponse sentinelMachineSecurityInfoList(SentinelMachineSecurityInfoListRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMachineSecurityInfoListWithOptions(request, runtime);
    }

    public SentinelMetricListTopNResourceNameResponse sentinelMetricListTopNResourceNameWithOptions(SentinelMetricListTopNResourceNameRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ahasTimestamp)) {
            query.put("AhasTimestamp", request.ahasTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.desc)) {
            query.put("Desc", request.desc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceType)) {
            query.put("ResourceType", request.resourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.trafficType)) {
            query.put("TrafficType", request.trafficType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMetricListTopNResourceName"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMetricListTopNResourceNameResponse());
    }

    public SentinelMetricListTopNResourceNameResponse sentinelMetricListTopNResourceName(SentinelMetricListTopNResourceNameRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMetricListTopNResourceNameWithOptions(request, runtime);
    }

    public SentinelMetricListTopNResourcesMetricResponse sentinelMetricListTopNResourcesMetricWithOptions(SentinelMetricListTopNResourcesMetricRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.desc)) {
            query.put("Desc", request.desc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricType)) {
            query.put("MetricType", request.metricType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMetricListTopNResourcesMetric"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMetricListTopNResourcesMetricResponse());
    }

    public SentinelMetricListTopNResourcesMetricResponse sentinelMetricListTopNResourcesMetric(SentinelMetricListTopNResourcesMetricRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMetricListTopNResourcesMetricWithOptions(request, runtime);
    }

    public SentinelMetricListTopNResourcesMetricSimpleResponse sentinelMetricListTopNResourcesMetricSimpleWithOptions(SentinelMetricListTopNResourcesMetricSimpleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ahasTimestamp)) {
            query.put("AhasTimestamp", request.ahasTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMetricListTopNResourcesMetricSimple"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMetricListTopNResourcesMetricSimpleResponse());
    }

    public SentinelMetricListTopNResourcesMetricSimpleResponse sentinelMetricListTopNResourcesMetricSimple(SentinelMetricListTopNResourcesMetricSimpleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMetricListTopNResourcesMetricSimpleWithOptions(request, runtime);
    }

    public SentinelMetricQueryMachineResourceMetricResponse sentinelMetricQueryMachineResourceMetricWithOptions(SentinelMetricQueryMachineResourceMetricRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pid)) {
            query.put("Pid", request.pid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.privateIp)) {
            query.put("PrivateIp", request.privateIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMetricQueryMachineResourceMetric"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMetricQueryMachineResourceMetricResponse());
    }

    public SentinelMetricQueryMachineResourceMetricResponse sentinelMetricQueryMachineResourceMetric(SentinelMetricQueryMachineResourceMetricRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMetricQueryMachineResourceMetricWithOptions(request, runtime);
    }

    public SentinelMetricQueryMetricsOfResourceResponse sentinelMetricQueryMetricsOfResourceWithOptions(SentinelMetricQueryMetricsOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMetricQueryMetricsOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMetricQueryMetricsOfResourceResponse());
    }

    public SentinelMetricQueryMetricsOfResourceResponse sentinelMetricQueryMetricsOfResource(SentinelMetricQueryMetricsOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMetricQueryMetricsOfResourceWithOptions(request, runtime);
    }

    public SentinelMetricQueryMetricsOfResourcesResponse sentinelMetricQueryMetricsOfResourcesWithOptions(SentinelMetricQueryMetricsOfResourcesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelMetricQueryMetricsOfResources"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelMetricQueryMetricsOfResourcesResponse());
    }

    public SentinelMetricQueryMetricsOfResourcesResponse sentinelMetricQueryMetricsOfResources(SentinelMetricQueryMetricsOfResourcesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelMetricQueryMetricsOfResourcesWithOptions(request, runtime);
    }

    public SentinelModifyAppPriceLevelResponse sentinelModifyAppPriceLevelWithOptions(SentinelModifyAppPriceLevelRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.priceLevel)) {
            query.put("PriceLevel", request.priceLevel);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelModifyAppPriceLevel"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelModifyAppPriceLevelResponse());
    }

    public SentinelModifyAppPriceLevelResponse sentinelModifyAppPriceLevel(SentinelModifyAppPriceLevelRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelModifyAppPriceLevelWithOptions(request, runtime);
    }

    public SentinelNodeListSentinelMachineNodesResponse sentinelNodeListSentinelMachineNodesWithOptions(SentinelNodeListSentinelMachineNodesRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ip)) {
            query.put("Ip", request.ip);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.key)) {
            query.put("Key", request.key);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pid)) {
            query.put("Pid", request.pid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processConfigurationId)) {
            query.put("ProcessConfigurationId", request.processConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelNodeListSentinelMachineNodes"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelNodeListSentinelMachineNodesResponse());
    }

    public SentinelNodeListSentinelMachineNodesResponse sentinelNodeListSentinelMachineNodes(SentinelNodeListSentinelMachineNodesRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelNodeListSentinelMachineNodesWithOptions(request, runtime);
    }

    public SentinelOperationLogListOpLogsResponse sentinelOperationLogListOpLogsWithOptions(SentinelOperationLogListOpLogsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelOperationLogListOpLogs"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelOperationLogListOpLogsResponse());
    }

    public SentinelOperationLogListOpLogsResponse sentinelOperationLogListOpLogs(SentinelOperationLogListOpLogsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelOperationLogListOpLogsWithOptions(request, runtime);
    }

    public SentinelPackageCanRefundResponse sentinelPackageCanRefundWithOptions(SentinelPackageCanRefundRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelPackageCanRefund"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelPackageCanRefundResponse());
    }

    public SentinelPackageCanRefundResponse sentinelPackageCanRefund(SentinelPackageCanRefundRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelPackageCanRefundWithOptions(request, runtime);
    }

    public SentinelPackageRefundResponse sentinelPackageRefundWithOptions(SentinelPackageRefundRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelPackageRefund"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelPackageRefundResponse());
    }

    public SentinelPackageRefundResponse sentinelPackageRefund(SentinelPackageRefundRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelPackageRefundWithOptions(request, runtime);
    }

    public SentinelParamRuleListByPageResponse sentinelParamRuleListByPageWithOptions(SentinelParamRuleListByPageRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelParamRuleListByPage"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelParamRuleListByPageResponse());
    }

    public SentinelParamRuleListByPageResponse sentinelParamRuleListByPage(SentinelParamRuleListByPageRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelParamRuleListByPageWithOptions(request, runtime);
    }

    public SentinelPayOrderCallbackResponse sentinelPayOrderCallbackWithOptions(SentinelPayOrderCallbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("data", request.data);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelPayOrderCallback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelPayOrderCallbackResponse());
    }

    public SentinelPayOrderCallbackResponse sentinelPayOrderCallback(SentinelPayOrderCallbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelPayOrderCallbackWithOptions(request, runtime);
    }

    public SentinelProtectionModuleDeleteResponse sentinelProtectionModuleDeleteWithOptions(SentinelProtectionModuleDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelProtectionModuleDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelProtectionModuleDeleteResponse());
    }

    public SentinelProtectionModuleDeleteResponse sentinelProtectionModuleDelete(SentinelProtectionModuleDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelProtectionModuleDeleteWithOptions(request, runtime);
    }

    public SentinelProtectionModuleListAllByPageResponse sentinelProtectionModuleListAllByPageWithOptions(SentinelProtectionModuleListAllByPageRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelProtectionModuleListAllByPage"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelProtectionModuleListAllByPageResponse());
    }

    public SentinelProtectionModuleListAllByPageResponse sentinelProtectionModuleListAllByPage(SentinelProtectionModuleListAllByPageRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelProtectionModuleListAllByPageWithOptions(request, runtime);
    }

    public SentinelProtectionModuleNewResponse sentinelProtectionModuleNewWithOptions(SentinelProtectionModuleNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.apiType)) {
            query.put("ApiType", request.apiType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelProtectionModuleNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelProtectionModuleNewResponse());
    }

    public SentinelProtectionModuleNewResponse sentinelProtectionModuleNew(SentinelProtectionModuleNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelProtectionModuleNewWithOptions(request, runtime);
    }

    public SentinelProtectionModuleUpdateResponse sentinelProtectionModuleUpdateWithOptions(SentinelProtectionModuleUpdateRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelProtectionModuleUpdate"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelProtectionModuleUpdateResponse());
    }

    public SentinelProtectionModuleUpdateResponse sentinelProtectionModuleUpdate(SentinelProtectionModuleUpdateRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelProtectionModuleUpdateWithOptions(request, runtime);
    }

    public SentinelQueryAppPriceLevelResponse sentinelQueryAppPriceLevelWithOptions(SentinelQueryAppPriceLevelRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelQueryAppPriceLevel"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelQueryAppPriceLevelResponse());
    }

    public SentinelQueryAppPriceLevelResponse sentinelQueryAppPriceLevel(SentinelQueryAppPriceLevelRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelQueryAppPriceLevelWithOptions(request, runtime);
    }

    public SentinelResourceNameListByUserIdResponse sentinelResourceNameListByUserIdWithOptions(SentinelResourceNameListByUserIdRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelResourceNameListByUserId"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelResourceNameListByUserIdResponse());
    }

    public SentinelResourceNameListByUserIdResponse sentinelResourceNameListByUserId(SentinelResourceNameListByUserIdRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelResourceNameListByUserIdWithOptions(request, runtime);
    }

    public SentinelResourceTopNMacsResponse sentinelResourceTopNMacsWithOptions(SentinelResourceTopNMacsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ahasTimestamp)) {
            query.put("AhasTimestamp", request.ahasTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.desc)) {
            query.put("Desc", request.desc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelResourceTopNMacs"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelResourceTopNMacsResponse());
    }

    public SentinelResourceTopNMacsResponse sentinelResourceTopNMacs(SentinelResourceTopNMacsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelResourceTopNMacsWithOptions(request, runtime);
    }

    public SentinelResourceTopNMacsWithMetricsResponse sentinelResourceTopNMacsWithMetricsWithOptions(SentinelResourceTopNMacsWithMetricsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ahasTimestamp)) {
            query.put("AhasTimestamp", request.ahasTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelResourceTopNMacsWithMetrics"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelResourceTopNMacsWithMetricsResponse());
    }

    public SentinelResourceTopNMacsWithMetricsResponse sentinelResourceTopNMacsWithMetrics(SentinelResourceTopNMacsWithMetricsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelResourceTopNMacsWithMetricsWithOptions(request, runtime);
    }

    public SentinelResourcesPercentageResponse sentinelResourcesPercentageWithOptions(SentinelResourcesPercentageRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceType)) {
            query.put("ResourceType", request.resourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelResourcesPercentage"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelResourcesPercentageResponse());
    }

    public SentinelResourcesPercentageResponse sentinelResourcesPercentage(SentinelResourcesPercentageRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelResourcesPercentageWithOptions(request, runtime);
    }

    public SentinelSortMonitorDashboardItemsResponse sentinelSortMonitorDashboardItemsWithOptions(SentinelSortMonitorDashboardItemsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dashboardId)) {
            query.put("DashboardId", request.dashboardId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.itemPosition)) {
            query.put("ItemPosition", request.itemPosition);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSortMonitorDashboardItems"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSortMonitorDashboardItemsResponse());
    }

    public SentinelSortMonitorDashboardItemsResponse sentinelSortMonitorDashboardItems(SentinelSortMonitorDashboardItemsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSortMonitorDashboardItemsWithOptions(request, runtime);
    }

    public SentinelSystemRuleDeleteResponse sentinelSystemRuleDeleteWithOptions(SentinelSystemRuleDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleDeleteResponse());
    }

    public SentinelSystemRuleDeleteResponse sentinelSystemRuleDelete(SentinelSystemRuleDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleDeleteWithOptions(request, runtime);
    }

    public SentinelSystemRuleEditResponse sentinelSystemRuleEditWithOptions(SentinelSystemRuleEditRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleEdit"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleEditResponse());
    }

    public SentinelSystemRuleEditResponse sentinelSystemRuleEdit(SentinelSystemRuleEditRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleEditWithOptions(request, runtime);
    }

    public SentinelSystemRuleListAllResponse sentinelSystemRuleListAllWithOptions(SentinelSystemRuleListAllRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleListAll"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleListAllResponse());
    }

    public SentinelSystemRuleListAllResponse sentinelSystemRuleListAll(SentinelSystemRuleListAllRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleListAllWithOptions(request, runtime);
    }

    public SentinelSystemRuleNewResponse sentinelSystemRuleNewWithOptions(SentinelSystemRuleNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleNewResponse());
    }

    public SentinelSystemRuleNewResponse sentinelSystemRuleNew(SentinelSystemRuleNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleNewWithOptions(request, runtime);
    }

    public SentinelSystemRuleOffResponse sentinelSystemRuleOffWithOptions(SentinelSystemRuleOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleOffResponse());
    }

    public SentinelSystemRuleOffResponse sentinelSystemRuleOff(SentinelSystemRuleOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleOffWithOptions(request, runtime);
    }

    public SentinelSystemRuleOffBatchResponse sentinelSystemRuleOffBatchWithOptions(SentinelSystemRuleOffBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleOffBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleOffBatchResponse());
    }

    public SentinelSystemRuleOffBatchResponse sentinelSystemRuleOffBatch(SentinelSystemRuleOffBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleOffBatchWithOptions(request, runtime);
    }

    public SentinelSystemRuleOnResponse sentinelSystemRuleOnWithOptions(SentinelSystemRuleOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleOnResponse());
    }

    public SentinelSystemRuleOnResponse sentinelSystemRuleOn(SentinelSystemRuleOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleOnWithOptions(request, runtime);
    }

    public SentinelSystemRuleOnBatchResponse sentinelSystemRuleOnBatchWithOptions(SentinelSystemRuleOnBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelSystemRuleOnBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelSystemRuleOnBatchResponse());
    }

    public SentinelSystemRuleOnBatchResponse sentinelSystemRuleOnBatch(SentinelSystemRuleOnBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelSystemRuleOnBatchWithOptions(request, runtime);
    }

    public SentinelUpdateAdapterSettingOfAppResponse sentinelUpdateAdapterSettingOfAppWithOptions(SentinelUpdateAdapterSettingOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webFallbackMode)) {
            query.put("WebFallbackMode", request.webFallbackMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webRedirectUrl)) {
            query.put("WebRedirectUrl", request.webRedirectUrl);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webRespContentType)) {
            query.put("WebRespContentType", request.webRespContentType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webRespMessage)) {
            query.put("WebRespMessage", request.webRespMessage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webRespStatusCode)) {
            query.put("WebRespStatusCode", request.webRespStatusCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webUrlPrefixCleanItems)) {
            query.put("WebUrlPrefixCleanItems", request.webUrlPrefixCleanItems);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelUpdateAdapterSettingOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelUpdateAdapterSettingOfAppResponse());
    }

    public SentinelUpdateAdapterSettingOfAppResponse sentinelUpdateAdapterSettingOfApp(SentinelUpdateAdapterSettingOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelUpdateAdapterSettingOfAppWithOptions(request, runtime);
    }

    public SentinelUpdateGeneralSettingOfAppResponse sentinelUpdateGeneralSettingOfAppWithOptions(SentinelUpdateGeneralSettingOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxContextAmount)) {
            query.put("MaxContextAmount", request.maxContextAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxOriginAmount)) {
            query.put("MaxOriginAmount", request.maxOriginAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxResourceAmount)) {
            query.put("MaxResourceAmount", request.maxResourceAmount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticMaxRt)) {
            query.put("StatisticMaxRt", request.statisticMaxRt);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelUpdateGeneralSettingOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelUpdateGeneralSettingOfAppResponse());
    }

    public SentinelUpdateGeneralSettingOfAppResponse sentinelUpdateGeneralSettingOfApp(SentinelUpdateGeneralSettingOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelUpdateGeneralSettingOfAppWithOptions(request, runtime);
    }

    public SentinelUpdateMultiModelResponse sentinelUpdateMultiModelWithOptions(SentinelUpdateMultiModelRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.modelId)) {
            query.put("ModelId", request.modelId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.modelName)) {
            query.put("ModelName", request.modelName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelUpdateMultiModel"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelUpdateMultiModelResponse());
    }

    public SentinelUpdateMultiModelResponse sentinelUpdateMultiModel(SentinelUpdateMultiModelRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelUpdateMultiModelWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleDeleteResponse sentinelWebFlowRuleDeleteWithOptions(SentinelWebFlowRuleDeleteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleDelete"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleDeleteResponse());
    }

    public SentinelWebFlowRuleDeleteResponse sentinelWebFlowRuleDelete(SentinelWebFlowRuleDeleteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleDeleteWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleEditResponse sentinelWebFlowRuleEditWithOptions(SentinelWebFlowRuleEditRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.burst)) {
            query.put("Burst", request.burst);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hasParam)) {
            query.put("HasParam", request.hasParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalSec)) {
            query.put("IntervalSec", request.intervalSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.matchStrategy)) {
            query.put("MatchStrategy", request.matchStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeoutMs)) {
            query.put("MaxQueueingTimeoutMs", request.maxQueueingTimeoutMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parseStrategy)) {
            query.put("ParseStrategy", request.parseStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pattern)) {
            query.put("Pattern", request.pattern);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceMode)) {
            query.put("ResourceMode", request.resourceMode);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleEdit"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleEditResponse());
    }

    public SentinelWebFlowRuleEditResponse sentinelWebFlowRuleEdit(SentinelWebFlowRuleEditRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleEditWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleListAllResponse sentinelWebFlowRuleListAllWithOptions(SentinelWebFlowRuleListAllRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleListAll"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleListAllResponse());
    }

    public SentinelWebFlowRuleListAllResponse sentinelWebFlowRuleListAll(SentinelWebFlowRuleListAllRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleListAllWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleListByPageResponse sentinelWebFlowRuleListByPageWithOptions(SentinelWebFlowRuleListByPageRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.model)) {
            query.put("Model", request.model);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageIndex)) {
            query.put("PageIndex", request.pageIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchKey)) {
            query.put("SearchKey", request.searchKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleListByPage"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleListByPageResponse());
    }

    public SentinelWebFlowRuleListByPageResponse sentinelWebFlowRuleListByPage(SentinelWebFlowRuleListByPageRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleListByPageWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleListRulesOfResourceResponse sentinelWebFlowRuleListRulesOfResourceWithOptions(SentinelWebFlowRuleListRulesOfResourceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleListRulesOfResource"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleListRulesOfResourceResponse());
    }

    public SentinelWebFlowRuleListRulesOfResourceResponse sentinelWebFlowRuleListRulesOfResource(SentinelWebFlowRuleListRulesOfResourceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleListRulesOfResourceWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleNewResponse sentinelWebFlowRuleNewWithOptions(SentinelWebFlowRuleNewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.burst)) {
            query.put("Burst", request.burst);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hasParam)) {
            query.put("HasParam", request.hasParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalSec)) {
            query.put("IntervalSec", request.intervalSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.matchStrategy)) {
            query.put("MatchStrategy", request.matchStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeoutMs)) {
            query.put("MaxQueueingTimeoutMs", request.maxQueueingTimeoutMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parseStrategy)) {
            query.put("ParseStrategy", request.parseStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pattern)) {
            query.put("Pattern", request.pattern);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceMode)) {
            query.put("ResourceMode", request.resourceMode);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleNew"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleNewResponse());
    }

    public SentinelWebFlowRuleNewResponse sentinelWebFlowRuleNew(SentinelWebFlowRuleNewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleNewWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleOffResponse sentinelWebFlowRuleOffWithOptions(SentinelWebFlowRuleOffRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleOff"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleOffResponse());
    }

    public SentinelWebFlowRuleOffResponse sentinelWebFlowRuleOff(SentinelWebFlowRuleOffRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleOffWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleOffBatchResponse sentinelWebFlowRuleOffBatchWithOptions(SentinelWebFlowRuleOffBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleOffBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleOffBatchResponse());
    }

    public SentinelWebFlowRuleOffBatchResponse sentinelWebFlowRuleOffBatch(SentinelWebFlowRuleOffBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleOffBatchWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleOnResponse sentinelWebFlowRuleOnWithOptions(SentinelWebFlowRuleOnRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleOn"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleOnResponse());
    }

    public SentinelWebFlowRuleOnResponse sentinelWebFlowRuleOn(SentinelWebFlowRuleOnRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleOnWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleOnBatchResponse sentinelWebFlowRuleOnBatchWithOptions(SentinelWebFlowRuleOnBatchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleOnBatch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleOnBatchResponse());
    }

    public SentinelWebFlowRuleOnBatchResponse sentinelWebFlowRuleOnBatch(SentinelWebFlowRuleOnBatchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleOnBatchWithOptions(request, runtime);
    }

    public SentinelWebFlowRuleOverviewResponse sentinelWebFlowRuleOverviewWithOptions(SentinelWebFlowRuleOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.burst)) {
            query.put("Burst", request.burst);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlBehavior)) {
            query.put("ControlBehavior", request.controlBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.count)) {
            query.put("Count", request.count);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.grade)) {
            query.put("Grade", request.grade);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hasParam)) {
            query.put("HasParam", request.hasParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalSec)) {
            query.put("IntervalSec", request.intervalSec);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.matchStrategy)) {
            query.put("MatchStrategy", request.matchStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maxQueueingTimeoutMs)) {
            query.put("MaxQueueingTimeoutMs", request.maxQueueingTimeoutMs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parseStrategy)) {
            query.put("ParseStrategy", request.parseStrategy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pattern)) {
            query.put("Pattern", request.pattern);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceMode)) {
            query.put("ResourceMode", request.resourceMode);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SentinelWebFlowRuleOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SentinelWebFlowRuleOverviewResponse());
    }

    public SentinelWebFlowRuleOverviewResponse sentinelWebFlowRuleOverview(SentinelWebFlowRuleOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.sentinelWebFlowRuleOverviewWithOptions(request, runtime);
    }

    public StartPluginResponse startPluginWithOptions(StartPluginRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pluginType)) {
            query.put("PluginType", request.pluginType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartPlugin"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StartPluginResponse());
    }

    public StartPluginResponse startPlugin(StartPluginRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.startPluginWithOptions(request, runtime);
    }

    public StartQuickExperimentResponse startQuickExperimentWithOptions(StartQuickExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartQuickExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StartQuickExperimentResponse());
    }

    public StartQuickExperimentResponse startQuickExperiment(StartQuickExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.startQuickExperimentWithOptions(request, runtime);
    }

    public StopAllExperimentTasksResponse stopAllExperimentTasksWithOptions(StopAllExperimentTasksRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StopAllExperimentTasks"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StopAllExperimentTasksResponse());
    }

    public StopAllExperimentTasksResponse stopAllExperimentTasks(StopAllExperimentTasksRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.stopAllExperimentTasksWithOptions(request, runtime);
    }

    public StopExperimentTaskResponse stopExperimentTaskWithOptions(StopExperimentTaskRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StopExperimentTask"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StopExperimentTaskResponse());
    }

    public StopExperimentTaskResponse stopExperimentTask(StopExperimentTaskRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.stopExperimentTaskWithOptions(request, runtime);
    }

    public StopExperimentsByApplicationResponse stopExperimentsByApplicationWithOptions(StopExperimentsByApplicationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StopExperimentsByApplication"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StopExperimentsByApplicationResponse());
    }

    public StopExperimentsByApplicationResponse stopExperimentsByApplication(StopExperimentsByApplicationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.stopExperimentsByApplicationWithOptions(request, runtime);
    }

    public StopPluginResponse stopPluginWithOptions(StopPluginRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pluginType)) {
            query.put("PluginType", request.pluginType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StopPlugin"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StopPluginResponse());
    }

    public StopPluginResponse stopPlugin(StopPluginRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.stopPluginWithOptions(request, runtime);
    }

    public SubmitExperimentTaskFeedbackResponse submitExperimentTaskFeedbackWithOptions(SubmitExperimentTaskFeedbackRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SubmitExperimentTaskFeedback"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SubmitExperimentTaskFeedbackResponse());
    }

    public SubmitExperimentTaskFeedbackResponse submitExperimentTaskFeedback(SubmitExperimentTaskFeedbackRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.submitExperimentTaskFeedbackWithOptions(request, runtime);
    }

    public SwitchFunctionAuthorizedStateResponse switchFunctionAuthorizedStateWithOptions(SwitchFunctionAuthorizedStateRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SwitchFunctionAuthorizedState"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SwitchFunctionAuthorizedStateResponse());
    }

    public SwitchFunctionAuthorizedStateResponse switchFunctionAuthorizedState(SwitchFunctionAuthorizedStateRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.switchFunctionAuthorizedStateWithOptions(request, runtime);
    }

    public SyncExperimentScopeTasksResponse syncExperimentScopeTasksWithOptions(SyncExperimentScopeTasksRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SyncExperimentScopeTasks"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SyncExperimentScopeTasksResponse());
    }

    public SyncExperimentScopeTasksResponse syncExperimentScopeTasks(SyncExperimentScopeTasksRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.syncExperimentScopeTasksWithOptions(request, runtime);
    }

    public TerminatePublishOrderResponse terminatePublishOrderWithOptions(TerminatePublishOrderRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.publishOrderId)) {
            query.put("PublishOrderId", request.publishOrderId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "TerminatePublishOrder"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new TerminatePublishOrderResponse());
    }

    public TerminatePublishOrderResponse terminatePublishOrder(TerminatePublishOrderRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.terminatePublishOrderWithOptions(request, runtime);
    }

    public TestBlockFallbackDefinitionBehaviorResponse testBlockFallbackDefinitionBehaviorWithOptions(TestBlockFallbackDefinitionBehaviorRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackBehavior)) {
            query.put("FallbackBehavior", request.fallbackBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackMode)) {
            query.put("FallbackMode", request.fallbackMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.method)) {
            query.put("Method", request.method);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "TestBlockFallbackDefinitionBehavior"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new TestBlockFallbackDefinitionBehaviorResponse());
    }

    public TestBlockFallbackDefinitionBehaviorResponse testBlockFallbackDefinitionBehavior(TestBlockFallbackDefinitionBehaviorRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.testBlockFallbackDefinitionBehaviorWithOptions(request, runtime);
    }

    public TransWorkspaceResponse transWorkspaceWithOptions(TransWorkspaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "TransWorkspace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new TransWorkspaceResponse());
    }

    public TransWorkspaceResponse transWorkspace(TransWorkspaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.transWorkspaceWithOptions(request, runtime);
    }

    public UnbindSentinelBlockFallbackDefinitionResponse unbindSentinelBlockFallbackDefinitionWithOptions(UnbindSentinelBlockFallbackDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resource)) {
            query.put("Resource", request.resource);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UnbindSentinelBlockFallbackDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UnbindSentinelBlockFallbackDefinitionResponse());
    }

    public UnbindSentinelBlockFallbackDefinitionResponse unbindSentinelBlockFallbackDefinition(UnbindSentinelBlockFallbackDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.unbindSentinelBlockFallbackDefinitionWithOptions(request, runtime);
    }

    public UninstallPluginResponse uninstallPluginWithOptions(UninstallPluginRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configurationId)) {
            query.put("ConfigurationId", request.configurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UninstallPlugin"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UninstallPluginResponse());
    }

    public UninstallPluginResponse uninstallPlugin(UninstallPluginRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.uninstallPluginWithOptions(request, runtime);
    }

    public UpdateAlarmRuleResponse updateAlarmRuleWithOptions(UpdateAlarmRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alarmId)) {
            query.put("AlarmId", request.alarmId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alarmOn)) {
            query.put("AlarmOn", request.alarmOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alertName)) {
            query.put("AlertName", request.alertName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.andOr)) {
            query.put("AndOr", request.andOr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.conditions)) {
            query.put("Conditions", request.conditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repeatInterval)) {
            query.put("RepeatInterval", request.repeatInterval);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateAlarmRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateAlarmRuleResponse());
    }

    public UpdateAlarmRuleResponse updateAlarmRule(UpdateAlarmRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateAlarmRuleWithOptions(request, runtime);
    }

    public UpdateAlarmStatusResponse updateAlarmStatusWithOptions(UpdateAlarmStatusRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alarmId)) {
            query.put("AlarmId", request.alarmId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.alarmOn)) {
            query.put("AlarmOn", request.alarmOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateAlarmStatus"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateAlarmStatusResponse());
    }

    public UpdateAlarmStatusResponse updateAlarmStatus(UpdateAlarmStatusRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateAlarmStatusWithOptions(request, runtime);
    }

    public UpdateAppSwitchResponse updateAppSwitchWithOptions(UpdateAppSwitchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchName)) {
            query.put("SwitchName", request.switchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchNameSpace)) {
            query.put("SwitchNameSpace", request.switchNameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchValue)) {
            query.put("SwitchValue", request.switchValue);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateAppSwitch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateAppSwitchResponse());
    }

    public UpdateAppSwitchResponse updateAppSwitch(UpdateAppSwitchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateAppSwitchWithOptions(request, runtime);
    }

    public UpdateApplicationConfigurationResponse updateApplicationConfigurationWithOptions(UpdateApplicationConfigurationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateApplicationConfiguration"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateApplicationConfigurationResponse());
    }

    public UpdateApplicationConfigurationResponse updateApplicationConfiguration(UpdateApplicationConfigurationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateApplicationConfigurationWithOptions(request, runtime);
    }

    public UpdateApplicationEmpIdRelationResponse updateApplicationEmpIdRelationWithOptions(UpdateApplicationEmpIdRelationRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateApplicationEmpIdRelation"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateApplicationEmpIdRelationResponse());
    }

    public UpdateApplicationEmpIdRelationResponse updateApplicationEmpIdRelation(UpdateApplicationEmpIdRelationRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateApplicationEmpIdRelationWithOptions(request, runtime);
    }

    public UpdateAttackSuiteResponse updateAttackSuiteWithOptions(UpdateAttackSuiteRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attackSuiteId)) {
            query.put("AttackSuiteId", request.attackSuiteId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenarioDisplayVO)) {
            query.put("ScenarioDisplayVO", request.scenarioDisplayVO);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateAttackSuite"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateAttackSuiteResponse());
    }

    public UpdateAttackSuiteResponse updateAttackSuite(UpdateAttackSuiteRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateAttackSuiteWithOptions(request, runtime);
    }

    public UpdateCategoryResponse updateCategoryWithOptions(UpdateCategoryRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateCategory"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateCategoryResponse());
    }

    public UpdateCategoryResponse updateCategory(UpdateCategoryRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateCategoryWithOptions(request, runtime);
    }

    public UpdateCommercialSwitchResponse updateCommercialSwitchWithOptions(UpdateCommercialSwitchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.suspend)) {
            query.put("Suspend", request.suspend);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateCommercialSwitch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateCommercialSwitchResponse());
    }

    public UpdateCommercialSwitchResponse updateCommercialSwitch(UpdateCommercialSwitchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateCommercialSwitchWithOptions(request, runtime);
    }

    public UpdateComponentLayoutsResponse updateComponentLayoutsWithOptions(UpdateComponentLayoutsRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userLayouts)) {
            query.put("UserLayouts", request.userLayouts);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateComponentLayouts"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateComponentLayoutsResponse());
    }

    public UpdateComponentLayoutsResponse updateComponentLayouts(UpdateComponentLayoutsRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateComponentLayoutsWithOptions(request, runtime);
    }

    public UpdateExperimentResponse updateExperimentWithOptions(UpdateExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateExperimentResponse());
    }

    public UpdateExperimentResponse updateExperiment(UpdateExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateExperimentWithOptions(request, runtime);
    }

    public UpdateExperimentBasicInfoResponse updateExperimentBasicInfoWithOptions(UpdateExperimentBasicInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateExperimentBasicInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateExperimentBasicInfoResponse());
    }

    public UpdateExperimentBasicInfoResponse updateExperimentBasicInfo(UpdateExperimentBasicInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateExperimentBasicInfoWithOptions(request, runtime);
    }

    public UpdateExperimentFlowDefinitionResponse updateExperimentFlowDefinitionWithOptions(UpdateExperimentFlowDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateExperimentFlowDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateExperimentFlowDefinitionResponse());
    }

    public UpdateExperimentFlowDefinitionResponse updateExperimentFlowDefinition(UpdateExperimentFlowDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateExperimentFlowDefinitionWithOptions(request, runtime);
    }

    public UpdateExperimentHostResponse updateExperimentHostWithOptions(UpdateExperimentHostRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateExperimentHost"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateExperimentHostResponse());
    }

    public UpdateExperimentHostResponse updateExperimentHost(UpdateExperimentHostRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateExperimentHostWithOptions(request, runtime);
    }

    public UpdateExpertiseResponse updateExpertiseWithOptions(UpdateExpertiseRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateExpertise"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateExpertiseResponse());
    }

    public UpdateExpertiseResponse updateExpertise(UpdateExpertiseRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateExpertiseWithOptions(request, runtime);
    }

    public UpdateGeneralWorkspaceBaseInfoResponse updateGeneralWorkspaceBaseInfoWithOptions(UpdateGeneralWorkspaceBaseInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateGeneralWorkspaceBaseInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateGeneralWorkspaceBaseInfoResponse());
    }

    public UpdateGeneralWorkspaceBaseInfoResponse updateGeneralWorkspaceBaseInfo(UpdateGeneralWorkspaceBaseInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateGeneralWorkspaceBaseInfoWithOptions(request, runtime);
    }

    public UpdateInspectJobResponse updateInspectJobWithOptions(UpdateInspectJobRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cron)) {
            query.put("Cron", request.cron);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.date)) {
            query.put("Date", request.date);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.day)) {
            query.put("Day", request.day);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.terminationDate)) {
            query.put("TerminationDate", request.terminationDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.terminationTime)) {
            query.put("TerminationTime", request.terminationTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.time)) {
            query.put("Time", request.time);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.week)) {
            query.put("Week", request.week);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateInspectJob"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateInspectJobResponse());
    }

    public UpdateInspectJobResponse updateInspectJob(UpdateInspectJobRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateInspectJobWithOptions(request, runtime);
    }

    public UpdateMachineSwitchResponse updateMachineSwitchWithOptions(UpdateMachineSwitchRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ips)) {
            query.put("Ips", request.ips);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpace)) {
            query.put("NameSpace", request.nameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchName)) {
            query.put("SwitchName", request.switchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchNameSpace)) {
            query.put("SwitchNameSpace", request.switchNameSpace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchValue)) {
            query.put("SwitchValue", request.switchValue);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateMachineSwitch"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateMachineSwitchResponse());
    }

    public UpdateMachineSwitchResponse updateMachineSwitch(UpdateMachineSwitchRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateMachineSwitchWithOptions(request, runtime);
    }

    public UpdateMyWorkspaceBaseInfoResponse updateMyWorkspaceBaseInfoWithOptions(UpdateMyWorkspaceBaseInfoRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateMyWorkspaceBaseInfo"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateMyWorkspaceBaseInfoResponse());
    }

    public UpdateMyWorkspaceBaseInfoResponse updateMyWorkspaceBaseInfo(UpdateMyWorkspaceBaseInfoRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateMyWorkspaceBaseInfoWithOptions(request, runtime);
    }

    public UpdateSceneResponse updateSceneWithOptions(UpdateSceneRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateScene"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSceneResponse());
    }

    public UpdateSceneResponse updateScene(UpdateSceneRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateSceneWithOptions(request, runtime);
    }

    public UpdateSceneFunctionResponse updateSceneFunctionWithOptions(UpdateSceneFunctionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSceneFunction"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSceneFunctionResponse());
    }

    public UpdateSceneFunctionResponse updateSceneFunction(UpdateSceneFunctionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateSceneFunctionWithOptions(request, runtime);
    }

    public UpdateSceneFunctionAuthorizedResponse updateSceneFunctionAuthorizedWithOptions(UpdateSceneFunctionAuthorizedRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSceneFunctionAuthorized"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSceneFunctionAuthorizedResponse());
    }

    public UpdateSceneFunctionAuthorizedResponse updateSceneFunctionAuthorized(UpdateSceneFunctionAuthorizedRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateSceneFunctionAuthorizedWithOptions(request, runtime);
    }

    public UpdateSceneFunctionParameterResponse updateSceneFunctionParameterWithOptions(UpdateSceneFunctionParameterRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSceneFunctionParameter"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSceneFunctionParameterResponse());
    }

    public UpdateSceneFunctionParameterResponse updateSceneFunctionParameter(UpdateSceneFunctionParameterRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateSceneFunctionParameterWithOptions(request, runtime);
    }

    public UpdateScriptResponse updateScriptWithOptions(UpdateScriptRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateScript"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateScriptResponse());
    }

    public UpdateScriptResponse updateScript(UpdateScriptRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateScriptWithOptions(request, runtime);
    }

    public UpdateSentinelAdaptiveFlowSettingOfAppResponse updateSentinelAdaptiveFlowSettingOfAppWithOptions(UpdateSentinelAdaptiveFlowSettingOfAppRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enableAutoSystemAdaptive)) {
            query.put("EnableAutoSystemAdaptive", request.enableAutoSystemAdaptive);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSentinelAdaptiveFlowSettingOfApp"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSentinelAdaptiveFlowSettingOfAppResponse());
    }

    public UpdateSentinelAdaptiveFlowSettingOfAppResponse updateSentinelAdaptiveFlowSettingOfApp(UpdateSentinelAdaptiveFlowSettingOfAppRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateSentinelAdaptiveFlowSettingOfAppWithOptions(request, runtime);
    }

    public UpdateSentinelBlockFallbackDefinitionResponse updateSentinelBlockFallbackDefinitionWithOptions(UpdateSentinelBlockFallbackDefinitionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackBehavior)) {
            query.put("FallbackBehavior", request.fallbackBehavior);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceClassification)) {
            query.put("ResourceClassification", request.resourceClassification);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSentinelBlockFallbackDefinition"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSentinelBlockFallbackDefinitionResponse());
    }

    public UpdateSentinelBlockFallbackDefinitionResponse updateSentinelBlockFallbackDefinition(UpdateSentinelBlockFallbackDefinitionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateSentinelBlockFallbackDefinitionWithOptions(request, runtime);
    }

    public UpdateSentinelManualDegradeRuleResponse updateSentinelManualDegradeRuleWithOptions(UpdateSentinelManualDegradeRuleRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fallbackId)) {
            query.put("FallbackId", request.fallbackId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSentinelManualDegradeRule"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSentinelManualDegradeRuleResponse());
    }

    public UpdateSentinelManualDegradeRuleResponse updateSentinelManualDegradeRule(UpdateSentinelManualDegradeRuleRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateSentinelManualDegradeRuleWithOptions(request, runtime);
    }

    public UpdateUserAuthorityResponse updateUserAuthorityWithOptions(UpdateUserAuthorityRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.displayName)) {
            query.put("DisplayName", request.displayName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.roleType)) {
            query.put("RoleType", request.roleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subUid)) {
            query.put("SubUid", request.subUid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userName)) {
            query.put("UserName", request.userName);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateUserAuthority"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateUserAuthorityResponse());
    }

    public UpdateUserAuthorityResponse updateUserAuthority(UpdateUserAuthorityRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateUserAuthorityWithOptions(request, runtime);
    }

    public UpdateWorkspaceExperimentPermissionResponse updateWorkspaceExperimentPermissionWithOptions(UpdateWorkspaceExperimentPermissionRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateWorkspaceExperimentPermission"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateWorkspaceExperimentPermissionResponse());
    }

    public UpdateWorkspaceExperimentPermissionResponse updateWorkspaceExperimentPermission(UpdateWorkspaceExperimentPermissionRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateWorkspaceExperimentPermissionWithOptions(request, runtime);
    }

    public UpdateWorkspaceMemberResponse updateWorkspaceMemberWithOptions(UpdateWorkspaceMemberRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateWorkspaceMember"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateWorkspaceMemberResponse());
    }

    public UpdateWorkspaceMemberResponse updateWorkspaceMember(UpdateWorkspaceMemberRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.updateWorkspaceMemberWithOptions(request, runtime);
    }

    public UserCheckActivityTaskResponse userCheckActivityTaskWithOptions(UserCheckActivityTaskRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UserCheckActivityTask"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UserCheckActivityTaskResponse());
    }

    public UserCheckActivityTaskResponse userCheckActivityTask(UserCheckActivityTaskRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.userCheckActivityTaskWithOptions(request, runtime);
    }

    public UserLoginResponse userLoginWithOptions(UserLoginRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UserLogin"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UserLoginResponse());
    }

    public UserLoginResponse userLogin(UserLoginRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.userLoginWithOptions(request, runtime);
    }

    public UserNamespaceResponse userNamespaceWithOptions(UserNamespaceRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UserNamespace"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UserNamespaceResponse());
    }

    public UserNamespaceResponse userNamespace(UserNamespaceRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.userNamespaceWithOptions(request, runtime);
    }

    public UserPayPackOverviewResponse userPayPackOverviewWithOptions(UserPayPackOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UserPayPackOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UserPayPackOverviewResponse());
    }

    public UserPayPackOverviewResponse userPayPackOverview(UserPayPackOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.userPayPackOverviewWithOptions(request, runtime);
    }

    public UserScopeResponse userScopeWithOptions(UserScopeRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UserScope"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UserScopeResponse());
    }

    public UserScopeResponse userScope(UserScopeRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.userScopeWithOptions(request, runtime);
    }

    public QueryTopologyProcessOverviewResponse queryTopologyProcessOverviewWithOptions(QueryTopologyProcessOverviewRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hostConfigurationId)) {
            query.put("HostConfigurationId", request.hostConfigurationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubClusterId)) {
            query.put("KubClusterId", request.kubClusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.kubNamespace)) {
            query.put("KubNamespace", request.kubNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestTimestamp)) {
            query.put("RequestTimestamp", request.requestTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tierId)) {
            query.put("TierId", request.tierId);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "queryTopologyProcessOverview"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryTopologyProcessOverviewResponse());
    }

    public QueryTopologyProcessOverviewResponse queryTopologyProcessOverview(QueryTopologyProcessOverviewRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.queryTopologyProcessOverviewWithOptions(request, runtime);
    }

    public WorkspaceCloneExperimentResponse workspaceCloneExperimentWithOptions(WorkspaceCloneExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "workspaceCloneExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new WorkspaceCloneExperimentResponse());
    }

    public WorkspaceCloneExperimentResponse workspaceCloneExperiment(WorkspaceCloneExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.workspaceCloneExperimentWithOptions(request, runtime);
    }

    public WorkspaceCreateExperimentResponse workspaceCreateExperimentWithOptions(WorkspaceCreateExperimentRequest request, RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ahasRegionId)) {
            query.put("AhasRegionId", request.ahasRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.args)) {
            query.put("Args", request.args);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        OpenApiRequest req = OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        Params params = Params.build(TeaConverter.buildMap(
            new TeaPair("action", "workspaceCreateExperiment"),
            new TeaPair("version", "2018-09-01"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new WorkspaceCreateExperimentResponse());
    }

    public WorkspaceCreateExperimentResponse workspaceCreateExperiment(WorkspaceCreateExperimentRequest request) throws Exception {
        RuntimeOptions runtime = new RuntimeOptions();
        return this.workspaceCreateExperimentWithOptions(request, runtime);
    }
}
