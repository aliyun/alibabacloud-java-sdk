// This file is auto-generated, don't edit it. Thanks.
package com.aliyun.fc_open20210406.models;

import com.aliyun.tea.*;

public class GetFunctionResponseBody extends TeaModel {
    /**
     * <p>The port on which the HTTP server listens for the custom runtime or custom container runtime.</p>
     * 
     * <strong>example:</strong>
     * <p>9000</p>
     */
    @NameInMap("caPort")
    public Integer caPort;

    /**
     * <p>The CRC-64 value of the function code package.</p>
     * 
     * <strong>example:</strong>
     * <p>2825179536350****</p>
     */
    @NameInMap("codeChecksum")
    public String codeChecksum;

    /**
     * <p>The size of the function code package. Unit: byte.</p>
     * 
     * <strong>example:</strong>
     * <p>421</p>
     */
    @NameInMap("codeSize")
    public Long codeSize;

    /**
     * <p>The number of vCPUs of the function. The value must be a multiple of 0.05.</p>
     * 
     * <strong>example:</strong>
     * <p>1.5</p>
     */
    @NameInMap("cpu")
    public Float cpu;

    /**
     * <p>The time when the function was created.</p>
     * 
     * <strong>example:</strong>
     * <p>2020-04-01T08:15:27Z</p>
     */
    @NameInMap("createdTime")
    public String createdTime;

    /**
     * <p>The configurations of the Custom Container runtime. After you configure the Custom Container runtime, you can use a custom container image to execute functions.</p>
     */
    @NameInMap("customContainerConfig")
    public CustomContainerConfigInfo customContainerConfig;

    /**
     * <p>The custom Domain Name System (DNS) settings of the function.</p>
     */
    @NameInMap("customDNS")
    public CustomDNS customDNS;

    /**
     * <p>The custom health check configurations of the function. This parameter is applicable only to custom runtimes and Custom Container runtimes.</p>
     */
    @NameInMap("customHealthCheckConfig")
    public CustomHealthCheckConfig customHealthCheckConfig;

    /**
     * <p>The configurations of the function that runs in the custom runtime.</p>
     */
    @NameInMap("customRuntimeConfig")
    public CustomRuntimeConfig customRuntimeConfig;

    /**
     * <p>The description of the function.</p>
     * 
     * <strong>example:</strong>
     * <p>test_description</p>
     */
    @NameInMap("description")
    public String description;

    /**
     * <p>The disk size of the function. Unit: MB. Valid values: 512 and 10240.</p>
     * 
     * <strong>example:</strong>
     * <p>512</p>
     */
    @NameInMap("diskSize")
    public Integer diskSize;

    /**
     * <p>The environment variables that are configured for the function. You can obtain the values of the environment variables from the function. For more information, see <a href="https://help.aliyun.com/document_detail/69777.html">Environment variables</a>.</p>
     */
    @NameInMap("environmentVariables")
    public java.util.Map<String, String> environmentVariables;

    /**
     * <p>The ID that is generated by the system for the function. Each function ID is unique in Function Compute.</p>
     * 
     * <strong>example:</strong>
     * <p>aa715851-1c20-4b89-a8fb-***</p>
     */
    @NameInMap("functionId")
    public String functionId;

    /**
     * <p>The name of the function.</p>
     * 
     * <strong>example:</strong>
     * <p>function_name</p>
     */
    @NameInMap("functionName")
    public String functionName;

    /**
     * <p>The GPU memory capacity for the function. Unit: MB. The value is a multiple of 1,024.</p>
     * 
     * <strong>example:</strong>
     * <p>2048</p>
     */
    @NameInMap("gpuMemorySize")
    public Integer gpuMemorySize;

    /**
     * <p>The handler of the function. For more information, see <a href="https://help.aliyun.com/document_detail/157704.html">Function handler</a>.</p>
     * 
     * <strong>example:</strong>
     * <p>index.handler</p>
     */
    @NameInMap("handler")
    public String handler;

    /**
     * <p>The timeout period for the execution of the Initializer hook. Unit: seconds. Default value: 3. Valid values: 1 to 300. When this period ends, the execution of the Initializer hook is terminated.</p>
     * 
     * <strong>example:</strong>
     * <p>60</p>
     */
    @NameInMap("initializationTimeout")
    public Integer initializationTimeout;

    /**
     * <p>The handler of the Initializer hook. The format of the value is determined by the programming language that you use. For more information, see <a href="https://help.aliyun.com/document_detail/157704.html">Initializer hook</a>.</p>
     * 
     * <strong>example:</strong>
     * <p>index.handler</p>
     */
    @NameInMap("initializer")
    public String initializer;

    /**
     * <p>The number of requests that can be concurrently processed by a single instance.</p>
     * 
     * <strong>example:</strong>
     * <p>10</p>
     */
    @NameInMap("instanceConcurrency")
    public Integer instanceConcurrency;

    /**
     * <p>The lifecycle configurations of instances.</p>
     */
    @NameInMap("instanceLifecycleConfig")
    public InstanceLifecycleConfig instanceLifecycleConfig;

    /**
     * <p>The soft concurrency of the instance. You can use this parameter to implement graceful scale-up of instances. If the number of concurrent requests on an instance is greater than the value of soft concurrency, an instance scale-up is triggered. For example, if your instance requires a long time to start, you can specify a suitable soft concurrency to start the instance in advance.</p>
     * <p>The value must be less than or equal to that of the <strong>instanceConcurrency</strong> parameter.</p>
     * 
     * <strong>example:</strong>
     * <p>5</p>
     */
    @NameInMap("instanceSoftConcurrency")
    public Integer instanceSoftConcurrency;

    /**
     * <p>The instance type of the function. Valid values:</p>
     * <ul>
     * <li><strong>e1</strong>: elastic instances</li>
     * <li><strong>c1</strong>: performance instances</li>
     * <li><strong>fc.gpu.tesla.1</strong>: GPU-accelerated instances with Tesla series cards</li>
     * <li><strong>fc.gpu.ampere.1</strong>: GPU-accelerated instances with Ampere series cards</li>
     * <li><strong>fc.gpu.ada.1</strong>:GPU-accelerated instances with Ada series cards</li>
     * <li><strong>g1</strong>: same as fc.gpu.tesla.1</li>
     * </ul>
     * 
     * <strong>example:</strong>
     * <p>e1</p>
     */
    @NameInMap("instanceType")
    public String instanceType;

    /**
     * <p>The time when the function was last modified.</p>
     * 
     * <strong>example:</strong>
     * <p>2020-04-01T08:15:27Z</p>
     */
    @NameInMap("lastModifiedTime")
    public String lastModifiedTime;

    /**
     * <p>The list of layers (ARN V1).</p>
     * <blockquote>
     * <p> If multiple layers exist, the layers are merged based on the array subscripts in descending order. The content of a layer with a smaller subscript overwrites that of a larger subscript.</p>
     * </blockquote>
     * <blockquote>
     * <p> This parameter is to be deprecated. Use layersArnV2.</p>
     * </blockquote>
     */
    @NameInMap("layers")
    public java.util.List<String> layers;

    /**
     * <p>The list of layers (ARN V2).</p>
     * <blockquote>
     * <p> If multiple layers exist, the layers are merged based on the array subscripts in descending order. The content of a layer with a smaller subscript overwrites that of a larger subscript.</p>
     * </blockquote>
     */
    @NameInMap("layersArnV2")
    public java.util.List<String> layersArnV2;

    /**
     * <p>The memory size for the function. Unit: MB. The value must be a multiple of 64. The memory size varies based on the function instance type. For more information, see <a href="https://help.aliyun.com/document_detail/179379.html">Instance types</a>.</p>
     * 
     * <strong>example:</strong>
     * <p>256</p>
     */
    @NameInMap("memorySize")
    public Integer memorySize;

    /**
     * <p>The runtime of the function. Valid values: <strong>nodejs20</strong>, <strong>nodejs18</strong>, <strong>nodejs16</strong>, <strong>nodejs14</strong>, <strong>nodejs12</strong>, <strong>nodejs10</strong>, <strong>nodejs8</strong>, <strong>nodejs6</strong>, <strong>nodejs4.4</strong>, <strong>python3.10</strong>, <strong>python3.9</strong>, <strong>python3</strong>, <strong>python2.7</strong>, <strong>java11</strong>, <strong>java8</strong>, <strong>go1</strong>, <strong>php7.2</strong>, <strong>dotnetcore2.1</strong>, <strong>custom.debian10</strong>, <strong>custom</strong>, and <strong>custom-container</strong>.</p>
     * 
     * <strong>example:</strong>
     * <p>python3</p>
     */
    @NameInMap("runtime")
    public String runtime;

    /**
     * <p>The timeout period for the execution of the function. Unit: seconds. Default value: 60. Valid values: 1 to 600. When this period expires, the execution of the function is terminated.</p>
     * 
     * <strong>example:</strong>
     * <p>60</p>
     */
    @NameInMap("timeout")
    public Integer timeout;

    public static GetFunctionResponseBody build(java.util.Map<String, ?> map) throws Exception {
        GetFunctionResponseBody self = new GetFunctionResponseBody();
        return TeaModel.build(map, self);
    }

    public GetFunctionResponseBody setCaPort(Integer caPort) {
        this.caPort = caPort;
        return this;
    }
    public Integer getCaPort() {
        return this.caPort;
    }

    public GetFunctionResponseBody setCodeChecksum(String codeChecksum) {
        this.codeChecksum = codeChecksum;
        return this;
    }
    public String getCodeChecksum() {
        return this.codeChecksum;
    }

    public GetFunctionResponseBody setCodeSize(Long codeSize) {
        this.codeSize = codeSize;
        return this;
    }
    public Long getCodeSize() {
        return this.codeSize;
    }

    public GetFunctionResponseBody setCpu(Float cpu) {
        this.cpu = cpu;
        return this;
    }
    public Float getCpu() {
        return this.cpu;
    }

    public GetFunctionResponseBody setCreatedTime(String createdTime) {
        this.createdTime = createdTime;
        return this;
    }
    public String getCreatedTime() {
        return this.createdTime;
    }

    public GetFunctionResponseBody setCustomContainerConfig(CustomContainerConfigInfo customContainerConfig) {
        this.customContainerConfig = customContainerConfig;
        return this;
    }
    public CustomContainerConfigInfo getCustomContainerConfig() {
        return this.customContainerConfig;
    }

    public GetFunctionResponseBody setCustomDNS(CustomDNS customDNS) {
        this.customDNS = customDNS;
        return this;
    }
    public CustomDNS getCustomDNS() {
        return this.customDNS;
    }

    public GetFunctionResponseBody setCustomHealthCheckConfig(CustomHealthCheckConfig customHealthCheckConfig) {
        this.customHealthCheckConfig = customHealthCheckConfig;
        return this;
    }
    public CustomHealthCheckConfig getCustomHealthCheckConfig() {
        return this.customHealthCheckConfig;
    }

    public GetFunctionResponseBody setCustomRuntimeConfig(CustomRuntimeConfig customRuntimeConfig) {
        this.customRuntimeConfig = customRuntimeConfig;
        return this;
    }
    public CustomRuntimeConfig getCustomRuntimeConfig() {
        return this.customRuntimeConfig;
    }

    public GetFunctionResponseBody setDescription(String description) {
        this.description = description;
        return this;
    }
    public String getDescription() {
        return this.description;
    }

    public GetFunctionResponseBody setDiskSize(Integer diskSize) {
        this.diskSize = diskSize;
        return this;
    }
    public Integer getDiskSize() {
        return this.diskSize;
    }

    public GetFunctionResponseBody setEnvironmentVariables(java.util.Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }
    public java.util.Map<String, String> getEnvironmentVariables() {
        return this.environmentVariables;
    }

    public GetFunctionResponseBody setFunctionId(String functionId) {
        this.functionId = functionId;
        return this;
    }
    public String getFunctionId() {
        return this.functionId;
    }

    public GetFunctionResponseBody setFunctionName(String functionName) {
        this.functionName = functionName;
        return this;
    }
    public String getFunctionName() {
        return this.functionName;
    }

    public GetFunctionResponseBody setGpuMemorySize(Integer gpuMemorySize) {
        this.gpuMemorySize = gpuMemorySize;
        return this;
    }
    public Integer getGpuMemorySize() {
        return this.gpuMemorySize;
    }

    public GetFunctionResponseBody setHandler(String handler) {
        this.handler = handler;
        return this;
    }
    public String getHandler() {
        return this.handler;
    }

    public GetFunctionResponseBody setInitializationTimeout(Integer initializationTimeout) {
        this.initializationTimeout = initializationTimeout;
        return this;
    }
    public Integer getInitializationTimeout() {
        return this.initializationTimeout;
    }

    public GetFunctionResponseBody setInitializer(String initializer) {
        this.initializer = initializer;
        return this;
    }
    public String getInitializer() {
        return this.initializer;
    }

    public GetFunctionResponseBody setInstanceConcurrency(Integer instanceConcurrency) {
        this.instanceConcurrency = instanceConcurrency;
        return this;
    }
    public Integer getInstanceConcurrency() {
        return this.instanceConcurrency;
    }

    public GetFunctionResponseBody setInstanceLifecycleConfig(InstanceLifecycleConfig instanceLifecycleConfig) {
        this.instanceLifecycleConfig = instanceLifecycleConfig;
        return this;
    }
    public InstanceLifecycleConfig getInstanceLifecycleConfig() {
        return this.instanceLifecycleConfig;
    }

    public GetFunctionResponseBody setInstanceSoftConcurrency(Integer instanceSoftConcurrency) {
        this.instanceSoftConcurrency = instanceSoftConcurrency;
        return this;
    }
    public Integer getInstanceSoftConcurrency() {
        return this.instanceSoftConcurrency;
    }

    public GetFunctionResponseBody setInstanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }
    public String getInstanceType() {
        return this.instanceType;
    }

    public GetFunctionResponseBody setLastModifiedTime(String lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }
    public String getLastModifiedTime() {
        return this.lastModifiedTime;
    }

    public GetFunctionResponseBody setLayers(java.util.List<String> layers) {
        this.layers = layers;
        return this;
    }
    public java.util.List<String> getLayers() {
        return this.layers;
    }

    public GetFunctionResponseBody setLayersArnV2(java.util.List<String> layersArnV2) {
        this.layersArnV2 = layersArnV2;
        return this;
    }
    public java.util.List<String> getLayersArnV2() {
        return this.layersArnV2;
    }

    public GetFunctionResponseBody setMemorySize(Integer memorySize) {
        this.memorySize = memorySize;
        return this;
    }
    public Integer getMemorySize() {
        return this.memorySize;
    }

    public GetFunctionResponseBody setRuntime(String runtime) {
        this.runtime = runtime;
        return this;
    }
    public String getRuntime() {
        return this.runtime;
    }

    public GetFunctionResponseBody setTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }
    public Integer getTimeout() {
        return this.timeout;
    }

}
