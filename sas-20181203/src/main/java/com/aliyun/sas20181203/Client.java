// This file is auto-generated, don't edit it. Thanks.
package com.aliyun.sas20181203;

import com.aliyun.tea.*;
import com.aliyun.sas20181203.models.*;

public class Client extends com.aliyun.teaopenapi.Client {

    public Client(com.aliyun.teaopenapi.models.Config config) throws Exception {
        super(config);
        this._endpointRule = "regional";
        this._endpointMap = TeaConverter.buildMap(
            new TeaPair("cn-hangzhou", "tds.aliyuncs.com"),
            new TeaPair("cn-shanghai", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("ap-southeast-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("eu-central-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-northeast-2-pop", "sas.aliyuncs.com"),
            new TeaPair("ap-south-1", "tds-vpc.ap-south-1.aliyuncs.com"),
            new TeaPair("ap-southeast-3", "tds.ap-southeast-3.aliyuncs.com"),
            new TeaPair("cn-beijing-finance-1", "sas.aliyuncs.com"),
            new TeaPair("cn-beijing-finance-pop", "sas.aliyuncs.com"),
            new TeaPair("cn-beijing-gov-1", "sas.aliyuncs.com"),
            new TeaPair("cn-beijing-nu16-b01", "sas.aliyuncs.com"),
            new TeaPair("cn-edge-1", "sas.aliyuncs.com"),
            new TeaPair("cn-fujian", "sas.aliyuncs.com"),
            new TeaPair("cn-haidian-cm12-c01", "sas.aliyuncs.com"),
            new TeaPair("cn-hangzhou-bj-b01", "sas.aliyuncs.com"),
            new TeaPair("cn-hangzhou-finance", "sas.aliyuncs.com"),
            new TeaPair("cn-hangzhou-internal-prod-1", "sas.aliyuncs.com"),
            new TeaPair("cn-hangzhou-internal-test-1", "sas.aliyuncs.com"),
            new TeaPair("cn-hangzhou-internal-test-2", "sas.aliyuncs.com"),
            new TeaPair("cn-hangzhou-internal-test-3", "sas.aliyuncs.com"),
            new TeaPair("cn-hangzhou-test-306", "sas.aliyuncs.com"),
            new TeaPair("cn-hongkong-finance-pop", "sas.aliyuncs.com"),
            new TeaPair("cn-huhehaote-nebula-1", "sas.aliyuncs.com"),
            new TeaPair("cn-north-2-gov-1", "sas.aliyuncs.com"),
            new TeaPair("cn-qingdao-nebula", "sas.aliyuncs.com"),
            new TeaPair("cn-shanghai-et15-b01", "sas.aliyuncs.com"),
            new TeaPair("cn-shanghai-et2-b01", "sas.aliyuncs.com"),
            new TeaPair("cn-shanghai-inner", "sas.aliyuncs.com"),
            new TeaPair("cn-shanghai-internal-test-1", "sas.aliyuncs.com"),
            new TeaPair("cn-shenzhen-inner", "sas.aliyuncs.com"),
            new TeaPair("cn-shenzhen-st4-d01", "sas.aliyuncs.com"),
            new TeaPair("cn-shenzhen-su18-b01", "sas.aliyuncs.com"),
            new TeaPair("cn-wuhan", "sas.aliyuncs.com"),
            new TeaPair("cn-wulanchabu", "sas.aliyuncs.com"),
            new TeaPair("cn-yushanfang", "sas.aliyuncs.com"),
            new TeaPair("cn-zhangbei", "sas.aliyuncs.com"),
            new TeaPair("cn-zhangbei-na61-b01", "sas.aliyuncs.com"),
            new TeaPair("cn-zhangjiakou-na62-a01", "sas.aliyuncs.com"),
            new TeaPair("cn-zhengzhou-nebula-1", "sas.aliyuncs.com"),
            new TeaPair("eu-west-1-oxs", "sas.aliyuncs.com"),
            new TeaPair("me-east-1", "sas.aliyuncs.com"),
            new TeaPair("rus-west-1-pop", "sas.aliyuncs.com"),
            new TeaPair("us-east-1", "tds-vpc.us-east-1.aliyuncs.com"),
            new TeaPair("us-west-1", "tds.us-west-1.aliyuncs.com")
        );
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("sas", _regionId, _endpointRule, _network, _suffix, _endpointMap, _endpoint);
    }


    public String getEndpoint(String productId, String regionId, String endpointRule, String network, String suffix, java.util.Map<String, String> endpointMap, String endpoint) throws Exception {
        if (!com.aliyun.teautil.Common.empty(endpoint)) {
            return endpoint;
        }

        if (!com.aliyun.teautil.Common.isUnset(endpointMap) && !com.aliyun.teautil.Common.empty(endpointMap.get(regionId))) {
            return endpointMap.get(regionId);
        }

        return com.aliyun.endpointutil.Client.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }

    /**
     * @summary Select an operation for assets.
     *
     * @param request AddAssetSelectionCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddAssetSelectionCriteriaResponse
     */
    public AddAssetSelectionCriteriaResponse addAssetSelectionCriteriaWithOptions(AddAssetSelectionCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaOperation)) {
            query.put("CriteriaOperation", request.criteriaOperation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetOperationList)) {
            query.put("TargetOperationList", request.targetOperationList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddAssetSelectionCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddAssetSelectionCriteriaResponse());
    }

    /**
     * @summary Select an operation for assets.
     *
     * @param request AddAssetSelectionCriteriaRequest
     * @return AddAssetSelectionCriteriaResponse
     */
    public AddAssetSelectionCriteriaResponse addAssetSelectionCriteria(AddAssetSelectionCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addAssetSelectionCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Adds check items to the whitelist for instances.
     *
     * @param request AddCheckInstanceResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCheckInstanceResultWhiteListResponse
     */
    public AddCheckInstanceResultWhiteListResponse addCheckInstanceResultWhiteListWithOptions(AddCheckInstanceResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkGroupId)) {
            query.put("CheckGroupId", request.checkGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddCheckInstanceResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddCheckInstanceResultWhiteListResponse());
    }

    /**
     * @summary Adds check items to the whitelist for instances.
     *
     * @param request AddCheckInstanceResultWhiteListRequest
     * @return AddCheckInstanceResultWhiteListResponse
     */
    public AddCheckInstanceResultWhiteListResponse addCheckInstanceResultWhiteList(AddCheckInstanceResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addCheckInstanceResultWhiteListWithOptions(request, runtime);
    }

    /**
     * @summary Adds check items to the whitelist.
     *
     * @param request AddCheckResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCheckResultWhiteListResponse
     */
    public AddCheckResultWhiteListResponse addCheckResultWhiteListWithOptions(AddCheckResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddCheckResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddCheckResultWhiteListResponse());
    }

    /**
     * @summary Adds check items to the whitelist.
     *
     * @param request AddCheckResultWhiteListRequest
     * @return AddCheckResultWhiteListResponse
     */
    public AddCheckResultWhiteListResponse addCheckResultWhiteList(AddCheckResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addCheckResultWhiteListWithOptions(request, runtime);
    }

    /**
     * @summary Creates a custom defense rule.
     *
     * @param request AddClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddClientUserDefineRuleResponse
     */
    public AddClientUserDefineRuleResponse addClientUserDefineRuleWithOptions(AddClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.actionType)) {
            query.put("ActionType", request.actionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cmdline)) {
            query.put("Cmdline", request.cmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domain)) {
            query.put("Domain", request.domain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePath)) {
            query.put("FilePath", request.filePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.IP)) {
            query.put("IP", request.IP);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.md5List)) {
            query.put("Md5List", request.md5List);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.newFilePath)) {
            query.put("NewFilePath", request.newFilePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentCmdline)) {
            query.put("ParentCmdline", request.parentCmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentProcPath)) {
            query.put("ParentProcPath", request.parentProcPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.portStr)) {
            query.put("PortStr", request.portStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPath)) {
            query.put("ProcPath", request.procPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryContent)) {
            query.put("RegistryContent", request.registryContent);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryKey)) {
            query.put("RegistryKey", request.registryKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddClientUserDefineRuleResponse());
    }

    /**
     * @summary Creates a custom defense rule.
     *
     * @param request AddClientUserDefineRuleRequest
     * @return AddClientUserDefineRuleResponse
     */
    public AddClientUserDefineRuleResponse addClientUserDefineRule(AddClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * @summary Creates a rule for non-image program defense.
     *
     * @param tmpReq AddContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddContainerDefenseRuleResponse
     */
    public AddContainerDefenseRuleResponse addContainerDefenseRuleWithOptions(AddContainerDefenseRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        AddContainerDefenseRuleShrinkRequest request = new AddContainerDefenseRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.whitelist)) {
            request.whitelistShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.whitelist, "Whitelist", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scope)) {
            query.put("Scope", request.scope);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelistShrink)) {
            query.put("Whitelist", request.whitelistShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddContainerDefenseRuleResponse());
    }

    /**
     * @summary Creates a rule for non-image program defense.
     *
     * @param request AddContainerDefenseRuleRequest
     * @return AddContainerDefenseRuleResponse
     */
    public AddContainerDefenseRuleResponse addContainerDefenseRule(AddContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @summary Creates a defense rule against container escapes.
     *
     * @param request AddContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddContainerPluginRuleResponse
     */
    public AddContainerPluginRuleResponse addContainerPluginRuleWithOptions(AddContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleTemplateId)) {
            query.put("RuleTemplateId", request.ruleTemplateId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectedPolicy)) {
            query.put("SelectedPolicy", request.selectedPolicy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteImages)) {
            query.put("WhiteImages", request.whiteImages);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddContainerPluginRuleResponse());
    }

    /**
     * @summary Creates a defense rule against container escapes.
     *
     * @param request AddContainerPluginRuleRequest
     * @return AddContainerPluginRuleResponse
     */
    public AddContainerPluginRuleResponse addContainerPluginRule(AddContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * @summary Creates an alert handling rule.
     *
     * @param request AddImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddImageEventOperationResponse
     */
    public AddImageEventOperationResponse addImageEventOperationWithOptions(AddImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.conditions)) {
            query.put("Conditions", request.conditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventKey)) {
            query.put("EventKey", request.eventKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenarios)) {
            query.put("Scenarios", request.scenarios);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddImageEventOperationResponse());
    }

    /**
     * @summary Creates an alert handling rule.
     *
     * @param request AddImageEventOperationRequest
     * @return AddImageEventOperationResponse
     */
    public AddImageEventOperationResponse addImageEventOperation(AddImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addImageEventOperationWithOptions(request, runtime);
    }

    /**
     * @summary Adds image vulnerabilities to the whitelist.
     *
     * @param request AddImageVulWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddImageVulWhiteListResponse
     */
    public AddImageVulWhiteListResponse addImageVulWhiteListWithOptions(AddImageVulWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelist)) {
            query.put("Whitelist", request.whitelist);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddImageVulWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddImageVulWhiteListResponse());
    }

    /**
     * @summary Adds image vulnerabilities to the whitelist.
     *
     * @param request AddImageVulWhiteListRequest
     * @return AddImageVulWhiteListResponse
     */
    public AddImageVulWhiteListResponse addImageVulWhiteList(AddImageVulWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addImageVulWhiteListWithOptions(request, runtime);
    }

    /**
     * @summary Creates a command that is used to install the Security Center agent.
     *
     * @param request AddInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddInstallCodeResponse
     */
    public AddInstallCodeResponse addInstallCodeWithOptions(AddInstallCodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.expiredDate)) {
            query.put("ExpiredDate", request.expiredDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.onlyImage)) {
            query.put("OnlyImage", request.onlyImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.proxyCluster)) {
            query.put("ProxyCluster", request.proxyCluster);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendorName)) {
            query.put("VendorName", request.vendorName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddInstallCodeResponse());
    }

    /**
     * @summary Creates a command that is used to install the Security Center agent.
     *
     * @param request AddInstallCodeRequest
     * @return AddInstallCodeResponse
     */
    public AddInstallCodeResponse addInstallCode(AddInstallCodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addInstallCodeWithOptions(request, runtime);
    }

    /**
     * @summary Adds a self-managed image repository.
     *
     * @param request AddPrivateRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddPrivateRegistryResponse
     */
    public AddPrivateRegistryResponse addPrivateRegistryWithOptions(AddPrivateRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.domainName)) {
            query.put("DomainName", request.domainName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extraParam)) {
            query.put("ExtraParam", request.extraParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.netType)) {
            query.put("NetType", request.netType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.password)) {
            query.put("Password", request.password);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.protocolType)) {
            query.put("ProtocolType", request.protocolType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryHostIp)) {
            query.put("RegistryHostIp", request.registryHostIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryRegionId)) {
            query.put("RegistryRegionId", request.registryRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryType)) {
            query.put("RegistryType", request.registryType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryVersion)) {
            query.put("RegistryVersion", request.registryVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.transPerHour)) {
            query.put("TransPerHour", request.transPerHour);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userName)) {
            query.put("UserName", request.userName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddPrivateRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddPrivateRegistryResponse());
    }

    /**
     * @summary Adds a self-managed image repository.
     *
     * @param request AddPrivateRegistryRequest
     * @return AddPrivateRegistryResponse
     */
    public AddPrivateRegistryResponse addPrivateRegistry(AddPrivateRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addPrivateRegistryWithOptions(request, runtime);
    }

    /**
     * @summary Creates a rule for container tamper-proofing.
     *
     * @param request AddSasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddSasContainerWebDefenseRuleResponse
     */
    public AddSasContainerWebDefenseRuleResponse addSasContainerWebDefenseRuleWithOptions(AddSasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pathConfDTOList)) {
            query.put("PathConfDTOList", request.pathConfDTOList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddSasContainerWebDefenseRuleResponse());
    }

    /**
     * @summary Creates a rule for container tamper-proofing.
     *
     * @param request AddSasContainerWebDefenseRuleRequest
     * @return AddSasContainerWebDefenseRuleResponse
     */
    public AddSasContainerWebDefenseRuleResponse addSasContainerWebDefenseRule(AddSasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addSasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @summary Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis.
     *
     * @param request AddSasModuleTrialRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddSasModuleTrialResponse
     */
    public AddSasModuleTrialResponse addSasModuleTrialWithOptions(AddSasModuleTrialRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.moduleCode)) {
            query.put("ModuleCode", request.moduleCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSasModuleTrial"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddSasModuleTrialResponse());
    }

    /**
     * @summary Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis.
     *
     * @param request AddSasModuleTrialRequest
     * @return AddSasModuleTrialResponse
     */
    public AddSasModuleTrialResponse addSasModuleTrial(AddSasModuleTrialRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addSasModuleTrialWithOptions(request, runtime);
    }

    /**
     * @summary Adds a tag to assets.
     *
     * @description Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
     *
     * @param request AddTagWithUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddTagWithUuidResponse
     */
    public AddTagWithUuidResponse addTagWithUuidWithOptions(AddTagWithUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tagName)) {
            query.put("TagName", request.tagName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddTagWithUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddTagWithUuidResponse());
    }

    /**
     * @summary Adds a tag to assets.
     *
     * @description Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
     *
     * @param request AddTagWithUuidRequest
     * @return AddTagWithUuidResponse
     */
    public AddTagWithUuidResponse addTagWithUuid(AddTagWithUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addTagWithUuidWithOptions(request, runtime);
    }

    /**
     * @summary Adds servers from which you want to uninstall the Security Center agent.
     *
     * @param request AddUninstallClientsByUuidsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddUninstallClientsByUuidsResponse
     */
    public AddUninstallClientsByUuidsResponse addUninstallClientsByUuidsWithOptions(AddUninstallClientsByUuidsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.callMethod)) {
            query.put("CallMethod", request.callMethod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.feedback)) {
            query.put("Feedback", request.feedback);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.region)) {
            query.put("Region", request.region);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddUninstallClientsByUuids"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddUninstallClientsByUuidsResponse());
    }

    /**
     * @summary Adds servers from which you want to uninstall the Security Center agent.
     *
     * @param request AddUninstallClientsByUuidsRequest
     * @return AddUninstallClientsByUuidsResponse
     */
    public AddUninstallClientsByUuidsResponse addUninstallClientsByUuids(AddUninstallClientsByUuidsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addUninstallClientsByUuidsWithOptions(request, runtime);
    }

    /**
     * @summary Creates a honeypot.
     *
     * @param request AddVpcHoneyPotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddVpcHoneyPotResponse
     */
    public AddVpcHoneyPotResponse addVpcHoneyPotWithOptions(AddVpcHoneyPotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddVpcHoneyPot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AddVpcHoneyPotResponse());
    }

    /**
     * @summary Creates a honeypot.
     *
     * @param request AddVpcHoneyPotRequest
     * @return AddVpcHoneyPotResponse
     */
    public AddVpcHoneyPotResponse addVpcHoneyPot(AddVpcHoneyPotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addVpcHoneyPotWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of an advanced whitelist rule.
     *
     * @param request AdvanceSecurityEventOperationsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AdvanceSecurityEventOperationsResponse
     */
    public AdvanceSecurityEventOperationsResponse advanceSecurityEventOperationsWithOptions(AdvanceSecurityEventOperationsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AdvanceSecurityEventOperations"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new AdvanceSecurityEventOperationsResponse());
    }

    /**
     * @summary Queries the configurations of an advanced whitelist rule.
     *
     * @param request AdvanceSecurityEventOperationsRequest
     * @return AdvanceSecurityEventOperationsResponse
     */
    public AdvanceSecurityEventOperationsResponse advanceSecurityEventOperations(AdvanceSecurityEventOperationsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.advanceSecurityEventOperationsWithOptions(request, runtime);
    }

    /**
     * @summary Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
     *
     * @param request BatchDeleteMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchDeleteMaliciousFileWhitelistConfigResponse
     */
    public BatchDeleteMaliciousFileWhitelistConfigResponse batchDeleteMaliciousFileWhitelistConfigWithOptions(BatchDeleteMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configIdList)) {
            query.put("ConfigIdList", request.configIdList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchDeleteMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchDeleteMaliciousFileWhitelistConfigResponse());
    }

    /**
     * @summary Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
     *
     * @param request BatchDeleteMaliciousFileWhitelistConfigRequest
     * @return BatchDeleteMaliciousFileWhitelistConfigResponse
     */
    public BatchDeleteMaliciousFileWhitelistConfigResponse batchDeleteMaliciousFileWhitelistConfig(BatchDeleteMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.batchDeleteMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables multiple features in proactive defense at a time.
     *
     * @param request BatchOperateCommonOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchOperateCommonOverallConfigResponse
     */
    public BatchOperateCommonOverallConfigResponse batchOperateCommonOverallConfigWithOptions(BatchOperateCommonOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeList)) {
            query.put("TypeList", request.typeList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchOperateCommonOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchOperateCommonOverallConfigResponse());
    }

    /**
     * @summary Enables or disables multiple features in proactive defense at a time.
     *
     * @param request BatchOperateCommonOverallConfigRequest
     * @return BatchOperateCommonOverallConfigResponse
     */
    public BatchOperateCommonOverallConfigResponse batchOperateCommonOverallConfig(BatchOperateCommonOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.batchOperateCommonOverallConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
     *
     * @param request BatchUpdateMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchUpdateMaliciousFileWhitelistConfigResponse
     */
    public BatchUpdateMaliciousFileWhitelistConfigResponse batchUpdateMaliciousFileWhitelistConfigWithOptions(BatchUpdateMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configList)) {
            query.put("ConfigList", request.configList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchUpdateMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BatchUpdateMaliciousFileWhitelistConfigResponse());
    }

    /**
     * @summary Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
     *
     * @param request BatchUpdateMaliciousFileWhitelistConfigRequest
     * @return BatchUpdateMaliciousFileWhitelistConfigResponse
     */
    public BatchUpdateMaliciousFileWhitelistConfigResponse batchUpdateMaliciousFileWhitelistConfig(BatchUpdateMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.batchUpdateMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * @summary Binds servers to Security Center or unbinds servers from Security Center.
     *
     * @param request BindAuthToMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BindAuthToMachineResponse
     */
    public BindAuthToMachineResponse bindAuthToMachineWithOptions(BindAuthToMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.authVersion)) {
            query.put("AuthVersion", request.authVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.autoBind)) {
            query.put("AutoBind", request.autoBind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bind)) {
            query.put("Bind", request.bind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindAll)) {
            query.put("BindAll", request.bindAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isPreBind)) {
            query.put("IsPreBind", request.isPreBind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ntmVersion)) {
            query.put("NtmVersion", request.ntmVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.preBindOrderId)) {
            query.put("PreBindOrderId", request.preBindOrderId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unBind)) {
            query.put("UnBind", request.unBind);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BindAuthToMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BindAuthToMachineResponse());
    }

    /**
     * @summary Binds servers to Security Center or unbinds servers from Security Center.
     *
     * @param request BindAuthToMachineRequest
     * @return BindAuthToMachineResponse
     */
    public BindAuthToMachineResponse bindAuthToMachine(BindAuthToMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.bindAuthToMachineWithOptions(request, runtime);
    }

    /**
     * @summary Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
     *
     * @param request BindHybridProxyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BindHybridProxyResponse
     */
    public BindHybridProxyResponse bindHybridProxyWithOptions(BindHybridProxyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.yundunUuids)) {
            query.put("YundunUuids", request.yundunUuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BindHybridProxy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new BindHybridProxyResponse());
    }

    /**
     * @summary Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
     *
     * @param request BindHybridProxyRequest
     * @return BindHybridProxyResponse
     */
    public BindHybridProxyResponse bindHybridProxy(BindHybridProxyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.bindHybridProxyWithOptions(request, runtime);
    }

    /**
     * @summary Cancels the main task.
     *
     * @param request CancelOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelOnceTaskResponse
     */
    public CancelOnceTaskResponse cancelOnceTaskWithOptions(CancelOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CancelOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CancelOnceTaskResponse());
    }

    /**
     * @summary Cancels the main task.
     *
     * @param request CancelOnceTaskRequest
     * @return CancelOnceTaskResponse
     */
    public CancelOnceTaskResponse cancelOnceTask(CancelOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.cancelOnceTaskWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the interval of asset synchronization configurations.
     *
     * @param request ChangeAssetRefreshTaskConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeAssetRefreshTaskConfigResponse
     */
    public ChangeAssetRefreshTaskConfigResponse changeAssetRefreshTaskConfigWithOptions(ChangeAssetRefreshTaskConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetRefreshConfigs)) {
            query.put("AssetRefreshConfigs", request.assetRefreshConfigs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeAssetRefreshTaskConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeAssetRefreshTaskConfigResponse());
    }

    /**
     * @summary Modifies the interval of asset synchronization configurations.
     *
     * @param request ChangeAssetRefreshTaskConfigRequest
     * @return ChangeAssetRefreshTaskConfigResponse
     */
    public ChangeAssetRefreshTaskConfigResponse changeAssetRefreshTaskConfig(ChangeAssetRefreshTaskConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeAssetRefreshTaskConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configuration items of the configuration assessment feature.
     *
     * @param tmpReq ChangeCheckConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeCheckConfigResponse
     */
    public ChangeCheckConfigResponse changeCheckConfigWithOptions(ChangeCheckConfigRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ChangeCheckConfigShrinkRequest request = new ChangeCheckConfigShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.configRequirementIds)) {
            request.configRequirementIdsShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.configRequirementIds, "ConfigRequirementIds", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.configStandardIds)) {
            request.configStandardIdsShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.configStandardIds, "ConfigStandardIds", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.addedCheck)) {
            query.put("AddedCheck", request.addedCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configRequirementIdsShrink)) {
            query.put("ConfigRequirementIds", request.configRequirementIdsShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configStandardIdsShrink)) {
            query.put("ConfigStandardIds", request.configStandardIdsShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configure)) {
            query.put("Configure", request.configure);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cycleDays)) {
            query.put("CycleDays", request.cycleDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enableAddCheck)) {
            query.put("EnableAddCheck", request.enableAddCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enableAutoCheck)) {
            query.put("EnableAutoCheck", request.enableAutoCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.removedCheck)) {
            query.put("RemovedCheck", request.removedCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.standardIds)) {
            query.put("StandardIds", request.standardIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeCheckConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeCheckConfigResponse());
    }

    /**
     * @summary Modifies the configuration items of the configuration assessment feature.
     *
     * @param request ChangeCheckConfigRequest
     * @return ChangeCheckConfigResponse
     */
    public ChangeCheckConfigResponse changeCheckConfig(ChangeCheckConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeCheckConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the custom configuration items of a check item.
     *
     * @param request ChangeCheckCustomConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeCheckCustomConfigResponse
     */
    public ChangeCheckCustomConfigResponse changeCheckCustomConfigWithOptions(ChangeCheckCustomConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.customConfigs)) {
            query.put("CustomConfigs", request.customConfigs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repairConfigs)) {
            query.put("RepairConfigs", request.repairConfigs);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeCheckCustomConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeCheckCustomConfigResponse());
    }

    /**
     * @summary Modifies the custom configuration items of a check item.
     *
     * @param request ChangeCheckCustomConfigRequest
     * @return ChangeCheckCustomConfigResponse
     */
    public ChangeCheckCustomConfigResponse changeCheckCustomConfig(ChangeCheckCustomConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeCheckCustomConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the details of the deduction modules of the security score feature, including custom settings.
     *
     * @param request ChangeSecurityScoreRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeSecurityScoreRuleResponse
     */
    public ChangeSecurityScoreRuleResponse changeSecurityScoreRuleWithOptions(ChangeSecurityScoreRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resetSecurityScoreRule)) {
            query.put("ResetSecurityScoreRule", request.resetSecurityScoreRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityScoreRuleList)) {
            query.put("SecurityScoreRuleList", request.securityScoreRuleList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeSecurityScoreRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeSecurityScoreRuleResponse());
    }

    /**
     * @summary Modifies the details of the deduction modules of the security score feature, including custom settings.
     *
     * @param request ChangeSecurityScoreRuleRequest
     * @return ChangeSecurityScoreRuleResponse
     */
    public ChangeSecurityScoreRuleResponse changeSecurityScoreRule(ChangeSecurityScoreRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeSecurityScoreRuleWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
     *
     * @param request ChangeUserLangRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeUserLangResponse
     */
    public ChangeUserLangResponse changeUserLangWithOptions(ChangeUserLangRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.userLang)) {
            query.put("UserLang", request.userLang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeUserLang"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeUserLangResponse());
    }

    /**
     * @summary Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
     *
     * @param request ChangeUserLangRequest
     * @return ChangeUserLangResponse
     */
    public ChangeUserLangResponse changeUserLang(ChangeUserLangRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeUserLangWithOptions(request, runtime);
    }

    /**
     * @summary Checks whether the IDs of quarantined files are valid.
     *
     * @param request CheckQuaraFileIdRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckQuaraFileIdResponse
     */
    public CheckQuaraFileIdResponse checkQuaraFileIdWithOptions(CheckQuaraFileIdRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.quaraFileIds)) {
            query.put("QuaraFileIds", request.quaraFileIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckQuaraFileId"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckQuaraFileIdResponse());
    }

    /**
     * @summary Checks whether the IDs of quarantined files are valid.
     *
     * @param request CheckQuaraFileIdRequest
     * @return CheckQuaraFileIdResponse
     */
    public CheckQuaraFileIdResponse checkQuaraFileId(CheckQuaraFileIdRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkQuaraFileIdWithOptions(request, runtime);
    }

    /**
     * @summary Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
     *
     * @param request CheckSecurityEventIdRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckSecurityEventIdResponse
     */
    public CheckSecurityEventIdResponse checkSecurityEventIdWithOptions(CheckSecurityEventIdRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckSecurityEventId"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckSecurityEventIdResponse());
    }

    /**
     * @summary Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
     *
     * @param request CheckSecurityEventIdRequest
     * @return CheckSecurityEventIdResponse
     */
    public CheckSecurityEventIdResponse checkSecurityEventId(CheckSecurityEventIdRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkSecurityEventIdWithOptions(request, runtime);
    }

    /**
     * @summary Checks whether Elastic Compute Service (ECS) instances exist.
     *
     * @param request CheckUserHasEcsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckUserHasEcsResponse
     */
    public CheckUserHasEcsResponse checkUserHasEcsWithOptions(CheckUserHasEcsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckUserHasEcs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CheckUserHasEcsResponse());
    }

    /**
     * @summary Checks whether Elastic Compute Service (ECS) instances exist.
     *
     * @param request CheckUserHasEcsRequest
     * @return CheckUserHasEcsResponse
     */
    public CheckUserHasEcsResponse checkUserHasEcs(CheckUserHasEcsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkUserHasEcsWithOptions(request, runtime);
    }

    /**
     * @summary Confirms the alert events that you want to handle.
     *
     * @param request ConfirmVirusEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ConfirmVirusEventsResponse
     */
    public ConfirmVirusEventsResponse confirmVirusEventsWithOptions(ConfirmVirusEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.operationAll)) {
            query.put("OperationAll", request.operationAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationRange)) {
            query.put("OperationRange", request.operationRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ConfirmVirusEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ConfirmVirusEventsResponse());
    }

    /**
     * @summary Confirms the alert events that you want to handle.
     *
     * @param request ConfirmVirusEventsRequest
     * @return ConfirmVirusEventsResponse
     */
    public ConfirmVirusEventsResponse confirmVirusEvents(ConfirmVirusEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.confirmVirusEventsWithOptions(request, runtime);
    }

    /**
     * @summary Creates an agentless detection task.
     *
     * @param request CreateAgentlessScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAgentlessScanTaskResponse
     */
    public CreateAgentlessScanTaskResponse createAgentlessScanTaskWithOptions(CreateAgentlessScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.autoDeleteDays)) {
            query.put("AutoDeleteDays", request.autoDeleteDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.releaseAfterScan)) {
            query.put("ReleaseAfterScan", request.releaseAfterScan);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanDataDisk)) {
            query.put("ScanDataDisk", request.scanDataDisk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAgentlessScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAgentlessScanTaskResponse());
    }

    /**
     * @summary Creates an agentless detection task.
     *
     * @param request CreateAgentlessScanTaskRequest
     * @return CreateAgentlessScanTaskResponse
     */
    public CreateAgentlessScanTaskResponse createAgentlessScanTask(CreateAgentlessScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createAgentlessScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Creates a defense rule against brute-force attacks.
     *
     * @param request CreateAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAntiBruteForceRuleResponse
     */
    public CreateAntiBruteForceRuleResponse createAntiBruteForceRuleWithOptions(CreateAntiBruteForceRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defaultRule)) {
            query.put("DefaultRule", request.defaultRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.failCount)) {
            query.put("FailCount", request.failCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forbiddenTime)) {
            query.put("ForbiddenTime", request.forbiddenTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.span)) {
            query.put("Span", request.span);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAntiBruteForceRuleResponse());
    }

    /**
     * @summary Creates a defense rule against brute-force attacks.
     *
     * @param request CreateAntiBruteForceRuleRequest
     * @return CreateAntiBruteForceRuleResponse
     */
    public CreateAntiBruteForceRuleResponse createAntiBruteForceRule(CreateAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * @summary Create asset selection configurations.
     *
     * @param request CreateAssetSelectionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAssetSelectionConfigResponse
     */
    public CreateAssetSelectionConfigResponse createAssetSelectionConfigWithOptions(CreateAssetSelectionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.businessType)) {
            query.put("BusinessType", request.businessType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAssetSelectionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAssetSelectionConfigResponse());
    }

    /**
     * @summary Create asset selection configurations.
     *
     * @param request CreateAssetSelectionConfigRequest
     * @return CreateAssetSelectionConfigResponse
     */
    public CreateAssetSelectionConfigResponse createAssetSelectionConfig(CreateAssetSelectionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createAssetSelectionConfigWithOptions(request, runtime);
    }

    /**
     * @summary Creates an anti-ransomware policy for servers.
     *
     * @param tmpReq CreateBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateBackupPolicyResponse
     */
    public CreateBackupPolicyResponse createBackupPolicyWithOptions(CreateBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateBackupPolicyShrinkRequest request = new CreateBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.policy)) {
            request.policyShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.policy, "Policy", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyShrink)) {
            query.put("Policy", request.policyShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyRegionId)) {
            query.put("PolicyRegionId", request.policyRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateBackupPolicyResponse());
    }

    /**
     * @summary Creates an anti-ransomware policy for servers.
     *
     * @param request CreateBackupPolicyRequest
     * @return CreateBackupPolicyResponse
     */
    public CreateBackupPolicyResponse createBackupPolicy(CreateBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createBackupPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Creates a container scan task.
     *
     * @param request CreateContainerScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateContainerScanTaskResponse
     */
    public CreateContainerScanTaskResponse createContainerScanTaskWithOptions(CreateContainerScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerIds)) {
            query.put("ContainerIds", request.containerIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateContainerScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateContainerScanTaskResponse());
    }

    /**
     * @summary Creates a container scan task.
     *
     * @param request CreateContainerScanTaskRequest
     * @return CreateContainerScanTaskResponse
     */
    public CreateContainerScanTaskResponse createContainerScanTask(CreateContainerScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createContainerScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Creates a scan task for a running container application based on the application name.
     *
     * @param request CreateContainerScanTaskByAppNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateContainerScanTaskByAppNameResponse
     */
    public CreateContainerScanTaskByAppNameResponse createContainerScanTaskByAppNameWithOptions(CreateContainerScanTaskByAppNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appNames)) {
            query.put("AppNames", request.appNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateContainerScanTaskByAppName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateContainerScanTaskByAppNameResponse());
    }

    /**
     * @summary Creates a scan task for a running container application based on the application name.
     *
     * @param request CreateContainerScanTaskByAppNameRequest
     * @return CreateContainerScanTaskByAppNameResponse
     */
    public CreateContainerScanTaskByAppNameResponse createContainerScanTaskByAppName(CreateContainerScanTaskByAppNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createContainerScanTaskByAppNameWithOptions(request, runtime);
    }

    /**
     * @summary Creates an IP address blocking policy for one or more servers.
     *
     * @param request CreateCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCustomBlockRecordResponse
     */
    public CreateCustomBlockRecordResponse createCustomBlockRecordWithOptions(CreateCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.expireTime)) {
            query.put("ExpireTime", request.expireTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateCustomBlockRecordResponse());
    }

    /**
     * @summary Creates an IP address blocking policy for one or more servers.
     *
     * @param request CreateCustomBlockRecordRequest
     * @return CreateCustomBlockRecordResponse
     */
    public CreateCustomBlockRecordResponse createCustomBlockRecord(CreateCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * @summary Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
     *
     * @param request CreateCycleTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCycleTaskResponse
     */
    public CreateCycleTaskResponse createCycleTaskWithOptions(CreateCycleTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.firstDateStr)) {
            query.put("FirstDateStr", request.firstDateStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalPeriod)) {
            query.put("IntervalPeriod", request.intervalPeriod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.param)) {
            query.put("Param", request.param);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.periodUnit)) {
            query.put("PeriodUnit", request.periodUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetEndTime)) {
            query.put("TargetEndTime", request.targetEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetStartTime)) {
            query.put("TargetStartTime", request.targetStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateCycleTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateCycleTaskResponse());
    }

    /**
     * @summary Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
     *
     * @param request CreateCycleTaskRequest
     * @return CreateCycleTaskResponse
     */
    public CreateCycleTaskResponse createCycleTask(CreateCycleTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createCycleTaskWithOptions(request, runtime);
    }

    /**
     * @summary Pushes a file to the cloud for detection.
     *
     * @description You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the MD5 hash value before you call this operation.
     * To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
     * 1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
     * 2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
     *
     * @param request CreateFileDetectRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileDetectResponse
     */
    public CreateFileDetectResponse createFileDetectWithOptions(CreateFileDetectRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.decompress)) {
            query.put("Decompress", request.decompress);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.downloadUrl)) {
            query.put("DownloadUrl", request.downloadUrl);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hashKey)) {
            query.put("HashKey", request.hashKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ossKey)) {
            query.put("OssKey", request.ossKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileDetect"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileDetectResponse());
    }

    /**
     * @summary Pushes a file to the cloud for detection.
     *
     * @description You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the MD5 hash value before you call this operation.
     * To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
     * 1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
     * 2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
     *
     * @param request CreateFileDetectRequest
     * @return CreateFileDetectResponse
     */
    public CreateFileDetectResponse createFileDetect(CreateFileDetectRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileDetectWithOptions(request, runtime);
    }

    /**
     * @summary Queries the parameters that are required to upload a file for detection.
     *
     * @description You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
     * The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
     *
     * @param request CreateFileDetectUploadUrlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileDetectUploadUrlResponse
     */
    public CreateFileDetectUploadUrlResponse createFileDetectUploadUrlWithOptions(CreateFileDetectUploadUrlRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.hashKeyContextList)) {
            query.put("HashKeyContextList", request.hashKeyContextList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hashKeyList)) {
            query.put("HashKeyList", request.hashKeyList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileDetectUploadUrl"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileDetectUploadUrlResponse());
    }

    /**
     * @summary Queries the parameters that are required to upload a file for detection.
     *
     * @description You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
     * The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
     *
     * @param request CreateFileDetectUploadUrlRequest
     * @return CreateFileDetectUploadUrlResponse
     */
    public CreateFileDetectUploadUrlResponse createFileDetectUploadUrl(CreateFileDetectUploadUrlRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileDetectUploadUrlWithOptions(request, runtime);
    }

    /**
     * @summary Creates a core file monitoring rule.
     *
     * @param request CreateFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileProtectRuleResponse
     */
    public CreateFileProtectRuleResponse createFileProtectRuleWithOptions(CreateFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileOps)) {
            query.put("FileOps", request.fileOps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePaths)) {
            query.put("FilePaths", request.filePaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPaths)) {
            query.put("ProcPaths", request.procPaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchId)) {
            query.put("SwitchId", request.switchId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileProtectRuleResponse());
    }

    /**
     * @summary Creates a core file monitoring rule.
     *
     * @param request CreateFileProtectRuleRequest
     * @return CreateFileProtectRuleResponse
     */
    public CreateFileProtectRuleResponse createFileProtectRule(CreateFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * @summary Specifies the queries per second (QPS) limit on the files uploaded from the client.
     *
     * @param request CreateFileUploadLimitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileUploadLimitResponse
     */
    public CreateFileUploadLimitResponse createFileUploadLimitWithOptions(CreateFileUploadLimitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.limit)) {
            query.put("Limit", request.limit);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileUploadLimit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileUploadLimitResponse());
    }

    /**
     * @summary Specifies the queries per second (QPS) limit on the files uploaded from the client.
     *
     * @param request CreateFileUploadLimitRequest
     * @return CreateFileUploadLimitResponse
     */
    public CreateFileUploadLimitResponse createFileUploadLimit(CreateFileUploadLimitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileUploadLimitWithOptions(request, runtime);
    }

    /**
     * @summary Creates a honeypot.
     *
     * @param request CreateHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotResponse
     */
    public CreateHoneypotResponse createHoneypotWithOptions(CreateHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageId)) {
            query.put("HoneypotImageId", request.honeypotImageId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotName)) {
            query.put("HoneypotName", request.honeypotName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotResponse());
    }

    /**
     * @summary Creates a honeypot.
     *
     * @param request CreateHoneypotRequest
     * @return CreateHoneypotResponse
     */
    public CreateHoneypotResponse createHoneypot(CreateHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Creates a management node.
     *
     * @param request CreateHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotNodeResponse
     */
    public CreateHoneypotNodeResponse createHoneypotNodeWithOptions(CreateHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allowHoneypotAccessInternet)) {
            query.put("AllowHoneypotAccessInternet", request.allowHoneypotAccessInternet);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.availableProbeNum)) {
            query.put("AvailableProbeNum", request.availableProbeNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityGroupProbeIpList)) {
            query.put("SecurityGroupProbeIpList", request.securityGroupProbeIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotNodeResponse());
    }

    /**
     * @summary Creates a management node.
     *
     * @param request CreateHoneypotNodeRequest
     * @return CreateHoneypotNodeResponse
     */
    public CreateHoneypotNodeResponse createHoneypotNode(CreateHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * @summary Creates a honeypot template.
     *
     * @param request CreateHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotPresetResponse
     */
    public CreateHoneypotPresetResponse createHoneypotPresetWithOptions(CreateHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.presetName)) {
            query.put("PresetName", request.presetName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotPresetResponse());
    }

    /**
     * @summary Creates a honeypot template.
     *
     * @param request CreateHoneypotPresetRequest
     * @return CreateHoneypotPresetResponse
     */
    public CreateHoneypotPresetResponse createHoneypotPreset(CreateHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * @summary Creates a probe.
     *
     * @param request CreateHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotProbeResponse
     */
    public CreateHoneypotProbeResponse createHoneypotProbeWithOptions(CreateHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.arp)) {
            query.put("Arp", request.arp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.businessGroupId)) {
            query.put("BusinessGroupId", request.businessGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlNodeId)) {
            query.put("ControlNodeId", request.controlNodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.displayName)) {
            query.put("DisplayName", request.displayName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotBindList)) {
            query.put("HoneypotBindList", request.honeypotBindList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ping)) {
            query.put("Ping", request.ping);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeType)) {
            query.put("ProbeType", request.probeType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeVersion)) {
            query.put("ProbeVersion", request.probeVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.proxyIp)) {
            query.put("ProxyIp", request.proxyIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotProbeResponse());
    }

    /**
     * @summary Creates a probe.
     *
     * @param request CreateHoneypotProbeRequest
     * @return CreateHoneypotProbeResponse
     */
    public CreateHoneypotProbeResponse createHoneypotProbe(CreateHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * @summary Creates a monitoring or forwarding service for a probe.
     *
     * @param request CreateHoneypotProbeBindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotProbeBindResponse
     */
    public CreateHoneypotProbeBindResponse createHoneypotProbeBindWithOptions(CreateHoneypotProbeBindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindPortList)) {
            query.put("BindPortList", request.bindPortList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceIpList)) {
            query.put("ServiceIpList", request.serviceIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotProbeBind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotProbeBindResponse());
    }

    /**
     * @summary Creates a monitoring or forwarding service for a probe.
     *
     * @param request CreateHoneypotProbeBindRequest
     * @return CreateHoneypotProbeBindResponse
     */
    public CreateHoneypotProbeBindResponse createHoneypotProbeBind(CreateHoneypotProbeBindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotProbeBindWithOptions(request, runtime);
    }

    /**
     * @summary Creates a defense rule in the container firewall module.
     *
     * @param tmpReq CreateInterceptionRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateInterceptionRuleResponse
     */
    public CreateInterceptionRuleResponse createInterceptionRuleWithOptions(CreateInterceptionRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateInterceptionRuleShrinkRequest request = new CreateInterceptionRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.dstTargetList)) {
            request.dstTargetListShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.dstTargetList, "DstTargetList", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.srcTarget)) {
            request.srcTargetShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, "SrcTarget", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dstTargetListShrink)) {
            query.put("DstTargetList", request.dstTargetListShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interceptType)) {
            query.put("InterceptType", request.interceptType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderIndex)) {
            query.put("OrderIndex", request.orderIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcTargetShrink)) {
            query.put("SrcTarget", request.srcTargetShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateInterceptionRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateInterceptionRuleResponse());
    }

    /**
     * @summary Creates a defense rule in the container firewall module.
     *
     * @param request CreateInterceptionRuleRequest
     * @return CreateInterceptionRuleResponse
     */
    public CreateInterceptionRuleResponse createInterceptionRule(CreateInterceptionRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createInterceptionRuleWithOptions(request, runtime);
    }

    /**
     * @summary Creates a defense object.
     *
     * @param request CreateInterceptionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateInterceptionTargetResponse
     */
    public CreateInterceptionTargetResponse createInterceptionTargetWithOptions(CreateInterceptionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageList)) {
            query.put("ImageList", request.imageList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateInterceptionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateInterceptionTargetResponse());
    }

    /**
     * @summary Creates a defense object.
     *
     * @param request CreateInterceptionTargetRequest
     * @return CreateInterceptionTargetResponse
     */
    public CreateInterceptionTargetResponse createInterceptionTarget(CreateInterceptionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createInterceptionTargetWithOptions(request, runtime);
    }

    /**
     * @summary Creates a Jenkins image repository.
     *
     * @param request CreateJenkinsImageRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateJenkinsImageRegistryResponse
     */
    public CreateJenkinsImageRegistryResponse createJenkinsImageRegistryWithOptions(CreateJenkinsImageRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.domainName)) {
            body.put("DomainName", request.domainName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extraParam)) {
            body.put("ExtraParam", request.extraParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.netType)) {
            body.put("NetType", request.netType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.password)) {
            body.put("Password", request.password);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.persistenceDay)) {
            body.put("PersistenceDay", request.persistenceDay);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.protocolType)) {
            body.put("ProtocolType", request.protocolType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            body.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryHostIp)) {
            body.put("RegistryHostIp", request.registryHostIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryName)) {
            body.put("RegistryName", request.registryName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryType)) {
            body.put("RegistryType", request.registryType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryVersion)) {
            body.put("RegistryVersion", request.registryVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.transPerHour)) {
            body.put("TransPerHour", request.transPerHour);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userName)) {
            body.put("UserName", request.userName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            body.put("VpcId", request.vpcId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteList)) {
            body.put("WhiteList", request.whiteList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateJenkinsImageRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateJenkinsImageRegistryResponse());
    }

    /**
     * @summary Creates a Jenkins image repository.
     *
     * @param request CreateJenkinsImageRegistryRequest
     * @return CreateJenkinsImageRegistryResponse
     */
    public CreateJenkinsImageRegistryResponse createJenkinsImageRegistry(CreateJenkinsImageRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createJenkinsImageRegistryWithOptions(request, runtime);
    }

    /**
     * @summary Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request CreateMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMaliciousFileWhitelistConfigResponse
     */
    public CreateMaliciousFileWhitelistConfigResponse createMaliciousFileWhitelistConfigWithOptions(CreateMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.field)) {
            query.put("Field", request.field);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operator)) {
            query.put("Operator", request.operator);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetValue)) {
            query.put("TargetValue", request.targetValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateMaliciousFileWhitelistConfigResponse());
    }

    /**
     * @summary Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request CreateMaliciousFileWhitelistConfigRequest
     * @return CreateMaliciousFileWhitelistConfigResponse
     */
    public CreateMaliciousFileWhitelistConfigResponse createMaliciousFileWhitelistConfig(CreateMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * @summary Adds remarks to alert events for agentless detection.
     *
     * @param request CreateMaliciousNoteRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMaliciousNoteResponse
     */
    public CreateMaliciousNoteResponse createMaliciousNoteWithOptions(CreateMaliciousNoteRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.note)) {
            query.put("Note", request.note);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateMaliciousNote"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateMaliciousNoteResponse());
    }

    /**
     * @summary Adds remarks to alert events for agentless detection.
     *
     * @param request CreateMaliciousNoteRequest
     * @return CreateMaliciousNoteResponse
     */
    public CreateMaliciousNoteResponse createMaliciousNote(CreateMaliciousNoteRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createMaliciousNoteWithOptions(request, runtime);
    }

    /**
     * @summary Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
     *
     * @param request CreateOpaClusterPluginRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOpaClusterPluginResponse
     */
    public CreateOpaClusterPluginResponse createOpaClusterPluginWithOptions(CreateOpaClusterPluginRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOpaClusterPlugin"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOpaClusterPluginResponse());
    }

    /**
     * @summary Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
     *
     * @param request CreateOpaClusterPluginRequest
     * @return CreateOpaClusterPluginResponse
     */
    public CreateOpaClusterPluginResponse createOpaClusterPlugin(CreateOpaClusterPluginRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOpaClusterPluginWithOptions(request, runtime);
    }

    /**
     * @summary Creates a rule to block at-risk images.
     *
     * @param tmpReq CreateOpaStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOpaStrategyNewResponse
     */
    public CreateOpaStrategyNewResponse createOpaStrategyNewWithOptions(CreateOpaStrategyNewRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateOpaStrategyNewShrinkRequest request = new CreateOpaStrategyNewShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.alarmDetail)) {
            request.alarmDetailShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.alarmDetail, "AlarmDetail", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmDetailShrink)) {
            query.put("AlarmDetail", request.alarmDetailShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousImage)) {
            query.put("MaliciousImage", request.maliciousImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scopes)) {
            query.put("Scopes", request.scopes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTemplateId)) {
            query.put("StrategyTemplateId", request.strategyTemplateId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unScanedImage)) {
            query.put("UnScanedImage", request.unScanedImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteList)) {
            query.put("WhiteList", request.whiteList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOpaStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOpaStrategyNewResponse());
    }

    /**
     * @summary Creates a rule to block at-risk images.
     *
     * @param request CreateOpaStrategyNewRequest
     * @return CreateOpaStrategyNewResponse
     */
    public CreateOpaStrategyNewResponse createOpaStrategyNew(CreateOpaStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOpaStrategyNewWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
     *
     * @description A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
     *
     * @param request CreateOrUpdateAssetGroupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOrUpdateAssetGroupResponse
     */
    public CreateOrUpdateAssetGroupResponse createOrUpdateAssetGroupWithOptions(CreateOrUpdateAssetGroupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupName)) {
            query.put("GroupName", request.groupName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOrUpdateAssetGroup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOrUpdateAssetGroupResponse());
    }

    /**
     * @summary Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
     *
     * @description A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
     *
     * @param request CreateOrUpdateAssetGroupRequest
     * @return CreateOrUpdateAssetGroupResponse
     */
    public CreateOrUpdateAssetGroupResponse createOrUpdateAssetGroup(CreateOrUpdateAssetGroupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOrUpdateAssetGroupWithOptions(request, runtime);
    }

    /**
     * @summary Creates or modifies a DingTalk chatbot that sends notifications.
     *
     * @param request CreateOrUpdateDingTalkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOrUpdateDingTalkResponse
     */
    public CreateOrUpdateDingTalkResponse createOrUpdateDingTalkWithOptions(CreateOrUpdateDingTalkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configList)) {
            query.put("ConfigList", request.configList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dingTalkLang)) {
            query.put("DingTalkLang", request.dingTalkLang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupIdList)) {
            query.put("GroupIdList", request.groupIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalTime)) {
            query.put("IntervalTime", request.intervalTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleActionName)) {
            query.put("RuleActionName", request.ruleActionName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sendUrl)) {
            query.put("SendUrl", request.sendUrl);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOrUpdateDingTalk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOrUpdateDingTalkResponse());
    }

    /**
     * @summary Creates or modifies a DingTalk chatbot that sends notifications.
     *
     * @param request CreateOrUpdateDingTalkRequest
     * @return CreateOrUpdateDingTalkResponse
     */
    public CreateOrUpdateDingTalkResponse createOrUpdateDingTalk(CreateOrUpdateDingTalkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOrUpdateDingTalkWithOptions(request, runtime);
    }

    /**
     * @summary Creates a bucket check task.
     *
     * @param request CreateOssBucketScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOssBucketScanTaskResponse
     */
    public CreateOssBucketScanTaskResponse createOssBucketScanTaskWithOptions(CreateOssBucketScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allKeyPrefix)) {
            query.put("AllKeyPrefix", request.allKeyPrefix);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.excludeKeySuffixList)) {
            query.put("ExcludeKeySuffixList", request.excludeKeySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyPrefixList)) {
            query.put("KeyPrefixList", request.keyPrefixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keySuffixList)) {
            query.put("KeySuffixList", request.keySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanMode)) {
            query.put("ScanMode", request.scanMode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOssBucketScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOssBucketScanTaskResponse());
    }

    /**
     * @summary Creates a bucket check task.
     *
     * @param request CreateOssBucketScanTaskRequest
     * @return CreateOssBucketScanTaskResponse
     */
    public CreateOssBucketScanTaskResponse createOssBucketScanTask(CreateOssBucketScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOssBucketScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Creates a scan policy.
     *
     * @param request CreateOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOssScanConfigResponse
     */
    public CreateOssScanConfigResponse createOssScanConfigWithOptions(CreateOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allKeyPrefix)) {
            query.put("AllKeyPrefix", request.allKeyPrefix);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyPrefixList)) {
            query.put("KeyPrefixList", request.keyPrefixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keySuffixList)) {
            query.put("KeySuffixList", request.keySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanDayList)) {
            query.put("ScanDayList", request.scanDayList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOssScanConfigResponse());
    }

    /**
     * @summary Creates a scan policy.
     *
     * @param request CreateOssScanConfigRequest
     * @return CreateOssScanConfigResponse
     */
    public CreateOssScanConfigResponse createOssScanConfig(CreateOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOssScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Creates a restoration task.
     *
     * @param request CreateRestoreJobRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateRestoreJobResponse
     */
    public CreateRestoreJobResponse createRestoreJobWithOptions(CreateRestoreJobRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.includes)) {
            query.put("Includes", request.includes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotHash)) {
            query.put("SnapshotHash", request.snapshotHash);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotId)) {
            query.put("SnapshotId", request.snapshotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotVersion)) {
            query.put("SnapshotVersion", request.snapshotVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vaultId)) {
            query.put("VaultId", request.vaultId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateRestoreJob"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateRestoreJobResponse());
    }

    /**
     * @summary Creates a restoration task.
     *
     * @param request CreateRestoreJobRequest
     * @return CreateRestoreJobResponse
     */
    public CreateRestoreJobResponse createRestoreJob(CreateRestoreJobRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createRestoreJobWithOptions(request, runtime);
    }

    /**
     * @summary Creates a service-linked role and authorizes Security Center to access cloud resources.
     *
     * @description For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
     *
     * @param request CreateServiceLinkedRoleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateServiceLinkedRoleResponse
     */
    public CreateServiceLinkedRoleResponse createServiceLinkedRoleWithOptions(CreateServiceLinkedRoleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.serviceLinkedRole)) {
            query.put("ServiceLinkedRole", request.serviceLinkedRole);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateServiceLinkedRole"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateServiceLinkedRoleResponse());
    }

    /**
     * @summary Creates a service-linked role and authorizes Security Center to access cloud resources.
     *
     * @description For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
     *
     * @param request CreateServiceLinkedRoleRequest
     * @return CreateServiceLinkedRoleResponse
     */
    public CreateServiceLinkedRoleResponse createServiceLinkedRole(CreateServiceLinkedRoleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createServiceLinkedRoleWithOptions(request, runtime);
    }

    /**
     * @summary Create a service trail.
     *
     * @param request CreateServiceTrailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateServiceTrailResponse
     */
    public CreateServiceTrailResponse createServiceTrailWithOptions(CreateServiceTrailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateServiceTrail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateServiceTrailResponse());
    }

    /**
     * @summary Create a service trail.
     *
     * @param request CreateServiceTrailRequest
     * @return CreateServiceTrailResponse
     */
    public CreateServiceTrailResponse createServiceTrail(CreateServiceTrailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createServiceTrailWithOptions(request, runtime);
    }

    /**
     * @summary Creates a task to query alert events that are triggered by the same rule or of the same alert type.
     *
     * @param request CreateSimilarSecurityEventsQueryTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSimilarSecurityEventsQueryTaskResponse
     */
    public CreateSimilarSecurityEventsQueryTaskResponse createSimilarSecurityEventsQueryTaskWithOptions(CreateSimilarSecurityEventsQueryTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.similarEventScenarioCode)) {
            query.put("SimilarEventScenarioCode", request.similarEventScenarioCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSimilarSecurityEventsQueryTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSimilarSecurityEventsQueryTaskResponse());
    }

    /**
     * @summary Creates a task to query alert events that are triggered by the same rule or of the same alert type.
     *
     * @param request CreateSimilarSecurityEventsQueryTaskRequest
     * @return CreateSimilarSecurityEventsQueryTaskResponse
     */
    public CreateSimilarSecurityEventsQueryTaskResponse createSimilarSecurityEventsQueryTask(CreateSimilarSecurityEventsQueryTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createSimilarSecurityEventsQueryTaskWithOptions(request, runtime);
    }

    /**
     * @summary Adds remarks to an alert event.
     *
     * @param request CreateSuspEventNoteRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSuspEventNoteResponse
     */
    public CreateSuspEventNoteResponse createSuspEventNoteWithOptions(CreateSuspEventNoteRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.note)) {
            query.put("Note", request.note);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSuspEventNote"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSuspEventNoteResponse());
    }

    /**
     * @summary Adds remarks to an alert event.
     *
     * @param request CreateSuspEventNoteRequest
     * @return CreateSuspEventNoteResponse
     */
    public CreateSuspEventNoteResponse createSuspEventNote(CreateSuspEventNoteRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createSuspEventNoteWithOptions(request, runtime);
    }

    /**
     * @summary Creates an anti-ransomware policy for a database.
     *
     * @param tmpReq CreateUniBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUniBackupPolicyResponse
     */
    public CreateUniBackupPolicyResponse createUniBackupPolicyWithOptions(CreateUniBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateUniBackupPolicyShrinkRequest request = new CreateUniBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.fullPlan)) {
            request.fullPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, "FullPlan", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.incPlan)) {
            request.incPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, "IncPlan", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountName)) {
            query.put("AccountName", request.accountName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.accountPassword)) {
            query.put("AccountPassword", request.accountPassword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.databaseAddByUser)) {
            query.put("DatabaseAddByUser", request.databaseAddByUser);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.databaseType)) {
            query.put("DatabaseType", request.databaseType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fullPlanShrink)) {
            query.put("FullPlan", request.fullPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incPlanShrink)) {
            query.put("IncPlan", request.incPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyName)) {
            query.put("PolicyName", request.policyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.retention)) {
            query.put("Retention", request.retention);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.speedLimiter)) {
            query.put("SpeedLimiter", request.speedLimiter);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateUniBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateUniBackupPolicyResponse());
    }

    /**
     * @summary Creates an anti-ransomware policy for a database.
     *
     * @param request CreateUniBackupPolicyRequest
     * @return CreateUniBackupPolicyResponse
     */
    public CreateUniBackupPolicyResponse createUniBackupPolicy(CreateUniBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createUniBackupPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Creates a restoration task for a database.
     *
     * @param request CreateUniRestorePlanRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUniRestorePlanResponse
     */
    public CreateUniRestorePlanResponse createUniRestorePlanWithOptions(CreateUniRestorePlanRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.database)) {
            query.put("Database", request.database);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceUuid)) {
            query.put("InstanceUuid", request.instanceUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resetScn)) {
            query.put("ResetScn", request.resetScn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resetTime)) {
            query.put("ResetTime", request.resetTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.restoreInfo)) {
            query.put("RestoreInfo", request.restoreInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timePoint)) {
            query.put("TimePoint", request.timePoint);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateUniRestorePlan"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateUniRestorePlanResponse());
    }

    /**
     * @summary Creates a restoration task for a database.
     *
     * @param request CreateUniRestorePlanRequest
     * @return CreateUniRestorePlanResponse
     */
    public CreateUniRestorePlanResponse createUniRestorePlan(CreateUniRestorePlanRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createUniRestorePlanWithOptions(request, runtime);
    }

    /**
     * @summary Creates a one-time virus scan task that is immediately executed.
     *
     * @param request CreateVirusScanOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateVirusScanOnceTaskResponse
     */
    public CreateVirusScanOnceTaskResponse createVirusScanOnceTaskWithOptions(CreateVirusScanOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scanPath)) {
            query.put("ScanPath", request.scanPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanType)) {
            query.put("ScanType", request.scanType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateVirusScanOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateVirusScanOnceTaskResponse());
    }

    /**
     * @summary Creates a one-time virus scan task that is immediately executed.
     *
     * @param request CreateVirusScanOnceTaskRequest
     * @return CreateVirusScanOnceTaskResponse
     */
    public CreateVirusScanOnceTaskResponse createVirusScanOnceTask(CreateVirusScanOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createVirusScanOnceTaskWithOptions(request, runtime);
    }

    /**
     * @summary Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
     *
     * @param request CreateVulAutoRepairConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateVulAutoRepairConfigResponse
     */
    public CreateVulAutoRepairConfigResponse createVulAutoRepairConfigWithOptions(CreateVulAutoRepairConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulAutoRepairConfigList)) {
            query.put("VulAutoRepairConfigList", request.vulAutoRepairConfigList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateVulAutoRepairConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new CreateVulAutoRepairConfigResponse());
    }

    /**
     * @summary Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
     *
     * @param request CreateVulAutoRepairConfigRequest
     * @return CreateVulAutoRepairConfigResponse
     */
    public CreateVulAutoRepairConfigResponse createVulAutoRepairConfig(CreateVulAutoRepairConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createVulAutoRepairConfigWithOptions(request, runtime);
    }

    /**
     * @summary Deletes the specified defense rules against brute-force attacks.
     *
     * @param request DeleteAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteAntiBruteForceRuleResponse
     */
    public DeleteAntiBruteForceRuleResponse deleteAntiBruteForceRuleWithOptions(DeleteAntiBruteForceRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteAntiBruteForceRuleResponse());
    }

    /**
     * @summary Deletes the specified defense rules against brute-force attacks.
     *
     * @param request DeleteAntiBruteForceRuleRequest
     * @return DeleteAntiBruteForceRuleResponse
     */
    public DeleteAntiBruteForceRuleResponse deleteAntiBruteForceRule(DeleteAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * @summary Deletes an anti-ransomware policy.
     *
     * @param request DeleteBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBackupPolicyResponse
     */
    public DeleteBackupPolicyResponse deleteBackupPolicyWithOptions(DeleteBackupPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBackupPolicyResponse());
    }

    /**
     * @summary Deletes an anti-ransomware policy.
     *
     * @param request DeleteBackupPolicyRequest
     * @return DeleteBackupPolicyResponse
     */
    public DeleteBackupPolicyResponse deleteBackupPolicy(DeleteBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBackupPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
     *
     * @param request DeleteBackupPolicyMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBackupPolicyMachineResponse
     */
    public DeleteBackupPolicyMachineResponse deleteBackupPolicyMachineWithOptions(DeleteBackupPolicyMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBackupPolicyMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBackupPolicyMachineResponse());
    }

    /**
     * @summary Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
     *
     * @param request DeleteBackupPolicyMachineRequest
     * @return DeleteBackupPolicyMachineResponse
     */
    public DeleteBackupPolicyMachineResponse deleteBackupPolicyMachine(DeleteBackupPolicyMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBackupPolicyMachineWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a binary security policy from the container signature feature.
     *
     * @param request DeleteBinarySecurityPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBinarySecurityPolicyResponse
     */
    public DeleteBinarySecurityPolicyResponse deleteBinarySecurityPolicyWithOptions(DeleteBinarySecurityPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBinarySecurityPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBinarySecurityPolicyResponse());
    }

    /**
     * @summary Deletes a binary security policy from the container signature feature.
     *
     * @param request DeleteBinarySecurityPolicyRequest
     * @return DeleteBinarySecurityPolicyResponse
     */
    public DeleteBinarySecurityPolicyResponse deleteBinarySecurityPolicy(DeleteBinarySecurityPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBinarySecurityPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Deletes specified custom defense rules.
     *
     * @param request DeleteClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteClientUserDefineRuleResponse
     */
    public DeleteClientUserDefineRuleResponse deleteClientUserDefineRuleWithOptions(DeleteClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.idList)) {
            query.put("IdList", request.idList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteClientUserDefineRuleResponse());
    }

    /**
     * @summary Deletes specified custom defense rules.
     *
     * @param request DeleteClientUserDefineRuleRequest
     * @return DeleteClientUserDefineRuleResponse
     */
    public DeleteClientUserDefineRuleResponse deleteClientUserDefineRule(DeleteClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a rule for non-image program defense.
     *
     * @param request DeleteContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteContainerDefenseRuleResponse
     */
    public DeleteContainerDefenseRuleResponse deleteContainerDefenseRuleWithOptions(DeleteContainerDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteContainerDefenseRuleResponse());
    }

    /**
     * @summary Deletes a rule for non-image program defense.
     *
     * @param request DeleteContainerDefenseRuleRequest
     * @return DeleteContainerDefenseRuleResponse
     */
    public DeleteContainerDefenseRuleResponse deleteContainerDefenseRule(DeleteContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a defense rule against container escapes.
     *
     * @param request DeleteContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteContainerPluginRuleResponse
     */
    public DeleteContainerPluginRuleResponse deleteContainerPluginRuleWithOptions(DeleteContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteContainerPluginRuleResponse());
    }

    /**
     * @summary Deletes a defense rule against container escapes.
     *
     * @param request DeleteContainerPluginRuleRequest
     * @return DeleteContainerPluginRuleResponse
     */
    public DeleteContainerPluginRuleResponse deleteContainerPluginRule(DeleteContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a specified IP address blocking policy from one or more servers.
     *
     * @param request DeleteCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCustomBlockRecordResponse
     */
    public DeleteCustomBlockRecordResponse deleteCustomBlockRecordWithOptions(DeleteCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCustomBlockRecordResponse());
    }

    /**
     * @summary Deletes a specified IP address blocking policy from one or more servers.
     *
     * @param request DeleteCustomBlockRecordRequest
     * @return DeleteCustomBlockRecordResponse
     */
    public DeleteCustomBlockRecordResponse deleteCustomBlockRecord(DeleteCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
     *
     * @param request DeleteCycleTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCycleTaskResponse
     */
    public DeleteCycleTaskResponse deleteCycleTaskWithOptions(DeleteCycleTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCycleTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCycleTaskResponse());
    }

    /**
     * @summary Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
     *
     * @param request DeleteCycleTaskRequest
     * @return DeleteCycleTaskResponse
     */
    public DeleteCycleTaskResponse deleteCycleTask(DeleteCycleTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteCycleTaskWithOptions(request, runtime);
    }

    /**
     * @summary Deletes core file monitoring rules.
     *
     * @param request DeleteFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteFileProtectRuleResponse
     */
    public DeleteFileProtectRuleResponse deleteFileProtectRuleWithOptions(DeleteFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteFileProtectRuleResponse());
    }

    /**
     * @summary Deletes core file monitoring rules.
     *
     * @param request DeleteFileProtectRuleRequest
     * @return DeleteFileProtectRuleResponse
     */
    public DeleteFileProtectRuleResponse deleteFileProtectRule(DeleteFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a server group.
     *
     * @description The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
     *
     * @param request DeleteGroupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteGroupResponse
     */
    public DeleteGroupResponse deleteGroupWithOptions(DeleteGroupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteGroup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteGroupResponse());
    }

    /**
     * @summary Deletes a server group.
     *
     * @description The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
     *
     * @param request DeleteGroupRequest
     * @return DeleteGroupResponse
     */
    public DeleteGroupResponse deleteGroup(DeleteGroupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteGroupWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a specified honeypot.
     *
     * @param request DeleteHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotResponse
     */
    public DeleteHoneypotResponse deleteHoneypotWithOptions(DeleteHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotResponse());
    }

    /**
     * @summary Deletes a specified honeypot.
     *
     * @param request DeleteHoneypotRequest
     * @return DeleteHoneypotResponse
     */
    public DeleteHoneypotResponse deleteHoneypot(DeleteHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a specified management node.
     *
     * @param request DeleteHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotNodeResponse
     */
    public DeleteHoneypotNodeResponse deleteHoneypotNodeWithOptions(DeleteHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotNodeResponse());
    }

    /**
     * @summary Deletes a specified management node.
     *
     * @param request DeleteHoneypotNodeRequest
     * @return DeleteHoneypotNodeResponse
     */
    public DeleteHoneypotNodeResponse deleteHoneypotNode(DeleteHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a specified honeypot template.
     *
     * @param request DeleteHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotPresetResponse
     */
    public DeleteHoneypotPresetResponse deleteHoneypotPresetWithOptions(DeleteHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotPresetId)) {
            query.put("HoneypotPresetId", request.honeypotPresetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotPresetResponse());
    }

    /**
     * @summary Deletes a specified honeypot template.
     *
     * @param request DeleteHoneypotPresetRequest
     * @return DeleteHoneypotPresetResponse
     */
    public DeleteHoneypotPresetResponse deleteHoneypotPreset(DeleteHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a specified probe.
     *
     * @param request DeleteHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotProbeResponse
     */
    public DeleteHoneypotProbeResponse deleteHoneypotProbeWithOptions(DeleteHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotProbeResponse());
    }

    /**
     * @summary Deletes a specified probe.
     *
     * @param request DeleteHoneypotProbeRequest
     * @return DeleteHoneypotProbeResponse
     */
    public DeleteHoneypotProbeResponse deleteHoneypotProbe(DeleteHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * @summary Delete the probe service.
     *
     * @param request DeleteHoneypotProbeBindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotProbeBindResponse
     */
    public DeleteHoneypotProbeBindResponse deleteHoneypotProbeBindWithOptions(DeleteHoneypotProbeBindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindId)) {
            query.put("BindId", request.bindId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotProbeBind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotProbeBindResponse());
    }

    /**
     * @summary Delete the probe service.
     *
     * @param request DeleteHoneypotProbeBindRequest
     * @return DeleteHoneypotProbeBindResponse
     */
    public DeleteHoneypotProbeBindResponse deleteHoneypotProbeBind(DeleteHoneypotProbeBindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotProbeBindWithOptions(request, runtime);
    }

    /**
     * @summary Deletes an alert handling rule.
     *
     * @param request DeleteImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteImageEventOperationResponse
     */
    public DeleteImageEventOperationResponse deleteImageEventOperationWithOptions(DeleteImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteImageEventOperationResponse());
    }

    /**
     * @summary Deletes an alert handling rule.
     *
     * @param request DeleteImageEventOperationRequest
     * @return DeleteImageEventOperationResponse
     */
    public DeleteImageEventOperationResponse deleteImageEventOperation(DeleteImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteImageEventOperationWithOptions(request, runtime);
    }

    /**
     * @summary Deletes an image vulnerability whitelist.
     *
     * @param request DeleteImageVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteImageVulWhitelistResponse
     */
    public DeleteImageVulWhitelistResponse deleteImageVulWhitelistWithOptions(DeleteImageVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteImageVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteImageVulWhitelistResponse());
    }

    /**
     * @summary Deletes an image vulnerability whitelist.
     *
     * @param request DeleteImageVulWhitelistRequest
     * @return DeleteImageVulWhitelistResponse
     */
    public DeleteImageVulWhitelistResponse deleteImageVulWhitelist(DeleteImageVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteImageVulWhitelistWithOptions(request, runtime);
    }

    /**
     * @summary Deletes the command that is used to install the Security Center agent.
     *
     * @param request DeleteInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteInstallCodeResponse
     */
    public DeleteInstallCodeResponse deleteInstallCodeWithOptions(DeleteInstallCodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.captchaCode)) {
            query.put("CaptchaCode", request.captchaCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteInstallCodeResponse());
    }

    /**
     * @summary Deletes the command that is used to install the Security Center agent.
     *
     * @param request DeleteInstallCodeRequest
     * @return DeleteInstallCodeResponse
     */
    public DeleteInstallCodeResponse deleteInstallCode(DeleteInstallCodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteInstallCodeWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a defense rule in the container firewall module.
     *
     * @param request DeleteInterceptionRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteInterceptionRuleResponse
     */
    public DeleteInterceptionRuleResponse deleteInterceptionRuleWithOptions(DeleteInterceptionRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteInterceptionRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteInterceptionRuleResponse());
    }

    /**
     * @summary Deletes a defense rule in the container firewall module.
     *
     * @param request DeleteInterceptionRuleRequest
     * @return DeleteInterceptionRuleResponse
     */
    public DeleteInterceptionRuleResponse deleteInterceptionRule(DeleteInterceptionRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteInterceptionRuleWithOptions(request, runtime);
    }

    /**
     * @summary Removes the network objects that are in effect in the container firewall.
     *
     * @param request DeleteInterceptionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteInterceptionTargetResponse
     */
    public DeleteInterceptionTargetResponse deleteInterceptionTargetWithOptions(DeleteInterceptionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetIds)) {
            query.put("TargetIds", request.targetIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteInterceptionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteInterceptionTargetResponse());
    }

    /**
     * @summary Removes the network objects that are in effect in the container firewall.
     *
     * @param request DeleteInterceptionTargetRequest
     * @return DeleteInterceptionTargetResponse
     */
    public DeleteInterceptionTargetResponse deleteInterceptionTarget(DeleteInterceptionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteInterceptionTargetWithOptions(request, runtime);
    }

    /**
     * @summary Deletes the Kubernetes access information.
     *
     * @param request DeleteK8sAccessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteK8sAccessInfoResponse
     */
    public DeleteK8sAccessInfoResponse deleteK8sAccessInfoWithOptions(DeleteK8sAccessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayApiName)) {
            query.put("AliyunYundunGatewayApiName", request.aliyunYundunGatewayApiName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayPopName)) {
            query.put("AliyunYundunGatewayPopName", request.aliyunYundunGatewayPopName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayProjectName)) {
            query.put("AliyunYundunGatewayProjectName", request.aliyunYundunGatewayProjectName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteK8sAccessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteK8sAccessInfoResponse());
    }

    /**
     * @summary Deletes the Kubernetes access information.
     *
     * @param request DeleteK8sAccessInfoRequest
     * @return DeleteK8sAccessInfoResponse
     */
    public DeleteK8sAccessInfoResponse deleteK8sAccessInfo(DeleteK8sAccessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteK8sAccessInfoWithOptions(request, runtime);
    }

    /**
     * @summary Deletes the basic configuration information from the logon security configurations for a specific asset.
     *
     * @param request DeleteLoginBaseConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLoginBaseConfigResponse
     */
    public DeleteLoginBaseConfigResponse deleteLoginBaseConfigWithOptions(DeleteLoginBaseConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteLoginBaseConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteLoginBaseConfigResponse());
    }

    /**
     * @summary Deletes the basic configuration information from the logon security configurations for a specific asset.
     *
     * @param request DeleteLoginBaseConfigRequest
     * @return DeleteLoginBaseConfigResponse
     */
    public DeleteLoginBaseConfigResponse deleteLoginBaseConfig(DeleteLoginBaseConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteLoginBaseConfigWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
     *
     * @param request DeleteMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMaliciousFileWhitelistConfigResponse
     */
    public DeleteMaliciousFileWhitelistConfigResponse deleteMaliciousFileWhitelistConfigWithOptions(DeleteMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteMaliciousFileWhitelistConfigResponse());
    }

    /**
     * @summary Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
     *
     * @param request DeleteMaliciousFileWhitelistConfigRequest
     * @return DeleteMaliciousFileWhitelistConfigResponse
     */
    public DeleteMaliciousFileWhitelistConfigResponse deleteMaliciousFileWhitelistConfig(DeleteMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * @summary Removes the remarks added to alert events that are generated by the agentless detection feature.
     *
     * @param request DeleteMaliciousNoteRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMaliciousNoteResponse
     */
    public DeleteMaliciousNoteResponse deleteMaliciousNoteWithOptions(DeleteMaliciousNoteRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.noteId)) {
            query.put("NoteId", request.noteId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteMaliciousNote"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteMaliciousNoteResponse());
    }

    /**
     * @summary Removes the remarks added to alert events that are generated by the agentless detection feature.
     *
     * @param request DeleteMaliciousNoteRequest
     * @return DeleteMaliciousNoteResponse
     */
    public DeleteMaliciousNoteResponse deleteMaliciousNote(DeleteMaliciousNoteRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteMaliciousNoteWithOptions(request, runtime);
    }

    /**
     * @summary Deletes rules of the at-risk image blocking type.
     *
     * @param request DeleteOpaStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteOpaStrategyNewResponse
     */
    public DeleteOpaStrategyNewResponse deleteOpaStrategyNewWithOptions(DeleteOpaStrategyNewRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyIds)) {
            query.put("StrategyIds", request.strategyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteOpaStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteOpaStrategyNewResponse());
    }

    /**
     * @summary Deletes rules of the at-risk image blocking type.
     *
     * @param request DeleteOpaStrategyNewRequest
     * @return DeleteOpaStrategyNewResponse
     */
    public DeleteOpaStrategyNewResponse deleteOpaStrategyNew(DeleteOpaStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteOpaStrategyNewWithOptions(request, runtime);
    }

    /**
     * @summary Delete oss scan policy.
     *
     * @param request DeleteOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteOssScanConfigResponse
     */
    public DeleteOssScanConfigResponse deleteOssScanConfigWithOptions(DeleteOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteOssScanConfigResponse());
    }

    /**
     * @summary Delete oss scan policy.
     *
     * @param request DeleteOssScanConfigRequest
     * @return DeleteOssScanConfigResponse
     */
    public DeleteOssScanConfigResponse deleteOssScanConfig(DeleteOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteOssScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a private image repository by using the ID of the image repository.
     *
     * @param request DeletePrivateRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeletePrivateRegistryResponse
     */
    public DeletePrivateRegistryResponse deletePrivateRegistryWithOptions(DeletePrivateRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            query.put("RegistryId", request.registryId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeletePrivateRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeletePrivateRegistryResponse());
    }

    /**
     * @summary Deletes a private image repository by using the ID of the image repository.
     *
     * @param request DeletePrivateRegistryRequest
     * @return DeletePrivateRegistryResponse
     */
    public DeletePrivateRegistryResponse deletePrivateRegistry(DeletePrivateRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deletePrivateRegistryWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a rule for container tamper-proofing.
     *
     * @param request DeleteSasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSasContainerWebDefenseRuleResponse
     */
    public DeleteSasContainerWebDefenseRuleResponse deleteSasContainerWebDefenseRuleWithOptions(DeleteSasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSasContainerWebDefenseRuleResponse());
    }

    /**
     * @summary Deletes a rule for container tamper-proofing.
     *
     * @param request DeleteSasContainerWebDefenseRuleRequest
     * @return DeleteSasContainerWebDefenseRuleResponse
     */
    public DeleteSasContainerWebDefenseRuleResponse deleteSasContainerWebDefenseRule(DeleteSasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @summary Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
     *
     * @param request DeleteSecurityEventMarkMissListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSecurityEventMarkMissListResponse
     */
    public DeleteSecurityEventMarkMissListResponse deleteSecurityEventMarkMissListWithOptions(DeleteSecurityEventMarkMissListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSecurityEventMarkMissList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSecurityEventMarkMissListResponse());
    }

    /**
     * @summary Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
     *
     * @param request DeleteSecurityEventMarkMissListRequest
     * @return DeleteSecurityEventMarkMissListResponse
     */
    public DeleteSecurityEventMarkMissListResponse deleteSecurityEventMarkMissList(DeleteSecurityEventMarkMissListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSecurityEventMarkMissListWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a service trail.
     *
     * @param request DeleteServiceTrailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteServiceTrailResponse
     */
    public DeleteServiceTrailResponse deleteServiceTrailWithOptions(DeleteServiceTrailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteServiceTrail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteServiceTrailResponse());
    }

    /**
     * @summary Deletes a service trail.
     *
     * @param request DeleteServiceTrailRequest
     * @return DeleteServiceTrailResponse
     */
    public DeleteServiceTrailResponse deleteServiceTrail(DeleteServiceTrailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteServiceTrailWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a baseline check policy.
     *
     * @param request DeleteStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteStrategyResponse
     */
    public DeleteStrategyResponse deleteStrategyWithOptions(DeleteStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteStrategyResponse());
    }

    /**
     * @summary Deletes a baseline check policy.
     *
     * @param request DeleteStrategyRequest
     * @return DeleteStrategyResponse
     */
    public DeleteStrategyResponse deleteStrategy(DeleteStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Deletes the description of an alert.
     *
     * @param request DeleteSuspEventNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSuspEventNodeResponse
     */
    public DeleteSuspEventNodeResponse deleteSuspEventNodeWithOptions(DeleteSuspEventNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.noteId)) {
            query.put("NoteId", request.noteId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSuspEventNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSuspEventNodeResponse());
    }

    /**
     * @summary Deletes the description of an alert.
     *
     * @param request DeleteSuspEventNodeRequest
     * @return DeleteSuspEventNodeResponse
     */
    public DeleteSuspEventNodeResponse deleteSuspEventNode(DeleteSuspEventNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSuspEventNodeWithOptions(request, runtime);
    }

    /**
     * @summary Removes custom tags from assets.
     *
     * @description Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
     *
     * @param request DeleteTagWithUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteTagWithUuidResponse
     */
    public DeleteTagWithUuidResponse deleteTagWithUuidWithOptions(DeleteTagWithUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tagName)) {
            query.put("TagName", request.tagName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteTagWithUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteTagWithUuidResponse());
    }

    /**
     * @summary Removes custom tags from assets.
     *
     * @description Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
     *
     * @param request DeleteTagWithUuidRequest
     * @return DeleteTagWithUuidResponse
     */
    public DeleteTagWithUuidResponse deleteTagWithUuid(DeleteTagWithUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteTagWithUuidWithOptions(request, runtime);
    }

    /**
     * @summary Deletes anti-ransomware policies that are created for databases.
     *
     * @param request DeleteUniBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteUniBackupPolicyResponse
     */
    public DeleteUniBackupPolicyResponse deleteUniBackupPolicyWithOptions(DeleteUniBackupPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyIds)) {
            query.put("PolicyIds", request.policyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteUniBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteUniBackupPolicyResponse());
    }

    /**
     * @summary Deletes anti-ransomware policies that are created for databases.
     *
     * @param request DeleteUniBackupPolicyRequest
     * @return DeleteUniBackupPolicyResponse
     */
    public DeleteUniBackupPolicyResponse deleteUniBackupPolicy(DeleteUniBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteUniBackupPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a honeypot.
     *
     * @param request DeleteVpcHoneyPotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteVpcHoneyPotResponse
     */
    public DeleteVpcHoneyPotResponse deleteVpcHoneyPotWithOptions(DeleteVpcHoneyPotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteVpcHoneyPot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteVpcHoneyPotResponse());
    }

    /**
     * @summary Deletes a honeypot.
     *
     * @param request DeleteVpcHoneyPotRequest
     * @return DeleteVpcHoneyPotResponse
     */
    public DeleteVpcHoneyPotResponse deleteVpcHoneyPot(DeleteVpcHoneyPotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteVpcHoneyPotWithOptions(request, runtime);
    }

    /**
     * @summary Delete a list of vulnerabilities that can be automatically fixed. After the list is deleted, you can not select the list when you create a vulnerability fixing task on the Playbook page.
     *
     * @param request DeleteVulAutoRepairConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteVulAutoRepairConfigResponse
     */
    public DeleteVulAutoRepairConfigResponse deleteVulAutoRepairConfigWithOptions(DeleteVulAutoRepairConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configIdList)) {
            query.put("ConfigIdList", request.configIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteVulAutoRepairConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteVulAutoRepairConfigResponse());
    }

    /**
     * @summary Delete a list of vulnerabilities that can be automatically fixed. After the list is deleted, you can not select the list when you create a vulnerability fixing task on the Playbook page.
     *
     * @param request DeleteVulAutoRepairConfigRequest
     * @return DeleteVulAutoRepairConfigResponse
     */
    public DeleteVulAutoRepairConfigResponse deleteVulAutoRepairConfig(DeleteVulAutoRepairConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteVulAutoRepairConfigWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a specified vulnerability whitelist.
     *
     * @param request DeleteVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteVulWhitelistResponse
     */
    public DeleteVulWhitelistResponse deleteVulWhitelistWithOptions(DeleteVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelist)) {
            query.put("Whitelist", request.whitelist);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteVulWhitelistResponse());
    }

    /**
     * @summary Deletes a specified vulnerability whitelist.
     *
     * @param request DeleteVulWhitelistRequest
     * @return DeleteVulWhitelistResponse
     */
    public DeleteVulWhitelistResponse deleteVulWhitelist(DeleteVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteVulWhitelistWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of AccessKey pair leaks.
     *
     * @param request DescribeAccessKeyLeakDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAccessKeyLeakDetailResponse
     */
    public DescribeAccessKeyLeakDetailResponse describeAccessKeyLeakDetailWithOptions(DescribeAccessKeyLeakDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAccessKeyLeakDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAccessKeyLeakDetailResponse());
    }

    /**
     * @summary Queries the details of AccessKey pair leaks.
     *
     * @param request DescribeAccessKeyLeakDetailRequest
     * @return DescribeAccessKeyLeakDetailResponse
     */
    public DescribeAccessKeyLeakDetailResponse describeAccessKeyLeakDetail(DescribeAccessKeyLeakDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAccessKeyLeakDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the AccessKey pair leaks that are detected on your assets.
     *
     * @param request DescribeAccesskeyLeakListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAccesskeyLeakListResponse
     */
    public DescribeAccesskeyLeakListResponse describeAccesskeyLeakListWithOptions(DescribeAccesskeyLeakListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.query)) {
            query.put("Query", request.query);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTs)) {
            query.put("StartTs", request.startTs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAccesskeyLeakList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAccesskeyLeakListResponse());
    }

    /**
     * @summary Queries the AccessKey pair leaks that are detected on your assets.
     *
     * @param request DescribeAccesskeyLeakListRequest
     * @return DescribeAccesskeyLeakListResponse
     */
    public DescribeAccesskeyLeakListResponse describeAccesskeyLeakList(DescribeAccesskeyLeakListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAccesskeyLeakListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the affected servers in the result of a virus scan task.
     *
     * @param request DescribeAffectedAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAffectedAssetsResponse
     */
    public DescribeAffectedAssetsResponse describeAffectedAssetsWithOptions(DescribeAffectedAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.current)) {
            query.put("Current", request.current);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAffectedAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAffectedAssetsResponse());
    }

    /**
     * @summary Queries the affected servers in the result of a virus scan task.
     *
     * @param request DescribeAffectedAssetsRequest
     * @return DescribeAffectedAssetsResponse
     */
    public DescribeAffectedAssetsResponse describeAffectedAssets(DescribeAffectedAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAffectedAssetsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of malicious image samples.
     *
     * @param request DescribeAffectedMaliciousFileImagesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAffectedMaliciousFileImagesResponse
     */
    public DescribeAffectedMaliciousFileImagesResponse describeAffectedMaliciousFileImagesWithOptions(DescribeAffectedMaliciousFileImagesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageLayer)) {
            query.put("ImageLayer", request.imageLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousMd5)) {
            query.put("MaliciousMd5", request.maliciousMd5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAffectedMaliciousFileImages"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAffectedMaliciousFileImagesResponse());
    }

    /**
     * @summary Queries the details of malicious image samples.
     *
     * @param request DescribeAffectedMaliciousFileImagesRequest
     * @return DescribeAffectedMaliciousFileImagesResponse
     */
    public DescribeAffectedMaliciousFileImagesResponse describeAffectedMaliciousFileImages(DescribeAffectedMaliciousFileImagesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAffectedMaliciousFileImagesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant.
     *
     * @param request DescribeAgentInstallStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAgentInstallStatusResponse
     */
    public DescribeAgentInstallStatusResponse describeAgentInstallStatusWithOptions(DescribeAgentInstallStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAgentInstallStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAgentInstallStatusResponse());
    }

    /**
     * @summary Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant.
     *
     * @param request DescribeAgentInstallStatusRequest
     * @return DescribeAgentInstallStatusResponse
     */
    public DescribeAgentInstallStatusResponse describeAgentInstallStatus(DescribeAgentInstallStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAgentInstallStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
     *
     * @param request DescribeAlarmEventDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAlarmEventDetailResponse
     */
    public DescribeAlarmEventDetailResponse describeAlarmEventDetailWithOptions(DescribeAlarmEventDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmUniqueInfo)) {
            query.put("AlarmUniqueInfo", request.alarmUniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAlarmEventDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAlarmEventDetailResponse());
    }

    /**
     * @summary Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
     *
     * @param request DescribeAlarmEventDetailRequest
     * @return DescribeAlarmEventDetailResponse
     */
    public DescribeAlarmEventDetailResponse describeAlarmEventDetail(DescribeAlarmEventDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAlarmEventDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the stack information about an alert event.
     *
     * @param request DescribeAlarmEventStackInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAlarmEventStackInfoResponse
     */
    public DescribeAlarmEventStackInfoResponse describeAlarmEventStackInfoWithOptions(DescribeAlarmEventStackInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniqueInfo)) {
            query.put("UniqueInfo", request.uniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAlarmEventStackInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAlarmEventStackInfoResponse());
    }

    /**
     * @summary Queries the stack information about an alert event.
     *
     * @param request DescribeAlarmEventStackInfoRequest
     * @return DescribeAlarmEventStackInfoResponse
     */
    public DescribeAlarmEventStackInfoResponse describeAlarmEventStackInfo(DescribeAlarmEventStackInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAlarmEventStackInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about all server assets, including the asset group IDs and asset names.
     *
     * @param request DescribeAllEntityRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAllEntityResponse
     */
    public DescribeAllEntityResponse describeAllEntityWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAllEntity"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAllEntityResponse());
    }

    /**
     * @summary Queries the information about all server assets, including the asset group IDs and asset names.
     *
     * @return DescribeAllEntityResponse
     */
    public DescribeAllEntityResponse describeAllEntity() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAllEntityWithOptions(runtime);
    }

    /**
     * @summary Queries the information about all server groups.
     *
     * @param request DescribeAllGroupsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAllGroupsResponse
     */
    public DescribeAllGroupsResponse describeAllGroupsWithOptions(DescribeAllGroupsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAllGroups"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAllGroupsResponse());
    }

    /**
     * @summary Queries the information about all server groups.
     *
     * @param request DescribeAllGroupsRequest
     * @return DescribeAllGroupsResponse
     */
    public DescribeAllGroupsResponse describeAllGroups(DescribeAllGroupsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAllGroupsWithOptions(request, runtime);
    }

    /**
     * @summary Queries baselines that are used in image baseline checks.
     *
     * @param request DescribeAllImageBaselineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAllImageBaselineResponse
     */
    public DescribeAllImageBaselineResponse describeAllImageBaselineWithOptions(DescribeAllImageBaselineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAllImageBaseline"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAllImageBaselineResponse());
    }

    /**
     * @summary Queries baselines that are used in image baseline checks.
     *
     * @param request DescribeAllImageBaselineRequest
     * @return DescribeAllImageBaselineResponse
     */
    public DescribeAllImageBaselineResponse describeAllImageBaseline(DescribeAllImageBaselineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAllImageBaselineWithOptions(request, runtime);
    }

    /**
     * @summary Queries created defense rules against brute-force attacks.
     *
     * @param request DescribeAntiBruteForceRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAntiBruteForceRulesResponse
     */
    public DescribeAntiBruteForceRulesResponse describeAntiBruteForceRulesWithOptions(DescribeAntiBruteForceRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAntiBruteForceRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAntiBruteForceRulesResponse());
    }

    /**
     * @summary Queries created defense rules against brute-force attacks.
     *
     * @param request DescribeAntiBruteForceRulesRequest
     * @return DescribeAntiBruteForceRulesResponse
     */
    public DescribeAntiBruteForceRulesResponse describeAntiBruteForceRules(DescribeAntiBruteForceRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAntiBruteForceRulesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the scan cycle for application vulnerabilities.
     *
     * @param request DescribeAppVulScanCycleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAppVulScanCycleResponse
     */
    public DescribeAppVulScanCycleResponse describeAppVulScanCycleWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAppVulScanCycle"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAppVulScanCycleResponse());
    }

    /**
     * @summary Queries the scan cycle for application vulnerabilities.
     *
     * @return DescribeAppVulScanCycleResponse
     */
    public DescribeAppVulScanCycleResponse describeAppVulScanCycle() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAppVulScanCycleWithOptions(runtime);
    }

    /**
     * @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
     *
     * @param request DescribeAssetDetailByUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetDetailByUuidResponse
     */
    public DescribeAssetDetailByUuidResponse describeAssetDetailByUuidWithOptions(DescribeAssetDetailByUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetDetailByUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetDetailByUuidResponse());
    }

    /**
     * @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
     *
     * @param request DescribeAssetDetailByUuidRequest
     * @return DescribeAssetDetailByUuidResponse
     */
    public DescribeAssetDetailByUuidResponse describeAssetDetailByUuid(DescribeAssetDetailByUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetDetailByUuidWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of Elastic Compute Service (ECS) instances.
     *
     * @param request DescribeAssetDetailByUuidsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetDetailByUuidsResponse
     */
    public DescribeAssetDetailByUuidsResponse describeAssetDetailByUuidsWithOptions(DescribeAssetDetailByUuidsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetDetailByUuids"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetDetailByUuidsResponse());
    }

    /**
     * @summary Queries the details of Elastic Compute Service (ECS) instances.
     *
     * @param request DescribeAssetDetailByUuidsRequest
     * @return DescribeAssetDetailByUuidsResponse
     */
    public DescribeAssetDetailByUuidsResponse describeAssetDetailByUuids(DescribeAssetDetailByUuidsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetDetailByUuidsWithOptions(request, runtime);
    }

    /**
     * @summary The ID of the request, which is used to locate and troubleshoot issues.
     *
     * @param request DescribeAssetSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetSummaryResponse
     */
    public DescribeAssetSummaryResponse describeAssetSummaryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetSummaryResponse());
    }

    /**
     * @summary The ID of the request, which is used to locate and troubleshoot issues.
     *
     * @return DescribeAssetSummaryResponse
     */
    public DescribeAssetSummaryResponse describeAssetSummary() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetSummaryWithOptions(runtime);
    }

    /**
     * @summary Queries the risk information about containers.
     *
     * @param request DescribeAssetsSecurityEventSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetsSecurityEventSummaryResponse
     */
    public DescribeAssetsSecurityEventSummaryResponse describeAssetsSecurityEventSummaryWithOptions(DescribeAssetsSecurityEventSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetsSecurityEventSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetsSecurityEventSummaryResponse());
    }

    /**
     * @summary Queries the risk information about containers.
     *
     * @param request DescribeAssetsSecurityEventSummaryRequest
     * @return DescribeAssetsSecurityEventSummaryResponse
     */
    public DescribeAssetsSecurityEventSummaryResponse describeAssetsSecurityEventSummary(DescribeAssetsSecurityEventSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetsSecurityEventSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries the results of automatically connecting applications on Elastic Compute Service (ECS) instances to the application protection feature after the Runtime Application Self-Protection (RASP) agent is installed on the ECS instances.
     *
     * @param request DescribeAttachRecordsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAttachRecordsResponse
     */
    public DescribeAttachRecordsResponse describeAttachRecordsWithOptions(DescribeAttachRecordsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.applicationId)) {
            query.put("ApplicationId", request.applicationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ecsUUIDList)) {
            query.put("EcsUUIDList", request.ecsUUIDList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAttachRecords"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAttachRecordsResponse());
    }

    /**
     * @summary Queries the results of automatically connecting applications on Elastic Compute Service (ECS) instances to the application protection feature after the Runtime Application Self-Protection (RASP) agent is installed on the ECS instances.
     *
     * @param request DescribeAttachRecordsRequest
     * @return DescribeAttachRecordsResponse
     */
    public DescribeAttachRecordsResponse describeAttachRecords(DescribeAttachRecordsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAttachRecordsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of attack analysis.
     *
     * @param request DescribeAttackAnalysisDataRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAttackAnalysisDataResponse
     */
    public DescribeAttackAnalysisDataResponse describeAttackAnalysisDataWithOptions(DescribeAttackAnalysisDataRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.base64)) {
            query.put("Base64", request.base64);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("Data", request.data);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAttackAnalysisData"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAttackAnalysisDataResponse());
    }

    /**
     * @summary Queries the statistics of attack analysis.
     *
     * @param request DescribeAttackAnalysisDataRequest
     * @return DescribeAttackAnalysisDataResponse
     */
    public DescribeAttackAnalysisDataResponse describeAttackAnalysisData(DescribeAttackAnalysisDataRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAttackAnalysisDataWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
     *
     * @param request DescribeAutoDelConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAutoDelConfigResponse
     */
    public DescribeAutoDelConfigResponse describeAutoDelConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAutoDelConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAutoDelConfigResponse());
    }

    /**
     * @summary Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
     *
     * @return DescribeAutoDelConfigResponse
     */
    public DescribeAutoDelConfigResponse describeAutoDelConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAutoDelConfigWithOptions(runtime);
    }

    /**
     * @summary Queries the information about a file to which archived alert events are exported.
     *
     * @param request DescribeBackUpExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackUpExportInfoResponse
     */
    public DescribeBackUpExportInfoResponse describeBackUpExportInfoWithOptions(DescribeBackUpExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exportType)) {
            query.put("ExportType", request.exportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackUpExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackUpExportInfoResponse());
    }

    /**
     * @summary Queries the information about a file to which archived alert events are exported.
     *
     * @param request DescribeBackUpExportInfoRequest
     * @return DescribeBackUpExportInfoResponse
     */
    public DescribeBackUpExportInfoResponse describeBackUpExportInfo(DescribeBackUpExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackUpExportInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the servers on which the anti-ransomware agent is installed in a specified region.
     *
     * @description You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
     *
     * @param request DescribeBackupClientsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupClientsResponse
     */
    public DescribeBackupClientsResponse describeBackupClientsWithOptions(DescribeBackupClientsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.supportRegionId)) {
            query.put("SupportRegionId", request.supportRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupClients"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupClientsResponse());
    }

    /**
     * @summary Queries the servers on which the anti-ransomware agent is installed in a specified region.
     *
     * @description You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
     *
     * @param request DescribeBackupClientsRequest
     * @return DescribeBackupClientsResponse
     */
    public DescribeBackupClientsResponse describeBackupClients(DescribeBackupClientsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupClientsWithOptions(request, runtime);
    }

    /**
     * @summary Queries backup files.
     *
     * @param request DescribeBackupFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupFilesResponse
     */
    public DescribeBackupFilesResponse describeBackupFilesWithOptions(DescribeBackupFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.path)) {
            query.put("Path", request.path);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotHash)) {
            query.put("SnapshotHash", request.snapshotHash);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupFilesResponse());
    }

    /**
     * @summary Queries backup files.
     *
     * @param request DescribeBackupFilesRequest
     * @return DescribeBackupFilesResponse
     */
    public DescribeBackupFilesResponse describeBackupFiles(DescribeBackupFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupFilesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the backup status of a sever to which an anti-ransomware policy is applied.
     *
     * @param request DescribeBackupMachineStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupMachineStatusResponse
     */
    public DescribeBackupMachineStatusResponse describeBackupMachineStatusWithOptions(DescribeBackupMachineStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupMachineStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupMachineStatusResponse());
    }

    /**
     * @summary Queries the backup status of a sever to which an anti-ransomware policy is applied.
     *
     * @param request DescribeBackupMachineStatusRequest
     * @return DescribeBackupMachineStatusResponse
     */
    public DescribeBackupMachineStatusResponse describeBackupMachineStatus(DescribeBackupMachineStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupMachineStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries anti-ransomware policies.
     *
     * @param request DescribeBackupPoliciesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupPoliciesResponse
     */
    public DescribeBackupPoliciesResponse describeBackupPoliciesWithOptions(DescribeBackupPoliciesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupPolicies"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupPoliciesResponse());
    }

    /**
     * @summary Queries anti-ransomware policies.
     *
     * @param request DescribeBackupPoliciesRequest
     * @return DescribeBackupPoliciesResponse
     */
    public DescribeBackupPoliciesResponse describeBackupPolicies(DescribeBackupPoliciesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupPoliciesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of an anti-ransomware policy for servers.
     *
     * @param request DescribeBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupPolicyResponse
     */
    public DescribeBackupPolicyResponse describeBackupPolicyWithOptions(DescribeBackupPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupPolicyResponse());
    }

    /**
     * @summary Queries the details of an anti-ransomware policy for servers.
     *
     * @param request DescribeBackupPolicyRequest
     * @return DescribeBackupPolicyResponse
     */
    public DescribeBackupPolicyResponse describeBackupPolicy(DescribeBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of restoration tasks.
     *
     * @description If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
     *
     * @param request DescribeBackupRestoreCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupRestoreCountResponse
     */
    public DescribeBackupRestoreCountResponse describeBackupRestoreCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupRestoreCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupRestoreCountResponse());
    }

    /**
     * @summary Queries the statistics of restoration tasks.
     *
     * @description If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
     *
     * @return DescribeBackupRestoreCountResponse
     */
    public DescribeBackupRestoreCountResponse describeBackupRestoreCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupRestoreCountWithOptions(runtime);
    }

    /**
     * @summary Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
     *
     * @param request DescribeBruteForceRecordsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBruteForceRecordsResponse
     */
    public DescribeBruteForceRecordsResponse describeBruteForceRecordsWithOptions(DescribeBruteForceRecordsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBruteForceRecords"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBruteForceRecordsResponse());
    }

    /**
     * @summary Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
     *
     * @param request DescribeBruteForceRecordsRequest
     * @return DescribeBruteForceRecordsResponse
     */
    public DescribeBruteForceRecordsResponse describeBruteForceRecords(DescribeBruteForceRecordsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBruteForceRecordsWithOptions(request, runtime);
    }

    /**
     * @summary The source IP address of the request.
     *
     * @param request DescribeBruteForceSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBruteForceSummaryResponse
     */
    public DescribeBruteForceSummaryResponse describeBruteForceSummaryWithOptions(DescribeBruteForceSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBruteForceSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBruteForceSummaryResponse());
    }

    /**
     * @summary The source IP address of the request.
     *
     * @param request DescribeBruteForceSummaryRequest
     * @return DescribeBruteForceSummaryResponse
     */
    public DescribeBruteForceSummaryResponse describeBruteForceSummary(DescribeBruteForceSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBruteForceSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries the list of fixable vulnerabilities.
     *
     * @param request DescribeCanFixVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCanFixVulListResponse
     */
    public DescribeCanFixVulListResponse describeCanFixVulListWithOptions(DescribeCanFixVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.digest)) {
            query.put("Digest", request.digest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCanFixVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCanFixVulListResponse());
    }

    /**
     * @summary Queries the list of fixable vulnerabilities.
     *
     * @param request DescribeCanFixVulListRequest
     * @return DescribeCanFixVulListResponse
     */
    public DescribeCanFixVulListResponse describeCanFixVulList(DescribeCanFixVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCanFixVulListWithOptions(request, runtime);
    }

    /**
     * @summary 查询分类并附带每个分类的未处理异常数量
     *
     * @param request DescribeCheckEcsWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckEcsWarningsResponse
     */
    public DescribeCheckEcsWarningsResponse describeCheckEcsWarningsWithOptions(DescribeCheckEcsWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckEcsWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckEcsWarningsResponse());
    }

    /**
     * @summary 查询分类并附带每个分类的未处理异常数量
     *
     * @param request DescribeCheckEcsWarningsRequest
     * @return DescribeCheckEcsWarningsResponse
     */
    public DescribeCheckEcsWarningsResponse describeCheckEcsWarnings(DescribeCheckEcsWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckEcsWarningsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the parameters that you can configure to fix specified risk items.
     *
     * @param request DescribeCheckFixDetailsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckFixDetailsResponse
     */
    public DescribeCheckFixDetailsResponse describeCheckFixDetailsWithOptions(DescribeCheckFixDetailsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckFixDetails"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckFixDetailsResponse());
    }

    /**
     * @summary Queries the parameters that you can configure to fix specified risk items.
     *
     * @param request DescribeCheckFixDetailsRequest
     * @return DescribeCheckFixDetailsResponse
     */
    public DescribeCheckFixDetailsResponse describeCheckFixDetails(DescribeCheckFixDetailsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckFixDetailsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about a specified check item.
     *
     * @param request DescribeCheckWarningDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningDetailResponse
     */
    public DescribeCheckWarningDetailResponse describeCheckWarningDetailWithOptions(DescribeCheckWarningDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkWarningId)) {
            query.put("CheckWarningId", request.checkWarningId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarningDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningDetailResponse());
    }

    /**
     * @summary Queries the details about a specified check item.
     *
     * @param request DescribeCheckWarningDetailRequest
     * @return DescribeCheckWarningDetailResponse
     */
    public DescribeCheckWarningDetailResponse describeCheckWarningDetail(DescribeCheckWarningDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
     *
     * @param request DescribeCheckWarningMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningMachinesResponse
     */
    public DescribeCheckWarningMachinesResponse describeCheckWarningMachinesWithOptions(DescribeCheckWarningMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarningMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningMachinesResponse());
    }

    /**
     * @summary Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
     *
     * @param request DescribeCheckWarningMachinesRequest
     * @return DescribeCheckWarningMachinesResponse
     */
    public DescribeCheckWarningMachinesResponse describeCheckWarningMachines(DescribeCheckWarningMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningMachinesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
     *
     * @param request DescribeCheckWarningSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningSummaryResponse
     */
    public DescribeCheckWarningSummaryResponse describeCheckWarningSummaryWithOptions(DescribeCheckWarningSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskName)) {
            query.put("RiskName", request.riskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskStatus)) {
            query.put("RiskStatus", request.riskStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeName)) {
            query.put("TypeName", request.typeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarningSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningSummaryResponse());
    }

    /**
     * @summary Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
     *
     * @param request DescribeCheckWarningSummaryRequest
     * @return DescribeCheckWarningSummaryResponse
     */
    public DescribeCheckWarningSummaryResponse describeCheckWarningSummary(DescribeCheckWarningSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about specified risk items and the check items of a specified server.
     *
     * @param request DescribeCheckWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningsResponse
     */
    public DescribeCheckWarningsResponse describeCheckWarningsWithOptions(DescribeCheckWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkType)) {
            query.put("CheckType", request.checkType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerName)) {
            query.put("ContainerName", request.containerName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskStatus)) {
            query.put("RiskStatus", request.riskStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningsResponse());
    }

    /**
     * @summary Queries information about specified risk items and the check items of a specified server.
     *
     * @param request DescribeCheckWarningsRequest
     * @return DescribeCheckWarningsResponse
     */
    public DescribeCheckWarningsResponse describeCheckWarnings(DescribeCheckWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of the Security Center agent.
     *
     * @param request DescribeClientConfSetupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClientConfSetupResponse
     */
    public DescribeClientConfSetupResponse describeClientConfSetupWithOptions(DescribeClientConfSetupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyTag)) {
            query.put("StrategyTag", request.strategyTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTagValue)) {
            query.put("StrategyTagValue", request.strategyTagValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClientConfSetup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClientConfSetupResponse());
    }

    /**
     * @summary Queries the configurations of the Security Center agent.
     *
     * @param request DescribeClientConfSetupRequest
     * @return DescribeClientConfSetupResponse
     */
    public DescribeClientConfSetupResponse describeClientConfSetup(DescribeClientConfSetupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClientConfSetupWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of servers to which different tags are added.
     *
     * @param request DescribeClientConfStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClientConfStrategyResponse
     */
    public DescribeClientConfStrategyResponse describeClientConfStrategyWithOptions(DescribeClientConfStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagValue)) {
            query.put("TagValue", request.tagValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClientConfStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClientConfStrategyResponse());
    }

    /**
     * @summary Queries the configurations of servers to which different tags are added.
     *
     * @param request DescribeClientConfStrategyRequest
     * @return DescribeClientConfStrategyResponse
     */
    public DescribeClientConfStrategyResponse describeClientConfStrategy(DescribeClientConfStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClientConfStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
     *
     * @description You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
     *
     * @param request DescribeCloudCenterInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCloudCenterInstancesResponse
     */
    public DescribeCloudCenterInstancesResponse describeCloudCenterInstancesWithOptions(DescribeCloudCenterInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.importance)) {
            query.put("Importance", request.importance);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noGroupTrace)) {
            query.put("NoGroupTrace", request.noGroupTrace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.useNextToken)) {
            query.put("UseNextToken", request.useNextToken);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCloudCenterInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCloudCenterInstancesResponse());
    }

    /**
     * @summary Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
     *
     * @description You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
     *
     * @param request DescribeCloudCenterInstancesRequest
     * @return DescribeCloudCenterInstancesResponse
     */
    public DescribeCloudCenterInstancesResponse describeCloudCenterInstances(DescribeCloudCenterInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCloudCenterInstancesWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
     *
     * @summary Queries the statistics of cloud services.
     *
     * @param request DescribeCloudProductFieldStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCloudProductFieldStatisticsResponse
     */
    // Deprecated
    public DescribeCloudProductFieldStatisticsResponse describeCloudProductFieldStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCloudProductFieldStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCloudProductFieldStatisticsResponse());
    }

    /**
     * @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
     *
     * @summary Queries the statistics of cloud services.
     *
     * @return DescribeCloudProductFieldStatisticsResponse
     */
    // Deprecated
    public DescribeCloudProductFieldStatisticsResponse describeCloudProductFieldStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCloudProductFieldStatisticsWithOptions(runtime);
    }

    /**
     * @summary Queries the information about an cluster based on the cluster ID.
     *
     * @param request DescribeClusterBasicInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterBasicInfoResponse
     */
    public DescribeClusterBasicInfoResponse describeClusterBasicInfoWithOptions(DescribeClusterBasicInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterBasicInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterBasicInfoResponse());
    }

    /**
     * @summary Queries the information about an cluster based on the cluster ID.
     *
     * @param request DescribeClusterBasicInfoRequest
     * @return DescribeClusterBasicInfoResponse
     */
    public DescribeClusterBasicInfoResponse describeClusterBasicInfo(DescribeClusterBasicInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterBasicInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a cluster.
     *
     * @param request DescribeClusterInfoListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterInfoListResponse
     */
    public DescribeClusterInfoListResponse describeClusterInfoListWithOptions(DescribeClusterInfoListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterInfoList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterInfoListResponse());
    }

    /**
     * @summary Queries the information about a cluster.
     *
     * @param request DescribeClusterInfoListRequest
     * @return DescribeClusterInfoListResponse
     */
    public DescribeClusterInfoListResponse describeClusterInfoList(DescribeClusterInfoListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterInfoListWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about the network topology edge by cluster.
     *
     * @param request DescribeClusterNetworkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterNetworkResponse
     */
    public DescribeClusterNetworkResponse describeClusterNetworkWithOptions(DescribeClusterNetworkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterNetwork"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterNetworkResponse());
    }

    /**
     * @summary Queries information about the network topology edge by cluster.
     *
     * @param request DescribeClusterNetworkRequest
     * @return DescribeClusterNetworkResponse
     */
    public DescribeClusterNetworkResponse describeClusterNetwork(DescribeClusterNetworkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterNetworkWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of vulnerabilities that are detected on a cluster.
     *
     * @param request DescribeClusterVulStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterVulStatisticsResponse
     */
    public DescribeClusterVulStatisticsResponse describeClusterVulStatisticsWithOptions(DescribeClusterVulStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterVulStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterVulStatisticsResponse());
    }

    /**
     * @summary Queries the statistics of vulnerabilities that are detected on a cluster.
     *
     * @param request DescribeClusterVulStatisticsRequest
     * @return DescribeClusterVulStatisticsResponse
     */
    public DescribeClusterVulStatisticsResponse describeClusterVulStatistics(DescribeClusterVulStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterVulStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a specified feature.
     *
     * @param request DescribeCommonOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonOverallConfigResponse
     */
    public DescribeCommonOverallConfigResponse describeCommonOverallConfigWithOptions(DescribeCommonOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonOverallConfigResponse());
    }

    /**
     * @summary Queries the information about a specified feature.
     *
     * @param request DescribeCommonOverallConfigRequest
     * @return DescribeCommonOverallConfigResponse
     */
    public DescribeCommonOverallConfigResponse describeCommonOverallConfig(DescribeCommonOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonOverallConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of features in proactive defense.
     *
     * @param request DescribeCommonOverallConfigListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonOverallConfigListResponse
     */
    public DescribeCommonOverallConfigListResponse describeCommonOverallConfigListWithOptions(DescribeCommonOverallConfigListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeList)) {
            query.put("TypeList", request.typeList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonOverallConfigList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonOverallConfigListResponse());
    }

    /**
     * @summary Queries the configurations of features in proactive defense.
     *
     * @param request DescribeCommonOverallConfigListRequest
     * @return DescribeCommonOverallConfigListResponse
     */
    public DescribeCommonOverallConfigListResponse describeCommonOverallConfigList(DescribeCommonOverallConfigListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonOverallConfigListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of the proactive defense feature.
     *
     * @param request DescribeCommonTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonTargetConfigResponse
     */
    public DescribeCommonTargetConfigResponse describeCommonTargetConfigWithOptions(DescribeCommonTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonTargetConfigResponse());
    }

    /**
     * @summary Queries the configurations of the proactive defense feature.
     *
     * @param request DescribeCommonTargetConfigRequest
     * @return DescribeCommonTargetConfigResponse
     */
    public DescribeCommonTargetConfigResponse describeCommonTargetConfig(DescribeCommonTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonTargetConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the servers based on the specified configuration item.
     *
     * @param request DescribeCommonTargetResultListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonTargetResultListResponse
     */
    public DescribeCommonTargetResultListResponse describeCommonTargetResultListWithOptions(DescribeCommonTargetResultListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonTargetResultList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonTargetResultListResponse());
    }

    /**
     * @summary Queries the information about the servers based on the specified configuration item.
     *
     * @param request DescribeCommonTargetResultListRequest
     * @return DescribeCommonTargetResultListResponse
     */
    public DescribeCommonTargetResultListResponse describeCommonTargetResultList(DescribeCommonTargetResultListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonTargetResultListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the priorities to fix vulnerabilities.
     *
     * @param request DescribeConcernNecessityRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeConcernNecessityResponse
     */
    public DescribeConcernNecessityResponse describeConcernNecessityWithOptions(DescribeConcernNecessityRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeConcernNecessity"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeConcernNecessityResponse());
    }

    /**
     * @summary Queries the priorities to fix vulnerabilities.
     *
     * @param request DescribeConcernNecessityRequest
     * @return DescribeConcernNecessityResponse
     */
    public DescribeConcernNecessityResponse describeConcernNecessity(DescribeConcernNecessityRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeConcernNecessityWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a containerized application.
     *
     * @param request DescribeContainerAppsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerAppsResponse
     */
    public DescribeContainerAppsResponse describeContainerAppsWithOptions(DescribeContainerAppsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerApps"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerAppsResponse());
    }

    /**
     * @summary Queries the information about a containerized application.
     *
     * @param request DescribeContainerAppsRequest
     * @return DescribeContainerAppsResponse
     */
    public DescribeContainerAppsResponse describeContainerApps(DescribeContainerAppsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerAppsWithOptions(request, runtime);
    }

    /**
     * @summary Obtains the filter conditions that you can use to filter the containers.
     *
     * @param request DescribeContainerCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerCriteriaResponse
     */
    public DescribeContainerCriteriaResponse describeContainerCriteriaWithOptions(DescribeContainerCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupField)) {
            query.put("GroupField", request.groupField);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerCriteriaResponse());
    }

    /**
     * @summary Obtains the filter conditions that you can use to filter the containers.
     *
     * @param request DescribeContainerCriteriaRequest
     * @return DescribeContainerCriteriaResponse
     */
    public DescribeContainerCriteriaResponse describeContainerCriteria(DescribeContainerCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about containers.
     *
     * @param request DescribeContainerInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerInstancesResponse
     */
    public DescribeContainerInstancesResponse describeContainerInstancesWithOptions(DescribeContainerInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerInstancesResponse());
    }

    /**
     * @summary Queries the information about containers.
     *
     * @param request DescribeContainerInstancesRequest
     * @return DescribeContainerInstancesResponse
     */
    public DescribeContainerInstancesResponse describeContainerInstances(DescribeContainerInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerInstancesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of the vulnerability scan of one or more running container applications.
     *
     * @param request DescribeContainerScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerScanConfigResponse
     */
    public DescribeContainerScanConfigResponse describeContainerScanConfigWithOptions(DescribeContainerScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerScanConfigResponse());
    }

    /**
     * @summary Queries the configurations of the vulnerability scan of one or more running container applications.
     *
     * @param request DescribeContainerScanConfigRequest
     * @return DescribeContainerScanConfigResponse
     */
    public DescribeContainerScanConfigResponse describeContainerScanConfig(DescribeContainerScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the alert statistics on container assets.
     *
     * @description Only users who created a Container Registry Enterprise Edition instance can call this operation.
     *
     * @param request DescribeContainerStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerStatisticsResponse
     */
    public DescribeContainerStatisticsResponse describeContainerStatisticsWithOptions(DescribeContainerStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerStatisticsResponse());
    }

    /**
     * @summary Queries the alert statistics on container assets.
     *
     * @description Only users who created a Container Registry Enterprise Edition instance can call this operation.
     *
     * @param request DescribeContainerStatisticsRequest
     * @return DescribeContainerStatisticsResponse
     */
    public DescribeContainerStatisticsResponse describeContainerStatistics(DescribeContainerStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of container assets by using an attribute.
     *
     * @param request DescribeContainerTagsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerTagsResponse
     */
    public DescribeContainerTagsResponse describeContainerTagsWithOptions(DescribeContainerTagsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerTags"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerTagsResponse());
    }

    /**
     * @summary Queries the details of container assets by using an attribute.
     *
     * @param request DescribeContainerTagsRequest
     * @return DescribeContainerTagsResponse
     */
    public DescribeContainerTagsResponse describeContainerTags(DescribeContainerTagsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerTagsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of images that are not scanned.
     *
     * @param request DescribeCountNotScannedImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCountNotScannedImageResponse
     */
    public DescribeCountNotScannedImageResponse describeCountNotScannedImageWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCountNotScannedImage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCountNotScannedImageResponse());
    }

    /**
     * @summary Queries the number of images that are not scanned.
     *
     * @return DescribeCountNotScannedImageResponse
     */
    public DescribeCountNotScannedImageResponse describeCountNotScannedImage() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCountNotScannedImageWithOptions(runtime);
    }

    /**
     * @summary Queries the number of images that are scanned.
     *
     * @param request DescribeCountScannedImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCountScannedImageResponse
     */
    public DescribeCountScannedImageResponse describeCountScannedImageWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCountScannedImage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCountScannedImageResponse());
    }

    /**
     * @summary Queries the number of images that are scanned.
     *
     * @return DescribeCountScannedImageResponse
     */
    public DescribeCountScannedImageResponse describeCountScannedImage() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCountScannedImageWithOptions(runtime);
    }

    /**
     * @summary Queries the filter conditions that are used to search for assets in fuzzy match mode.
     *
     * @param request DescribeCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCriteriaResponse
     */
    public DescribeCriteriaResponse describeCriteriaWithOptions(DescribeCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.supportAutoTag)) {
            query.put("SupportAutoTag", request.supportAutoTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCriteriaResponse());
    }

    /**
     * @summary Queries the filter conditions that are used to search for assets in fuzzy match mode.
     *
     * @param request DescribeCriteriaRequest
     * @return DescribeCriteriaResponse
     */
    public DescribeCriteriaResponse describeCriteria(DescribeCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
     *
     * @param request DescribeCustomBlockInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomBlockInstancesResponse
     */
    public DescribeCustomBlockInstancesResponse describeCustomBlockInstancesWithOptions(DescribeCustomBlockInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomBlockInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomBlockInstancesResponse());
    }

    /**
     * @summary Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
     *
     * @param request DescribeCustomBlockInstancesRequest
     * @return DescribeCustomBlockInstancesResponse
     */
    public DescribeCustomBlockInstancesResponse describeCustomBlockInstances(DescribeCustomBlockInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomBlockInstancesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the defense rules against brute-force attacks that are applied to one or more servers.
     *
     * @param request DescribeCustomBlockRecordsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomBlockRecordsResponse
     */
    public DescribeCustomBlockRecordsResponse describeCustomBlockRecordsWithOptions(DescribeCustomBlockRecordsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomBlockRecords"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomBlockRecordsResponse());
    }

    /**
     * @summary Queries the defense rules against brute-force attacks that are applied to one or more servers.
     *
     * @param request DescribeCustomBlockRecordsRequest
     * @return DescribeCustomBlockRecordsResponse
     */
    public DescribeCustomBlockRecordsResponse describeCustomBlockRecords(DescribeCustomBlockRecordsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomBlockRecordsWithOptions(request, runtime);
    }

    /**
     * @summary Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
     *
     * @param request DescribeCycleTaskListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCycleTaskListResponse
     */
    public DescribeCycleTaskListResponse describeCycleTaskListWithOptions(DescribeCycleTaskListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCycleTaskList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCycleTaskListResponse());
    }

    /**
     * @summary Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
     *
     * @param request DescribeCycleTaskListRequest
     * @return DescribeCycleTaskListResponse
     */
    public DescribeCycleTaskListResponse describeCycleTaskList(DescribeCycleTaskListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCycleTaskListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
     *
     * @param request DescribeDefaultProxyInstallVersionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDefaultProxyInstallVersionResponse
     */
    public DescribeDefaultProxyInstallVersionResponse describeDefaultProxyInstallVersionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDefaultProxyInstallVersion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDefaultProxyInstallVersionResponse());
    }

    /**
     * @summary Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
     *
     * @return DescribeDefaultProxyInstallVersionResponse
     */
    public DescribeDefaultProxyInstallVersionResponse describeDefaultProxyInstallVersion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDefaultProxyInstallVersionWithOptions(runtime);
    }

    /**
     * @summary Obtains DingTalk notifications.
     *
     * @param request DescribeDingTalkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDingTalkResponse
     */
    public DescribeDingTalkResponse describeDingTalkWithOptions(DescribeDingTalkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleActionName)) {
            query.put("RuleActionName", request.ruleActionName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDingTalk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDingTalkResponse());
    }

    /**
     * @summary Obtains DingTalk notifications.
     *
     * @param request DescribeDingTalkRequest
     * @return DescribeDingTalkResponse
     */
    public DescribeDingTalkResponse describeDingTalk(DescribeDingTalkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDingTalkWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of domain assets within your Alibaba Cloud account.
     *
     * @param request DescribeDomainCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainCountResponse
     */
    public DescribeDomainCountResponse describeDomainCountWithOptions(DescribeDomainCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainCountResponse());
    }

    /**
     * @summary Queries the number of domain assets within your Alibaba Cloud account.
     *
     * @param request DescribeDomainCountRequest
     * @return DescribeDomainCountResponse
     */
    public DescribeDomainCountResponse describeDomainCount(DescribeDomainCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainCountWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of domain assets within your Alibaba Cloud account.
     *
     * @param request DescribeDomainDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainDetailResponse
     */
    public DescribeDomainDetailResponse describeDomainDetailWithOptions(DescribeDomainDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.domainName)) {
            query.put("DomainName", request.domainName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainDetailResponse());
    }

    /**
     * @summary Queries the details of domain assets within your Alibaba Cloud account.
     *
     * @param request DescribeDomainDetailRequest
     * @return DescribeDomainDetailResponse
     */
    public DescribeDomainDetailResponse describeDomainDetail(DescribeDomainDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the domain assets within your Alibaba Cloud account.
     *
     * @param request DescribeDomainListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainListResponse
     */
    public DescribeDomainListResponse describeDomainListWithOptions(DescribeDomainListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domainType)) {
            query.put("DomainType", request.domainType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzyDomain)) {
            query.put("FuzzyDomain", request.fuzzyDomain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainListResponse());
    }

    /**
     * @summary Queries the information about the domain assets within your Alibaba Cloud account.
     *
     * @param request DescribeDomainListRequest
     * @return DescribeDomainListResponse
     */
    public DescribeDomainListResponse describeDomainList(DescribeDomainListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainListWithOptions(request, runtime);
    }

    /**
     * @summary Queries whether Security Center is authorized to scan for urgent vulnerabilities.
     *
     * @param request DescribeEmgUserAgreementRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEmgUserAgreementResponse
     */
    public DescribeEmgUserAgreementResponse describeEmgUserAgreementWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEmgUserAgreement"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEmgUserAgreementResponse());
    }

    /**
     * @summary Queries whether Security Center is authorized to scan for urgent vulnerabilities.
     *
     * @return DescribeEmgUserAgreementResponse
     */
    public DescribeEmgUserAgreementResponse describeEmgUserAgreement() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEmgUserAgreementWithOptions(runtime);
    }

    /**
     * @summary Queries the details of urgent vulnerabilities.
     *
     * @param request DescribeEmgVulItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEmgVulItemResponse
     */
    public DescribeEmgVulItemResponse describeEmgVulItemWithOptions(DescribeEmgVulItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkType)) {
            query.put("CheckType", request.checkType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskStatus)) {
            query.put("RiskStatus", request.riskStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanType)) {
            query.put("ScanType", request.scanType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulName)) {
            query.put("VulName", request.vulName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEmgVulItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEmgVulItemResponse());
    }

    /**
     * @summary Queries the details of urgent vulnerabilities.
     *
     * @param request DescribeEmgVulItemRequest
     * @return DescribeEmgVulItemResponse
     */
    public DescribeEmgVulItemResponse describeEmgVulItem(DescribeEmgVulItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEmgVulItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of alert events by risk level.
     *
     * @param request DescribeEventLevelCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEventLevelCountResponse
     */
    public DescribeEventLevelCountResponse describeEventLevelCountWithOptions(DescribeEventLevelCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerIds)) {
            query.put("ContainerIds", request.containerIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEventLevelCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEventLevelCountResponse());
    }

    /**
     * @summary Queries the statistics of alert events by risk level.
     *
     * @param request DescribeEventLevelCountRequest
     * @return DescribeEventLevelCountResponse
     */
    public DescribeEventLevelCountResponse describeEventLevelCount(DescribeEventLevelCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEventLevelCountWithOptions(request, runtime);
    }

    /**
     * @summary Queries the platforms that are supported by the feature of container threat detection.
     *
     * @param request DescribeEventOnStageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEventOnStageResponse
     */
    public DescribeEventOnStageResponse describeEventOnStageWithOptions(DescribeEventOnStageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEventOnStage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEventOnStageResponse());
    }

    /**
     * @summary Queries the platforms that are supported by the feature of container threat detection.
     *
     * @param request DescribeEventOnStageRequest
     * @return DescribeEventOnStageResponse
     */
    public DescribeEventOnStageResponse describeEventOnStage(DescribeEventOnStageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEventOnStageWithOptions(request, runtime);
    }

    /**
     * @summary Queries the directories that are excluded from anti-ransomware.
     *
     * @param request DescribeExcludeSystemPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExcludeSystemPathResponse
     */
    public DescribeExcludeSystemPathResponse describeExcludeSystemPathWithOptions(DescribeExcludeSystemPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExcludeSystemPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExcludeSystemPathResponse());
    }

    /**
     * @summary Queries the directories that are excluded from anti-ransomware.
     *
     * @param request DescribeExcludeSystemPathRequest
     * @return DescribeExcludeSystemPathResponse
     */
    public DescribeExcludeSystemPathResponse describeExcludeSystemPath(DescribeExcludeSystemPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExcludeSystemPathWithOptions(request, runtime);
    }

    /**
     * @summary Queries the progress of a task that exports your assets to an Excel file.
     *
     * @param request DescribeExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExportInfoResponse
     */
    public DescribeExportInfoResponse describeExportInfoWithOptions(DescribeExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExportInfoResponse());
    }

    /**
     * @summary Queries the progress of a task that exports your assets to an Excel file.
     *
     * @param request DescribeExportInfoRequest
     * @return DescribeExportInfoResponse
     */
    public DescribeExportInfoResponse describeExportInfo(DescribeExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExportInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the weak password-related risks of a specified server that is exposed on the Internet.
     *
     * @param request DescribeExposedCheckWarningRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedCheckWarningResponse
     */
    public DescribeExposedCheckWarningResponse describeExposedCheckWarningWithOptions(DescribeExposedCheckWarningRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeName)) {
            query.put("TypeName", request.typeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedCheckWarning"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedCheckWarningResponse());
    }

    /**
     * @summary Queries the weak password-related risks of a specified server that is exposed on the Internet.
     *
     * @param request DescribeExposedCheckWarningRequest
     * @return DescribeExposedCheckWarningResponse
     */
    public DescribeExposedCheckWarningResponse describeExposedCheckWarning(DescribeExposedCheckWarningRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedCheckWarningWithOptions(request, runtime);
    }

    /**
     * @summary Queries the search conditions that are used to search for exposed assets.
     *
     * @param request DescribeExposedInstanceCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedInstanceCriteriaResponse
     */
    public DescribeExposedInstanceCriteriaResponse describeExposedInstanceCriteriaWithOptions(DescribeExposedInstanceCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedInstanceCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedInstanceCriteriaResponse());
    }

    /**
     * @summary Queries the search conditions that are used to search for exposed assets.
     *
     * @param request DescribeExposedInstanceCriteriaRequest
     * @return DescribeExposedInstanceCriteriaResponse
     */
    public DescribeExposedInstanceCriteriaResponse describeExposedInstanceCriteria(DescribeExposedInstanceCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedInstanceCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about a specified server that is exposed on the Internet.
     *
     * @param request DescribeExposedInstanceDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedInstanceDetailResponse
     */
    public DescribeExposedInstanceDetailResponse describeExposedInstanceDetailWithOptions(DescribeExposedInstanceDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedInstanceDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedInstanceDetailResponse());
    }

    /**
     * @summary Queries the details about a specified server that is exposed on the Internet.
     *
     * @param request DescribeExposedInstanceDetailRequest
     * @return DescribeExposedInstanceDetailResponse
     */
    public DescribeExposedInstanceDetailResponse describeExposedInstanceDetail(DescribeExposedInstanceDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedInstanceDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the servers that are exposed on the Internet.
     *
     * @param request DescribeExposedInstanceListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedInstanceListResponse
     */
    public DescribeExposedInstanceListResponse describeExposedInstanceListWithOptions(DescribeExposedInstanceListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exposureComponent)) {
            query.put("ExposureComponent", request.exposureComponent);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exposureIp)) {
            query.put("ExposureIp", request.exposureIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exposurePort)) {
            query.put("ExposurePort", request.exposurePort);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.healthStatus)) {
            query.put("HealthStatus", request.healthStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulStatus)) {
            query.put("VulStatus", request.vulStatus);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedInstanceList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedInstanceListResponse());
    }

    /**
     * @summary Queries the information about the servers that are exposed on the Internet.
     *
     * @param request DescribeExposedInstanceListRequest
     * @return DescribeExposedInstanceListResponse
     */
    public DescribeExposedInstanceListResponse describeExposedInstanceList(DescribeExposedInstanceListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedInstanceListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the exposure statistics of the assets on the Internet.
     *
     * @param request DescribeExposedStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedStatisticsResponse
     */
    public DescribeExposedStatisticsResponse describeExposedStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedStatisticsResponse());
    }

    /**
     * @summary Queries the exposure statistics of the assets on the Internet.
     *
     * @return DescribeExposedStatisticsResponse
     */
    public DescribeExposedStatisticsResponse describeExposedStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedStatisticsWithOptions(runtime);
    }

    /**
     * @summary Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
     *
     * @param request DescribeExposedStatisticsDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedStatisticsDetailResponse
     */
    public DescribeExposedStatisticsDetailResponse describeExposedStatisticsDetailWithOptions(DescribeExposedStatisticsDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsType)) {
            query.put("StatisticsType", request.statisticsType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsTypeGatewayType)) {
            query.put("StatisticsTypeGatewayType", request.statisticsTypeGatewayType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsTypeInstanceValue)) {
            query.put("StatisticsTypeInstanceValue", request.statisticsTypeInstanceValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedStatisticsDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedStatisticsDetailResponse());
    }

    /**
     * @summary Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
     *
     * @param request DescribeExposedStatisticsDetailRequest
     * @return DescribeExposedStatisticsDetailResponse
     */
    public DescribeExposedStatisticsDetailResponse describeExposedStatisticsDetail(DescribeExposedStatisticsDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedStatisticsDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of servers.
     *
     * @param request DescribeFieldStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeFieldStatisticsResponse
     */
    public DescribeFieldStatisticsResponse describeFieldStatisticsWithOptions(DescribeFieldStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeFieldStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeFieldStatisticsResponse());
    }

    /**
     * @summary Queries the statistics of servers.
     *
     * @param request DescribeFieldStatisticsRequest
     * @return DescribeFieldStatisticsResponse
     */
    public DescribeFieldStatisticsResponse describeFieldStatistics(DescribeFieldStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeFieldStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary 查看漏洞修复使用次数
     *
     * @param request DescribeFixUsedCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeFixUsedCountResponse
     */
    public DescribeFixUsedCountResponse describeFixUsedCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeFixUsedCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeFixUsedCountResponse());
    }

    /**
     * @summary 查看漏洞修复使用次数
     *
     * @return DescribeFixUsedCountResponse
     */
    public DescribeFixUsedCountResponse describeFixUsedCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeFixUsedCountWithOptions(runtime);
    }

    /**
     * @summary Queries the pre-patches that are required to fix a specified Windows system vulnerability.
     *
     * @param request DescribeFrontVulPatchListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeFrontVulPatchListResponse
     */
    public DescribeFrontVulPatchListResponse describeFrontVulPatchListWithOptions(DescribeFrontVulPatchListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.info)) {
            query.put("Info", request.info);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeFrontVulPatchList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeFrontVulPatchListResponse());
    }

    /**
     * @summary Queries the pre-patches that are required to fix a specified Windows system vulnerability.
     *
     * @param request DescribeFrontVulPatchListRequest
     * @return DescribeFrontVulPatchListResponse
     */
    public DescribeFrontVulPatchListResponse describeFrontVulPatchList(DescribeFrontVulPatchListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeFrontVulPatchListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the structure of a group.
     *
     * @param request DescribeGroupStructRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupStructResponse
     */
    public DescribeGroupStructResponse describeGroupStructWithOptions(DescribeGroupStructRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupStruct"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupStructResponse());
    }

    /**
     * @summary Queries the structure of a group.
     *
     * @param request DescribeGroupStructRequest
     * @return DescribeGroupStructResponse
     */
    public DescribeGroupStructResponse describeGroupStruct(DescribeGroupStructRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupStructWithOptions(request, runtime);
    }

    /**
     * @summary Queries containers by group type.
     *
     * @param request DescribeGroupedContainerInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedContainerInstancesResponse
     */
    public DescribeGroupedContainerInstancesResponse describeGroupedContainerInstancesWithOptions(DescribeGroupedContainerInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupField)) {
            query.put("GroupField", request.groupField);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedContainerInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedContainerInstancesResponse());
    }

    /**
     * @summary Queries containers by group type.
     *
     * @param request DescribeGroupedContainerInstancesRequest
     * @return DescribeGroupedContainerInstancesResponse
     */
    public DescribeGroupedContainerInstancesResponse describeGroupedContainerInstances(DescribeGroupedContainerInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedContainerInstancesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistical information about assets based on a specified filter condition.
     *
     * @param request DescribeGroupedInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedInstancesResponse
     */
    public DescribeGroupedInstancesResponse describeGroupedInstancesWithOptions(DescribeGroupedInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupField)) {
            query.put("GroupField", request.groupField);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noPage)) {
            query.put("NoPage", request.noPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.saleVersionCheckCode)) {
            query.put("SaleVersionCheckCode", request.saleVersionCheckCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedInstancesResponse());
    }

    /**
     * @summary Queries the statistical information about assets based on a specified filter condition.
     *
     * @param request DescribeGroupedInstancesRequest
     * @return DescribeGroupedInstancesResponse
     */
    public DescribeGroupedInstancesResponse describeGroupedInstances(DescribeGroupedInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedInstancesWithOptions(request, runtime);
    }

    /**
     * @summary Queries a list of malicious image samples.
     *
     * @param request DescribeGroupedMaliciousFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedMaliciousFilesResponse
     */
    public DescribeGroupedMaliciousFilesResponse describeGroupedMaliciousFilesWithOptions(DescribeGroupedMaliciousFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzyMaliciousName)) {
            query.put("FuzzyMaliciousName", request.fuzzyMaliciousName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageLayer)) {
            query.put("ImageLayer", request.imageLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousMd5)) {
            query.put("MaliciousMd5", request.maliciousMd5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedMaliciousFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedMaliciousFilesResponse());
    }

    /**
     * @summary Queries a list of malicious image samples.
     *
     * @param request DescribeGroupedMaliciousFilesRequest
     * @return DescribeGroupedMaliciousFilesResponse
     */
    public DescribeGroupedMaliciousFilesResponse describeGroupedMaliciousFiles(DescribeGroupedMaliciousFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedMaliciousFilesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of asset tags.
     *
     * @param request DescribeGroupedTagsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedTagsResponse
     */
    public DescribeGroupedTagsResponse describeGroupedTagsWithOptions(DescribeGroupedTagsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedTags"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedTagsResponse());
    }

    /**
     * @summary Queries the statistics of asset tags.
     *
     * @param request DescribeGroupedTagsRequest
     * @return DescribeGroupedTagsResponse
     */
    public DescribeGroupedTagsResponse describeGroupedTags(DescribeGroupedTagsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedTagsWithOptions(request, runtime);
    }

    /**
     * @summary Queries vulnerabilities by group.
     *
     * @param request DescribeGroupedVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedVulResponse
     */
    public DescribeGroupedVulResponse describeGroupedVulWithOptions(DescribeGroupedVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attachTypes)) {
            query.put("AttachTypes", request.attachTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchTags)) {
            query.put("SearchTags", request.searchTags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedVulResponse());
    }

    /**
     * @summary Queries vulnerabilities by group.
     *
     * @param request DescribeGroupedVulRequest
     * @return DescribeGroupedVulResponse
     */
    public DescribeGroupedVulResponse describeGroupedVul(DescribeGroupedVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedVulWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
     *
     * @param request DescribeHcExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHcExportInfoResponse
     */
    public DescribeHcExportInfoResponse describeHcExportInfoWithOptions(DescribeHcExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHcExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHcExportInfoResponse());
    }

    /**
     * @summary Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
     *
     * @param request DescribeHcExportInfoRequest
     * @return DescribeHcExportInfoResponse
     */
    public DescribeHcExportInfoResponse describeHcExportInfo(DescribeHcExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHcExportInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries statistics on the quota of honeypots.
     *
     * @param request DescribeHoneyPotAuthRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHoneyPotAuthResponse
     */
    public DescribeHoneyPotAuthResponse describeHoneyPotAuthWithOptions(DescribeHoneyPotAuthRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHoneyPotAuth"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHoneyPotAuthResponse());
    }

    /**
     * @summary Queries statistics on the quota of honeypots.
     *
     * @param request DescribeHoneyPotAuthRequest
     * @return DescribeHoneyPotAuthResponse
     */
    public DescribeHoneyPotAuthResponse describeHoneyPotAuth(DescribeHoneyPotAuthRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHoneyPotAuthWithOptions(request, runtime);
    }

    /**
     * @summary Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
     *
     * @param request DescribeHoneyPotSuspStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHoneyPotSuspStatisticsResponse
     */
    public DescribeHoneyPotSuspStatisticsResponse describeHoneyPotSuspStatisticsWithOptions(DescribeHoneyPotSuspStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsDays)) {
            query.put("StatisticsDays", request.statisticsDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsKeyType)) {
            query.put("StatisticsKeyType", request.statisticsKeyType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHoneyPotSuspStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHoneyPotSuspStatisticsResponse());
    }

    /**
     * @summary Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
     *
     * @param request DescribeHoneyPotSuspStatisticsRequest
     * @return DescribeHoneyPotSuspStatisticsResponse
     */
    public DescribeHoneyPotSuspStatisticsResponse describeHoneyPotSuspStatistics(DescribeHoneyPotSuspStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHoneyPotSuspStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries an image digest.
     *
     * @param request DescribeImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageResponse
     */
    public DescribeImageResponse describeImageWithOptions(DescribeImageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.imageInstanceId)) {
            query.put("ImageInstanceId", request.imageInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageRegionId)) {
            query.put("ImageRegionId", request.imageRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageRepoId)) {
            query.put("ImageRepoId", request.imageRepoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageResponse());
    }

    /**
     * @summary Queries an image digest.
     *
     * @param request DescribeImageRequest
     * @return DescribeImageResponse
     */
    public DescribeImageResponse describeImage(DescribeImageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageWithOptions(request, runtime);
    }

    /**
     * @summary Queries the security scan results of images.
     *
     * @param request DescribeImageBaselineCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineCheckResultResponse
     */
    public DescribeImageBaselineCheckResultResponse describeImageBaselineCheckResultWithOptions(DescribeImageBaselineCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineCheckResultResponse());
    }

    /**
     * @summary Queries the security scan results of images.
     *
     * @param request DescribeImageBaselineCheckResultRequest
     * @return DescribeImageBaselineCheckResultResponse
     */
    public DescribeImageBaselineCheckResultResponse describeImageBaselineCheckResult(DescribeImageBaselineCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineCheckResultWithOptions(request, runtime);
    }

    /**
     * @summary Queries the check results of image baselines that are included in an image scan task.
     *
     * @param request DescribeImageBaselineCheckSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineCheckSummaryResponse
     */
    public DescribeImageBaselineCheckSummaryResponse describeImageBaselineCheckSummaryWithOptions(DescribeImageBaselineCheckSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineCheckSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineCheckSummaryResponse());
    }

    /**
     * @summary Queries the check results of image baselines that are included in an image scan task.
     *
     * @param request DescribeImageBaselineCheckSummaryRequest
     * @return DescribeImageBaselineCheckSummaryResponse
     */
    public DescribeImageBaselineCheckSummaryResponse describeImageBaselineCheckSummary(DescribeImageBaselineCheckSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineCheckSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about the baseline check result for an image.
     *
     * @param request DescribeImageBaselineDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineDetailResponse
     */
    public DescribeImageBaselineDetailResponse describeImageBaselineDetailWithOptions(DescribeImageBaselineDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineItemKey)) {
            query.put("BaselineItemKey", request.baselineItemKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineDetailResponse());
    }

    /**
     * @summary Queries the details about the baseline check result for an image.
     *
     * @param request DescribeImageBaselineDetailRequest
     * @return DescribeImageBaselineDetailResponse
     */
    public DescribeImageBaselineDetailResponse describeImageBaselineDetail(DescribeImageBaselineDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries baseline check results based on images.
     *
     * @param request DescribeImageBaselineItemListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineItemListResponse
     */
    public DescribeImageBaselineItemListResponse describeImageBaselineItemListWithOptions(DescribeImageBaselineItemListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineClassKey)) {
            query.put("BaselineClassKey", request.baselineClassKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.baselineNameKey)) {
            query.put("BaselineNameKey", request.baselineNameKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineItemList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineItemListResponse());
    }

    /**
     * @summary Queries baseline check results based on images.
     *
     * @param request DescribeImageBaselineItemListRequest
     * @return DescribeImageBaselineItemListResponse
     */
    public DescribeImageBaselineItemListResponse describeImageBaselineItemList(DescribeImageBaselineItemListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineItemListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a baseline check policy for images.
     *
     * @param request DescribeImageBaselineStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineStrategyResponse
     */
    public DescribeImageBaselineStrategyResponse describeImageBaselineStrategyWithOptions(DescribeImageBaselineStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineStrategyResponse());
    }

    /**
     * @summary Queries the information about a baseline check policy for images.
     *
     * @param request DescribeImageBaselineStrategyRequest
     * @return DescribeImageBaselineStrategyResponse
     */
    public DescribeImageBaselineStrategyResponse describeImageBaselineStrategy(DescribeImageBaselineStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Queries the search conditions that are used to query images.
     *
     * @param request DescribeImageCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageCriteriaResponse
     */
    public DescribeImageCriteriaResponse describeImageCriteriaWithOptions(DescribeImageCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageCriteriaResponse());
    }

    /**
     * @summary Queries the search conditions that are used to query images.
     *
     * @param request DescribeImageCriteriaRequest
     * @return DescribeImageCriteriaResponse
     */
    public DescribeImageCriteriaResponse describeImageCriteria(DescribeImageCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the conditions for handling alert events in an image.
     *
     * @param request DescribeImageEventOperationConditionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageEventOperationConditionResponse
     */
    public DescribeImageEventOperationConditionResponse describeImageEventOperationConditionWithOptions(DescribeImageEventOperationConditionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageEventOperationCondition"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageEventOperationConditionResponse());
    }

    /**
     * @summary Queries the conditions for handling alert events in an image.
     *
     * @param request DescribeImageEventOperationConditionRequest
     * @return DescribeImageEventOperationConditionResponse
     */
    public DescribeImageEventOperationConditionResponse describeImageEventOperationCondition(DescribeImageEventOperationConditionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageEventOperationConditionWithOptions(request, runtime);
    }

    /**
     * @summary Queries alert handling rules by page.
     *
     * @param request DescribeImageEventOperationPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageEventOperationPageResponse
     */
    public DescribeImageEventOperationPageResponse describeImageEventOperationPageWithOptions(DescribeImageEventOperationPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventKey)) {
            query.put("EventKey", request.eventKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageEventOperationPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageEventOperationPageResponse());
    }

    /**
     * @summary Queries alert handling rules by page.
     *
     * @param request DescribeImageEventOperationPageRequest
     * @return DescribeImageEventOperationPageResponse
     */
    public DescribeImageEventOperationPageResponse describeImageEventOperationPage(DescribeImageEventOperationPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageEventOperationPageWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of the scheduled fix of image risks.
     *
     * @param request DescribeImageFixCycleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageFixCycleConfigResponse
     */
    public DescribeImageFixCycleConfigResponse describeImageFixCycleConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageFixCycleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageFixCycleConfigResponse());
    }

    /**
     * @summary Queries the configurations of the scheduled fix of image risks.
     *
     * @return DescribeImageFixCycleConfigResponse
     */
    public DescribeImageFixCycleConfigResponse describeImageFixCycleConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageFixCycleConfigWithOptions(runtime);
    }

    /**
     * @summary Queries the tasks that you create to fix image risks.
     *
     * @param request DescribeImageFixTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageFixTaskResponse
     */
    public DescribeImageFixTaskResponse describeImageFixTaskWithOptions(DescribeImageFixTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageFixTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageFixTaskResponse());
    }

    /**
     * @summary Queries the tasks that you create to fix image risks.
     *
     * @param request DescribeImageFixTaskRequest
     * @return DescribeImageFixTaskResponse
     */
    public DescribeImageFixTaskResponse describeImageFixTask(DescribeImageFixTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageFixTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries image vulnerabilities.
     *
     * @param request DescribeImageGroupedVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageGroupedVulListResponse
     */
    public DescribeImageGroupedVulListResponse describeImageGroupedVulListWithOptions(DescribeImageGroupedVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cveId)) {
            query.put("CveId", request.cveId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageLayer)) {
            query.put("ImageLayer", request.imageLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isLatest)) {
            query.put("IsLatest", request.isLatest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.patchId)) {
            query.put("PatchId", request.patchId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageGroupedVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageGroupedVulListResponse());
    }

    /**
     * @summary Queries image vulnerabilities.
     *
     * @param request DescribeImageGroupedVulListRequest
     * @return DescribeImageGroupedVulListResponse
     */
    public DescribeImageGroupedVulListResponse describeImageGroupedVulList(DescribeImageGroupedVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageGroupedVulListWithOptions(request, runtime);
    }

    /**
     * @summary Queries images.
     *
     * @param request DescribeImageInfoListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageInfoListResponse
     */
    public DescribeImageInfoListResponse describeImageInfoListWithOptions(DescribeImageInfoListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageInfoList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageInfoListResponse());
    }

    /**
     * @summary Queries images.
     *
     * @param request DescribeImageInfoListRequest
     * @return DescribeImageInfoListResponse
     */
    public DescribeImageInfoListResponse describeImageInfoList(DescribeImageInfoListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageInfoListWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about images.
     *
     * @param request DescribeImageInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageInstancesResponse
     */
    public DescribeImageInstancesResponse describeImageInstancesWithOptions(DescribeImageInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanned)) {
            query.put("Scanned", request.scanned);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageInstancesResponse());
    }

    /**
     * @summary Queries information about images.
     *
     * @param request DescribeImageInstancesRequest
     * @return DescribeImageInstancesResponse
     */
    public DescribeImageInstancesResponse describeImageInstances(DescribeImageInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageInstancesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the most recent scan task that is created for an image.
     *
     * @param request DescribeImageLatestScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageLatestScanTaskResponse
     */
    public DescribeImageLatestScanTaskResponse describeImageLatestScanTaskWithOptions(DescribeImageLatestScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.digest)) {
            query.put("Digest", request.digest);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageLatestScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageLatestScanTaskResponse());
    }

    /**
     * @summary Queries the most recent scan task that is created for an image.
     *
     * @param request DescribeImageLatestScanTaskRequest
     * @return DescribeImageLatestScanTaskResponse
     */
    public DescribeImageLatestScanTaskResponse describeImageLatestScanTask(DescribeImageLatestScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageLatestScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about images that are affected by sensitive files.
     *
     * @param tmpReq DescribeImageListBySensitiveFileRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageListBySensitiveFileResponse
     */
    public DescribeImageListBySensitiveFileResponse describeImageListBySensitiveFileWithOptions(DescribeImageListBySensitiveFileRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeImageListBySensitiveFileShrinkRequest request = new DescribeImageListBySensitiveFileShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRangeShrink)) {
            query.put("ScanRange", request.scanRangeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sensitiveFileKey)) {
            query.put("SensitiveFileKey", request.sensitiveFileKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageListBySensitiveFile"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageListBySensitiveFileResponse());
    }

    /**
     * @summary Queries information about images that are affected by sensitive files.
     *
     * @param request DescribeImageListBySensitiveFileRequest
     * @return DescribeImageListBySensitiveFileResponse
     */
    public DescribeImageListBySensitiveFileResponse describeImageListBySensitiveFile(DescribeImageListBySensitiveFileRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageListBySensitiveFileWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about images in the results of image baseline checks.
     *
     * @param request DescribeImageListWithBaselineNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageListWithBaselineNameResponse
     */
    public DescribeImageListWithBaselineNameResponse describeImageListWithBaselineNameWithOptions(DescribeImageListWithBaselineNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineNameKey)) {
            query.put("BaselineNameKey", request.baselineNameKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageListWithBaselineName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageListWithBaselineNameResponse());
    }

    /**
     * @summary Queries the details about images in the results of image baseline checks.
     *
     * @param request DescribeImageListWithBaselineNameRequest
     * @return DescribeImageListWithBaselineNameResponse
     */
    public DescribeImageListWithBaselineNameResponse describeImageListWithBaselineName(DescribeImageListWithBaselineNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageListWithBaselineNameWithOptions(request, runtime);
    }

    /**
     * @summary Obtains the filter conditions that are supported by the image repository.
     *
     * @param request DescribeImageRepoCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageRepoCriteriaResponse
     */
    public DescribeImageRepoCriteriaResponse describeImageRepoCriteriaWithOptions(DescribeImageRepoCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageRepoCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageRepoCriteriaResponse());
    }

    /**
     * @summary Obtains the filter conditions that are supported by the image repository.
     *
     * @param request DescribeImageRepoCriteriaRequest
     * @return DescribeImageRepoCriteriaResponse
     */
    public DescribeImageRepoCriteriaResponse describeImageRepoCriteria(DescribeImageRepoCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageRepoCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about image repositories.
     *
     * @param request DescribeImageRepoDetailListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageRepoDetailListResponse
     */
    public DescribeImageRepoDetailListResponse describeImageRepoDetailListWithOptions(DescribeImageRepoDetailListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageRepoDetailList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageRepoDetailListResponse());
    }

    /**
     * @summary Queries the information about image repositories.
     *
     * @param request DescribeImageRepoDetailListRequest
     * @return DescribeImageRepoDetailListResponse
     */
    public DescribeImageRepoDetailListResponse describeImageRepoDetailList(DescribeImageRepoDetailListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageRepoDetailListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics and configurations of the feature that protects images.
     *
     * @param request DescribeImageRepoListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageRepoListResponse
     */
    public DescribeImageRepoListResponse describeImageRepoListWithOptions(DescribeImageRepoListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageRepoList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageRepoListResponse());
    }

    /**
     * @summary Queries the statistics and configurations of the feature that protects images.
     *
     * @param request DescribeImageRepoListRequest
     * @return DescribeImageRepoListResponse
     */
    public DescribeImageRepoListResponse describeImageRepoList(DescribeImageRepoListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageRepoListWithOptions(request, runtime);
    }

    /**
     * @summary The quota for container image scan.
     *
     * @param request DescribeImageScanAuthCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageScanAuthCountResponse
     */
    public DescribeImageScanAuthCountResponse describeImageScanAuthCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageScanAuthCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageScanAuthCountResponse());
    }

    /**
     * @summary The quota for container image scan.
     *
     * @return DescribeImageScanAuthCountResponse
     */
    public DescribeImageScanAuthCountResponse describeImageScanAuthCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageScanAuthCountWithOptions(runtime);
    }

    /**
     * @summary Queries whether Security Center is authorized to scan images.
     *
     * @param request DescribeImageScanAuthorizationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageScanAuthorizationResponse
     */
    public DescribeImageScanAuthorizationResponse describeImageScanAuthorizationWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageScanAuthorization"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageScanAuthorizationResponse());
    }

    /**
     * @summary Queries whether Security Center is authorized to scan images.
     *
     * @return DescribeImageScanAuthorizationResponse
     */
    public DescribeImageScanAuthorizationResponse describeImageScanAuthorization() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageScanAuthorizationWithOptions(runtime);
    }

    /**
     * @summary Queries the sensitive files in an image.
     *
     * @param tmpReq DescribeImageSensitiveFileByKeyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageSensitiveFileByKeyResponse
     */
    public DescribeImageSensitiveFileByKeyResponse describeImageSensitiveFileByKeyWithOptions(DescribeImageSensitiveFileByKeyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeImageSensitiveFileByKeyShrinkRequest request = new DescribeImageSensitiveFileByKeyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRangeShrink)) {
            query.put("ScanRange", request.scanRangeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sensitiveFileKey)) {
            query.put("SensitiveFileKey", request.sensitiveFileKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageSensitiveFileByKey"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageSensitiveFileByKeyResponse());
    }

    /**
     * @summary Queries the sensitive files in an image.
     *
     * @param request DescribeImageSensitiveFileByKeyRequest
     * @return DescribeImageSensitiveFileByKeyResponse
     */
    public DescribeImageSensitiveFileByKeyResponse describeImageSensitiveFileByKey(DescribeImageSensitiveFileByKeyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageSensitiveFileByKeyWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about sensitive files.
     *
     * @param tmpReq DescribeImageSensitiveFileListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageSensitiveFileListResponse
     */
    public DescribeImageSensitiveFileListResponse describeImageSensitiveFileListWithOptions(DescribeImageSensitiveFileListRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeImageSensitiveFileListShrinkRequest request = new DescribeImageSensitiveFileListShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRangeShrink)) {
            query.put("ScanRange", request.scanRangeShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageSensitiveFileList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageSensitiveFileListResponse());
    }

    /**
     * @summary Queries information about sensitive files.
     *
     * @param request DescribeImageSensitiveFileListRequest
     * @return DescribeImageSensitiveFileListResponse
     */
    public DescribeImageSensitiveFileListResponse describeImageSensitiveFileList(DescribeImageSensitiveFileListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageSensitiveFileListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the risk statistics on container images.
     *
     * @description Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
     * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
     *
     * @param request DescribeImageStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageStatisticsResponse
     */
    public DescribeImageStatisticsResponse describeImageStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageStatisticsResponse());
    }

    /**
     * @summary Queries the risk statistics on container images.
     *
     * @description Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
     * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
     *
     * @return DescribeImageStatisticsResponse
     */
    public DescribeImageStatisticsResponse describeImageStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageStatisticsWithOptions(runtime);
    }

    /**
     * @summary Queries information about the vulnerabilities that are detected by using container image scan and the affected images.
     *
     * @description To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](~~PublicCreateImageScanTask~~) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
     *
     * @param request DescribeImageVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageVulListResponse
     */
    public DescribeImageVulListResponse describeImageVulListWithOptions(DescribeImageVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.digest)) {
            query.put("Digest", request.digest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageVulListResponse());
    }

    /**
     * @summary Queries information about the vulnerabilities that are detected by using container image scan and the affected images.
     *
     * @description To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](~~PublicCreateImageScanTask~~) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
     *
     * @param request DescribeImageVulListRequest
     * @return DescribeImageVulListResponse
     */
    public DescribeImageVulListResponse describeImageVulList(DescribeImageVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageVulListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the whitelist of image vulnerabilities.
     *
     * @param request DescribeImageVulWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageVulWhiteListResponse
     */
    public DescribeImageVulWhiteListResponse describeImageVulWhiteListWithOptions(DescribeImageVulWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageVulWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageVulWhiteListResponse());
    }

    /**
     * @summary Queries the whitelist of image vulnerabilities.
     *
     * @param request DescribeImageVulWhiteListRequest
     * @return DescribeImageVulWhiteListResponse
     */
    public DescribeImageVulWhiteListResponse describeImageVulWhiteList(DescribeImageVulWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageVulWhiteListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the verification codes that are used to manually install the Security Center agent.
     *
     * @param request DescribeInstallCaptchaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstallCaptchaResponse
     */
    public DescribeInstallCaptchaResponse describeInstallCaptchaWithOptions(DescribeInstallCaptchaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.deadline)) {
            query.put("Deadline", request.deadline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstallCaptcha"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstallCaptchaResponse());
    }

    /**
     * @summary Queries the verification codes that are used to manually install the Security Center agent.
     *
     * @param request DescribeInstallCaptchaRequest
     * @return DescribeInstallCaptchaResponse
     */
    public DescribeInstallCaptchaResponse describeInstallCaptcha(DescribeInstallCaptchaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstallCaptchaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
     *
     * @param request DescribeInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstallCodeResponse
     */
    public DescribeInstallCodeResponse describeInstallCodeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstallCodeResponse());
    }

    /**
     * @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
     *
     * @return DescribeInstallCodeResponse
     */
    public DescribeInstallCodeResponse describeInstallCode() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstallCodeWithOptions(runtime);
    }

    /**
     * @summary Queries the commands that are used to manually install the Security Center Agent.
     *
     * @description You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
     * ### QPS limit
     * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
     *
     * @param request DescribeInstallCodesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstallCodesResponse
     */
    public DescribeInstallCodesResponse describeInstallCodesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstallCodes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstallCodesResponse());
    }

    /**
     * @summary Queries the commands that are used to manually install the Security Center Agent.
     *
     * @description You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
     * ### QPS limit
     * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
     *
     * @return DescribeInstallCodesResponse
     */
    public DescribeInstallCodesResponse describeInstallCodes() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstallCodesWithOptions(runtime);
    }

    /**
     * @summary Queries the information about servers to which a defense rule against brute-force attacks is applied.
     *
     * @param request DescribeInstanceAntiBruteForceRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstanceAntiBruteForceRulesResponse
     */
    public DescribeInstanceAntiBruteForceRulesResponse describeInstanceAntiBruteForceRulesWithOptions(DescribeInstanceAntiBruteForceRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstanceAntiBruteForceRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstanceAntiBruteForceRulesResponse());
    }

    /**
     * @summary Queries the information about servers to which a defense rule against brute-force attacks is applied.
     *
     * @param request DescribeInstanceAntiBruteForceRulesRequest
     * @return DescribeInstanceAntiBruteForceRulesResponse
     */
    public DescribeInstanceAntiBruteForceRulesResponse describeInstanceAntiBruteForceRules(DescribeInstanceAntiBruteForceRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstanceAntiBruteForceRulesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the status of the instance that you restart.
     *
     * @param request DescribeInstanceRebootStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstanceRebootStatusResponse
     */
    public DescribeInstanceRebootStatusResponse describeInstanceRebootStatusWithOptions(DescribeInstanceRebootStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstanceRebootStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstanceRebootStatusResponse());
    }

    /**
     * @summary Queries the status of the instance that you restart.
     *
     * @param request DescribeInstanceRebootStatusRequest
     * @return DescribeInstanceRebootStatusResponse
     */
    public DescribeInstanceRebootStatusResponse describeInstanceRebootStatus(DescribeInstanceRebootStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstanceRebootStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of assets that are protected by Security Center.
     *
     * @param request DescribeInstanceStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstanceStatisticsResponse
     */
    public DescribeInstanceStatisticsResponse describeInstanceStatisticsWithOptions(DescribeInstanceStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstanceStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstanceStatisticsResponse());
    }

    /**
     * @summary Queries the statistics of assets that are protected by Security Center.
     *
     * @param request DescribeInstanceStatisticsRequest
     * @return DescribeInstanceStatisticsResponse
     */
    public DescribeInstanceStatisticsResponse describeInstanceStatistics(DescribeInstanceStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstanceStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Checks whether an IP address is related to an alert event.
     *
     * @param request DescribeIpTagsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeIpTagsResponse
     */
    public DescribeIpTagsResponse describeIpTagsWithOptions(DescribeIpTagsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ip)) {
            query.put("Ip", request.ip);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeIpTags"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeIpTagsResponse());
    }

    /**
     * @summary Checks whether an IP address is related to an alert event.
     *
     * @param request DescribeIpTagsRequest
     * @return DescribeIpTagsResponse
     */
    public DescribeIpTagsResponse describeIpTags(DescribeIpTagsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeIpTagsWithOptions(request, runtime);
    }

    /**
     * @summary 查询最新病毒扫描
     *
     * @param request DescribeLatestScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLatestScanTaskResponse
     */
    public DescribeLatestScanTaskResponse describeLatestScanTaskWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLatestScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLatestScanTaskResponse());
    }

    /**
     * @summary 查询最新病毒扫描
     *
     * @return DescribeLatestScanTaskResponse
     */
    public DescribeLatestScanTaskResponse describeLatestScanTask() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLatestScanTaskWithOptions(runtime);
    }

    /**
     * @summary Queries the configurations of the log analysis feature provided by Security Center.
     *
     * @param request DescribeLogMetaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLogMetaResponse
     */
    public DescribeLogMetaResponse describeLogMetaWithOptions(DescribeLogMetaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLogMeta"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLogMetaResponse());
    }

    /**
     * @summary Queries the configurations of the log analysis feature provided by Security Center.
     *
     * @param request DescribeLogMetaRequest
     * @return DescribeLogMetaResponse
     */
    public DescribeLogMetaResponse describeLogMeta(DescribeLogMetaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLogMetaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the status information about the log analysis feature.
     *
     * @param request DescribeLogShipperStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLogShipperStatusResponse
     */
    public DescribeLogShipperStatusResponse describeLogShipperStatusWithOptions(DescribeLogShipperStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLogShipperStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLogShipperStatusResponse());
    }

    /**
     * @summary Queries the status information about the log analysis feature.
     *
     * @param request DescribeLogShipperStatusRequest
     * @return DescribeLogShipperStatusResponse
     */
    public DescribeLogShipperStatusResponse describeLogShipperStatus(DescribeLogShipperStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLogShipperStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the configurations that are used to detect unusual logons to your servers.
     *
     * @param request DescribeLoginBaseConfigsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLoginBaseConfigsResponse
     */
    public DescribeLoginBaseConfigsResponse describeLoginBaseConfigsWithOptions(DescribeLoginBaseConfigsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLoginBaseConfigs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLoginBaseConfigsResponse());
    }

    /**
     * @summary Queries the information about the configurations that are used to detect unusual logons to your servers.
     *
     * @param request DescribeLoginBaseConfigsRequest
     * @return DescribeLoginBaseConfigsResponse
     */
    public DescribeLoginBaseConfigsResponse describeLoginBaseConfigs(DescribeLoginBaseConfigsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLoginBaseConfigsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
     *
     * @param request DescribeLoginSwitchConfigsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLoginSwitchConfigsResponse
     */
    public DescribeLoginSwitchConfigsResponse describeLoginSwitchConfigsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLoginSwitchConfigs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLoginSwitchConfigsResponse());
    }

    /**
     * @summary Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
     *
     * @return DescribeLoginSwitchConfigsResponse
     */
    public DescribeLoginSwitchConfigsResponse describeLoginSwitchConfigs() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLoginSwitchConfigsWithOptions(runtime);
    }

    /**
     * @summary Queries the purchased log storage capacity.
     *
     * @param request DescribeLogstoreStorageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLogstoreStorageResponse
     */
    public DescribeLogstoreStorageResponse describeLogstoreStorageWithOptions(DescribeLogstoreStorageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLogstoreStorage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLogstoreStorageResponse());
    }

    /**
     * @summary Queries the purchased log storage capacity.
     *
     * @param request DescribeLogstoreStorageRequest
     * @return DescribeLogstoreStorageResponse
     */
    public DescribeLogstoreStorageResponse describeLogstoreStorage(DescribeLogstoreStorageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLogstoreStorageWithOptions(request, runtime);
    }

    /**
     * @summary Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
     *
     * @param request DescribeMachineCanRebootRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeMachineCanRebootResponse
     */
    public DescribeMachineCanRebootResponse describeMachineCanRebootWithOptions(DescribeMachineCanRebootRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeMachineCanReboot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeMachineCanRebootResponse());
    }

    /**
     * @summary Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
     *
     * @param request DescribeMachineCanRebootRequest
     * @return DescribeMachineCanRebootResponse
     */
    public DescribeMachineCanRebootResponse describeMachineCanReboot(DescribeMachineCanRebootRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeMachineCanRebootWithOptions(request, runtime);
    }

    /**
     * @summary 查询恶意文件类型列表。
     *
     * @param request DescribeMatchedMaliciousNamesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeMatchedMaliciousNamesResponse
     */
    public DescribeMatchedMaliciousNamesResponse describeMatchedMaliciousNamesWithOptions(DescribeMatchedMaliciousNamesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeMatchedMaliciousNames"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeMatchedMaliciousNamesResponse());
    }

    /**
     * @summary 查询恶意文件类型列表。
     *
     * @param request DescribeMatchedMaliciousNamesRequest
     * @return DescribeMatchedMaliciousNamesResponse
     */
    public DescribeMatchedMaliciousNamesResponse describeMatchedMaliciousNames(DescribeMatchedMaliciousNamesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeMatchedMaliciousNamesWithOptions(request, runtime);
    }

    /**
     * @summary The ID of the server.
     *
     * @param request DescribeModuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeModuleConfigResponse
     */
    public DescribeModuleConfigResponse describeModuleConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeModuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeModuleConfigResponse());
    }

    /**
     * @summary The ID of the server.
     *
     * @return DescribeModuleConfigResponse
     */
    public DescribeModuleConfigResponse describeModuleConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeModuleConfigWithOptions(runtime);
    }

    /**
     * @summary Queries the list of accounts that are added to the multi-account management feature as members.
     *
     * @param request DescribeMonitorAccountsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeMonitorAccountsResponse
     */
    public DescribeMonitorAccountsResponse describeMonitorAccountsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeMonitorAccounts"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeMonitorAccountsResponse());
    }

    /**
     * @summary Queries the list of accounts that are added to the multi-account management feature as members.
     *
     * @return DescribeMonitorAccountsResponse
     */
    public DescribeMonitorAccountsResponse describeMonitorAccounts() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeMonitorAccountsWithOptions(runtime);
    }

    /**
     * @summary Queries notification settings.
     *
     * @param request DescribeNoticeConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeNoticeConfigResponse
     */
    public DescribeNoticeConfigResponse describeNoticeConfigWithOptions(DescribeNoticeConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeNoticeConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeNoticeConfigResponse());
    }

    /**
     * @summary Queries notification settings.
     *
     * @param request DescribeNoticeConfigRequest
     * @return DescribeNoticeConfigResponse
     */
    public DescribeNoticeConfigResponse describeNoticeConfig(DescribeNoticeConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeNoticeConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about an alert type.
     *
     * @param request DescribeNsasSuspEventTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeNsasSuspEventTypeResponse
     */
    public DescribeNsasSuspEventTypeResponse describeNsasSuspEventTypeWithOptions(DescribeNsasSuspEventTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeNsasSuspEventType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeNsasSuspEventTypeResponse());
    }

    /**
     * @summary Queries the information about an alert type.
     *
     * @param request DescribeNsasSuspEventTypeRequest
     * @return DescribeNsasSuspEventTypeResponse
     */
    public DescribeNsasSuspEventTypeResponse describeNsasSuspEventType(DescribeNsasSuspEventTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeNsasSuspEventTypeWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the servers whose Security Center agent status is Offline.
     *
     * @param request DescribeOfflineMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeOfflineMachinesResponse
     */
    public DescribeOfflineMachinesResponse describeOfflineMachinesWithOptions(DescribeOfflineMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIdStr)) {
            query.put("RegionIdStr", request.regionIdStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionNo)) {
            query.put("RegionNo", request.regionNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeOfflineMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeOfflineMachinesResponse());
    }

    /**
     * @summary Queries the information about the servers whose Security Center agent status is Offline.
     *
     * @param request DescribeOfflineMachinesRequest
     * @return DescribeOfflineMachinesResponse
     */
    public DescribeOfflineMachinesResponse describeOfflineMachines(DescribeOfflineMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeOfflineMachinesWithOptions(request, runtime);
    }

    /**
     * @summary Queries troubleshooting tasks for the Security Center agent.
     *
     * @param request DescribeOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeOnceTaskResponse
     */
    public DescribeOnceTaskResponse describeOnceTaskWithOptions(DescribeOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeQuery)) {
            query.put("EndTimeQuery", request.endTimeQuery);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTaskId)) {
            query.put("RootTaskId", request.rootTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeQuery)) {
            query.put("StartTimeQuery", request.startTimeQuery);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeOnceTaskResponse());
    }

    /**
     * @summary Queries troubleshooting tasks for the Security Center agent.
     *
     * @param request DescribeOnceTaskRequest
     * @return DescribeOnceTaskResponse
     */
    public DescribeOnceTaskResponse describeOnceTask(DescribeOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeOnceTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
     *
     * @param request DescribeOnceTaskLeafRecordPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeOnceTaskLeafRecordPageResponse
     */
    public DescribeOnceTaskLeafRecordPageResponse describeOnceTaskLeafRecordPageWithOptions(DescribeOnceTaskLeafRecordPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.relateInfo)) {
            query.put("RelateInfo", request.relateInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeOnceTaskLeafRecordPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeOnceTaskLeafRecordPageResponse());
    }

    /**
     * @summary Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
     *
     * @param request DescribeOnceTaskLeafRecordPageRequest
     * @return DescribeOnceTaskLeafRecordPageResponse
     */
    public DescribeOnceTaskLeafRecordPageResponse describeOnceTaskLeafRecordPage(DescribeOnceTaskLeafRecordPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeOnceTaskLeafRecordPageWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
     *
     * @param request DescribePropertyCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyCountResponse
     */
    public DescribePropertyCountResponse describePropertyCountWithOptions(DescribePropertyCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyCountResponse());
    }

    /**
     * @summary Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
     *
     * @param request DescribePropertyCountRequest
     * @return DescribePropertyCountResponse
     */
    public DescribePropertyCountResponse describePropertyCount(DescribePropertyCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyCountWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of scheduled tasks on the Host page.
     *
     * @param request DescribePropertyCronDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyCronDetailResponse
     */
    public DescribePropertyCronDetailResponse describePropertyCronDetailWithOptions(DescribePropertyCronDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyCronDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyCronDetailResponse());
    }

    /**
     * @summary Queries the details of scheduled tasks on the Host page.
     *
     * @param request DescribePropertyCronDetailRequest
     * @return DescribePropertyCronDetailResponse
     */
    public DescribePropertyCronDetailResponse describePropertyCronDetail(DescribePropertyCronDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyCronDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the scheduled tasks of your assets.
     *
     * @param request DescribePropertyCronItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyCronItemResponse
     */
    public DescribePropertyCronItemResponse describePropertyCronItemWithOptions(DescribePropertyCronItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyCronItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyCronItemResponse());
    }

    /**
     * @summary Queries the scheduled tasks of your assets.
     *
     * @param request DescribePropertyCronItemRequest
     * @return DescribePropertyCronItemResponse
     */
    public DescribePropertyCronItemResponse describePropertyCronItem(DescribePropertyCronItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyCronItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries the fingerprints of ports on a specified server.
     *
     * @param request DescribePropertyPortDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyPortDetailResponse
     */
    public DescribePropertyPortDetailResponse describePropertyPortDetailWithOptions(DescribePropertyPortDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindIp)) {
            query.put("BindIp", request.bindIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procName)) {
            query.put("ProcName", request.procName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyPortDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyPortDetailResponse());
    }

    /**
     * @summary Queries the fingerprints of ports on a specified server.
     *
     * @param request DescribePropertyPortDetailRequest
     * @return DescribePropertyPortDetailResponse
     */
    public DescribePropertyPortDetailResponse describePropertyPortDetail(DescribePropertyPortDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyPortDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about all ports.
     *
     * @param request DescribePropertyPortItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyPortItemResponse
     */
    public DescribePropertyPortItemResponse describePropertyPortItemWithOptions(DescribePropertyPortItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyPortItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyPortItemResponse());
    }

    /**
     * @summary Queries information about all ports.
     *
     * @param request DescribePropertyPortItemRequest
     * @return DescribePropertyPortItemResponse
     */
    public DescribePropertyPortItemResponse describePropertyPortItem(DescribePropertyPortItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyPortItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries the fingerprints of processes on a specified server.
     *
     * @param request DescribePropertyProcDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyProcDetailResponse
     */
    public DescribePropertyProcDetailResponse describePropertyProcDetailWithOptions(DescribePropertyProcDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cmdline)) {
            query.put("Cmdline", request.cmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procTimeEnd)) {
            query.put("ProcTimeEnd", request.procTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procTimeStart)) {
            query.put("ProcTimeStart", request.procTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyProcDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyProcDetailResponse());
    }

    /**
     * @summary Queries the fingerprints of processes on a specified server.
     *
     * @param request DescribePropertyProcDetailRequest
     * @return DescribePropertyProcDetailResponse
     */
    public DescribePropertyProcDetailResponse describePropertyProcDetail(DescribePropertyProcDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyProcDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about all processes.
     *
     * @param request DescribePropertyProcItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyProcItemResponse
     */
    public DescribePropertyProcItemResponse describePropertyProcItemWithOptions(DescribePropertyProcItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyProcItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyProcItemResponse());
    }

    /**
     * @summary Queries information about all processes.
     *
     * @param request DescribePropertyProcItemRequest
     * @return DescribePropertyProcItemResponse
     */
    public DescribePropertyProcItemResponse describePropertyProcItem(DescribePropertyProcItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyProcItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries middleware fingerprints.
     *
     * @param request DescribePropertyScaDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyScaDetailResponse
     */
    public DescribePropertyScaDetailResponse describePropertyScaDetailWithOptions(DescribePropertyScaDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bizType)) {
            query.put("BizType", request.bizType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pid)) {
            query.put("Pid", request.pid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processStartedEnd)) {
            query.put("ProcessStartedEnd", request.processStartedEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processStartedStart)) {
            query.put("ProcessStartedStart", request.processStartedStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scaName)) {
            query.put("ScaName", request.scaName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scaNamePattern)) {
            query.put("ScaNamePattern", request.scaNamePattern);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scaVersion)) {
            query.put("ScaVersion", request.scaVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfo)) {
            query.put("SearchInfo", request.searchInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfoSub)) {
            query.put("SearchInfoSub", request.searchInfoSub);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItem)) {
            query.put("SearchItem", request.searchItem);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItemSub)) {
            query.put("SearchItemSub", request.searchItemSub);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyScaDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyScaDetailResponse());
    }

    /**
     * @summary Queries middleware fingerprints.
     *
     * @param request DescribePropertyScaDetailRequest
     * @return DescribePropertyScaDetailResponse
     */
    public DescribePropertyScaDetailResponse describePropertyScaDetail(DescribePropertyScaDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyScaDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries middleware fingerprints.
     *
     * @param request DescribePropertyScaItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyScaItemResponse
     */
    public DescribePropertyScaItemResponse describePropertyScaItemWithOptions(DescribePropertyScaItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfo)) {
            query.put("SearchInfo", request.searchInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItem)) {
            query.put("SearchItem", request.searchItem);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyScaItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyScaItemResponse());
    }

    /**
     * @summary Queries middleware fingerprints.
     *
     * @param request DescribePropertyScaItemRequest
     * @return DescribePropertyScaItemResponse
     */
    public DescribePropertyScaItemResponse describePropertyScaItem(DescribePropertyScaItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyScaItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of scheduled tasks of asset fingerprint collection.
     *
     * @param request DescribePropertyScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyScheduleConfigResponse
     */
    public DescribePropertyScheduleConfigResponse describePropertyScheduleConfigWithOptions(DescribePropertyScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyScheduleConfigResponse());
    }

    /**
     * @summary Queries the configurations of scheduled tasks of asset fingerprint collection.
     *
     * @param request DescribePropertyScheduleConfigRequest
     * @return DescribePropertyScheduleConfigResponse
     */
    public DescribePropertyScheduleConfigResponse describePropertyScheduleConfig(DescribePropertyScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyScheduleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of a software asset.
     *
     * @param request DescribePropertySoftwareDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertySoftwareDetailResponse
     */
    public DescribePropertySoftwareDetailResponse describePropertySoftwareDetailWithOptions(DescribePropertySoftwareDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.installTimeEnd)) {
            query.put("InstallTimeEnd", request.installTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.installTimeStart)) {
            query.put("InstallTimeStart", request.installTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.path)) {
            query.put("Path", request.path);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.softwareVersion)) {
            query.put("SoftwareVersion", request.softwareVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertySoftwareDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertySoftwareDetailResponse());
    }

    /**
     * @summary Queries the details of a software asset.
     *
     * @param request DescribePropertySoftwareDetailRequest
     * @return DescribePropertySoftwareDetailResponse
     */
    public DescribePropertySoftwareDetailResponse describePropertySoftwareDetail(DescribePropertySoftwareDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertySoftwareDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about all software assets.
     *
     * @param request DescribePropertySoftwareItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertySoftwareItemResponse
     */
    public DescribePropertySoftwareItemResponse describePropertySoftwareItemWithOptions(DescribePropertySoftwareItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertySoftwareItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertySoftwareItemResponse());
    }

    /**
     * @summary Queries information about all software assets.
     *
     * @param request DescribePropertySoftwareItemRequest
     * @return DescribePropertySoftwareItemResponse
     */
    public DescribePropertySoftwareItemResponse describePropertySoftwareItem(DescribePropertySoftwareItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertySoftwareItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries middleware types.
     *
     * @param request DescribePropertyTypeScaItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyTypeScaItemResponse
     */
    public DescribePropertyTypeScaItemResponse describePropertyTypeScaItemWithOptions(DescribePropertyTypeScaItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyTypeScaItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyTypeScaItemResponse());
    }

    /**
     * @summary Queries middleware types.
     *
     * @param request DescribePropertyTypeScaItemRequest
     * @return DescribePropertyTypeScaItemResponse
     */
    public DescribePropertyTypeScaItemResponse describePropertyTypeScaItem(DescribePropertyTypeScaItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyTypeScaItemWithOptions(request, runtime);
    }

    /**
     * @summary 查询资产指纹用户创建时间统计
     *
     * @param request DescribePropertyUsageNewestRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyUsageNewestResponse
     */
    public DescribePropertyUsageNewestResponse describePropertyUsageNewestWithOptions(DescribePropertyUsageNewestRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyUsageNewest"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyUsageNewestResponse());
    }

    /**
     * @summary 查询资产指纹用户创建时间统计
     *
     * @param request DescribePropertyUsageNewestRequest
     * @return DescribePropertyUsageNewestResponse
     */
    public DescribePropertyUsageNewestResponse describePropertyUsageNewest(DescribePropertyUsageNewestRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyUsageNewestWithOptions(request, runtime);
    }

    /**
     * @summary Queries the asset fingerprints for an account to which a server belongs.
     *
     * @param request DescribePropertyUserDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyUserDetailResponse
     */
    public DescribePropertyUserDetailResponse describePropertyUserDetailWithOptions(DescribePropertyUserDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isRoot)) {
            query.put("IsRoot", request.isRoot);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastLoginTimeEnd)) {
            query.put("LastLoginTimeEnd", request.lastLoginTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastLoginTimeStart)) {
            query.put("LastLoginTimeStart", request.lastLoginTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyUserDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyUserDetailResponse());
    }

    /**
     * @summary Queries the asset fingerprints for an account to which a server belongs.
     *
     * @param request DescribePropertyUserDetailRequest
     * @return DescribePropertyUserDetailResponse
     */
    public DescribePropertyUserDetailResponse describePropertyUserDetail(DescribePropertyUserDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyUserDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about an account.
     *
     * @param request DescribePropertyUserItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyUserItemResponse
     */
    public DescribePropertyUserItemResponse describePropertyUserItemWithOptions(DescribePropertyUserItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyUserItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyUserItemResponse());
    }

    /**
     * @summary Queries information about an account.
     *
     * @param request DescribePropertyUserItemRequest
     * @return DescribePropertyUserItemResponse
     */
    public DescribePropertyUserItemResponse describePropertyUserItem(DescribePropertyUserItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyUserItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries the download information about a quarantined file.
     *
     * @param request DescribeQuaraFileDownloadInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeQuaraFileDownloadInfoResponse
     */
    public DescribeQuaraFileDownloadInfoResponse describeQuaraFileDownloadInfoWithOptions(DescribeQuaraFileDownloadInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.quaraFileId)) {
            query.put("QuaraFileId", request.quaraFileId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeQuaraFileDownloadInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeQuaraFileDownloadInfoResponse());
    }

    /**
     * @summary Queries the download information about a quarantined file.
     *
     * @param request DescribeQuaraFileDownloadInfoRequest
     * @return DescribeQuaraFileDownloadInfoResponse
     */
    public DescribeQuaraFileDownloadInfoResponse describeQuaraFileDownloadInfo(DescribeQuaraFileDownloadInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeQuaraFileDownloadInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about restoration tasks.
     *
     * @description If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
     * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
     *
     * @param request DescribeRestoreJobsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRestoreJobsResponse
     */
    public DescribeRestoreJobsResponse describeRestoreJobsWithOptions(DescribeRestoreJobsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRestoreJobs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRestoreJobsResponse());
    }

    /**
     * @summary Queries the details about restoration tasks.
     *
     * @description If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
     * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
     *
     * @param request DescribeRestoreJobsRequest
     * @return DescribeRestoreJobsResponse
     */
    public DescribeRestoreJobsResponse describeRestoreJobs(DescribeRestoreJobsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRestoreJobsWithOptions(request, runtime);
    }

    /**
     * @summary Queries restoration tasks.
     *
     * @param request DescribeRestorePlansRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRestorePlansResponse
     */
    public DescribeRestorePlansResponse describeRestorePlansWithOptions(DescribeRestorePlansRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRestorePlans"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRestorePlansResponse());
    }

    /**
     * @summary Queries restoration tasks.
     *
     * @param request DescribeRestorePlansRequest
     * @return DescribeRestorePlansResponse
     */
    public DescribeRestorePlansResponse describeRestorePlans(DescribeRestorePlansRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRestorePlansWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
     *
     * @summary Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
     *
     * @description This operation is phased out. You can use the ListCheckInstanceResult operation.
     *
     * @param request DescribeRiskCheckItemResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskCheckItemResultResponse
     */
    // Deprecated
    public DescribeRiskCheckItemResultResponse describeRiskCheckItemResultWithOptions(DescribeRiskCheckItemResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.itemId)) {
            query.put("ItemId", request.itemId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskCheckItemResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskCheckItemResultResponse());
    }

    /**
     * @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
     *
     * @summary Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
     *
     * @description This operation is phased out. You can use the ListCheckInstanceResult operation.
     *
     * @param request DescribeRiskCheckItemResultRequest
     * @return DescribeRiskCheckItemResultResponse
     */
    // Deprecated
    public DescribeRiskCheckItemResultResponse describeRiskCheckItemResult(DescribeRiskCheckItemResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskCheckItemResultWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI DescribeRiskCheckResult is deprecated
     *
     * @summary Queries the check results of cloud service configurations by check item type or name.
     *
     * @description This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
     *
     * @param request DescribeRiskCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskCheckResultResponse
     */
    // Deprecated
    public DescribeRiskCheckResultResponse describeRiskCheckResultWithOptions(DescribeRiskCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.itemIds)) {
            query.put("ItemIds", request.itemIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.queryFlag)) {
            query.put("QueryFlag", request.queryFlag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskCheckResultResponse());
    }

    /**
     * @deprecated OpenAPI DescribeRiskCheckResult is deprecated
     *
     * @summary Queries the check results of cloud service configurations by check item type or name.
     *
     * @description This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
     *
     * @param request DescribeRiskCheckResultRequest
     * @return DescribeRiskCheckResultResponse
     */
    // Deprecated
    public DescribeRiskCheckResultResponse describeRiskCheckResult(DescribeRiskCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskCheckResultWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
     *
     * @summary Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
     *
     * @description This operation is phased out. You can use the GetCheckSummary operation.
     *
     * @param request DescribeRiskCheckSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskCheckSummaryResponse
     */
    // Deprecated
    public DescribeRiskCheckSummaryResponse describeRiskCheckSummaryWithOptions(DescribeRiskCheckSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskCheckSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskCheckSummaryResponse());
    }

    /**
     * @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
     *
     * @summary Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
     *
     * @description This operation is phased out. You can use the GetCheckSummary operation.
     *
     * @param request DescribeRiskCheckSummaryRequest
     * @return DescribeRiskCheckSummaryResponse
     */
    // Deprecated
    public DescribeRiskCheckSummaryResponse describeRiskCheckSummary(DescribeRiskCheckSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskCheckSummaryWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI DescribeRiskItemType is deprecated
     *
     * @summary Queries the types of check items in configuration assessment.
     *
     * @description This operation is phased out. You can use the ListCheckStandard operation instead.
     *
     * @param request DescribeRiskItemTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskItemTypeResponse
     */
    // Deprecated
    public DescribeRiskItemTypeResponse describeRiskItemTypeWithOptions(DescribeRiskItemTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskItemType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskItemTypeResponse());
    }

    /**
     * @deprecated OpenAPI DescribeRiskItemType is deprecated
     *
     * @summary Queries the types of check items in configuration assessment.
     *
     * @description This operation is phased out. You can use the ListCheckStandard operation instead.
     *
     * @param request DescribeRiskItemTypeRequest
     * @return DescribeRiskItemTypeResponse
     */
    // Deprecated
    public DescribeRiskItemTypeResponse describeRiskItemType(DescribeRiskItemTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskItemTypeWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
     *
     * @summary Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
     *
     * @description This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
     *
     * @param request DescribeRiskListCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskListCheckResultResponse
     */
    // Deprecated
    public DescribeRiskListCheckResultResponse describeRiskListCheckResultWithOptions(DescribeRiskListCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskListCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskListCheckResultResponse());
    }

    /**
     * @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
     *
     * @summary Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
     *
     * @description This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
     *
     * @param request DescribeRiskListCheckResultRequest
     * @return DescribeRiskListCheckResultResponse
     */
    // Deprecated
    public DescribeRiskListCheckResultResponse describeRiskListCheckResult(DescribeRiskListCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskListCheckResultWithOptions(request, runtime);
    }

    /**
     * @summary Queries baseline types.
     *
     * @param request DescribeRiskTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskTypeResponse
     */
    public DescribeRiskTypeResponse describeRiskTypeWithOptions(DescribeRiskTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskTypeResponse());
    }

    /**
     * @summary Queries baseline types.
     *
     * @param request DescribeRiskTypeRequest
     * @return DescribeRiskTypeResponse
     */
    public DescribeRiskTypeResponse describeRiskType(DescribeRiskTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskTypeWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about baselines based on baseline IDs or names.
     *
     * @param request DescribeRisksRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRisksResponse
     */
    public DescribeRisksResponse describeRisksWithOptions(DescribeRisksRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.limit)) {
            query.put("Limit", request.limit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskName)) {
            query.put("RiskName", request.riskName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRisks"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRisksResponse());
    }

    /**
     * @summary Queries the information about baselines based on baseline IDs or names.
     *
     * @param request DescribeRisksRequest
     * @return DescribeRisksResponse
     */
    public DescribeRisksResponse describeRisks(DescribeRisksRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRisksWithOptions(request, runtime);
    }

    /**
     * @summary Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
     *
     * @param request DescribeSasPmAgentListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSasPmAgentListResponse
     */
    public DescribeSasPmAgentListResponse describeSasPmAgentListWithOptions(DescribeSasPmAgentListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSasPmAgentList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSasPmAgentListResponse());
    }

    /**
     * @summary Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
     *
     * @param request DescribeSasPmAgentListRequest
     * @return DescribeSasPmAgentListResponse
     */
    public DescribeSasPmAgentListResponse describeSasPmAgentList(DescribeSasPmAgentListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSasPmAgentListWithOptions(request, runtime);
    }

    /**
     * @summary DescribeScanTaskProgress
     *
     * @param request DescribeScanTaskProgressRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeScanTaskProgressResponse
     */
    public DescribeScanTaskProgressResponse describeScanTaskProgressWithOptions(DescribeScanTaskProgressRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeScanTaskProgress"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeScanTaskProgressResponse());
    }

    /**
     * @summary DescribeScanTaskProgress
     *
     * @param request DescribeScanTaskProgressRequest
     * @return DescribeScanTaskProgressResponse
     */
    public DescribeScanTaskProgressResponse describeScanTaskProgress(DescribeScanTaskProgressRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeScanTaskProgressWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of virus detection tasks.
     *
     * @param request DescribeScanTaskStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeScanTaskStatisticsResponse
     */
    public DescribeScanTaskStatisticsResponse describeScanTaskStatisticsWithOptions(DescribeScanTaskStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeScanTaskStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeScanTaskStatisticsResponse());
    }

    /**
     * @summary Queries the statistics of virus detection tasks.
     *
     * @param request DescribeScanTaskStatisticsRequest
     * @return DescribeScanTaskStatisticsResponse
     */
    public DescribeScanTaskStatisticsResponse describeScanTaskStatistics(DescribeScanTaskStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeScanTaskStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary 查询资产的筛选条件
     *
     * @param request DescribeSearchConditionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSearchConditionResponse
     */
    public DescribeSearchConditionResponse describeSearchConditionWithOptions(DescribeSearchConditionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSearchCondition"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSearchConditionResponse());
    }

    /**
     * @summary 查询资产的筛选条件
     *
     * @param request DescribeSearchConditionRequest
     * @return DescribeSearchConditionResponse
     */
    public DescribeSearchConditionResponse describeSearchCondition(DescribeSearchConditionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSearchConditionWithOptions(request, runtime);
    }

    /**
     * @summary Queries suggestions on how to handle the risks that affect the security score.
     *
     * @param request DescribeSecureSuggestionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecureSuggestionResponse
     */
    public DescribeSecureSuggestionResponse describeSecureSuggestionWithOptions(DescribeSecureSuggestionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecureSuggestion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecureSuggestionResponse());
    }

    /**
     * @summary Queries suggestions on how to handle the risks that affect the security score.
     *
     * @param request DescribeSecureSuggestionRequest
     * @return DescribeSecureSuggestionResponse
     */
    public DescribeSecureSuggestionResponse describeSecureSuggestion(DescribeSecureSuggestionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecureSuggestionWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
     *
     * @summary Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
     *
     * @description This operation is phased out. You can use the GetCheckConfig operation.
     *
     * @param request DescribeSecurityCheckScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityCheckScheduleConfigResponse
     */
    // Deprecated
    public DescribeSecurityCheckScheduleConfigResponse describeSecurityCheckScheduleConfigWithOptions(DescribeSecurityCheckScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityCheckScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityCheckScheduleConfigResponse());
    }

    /**
     * @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
     *
     * @summary Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
     *
     * @description This operation is phased out. You can use the GetCheckConfig operation.
     *
     * @param request DescribeSecurityCheckScheduleConfigRequest
     * @return DescribeSecurityCheckScheduleConfigResponse
     */
    // Deprecated
    public DescribeSecurityCheckScheduleConfigResponse describeSecurityCheckScheduleConfig(DescribeSecurityCheckScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityCheckScheduleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the list of whitelist rules.
     *
     * @param request DescribeSecurityEventMarkMissListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityEventMarkMissListResponse
     */
    public DescribeSecurityEventMarkMissListResponse describeSecurityEventMarkMissListWithOptions(DescribeSecurityEventMarkMissListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityEventMarkMissList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityEventMarkMissListResponse());
    }

    /**
     * @summary Queries the list of whitelist rules.
     *
     * @param request DescribeSecurityEventMarkMissListRequest
     * @return DescribeSecurityEventMarkMissListResponse
     */
    public DescribeSecurityEventMarkMissListResponse describeSecurityEventMarkMissList(DescribeSecurityEventMarkMissListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityEventMarkMissListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
     *
     * @param request DescribeSecurityEventOperationStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityEventOperationStatusResponse
     */
    public DescribeSecurityEventOperationStatusResponse describeSecurityEventOperationStatusWithOptions(DescribeSecurityEventOperationStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityEventOperationStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityEventOperationStatusResponse());
    }

    /**
     * @summary Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
     *
     * @param request DescribeSecurityEventOperationStatusRequest
     * @return DescribeSecurityEventOperationStatusResponse
     */
    public DescribeSecurityEventOperationStatusResponse describeSecurityEventOperationStatus(DescribeSecurityEventOperationStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityEventOperationStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries the operations that you can perform to handle an alert event.
     *
     * @param request DescribeSecurityEventOperationsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityEventOperationsResponse
     */
    public DescribeSecurityEventOperationsResponse describeSecurityEventOperationsWithOptions(DescribeSecurityEventOperationsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityEventOperations"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityEventOperationsResponse());
    }

    /**
     * @summary Queries the operations that you can perform to handle an alert event.
     *
     * @param request DescribeSecurityEventOperationsRequest
     * @return DescribeSecurityEventOperationsResponse
     */
    public DescribeSecurityEventOperationsResponse describeSecurityEventOperations(DescribeSecurityEventOperationsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityEventOperationsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
     *
     * @param request DescribeSecurityStatInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityStatInfoResponse
     */
    public DescribeSecurityStatInfoResponse describeSecurityStatInfoWithOptions(DescribeSecurityStatInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityStatInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityStatInfoResponse());
    }

    /**
     * @summary Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
     *
     * @param request DescribeSecurityStatInfoRequest
     * @return DescribeSecurityStatInfoResponse
     */
    public DescribeSecurityStatInfoResponse describeSecurityStatInfo(DescribeSecurityStatInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityStatInfoWithOptions(request, runtime);
    }

    /**
     * @summary Checks whether a service-linked role is created for Security Center.
     *
     * @param request DescribeServiceLinkedRoleStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeServiceLinkedRoleStatusResponse
     */
    public DescribeServiceLinkedRoleStatusResponse describeServiceLinkedRoleStatusWithOptions(DescribeServiceLinkedRoleStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.serviceLinkedRole)) {
            query.put("ServiceLinkedRole", request.serviceLinkedRole);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeServiceLinkedRoleStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeServiceLinkedRoleStatusResponse());
    }

    /**
     * @summary Checks whether a service-linked role is created for Security Center.
     *
     * @param request DescribeServiceLinkedRoleStatusRequest
     * @return DescribeServiceLinkedRoleStatusResponse
     */
    public DescribeServiceLinkedRoleStatusResponse describeServiceLinkedRoleStatus(DescribeServiceLinkedRoleStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeServiceLinkedRoleStatusWithOptions(request, runtime);
    }

    /**
     * @summary Alibaba Cloud CLI is a tool used to manage and configure Alibaba Cloud resources. After simple installation and configuration, you can use Alibaba Cloud CLI to manage multiple Alibaba Cloud products and services and migrate your data and business to the cloud with ease.
     *
     * @param request DescribeSimilarEventScenariosRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSimilarEventScenariosResponse
     */
    public DescribeSimilarEventScenariosResponse describeSimilarEventScenariosWithOptions(DescribeSimilarEventScenariosRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSimilarEventScenarios"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSimilarEventScenariosResponse());
    }

    /**
     * @summary Alibaba Cloud CLI is a tool used to manage and configure Alibaba Cloud resources. After simple installation and configuration, you can use Alibaba Cloud CLI to manage multiple Alibaba Cloud products and services and migrate your data and business to the cloud with ease.
     *
     * @param request DescribeSimilarEventScenariosRequest
     * @return DescribeSimilarEventScenariosResponse
     */
    public DescribeSimilarEventScenariosResponse describeSimilarEventScenarios(DescribeSimilarEventScenariosRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSimilarEventScenariosWithOptions(request, runtime);
    }

    /**
     * @summary Queries alert events that are triggered by the same rule or of the same alert type.
     *
     * @param request DescribeSimilarSecurityEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSimilarSecurityEventsResponse
     */
    public DescribeSimilarSecurityEventsResponse describeSimilarSecurityEventsWithOptions(DescribeSimilarSecurityEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSimilarSecurityEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSimilarSecurityEventsResponse());
    }

    /**
     * @summary Queries alert events that are triggered by the same rule or of the same alert type.
     *
     * @param request DescribeSimilarSecurityEventsRequest
     * @return DescribeSimilarSecurityEventsResponse
     */
    public DescribeSimilarSecurityEventsResponse describeSimilarSecurityEvents(DescribeSimilarSecurityEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSimilarSecurityEventsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the backup snapshots that are created for anti-ransomware.
     *
     * @param request DescribeSnapshotsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSnapshotsResponse
     */
    public DescribeSnapshotsResponse describeSnapshotsWithOptions(DescribeSnapshotsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.apiVersion)) {
            query.put("ApiVersion", request.apiVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isAliYunEcs)) {
            query.put("IsAliYunEcs", request.isAliYunEcs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRegion)) {
            query.put("MachineRegion", request.machineRegion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSnapshots"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSnapshotsResponse());
    }

    /**
     * @summary Queries the backup snapshots that are created for anti-ransomware.
     *
     * @param request DescribeSnapshotsRequest
     * @return DescribeSnapshotsResponse
     */
    public DescribeSnapshotsResponse describeSnapshots(DescribeSnapshotsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSnapshotsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about baseline check policies.
     *
     * @param request DescribeStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyResponse
     */
    public DescribeStrategyResponse describeStrategyWithOptions(DescribeStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.customType)) {
            query.put("CustomType", request.customType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyIds)) {
            query.put("StrategyIds", request.strategyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyResponse());
    }

    /**
     * @summary Queries the details about baseline check policies.
     *
     * @param request DescribeStrategyRequest
     * @return DescribeStrategyResponse
     */
    public DescribeStrategyResponse describeStrategy(DescribeStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a baseline check policy.
     *
     * @param request DescribeStrategyDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyDetailResponse
     */
    public DescribeStrategyDetailResponse describeStrategyDetailWithOptions(DescribeStrategyDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategyDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyDetailResponse());
    }

    /**
     * @summary Queries the information about a baseline check policy.
     *
     * @param request DescribeStrategyDetailRequest
     * @return DescribeStrategyDetailResponse
     */
    public DescribeStrategyDetailResponse describeStrategyDetail(DescribeStrategyDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyDetailWithOptions(request, runtime);
    }

    /**
     * @summary 查询单个基线检查策略的检查结果
     *
     * @param request DescribeStrategyExecDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyExecDetailResponse
     */
    public DescribeStrategyExecDetailResponse describeStrategyExecDetailWithOptions(DescribeStrategyExecDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategyExecDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyExecDetailResponse());
    }

    /**
     * @summary 查询单个基线检查策略的检查结果
     *
     * @param request DescribeStrategyExecDetailRequest
     * @return DescribeStrategyExecDetailResponse
     */
    public DescribeStrategyExecDetailResponse describeStrategyExecDetail(DescribeStrategyExecDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyExecDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the assets to which a baseline check policy is applied.
     *
     * @param request DescribeStrategyTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyTargetResponse
     */
    public DescribeStrategyTargetResponse describeStrategyTargetWithOptions(DescribeStrategyTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategyTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyTargetResponse());
    }

    /**
     * @summary Queries the information about the assets to which a baseline check policy is applied.
     *
     * @param request DescribeStrategyTargetRequest
     * @return DescribeStrategyTargetResponse
     */
    public DescribeStrategyTargetResponse describeStrategyTarget(DescribeStrategyTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyTargetWithOptions(request, runtime);
    }

    /**
     * @summary Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
     *
     * @param request DescribeSummaryInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSummaryInfoResponse
     */
    public DescribeSummaryInfoResponse describeSummaryInfoWithOptions(DescribeSummaryInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSummaryInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSummaryInfoResponse());
    }

    /**
     * @summary Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
     *
     * @param request DescribeSummaryInfoRequest
     * @return DescribeSummaryInfoResponse
     */
    public DescribeSummaryInfoResponse describeSummaryInfo(DescribeSummaryInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSummaryInfoWithOptions(request, runtime);
    }

    /**
     * @summary 查询防勒索支持地域
     *
     * @param request DescribeSupportRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSupportRegionResponse
     */
    public DescribeSupportRegionResponse describeSupportRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSupportRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSupportRegionResponse());
    }

    /**
     * @summary 查询防勒索支持地域
     *
     * @return DescribeSupportRegionResponse
     */
    public DescribeSupportRegionResponse describeSupportRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSupportRegionWithOptions(runtime);
    }

    /**
     * @summary Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
     *
     * @param request DescribeSuspEventDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventDetailResponse
     */
    public DescribeSuspEventDetailResponse describeSuspEventDetailWithOptions(DescribeSuspEventDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.suspiciousEventId)) {
            query.put("SuspiciousEventId", request.suspiciousEventId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventDetailResponse());
    }

    /**
     * @summary Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
     *
     * @param request DescribeSuspEventDetailRequest
     * @return DescribeSuspEventDetailResponse
     */
    public DescribeSuspEventDetailResponse describeSuspEventDetail(DescribeSuspEventDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about an export task of exceptions.
     *
     * @param request DescribeSuspEventExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventExportInfoResponse
     */
    public DescribeSuspEventExportInfoResponse describeSuspEventExportInfoWithOptions(DescribeSuspEventExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventExportInfoResponse());
    }

    /**
     * @summary Queries the information about an export task of exceptions.
     *
     * @param request DescribeSuspEventExportInfoRequest
     * @return DescribeSuspEventExportInfoResponse
     */
    public DescribeSuspEventExportInfoResponse describeSuspEventExportInfo(DescribeSuspEventExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventExportInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries quarantined files by page.
     *
     * @param request DescribeSuspEventQuaraFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventQuaraFilesResponse
     */
    public DescribeSuspEventQuaraFilesResponse describeSuspEventQuaraFilesWithOptions(DescribeSuspEventQuaraFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupingId)) {
            query.put("GroupingId", request.groupingId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.quaraTag)) {
            query.put("QuaraTag", request.quaraTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventQuaraFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventQuaraFilesResponse());
    }

    /**
     * @summary Queries quarantined files by page.
     *
     * @param request DescribeSuspEventQuaraFilesRequest
     * @return DescribeSuspEventQuaraFilesResponse
     */
    public DescribeSuspEventQuaraFilesResponse describeSuspEventQuaraFiles(DescribeSuspEventQuaraFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventQuaraFilesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the user settings for exceptions.
     *
     * @param request DescribeSuspEventUserSettingRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventUserSettingResponse
     */
    public DescribeSuspEventUserSettingResponse describeSuspEventUserSettingWithOptions(DescribeSuspEventUserSettingRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventUserSetting"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventUserSettingResponse());
    }

    /**
     * @summary Queries the user settings for exceptions.
     *
     * @param request DescribeSuspEventUserSettingRequest
     * @return DescribeSuspEventUserSettingResponse
     */
    public DescribeSuspEventUserSettingResponse describeSuspEventUserSetting(DescribeSuspEventUserSettingRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventUserSettingWithOptions(request, runtime);
    }

    /**
     * @summary Queries a list of alert events that are generated without aggregation.
     *
     * @param request DescribeSuspEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventsResponse
     */
    public DescribeSuspEventsResponse describeSuspEventsWithOptions(DescribeSuspEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmUniqueInfo)) {
            query.put("AlarmUniqueInfo", request.alarmUniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assetsTypeList)) {
            query.put("AssetsTypeList", request.assetsTypeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventNames)) {
            query.put("EventNames", request.eventNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateErrorCodeList)) {
            query.put("OperateErrorCodeList", request.operateErrorCodeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateTimeEnd)) {
            query.put("OperateTimeEnd", request.operateTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateTimeStart)) {
            query.put("OperateTimeStart", request.operateTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentEventTypes)) {
            query.put("ParentEventTypes", request.parentEventTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortColumn)) {
            query.put("SortColumn", request.sortColumn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortType)) {
            query.put("SortType", request.sortType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strictMode)) {
            query.put("StrictMode", request.strictMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniqueInfo)) {
            query.put("UniqueInfo", request.uniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tacticId)) {
            body.put("TacticId", request.tacticId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventsResponse());
    }

    /**
     * @summary Queries a list of alert events that are generated without aggregation.
     *
     * @param request DescribeSuspEventsRequest
     * @return DescribeSuspEventsResponse
     */
    public DescribeSuspEventsResponse describeSuspEvents(DescribeSuspEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configuration of a specified feature.
     *
     * @param request DescribeSuspiciousOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspiciousOverallConfigResponse
     */
    public DescribeSuspiciousOverallConfigResponse describeSuspiciousOverallConfigWithOptions(DescribeSuspiciousOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspiciousOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspiciousOverallConfigResponse());
    }

    /**
     * @summary Queries the configuration of a specified feature.
     *
     * @param request DescribeSuspiciousOverallConfigRequest
     * @return DescribeSuspiciousOverallConfigResponse
     */
    public DescribeSuspiciousOverallConfigResponse describeSuspiciousOverallConfig(DescribeSuspiciousOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspiciousOverallConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
     *
     * @param request DescribeSuspiciousUUIDConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspiciousUUIDConfigResponse
     */
    public DescribeSuspiciousUUIDConfigResponse describeSuspiciousUUIDConfigWithOptions(DescribeSuspiciousUUIDConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspiciousUUIDConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspiciousUUIDConfigResponse());
    }

    /**
     * @summary Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
     *
     * @param request DescribeSuspiciousUUIDConfigRequest
     * @return DescribeSuspiciousUUIDConfigResponse
     */
    public DescribeSuspiciousUUIDConfigResponse describeSuspiciousUUIDConfig(DescribeSuspiciousUUIDConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspiciousUUIDConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the servers on which vulnerability scan is enabled.
     *
     * @param request DescribeTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTargetResponse
     */
    public DescribeTargetResponse describeTargetWithOptions(DescribeTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTargetResponse());
    }

    /**
     * @summary Queries the servers on which vulnerability scan is enabled.
     *
     * @param request DescribeTargetRequest
     * @return DescribeTargetResponse
     */
    public DescribeTargetResponse describeTarget(DescribeTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTargetWithOptions(request, runtime);
    }

    /**
     * @summary Queries the error logs on a task that failed to fix image vulnerabilities.
     *
     * @param request DescribeTaskErrorLogRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTaskErrorLogResponse
     */
    public DescribeTaskErrorLogResponse describeTaskErrorLogWithOptions(DescribeTaskErrorLogRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.buildTaskId)) {
            query.put("BuildTaskId", request.buildTaskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTaskErrorLog"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTaskErrorLogResponse());
    }

    /**
     * @summary Queries the error logs on a task that failed to fix image vulnerabilities.
     *
     * @param request DescribeTaskErrorLogRequest
     * @return DescribeTaskErrorLogResponse
     */
    public DescribeTaskErrorLogResponse describeTaskErrorLog(DescribeTaskErrorLogRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTaskErrorLogWithOptions(request, runtime);
    }

    /**
     * @summary Queries event statistics.
     *
     * @param request DescribeTotalStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTotalStatisticsResponse
     */
    public DescribeTotalStatisticsResponse describeTotalStatisticsWithOptions(DescribeTotalStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTotalStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTotalStatisticsResponse());
    }

    /**
     * @summary Queries event statistics.
     *
     * @param request DescribeTotalStatisticsRequest
     * @return DescribeTotalStatisticsResponse
     */
    public DescribeTotalStatisticsResponse describeTotalStatistics(DescribeTotalStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTotalStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the trace information about alerts.
     *
     * @param request DescribeTraceInfoDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTraceInfoDetailResponse
     */
    public DescribeTraceInfoDetailResponse describeTraceInfoDetailWithOptions(DescribeTraceInfoDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incidentTime)) {
            query.put("IncidentTime", request.incidentTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            query.put("VertexId", request.vertexId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTraceInfoDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTraceInfoDetailResponse());
    }

    /**
     * @summary Queries the trace information about alerts.
     *
     * @param request DescribeTraceInfoDetailRequest
     * @return DescribeTraceInfoDetailResponse
     */
    public DescribeTraceInfoDetailResponse describeTraceInfoDetail(DescribeTraceInfoDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTraceInfoDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about a trace node.
     *
     * @param request DescribeTraceInfoNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTraceInfoNodeResponse
     */
    public DescribeTraceInfoNodeResponse describeTraceInfoNodeWithOptions(DescribeTraceInfoNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incidentTime)) {
            query.put("IncidentTime", request.incidentTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            query.put("VertexId", request.vertexId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTraceInfoNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTraceInfoNodeResponse());
    }

    /**
     * @summary Queries the details about a trace node.
     *
     * @param request DescribeTraceInfoNodeRequest
     * @return DescribeTraceInfoNodeResponse
     */
    public DescribeTraceInfoNodeResponse describeTraceInfoNode(DescribeTraceInfoNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTraceInfoNodeWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about databases for which anti-ransomware policies are created.
     *
     * @param request DescribeUniBackupDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniBackupDatabaseResponse
     */
    public DescribeUniBackupDatabaseResponse describeUniBackupDatabaseWithOptions(DescribeUniBackupDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.databaseType)) {
            query.put("DatabaseType", request.databaseType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.queryType)) {
            query.put("QueryType", request.queryType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniBackupDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniBackupDatabaseResponse());
    }

    /**
     * @summary Queries the information about databases for which anti-ransomware policies are created.
     *
     * @param request DescribeUniBackupDatabaseRequest
     * @return DescribeUniBackupDatabaseResponse
     */
    public DescribeUniBackupDatabaseResponse describeUniBackupDatabase(DescribeUniBackupDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniBackupDatabaseWithOptions(request, runtime);
    }

    /**
     * @summary Queries the anti-ransomware policies that are created for databases.
     *
     * @param request DescribeUniBackupPoliciesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniBackupPoliciesResponse
     */
    public DescribeUniBackupPoliciesResponse describeUniBackupPoliciesWithOptions(DescribeUniBackupPoliciesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyName)) {
            query.put("PolicyName", request.policyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniBackupPolicies"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniBackupPoliciesResponse());
    }

    /**
     * @summary Queries the anti-ransomware policies that are created for databases.
     *
     * @param request DescribeUniBackupPoliciesRequest
     * @return DescribeUniBackupPoliciesResponse
     */
    public DescribeUniBackupPoliciesResponse describeUniBackupPolicies(DescribeUniBackupPoliciesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniBackupPoliciesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of an anti-ransomware policy for databases.
     *
     * @param request DescribeUniBackupPolicyDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniBackupPolicyDetailResponse
     */
    public DescribeUniBackupPolicyDetailResponse describeUniBackupPolicyDetailWithOptions(DescribeUniBackupPolicyDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniBackupPolicyDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniBackupPolicyDetailResponse());
    }

    /**
     * @summary Queries the details of an anti-ransomware policy for databases.
     *
     * @param request DescribeUniBackupPolicyDetailRequest
     * @return DescribeUniBackupPolicyDetailResponse
     */
    public DescribeUniBackupPolicyDetailResponse describeUniBackupPolicyDetail(DescribeUniBackupPolicyDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniBackupPolicyDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the backup snapshots from which the data of a database can be restored.
     *
     * @param request DescribeUniRecoverableListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniRecoverableListResponse
     */
    public DescribeUniRecoverableListResponse describeUniRecoverableListWithOptions(DescribeUniRecoverableListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.database)) {
            query.put("Database", request.database);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniRecoverableList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniRecoverableListResponse());
    }

    /**
     * @summary Queries the backup snapshots from which the data of a database can be restored.
     *
     * @param request DescribeUniRecoverableListRequest
     * @return DescribeUniRecoverableListResponse
     */
    public DescribeUniRecoverableListResponse describeUniRecoverableList(DescribeUniRecoverableListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniRecoverableListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the region that is supported by anti-ransomware for databases.
     *
     * @param request DescribeUniSupportRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniSupportRegionResponse
     */
    public DescribeUniSupportRegionResponse describeUniSupportRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniSupportRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniSupportRegionResponse());
    }

    /**
     * @summary Queries the region that is supported by anti-ransomware for databases.
     *
     * @return DescribeUniSupportRegionResponse
     */
    public DescribeUniSupportRegionResponse describeUniSupportRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniSupportRegionWithOptions(runtime);
    }

    /**
     * @summary Queries the information about the servers to which an anti-ransomware policy is applied.
     *
     * @param request DescribeUserBackupMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUserBackupMachinesResponse
     */
    public DescribeUserBackupMachinesResponse describeUserBackupMachinesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUserBackupMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUserBackupMachinesResponse());
    }

    /**
     * @summary Queries the information about the servers to which an anti-ransomware policy is applied.
     *
     * @return DescribeUserBackupMachinesResponse
     */
    public DescribeUserBackupMachinesResponse describeUserBackupMachines() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUserBackupMachinesWithOptions(runtime);
    }

    /**
     * @summary The source IP address of the request.
     *
     * @param request DescribeUserBaselineAuthorizationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUserBaselineAuthorizationResponse
     */
    public DescribeUserBaselineAuthorizationResponse describeUserBaselineAuthorizationWithOptions(DescribeUserBaselineAuthorizationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUserBaselineAuthorization"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUserBaselineAuthorizationResponse());
    }

    /**
     * @summary The source IP address of the request.
     *
     * @param request DescribeUserBaselineAuthorizationRequest
     * @return DescribeUserBaselineAuthorizationResponse
     */
    public DescribeUserBaselineAuthorizationResponse describeUserBaselineAuthorization(DescribeUserBaselineAuthorizationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUserBaselineAuthorizationWithOptions(request, runtime);
    }

    /**
     * @summary Queries whether the brute-force attacks protection feature has been authorized. The brute-force attacks protection feature cannot be used without authorization.
     *
     * @param request DescribeUserLayoutAuthorizationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUserLayoutAuthorizationResponse
     */
    public DescribeUserLayoutAuthorizationResponse describeUserLayoutAuthorizationWithOptions(DescribeUserLayoutAuthorizationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUserLayoutAuthorization"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUserLayoutAuthorizationResponse());
    }

    /**
     * @summary Queries whether the brute-force attacks protection feature has been authorized. The brute-force attacks protection feature cannot be used without authorization.
     *
     * @param request DescribeUserLayoutAuthorizationRequest
     * @return DescribeUserLayoutAuthorizationResponse
     */
    public DescribeUserLayoutAuthorizationResponse describeUserLayoutAuthorization(DescribeUserLayoutAuthorizationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUserLayoutAuthorizationWithOptions(request, runtime);
    }

    /**
     * @summary Queries a list of assets that support fixing based on vulnerability names.
     *
     * @param request DescribeUuidsByVulNamesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUuidsByVulNamesResponse
     */
    public DescribeUuidsByVulNamesResponse describeUuidsByVulNamesWithOptions(DescribeUuidsByVulNamesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.level)) {
            query.put("Level", request.level);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchTags)) {
            query.put("SearchTags", request.searchTags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcInstanceIds)) {
            query.put("VpcInstanceIds", request.vpcInstanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulNames)) {
            query.put("VulNames", request.vulNames);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUuidsByVulNames"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUuidsByVulNamesResponse());
    }

    /**
     * @summary Queries a list of assets that support fixing based on vulnerability names.
     *
     * @param request DescribeUuidsByVulNamesRequest
     * @return DescribeUuidsByVulNamesResponse
     */
    public DescribeUuidsByVulNamesResponse describeUuidsByVulNames(DescribeUuidsByVulNamesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUuidsByVulNamesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the service providers whose assets can be added to Security Center.
     *
     * @param request DescribeVendorListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVendorListResponse
     */
    public DescribeVendorListResponse describeVendorListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVendorList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVendorListResponse());
    }

    /**
     * @summary Queries the service providers whose assets can be added to Security Center.
     *
     * @return DescribeVendorListResponse
     */
    public DescribeVendorListResponse describeVendorList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVendorListWithOptions(runtime);
    }

    /**
     * @summary Queries the details about the edition of purchased Security Center.
     *
     * @param request DescribeVersionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVersionConfigResponse
     */
    public DescribeVersionConfigResponse describeVersionConfigWithOptions(DescribeVersionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVersionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVersionConfigResponse());
    }

    /**
     * @summary Queries the details about the edition of purchased Security Center.
     *
     * @param request DescribeVersionConfigRequest
     * @return DescribeVersionConfigResponse
     */
    public DescribeVersionConfigResponse describeVersionConfig(DescribeVersionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVersionConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the search conditions that can be used to query honeypots.
     *
     * @param request DescribeVpcHoneyPotCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVpcHoneyPotCriteriaResponse
     */
    public DescribeVpcHoneyPotCriteriaResponse describeVpcHoneyPotCriteriaWithOptions(DescribeVpcHoneyPotCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVpcHoneyPotCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVpcHoneyPotCriteriaResponse());
    }

    /**
     * @summary Queries the search conditions that can be used to query honeypots.
     *
     * @param request DescribeVpcHoneyPotCriteriaRequest
     * @return DescribeVpcHoneyPotCriteriaResponse
     */
    public DescribeVpcHoneyPotCriteriaResponse describeVpcHoneyPotCriteria(DescribeVpcHoneyPotCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVpcHoneyPotCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries virtual private clouds (VPCs) on which honeypots are deployed.
     *
     * @description If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
     *
     * @param request DescribeVpcHoneyPotListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVpcHoneyPotListResponse
     */
    public DescribeVpcHoneyPotListResponse describeVpcHoneyPotListWithOptions(DescribeVpcHoneyPotListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeyPotExistence)) {
            query.put("HoneyPotExistence", request.honeyPotExistence);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcName)) {
            query.put("VpcName", request.vpcName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcRegionId)) {
            query.put("VpcRegionId", request.vpcRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVpcHoneyPotList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVpcHoneyPotListResponse());
    }

    /**
     * @summary Queries virtual private clouds (VPCs) on which honeypots are deployed.
     *
     * @description If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
     *
     * @param request DescribeVpcHoneyPotListRequest
     * @return DescribeVpcHoneyPotListResponse
     */
    public DescribeVpcHoneyPotListResponse describeVpcHoneyPotList(DescribeVpcHoneyPotListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVpcHoneyPotListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about virtual private clouds (VPCs).
     *
     * @param request DescribeVpcListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVpcListResponse
     */
    public DescribeVpcListResponse describeVpcListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVpcList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVpcListResponse());
    }

    /**
     * @summary Queries the information about virtual private clouds (VPCs).
     *
     * @return DescribeVpcListResponse
     */
    public DescribeVpcListResponse describeVpcList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVpcListWithOptions(runtime);
    }

    /**
     * @summary Queries the status information about vulnerability scan tasks on a server.
     *
     * @param request DescribeVulCheckTaskStatusDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulCheckTaskStatusDetailResponse
     */
    public DescribeVulCheckTaskStatusDetailResponse describeVulCheckTaskStatusDetailWithOptions(DescribeVulCheckTaskStatusDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskIds)) {
            query.put("TaskIds", request.taskIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulCheckTaskStatusDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulCheckTaskStatusDetailResponse());
    }

    /**
     * @summary Queries the status information about vulnerability scan tasks on a server.
     *
     * @param request DescribeVulCheckTaskStatusDetailRequest
     * @return DescribeVulCheckTaskStatusDetailResponse
     */
    public DescribeVulCheckTaskStatusDetailResponse describeVulCheckTaskStatusDetail(DescribeVulCheckTaskStatusDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulCheckTaskStatusDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of vulnerability management.
     *
     * @param request DescribeVulConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulConfigResponse
     */
    public DescribeVulConfigResponse describeVulConfigWithOptions(DescribeVulConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulConfigResponse());
    }

    /**
     * @summary Queries the configurations of vulnerability management.
     *
     * @param request DescribeVulConfigRequest
     * @return DescribeVulConfigResponse
     */
    public DescribeVulConfigResponse describeVulConfig(DescribeVulConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about a vulnerability.
     *
     * @param request DescribeVulDetailsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulDetailsResponse
     */
    public DescribeVulDetailsResponse describeVulDetailsWithOptions(DescribeVulDetailsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulDetails"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulDetailsResponse());
    }

    /**
     * @summary Queries the details about a vulnerability.
     *
     * @param request DescribeVulDetailsRequest
     * @return DescribeVulDetailsResponse
     */
    public DescribeVulDetailsResponse describeVulDetails(DescribeVulDetailsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulDetailsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the progress of a task that exports vulnerabilities.
     *
     * @description If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
     *
     * @param request DescribeVulExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulExportInfoResponse
     */
    public DescribeVulExportInfoResponse describeVulExportInfoWithOptions(DescribeVulExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulExportInfoResponse());
    }

    /**
     * @summary Queries the progress of a task that exports vulnerabilities.
     *
     * @description If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
     *
     * @param request DescribeVulExportInfoRequest
     * @return DescribeVulExportInfoResponse
     */
    public DescribeVulExportInfoResponse describeVulExportInfo(DescribeVulExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulExportInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of vulnerability fixes.
     *
     * @param request DescribeVulFixStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulFixStatisticsResponse
     */
    public DescribeVulFixStatisticsResponse describeVulFixStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulFixStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulFixStatisticsResponse());
    }

    /**
     * @summary Queries the statistics of vulnerability fixes.
     *
     * @return DescribeVulFixStatisticsResponse
     */
    public DescribeVulFixStatisticsResponse describeVulFixStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulFixStatisticsWithOptions(runtime);
    }

    /**
     * @summary Queries vulnerabilities by type.
     *
     * @param request DescribeVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulListResponse
     */
    public DescribeVulListResponse describeVulListWithOptions(DescribeVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attachTypes)) {
            query.put("AttachTypes", request.attachTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.useNextToken)) {
            query.put("UseNextToken", request.useNextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcInstanceIds)) {
            query.put("VpcInstanceIds", request.vpcInstanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulListResponse());
    }

    /**
     * @summary Queries vulnerabilities by type.
     *
     * @param request DescribeVulListRequest
     * @return DescribeVulListResponse
     */
    public DescribeVulListResponse describeVulList(DescribeVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the vulnerabilities that can be detected.
     *
     * @param request DescribeVulListPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulListPageResponse
     */
    public DescribeVulListPageResponse describeVulListPageWithOptions(DescribeVulListPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cveId)) {
            query.put("CveId", request.cveId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulNameLike)) {
            query.put("VulNameLike", request.vulNameLike);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulListPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulListPageResponse());
    }

    /**
     * @summary Queries the vulnerabilities that can be detected.
     *
     * @param request DescribeVulListPageRequest
     * @return DescribeVulListPageResponse
     */
    public DescribeVulListPageResponse describeVulListPage(DescribeVulListPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulListPageWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of vulnerabilities.
     *
     * @param request DescribeVulNumStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulNumStatisticsResponse
     */
    public DescribeVulNumStatisticsResponse describeVulNumStatisticsWithOptions(DescribeVulNumStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulNumStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulNumStatisticsResponse());
    }

    /**
     * @summary Queries the statistics of vulnerabilities.
     *
     * @param request DescribeVulNumStatisticsRequest
     * @return DescribeVulNumStatisticsResponse
     */
    public DescribeVulNumStatisticsResponse describeVulNumStatistics(DescribeVulNumStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulNumStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of the vulnerability scan feature for a server.
     *
     * @param request DescribeVulTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulTargetConfigResponse
     */
    public DescribeVulTargetConfigResponse describeVulTargetConfigWithOptions(DescribeVulTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulTargetConfigResponse());
    }

    /**
     * @summary Queries the configurations of the vulnerability scan feature for a server.
     *
     * @param request DescribeVulTargetConfigRequest
     * @return DescribeVulTargetConfigResponse
     */
    public DescribeVulTargetConfigResponse describeVulTargetConfig(DescribeVulTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulTargetConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of the vulnerability scan feature.
     *
     * @param request DescribeVulTargetStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulTargetStatisticsResponse
     */
    public DescribeVulTargetStatisticsResponse describeVulTargetStatisticsWithOptions(DescribeVulTargetStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulTargetStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulTargetStatisticsResponse());
    }

    /**
     * @summary Queries the configurations of the vulnerability scan feature.
     *
     * @param request DescribeVulTargetStatisticsRequest
     * @return DescribeVulTargetStatisticsResponse
     */
    public DescribeVulTargetStatisticsResponse describeVulTargetStatistics(DescribeVulTargetStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulTargetStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the whitelist of vulnerabilities by page.
     *
     * @param request DescribeVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulWhitelistResponse
     */
    public DescribeVulWhitelistResponse describeVulWhitelistWithOptions(DescribeVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulWhitelistResponse());
    }

    /**
     * @summary Queries the whitelist of vulnerabilities by page.
     *
     * @param request DescribeVulWhitelistRequest
     * @return DescribeVulWhitelistResponse
     */
    public DescribeVulWhitelistResponse describeVulWhitelist(DescribeVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulWhitelistWithOptions(request, runtime);
    }

    /**
     * @summary Queries the progress of a export task for a baseline check result.
     *
     * @param request DescribeWarningExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWarningExportInfoResponse
     */
    public DescribeWarningExportInfoResponse describeWarningExportInfoWithOptions(DescribeWarningExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWarningExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWarningExportInfoResponse());
    }

    /**
     * @summary Queries the progress of a export task for a baseline check result.
     *
     * @param request DescribeWarningExportInfoRequest
     * @return DescribeWarningExportInfoResponse
     */
    public DescribeWarningExportInfoResponse describeWarningExportInfo(DescribeWarningExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWarningExportInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
     *
     * @param request DescribeWarningMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWarningMachinesResponse
     */
    public DescribeWarningMachinesResponse describeWarningMachinesWithOptions(DescribeWarningMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.haveRisk)) {
            query.put("HaveRisk", request.haveRisk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWarningMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWarningMachinesResponse());
    }

    /**
     * @summary Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
     *
     * @param request DescribeWarningMachinesRequest
     * @return DescribeWarningMachinesResponse
     */
    public DescribeWarningMachinesResponse describeWarningMachines(DescribeWarningMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWarningMachinesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the servers that have web tamper proofing enabled.
     *
     * @param request DescribeWebLockBindListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockBindListResponse
     */
    public DescribeWebLockBindListResponse describeWebLockBindListWithOptions(DescribeWebLockBindListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockBindList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockBindListResponse());
    }

    /**
     * @summary Queries the information about the servers that have web tamper proofing enabled.
     *
     * @param request DescribeWebLockBindListRequest
     * @return DescribeWebLockBindListResponse
     */
    public DescribeWebLockBindListResponse describeWebLockBindList(DescribeWebLockBindListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockBindListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of web tamper proofing for a specified server.
     *
     * @param request DescribeWebLockConfigListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockConfigListResponse
     */
    public DescribeWebLockConfigListResponse describeWebLockConfigListWithOptions(DescribeWebLockConfigListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockConfigList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockConfigListResponse());
    }

    /**
     * @summary Queries the configurations of web tamper proofing for a specified server.
     *
     * @param request DescribeWebLockConfigListRequest
     * @return DescribeWebLockConfigListResponse
     */
    public DescribeWebLockConfigListResponse describeWebLockConfigList(DescribeWebLockConfigListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockConfigListWithOptions(request, runtime);
    }

    /**
     * @summary 查询排除文件类型
     *
     * @param request DescribeWebLockExclusiveFileTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockExclusiveFileTypeResponse
     */
    public DescribeWebLockExclusiveFileTypeResponse describeWebLockExclusiveFileTypeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockExclusiveFileType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockExclusiveFileTypeResponse());
    }

    /**
     * @summary 查询排除文件类型
     *
     * @return DescribeWebLockExclusiveFileTypeResponse
     */
    public DescribeWebLockExclusiveFileTypeResponse describeWebLockExclusiveFileType() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockExclusiveFileTypeWithOptions(runtime);
    }

    /**
     * @summary Queries the statistics on changes to the files that are protected by web tamper proofing.
     *
     * @param request DescribeWebLockFileChangeStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockFileChangeStatisticsResponse
     */
    public DescribeWebLockFileChangeStatisticsResponse describeWebLockFileChangeStatisticsWithOptions(DescribeWebLockFileChangeStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockFileChangeStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockFileChangeStatisticsResponse());
    }

    /**
     * @summary Queries the statistics on changes to the files that are protected by web tamper proofing.
     *
     * @param request DescribeWebLockFileChangeStatisticsRequest
     * @return DescribeWebLockFileChangeStatisticsResponse
     */
    public DescribeWebLockFileChangeStatisticsResponse describeWebLockFileChangeStatistics(DescribeWebLockFileChangeStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockFileChangeStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries events on web tamper proofing.
     *
     * @param request DescribeWebLockFileEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockFileEventsResponse
     */
    public DescribeWebLockFileEventsResponse describeWebLockFileEventsWithOptions(DescribeWebLockFileEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processName)) {
            query.put("ProcessName", request.processName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tsBegin)) {
            query.put("TsBegin", request.tsBegin);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tsEnd)) {
            query.put("TsEnd", request.tsEnd);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockFileEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockFileEventsResponse());
    }

    /**
     * @summary Queries events on web tamper proofing.
     *
     * @param request DescribeWebLockFileEventsRequest
     * @return DescribeWebLockFileEventsResponse
     */
    public DescribeWebLockFileEventsResponse describeWebLockFileEvents(DescribeWebLockFileEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockFileEventsWithOptions(request, runtime);
    }

    /**
     * @summary The number of attempts.
     *
     * @param request DescribeWebLockFileTypeSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockFileTypeSummaryResponse
     */
    public DescribeWebLockFileTypeSummaryResponse describeWebLockFileTypeSummaryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockFileTypeSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockFileTypeSummaryResponse());
    }

    /**
     * @summary The number of attempts.
     *
     * @return DescribeWebLockFileTypeSummaryResponse
     */
    public DescribeWebLockFileTypeSummaryResponse describeWebLockFileTypeSummary() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockFileTypeSummaryWithOptions(runtime);
    }

    /**
     * @summary Queries the types of files that can be protected by web tamper proofing.
     *
     * @param request DescribeWebLockInclusiveFileTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockInclusiveFileTypeResponse
     */
    public DescribeWebLockInclusiveFileTypeResponse describeWebLockInclusiveFileTypeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockInclusiveFileType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockInclusiveFileTypeResponse());
    }

    /**
     * @summary Queries the types of files that can be protected by web tamper proofing.
     *
     * @return DescribeWebLockInclusiveFileTypeResponse
     */
    public DescribeWebLockInclusiveFileTypeResponse describeWebLockInclusiveFileType() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockInclusiveFileTypeWithOptions(runtime);
    }

    /**
     * @summary Queries the statistics on processes for web tamper proofing.
     *
     * @param request DescribeWebLockProcessBlockStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockProcessBlockStatisticsResponse
     */
    public DescribeWebLockProcessBlockStatisticsResponse describeWebLockProcessBlockStatisticsWithOptions(DescribeWebLockProcessBlockStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockProcessBlockStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockProcessBlockStatisticsResponse());
    }

    /**
     * @summary Queries the statistics on processes for web tamper proofing.
     *
     * @param request DescribeWebLockProcessBlockStatisticsRequest
     * @return DescribeWebLockProcessBlockStatisticsResponse
     */
    public DescribeWebLockProcessBlockStatisticsResponse describeWebLockProcessBlockStatistics(DescribeWebLockProcessBlockStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockProcessBlockStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the processes for web tamper proofing.
     *
     * @param request DescribeWebLockProcessListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockProcessListResponse
     */
    public DescribeWebLockProcessListResponse describeWebLockProcessListWithOptions(DescribeWebLockProcessListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processName)) {
            query.put("ProcessName", request.processName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockProcessList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockProcessListResponse());
    }

    /**
     * @summary Queries the processes for web tamper proofing.
     *
     * @param request DescribeWebLockProcessListRequest
     * @return DescribeWebLockProcessListResponse
     */
    public DescribeWebLockProcessListResponse describeWebLockProcessList(DescribeWebLockProcessListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockProcessListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the status of web tamper proofing.
     *
     * @param request DescribeWebLockStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockStatusResponse
     */
    public DescribeWebLockStatusResponse describeWebLockStatusWithOptions(DescribeWebLockStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockStatusResponse());
    }

    /**
     * @summary Queries the status of web tamper proofing.
     *
     * @param request DescribeWebLockStatusRequest
     * @return DescribeWebLockStatusResponse
     */
    public DescribeWebLockStatusResponse describeWebLockStatus(DescribeWebLockStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of times that the files protected by web tamper proofing are changed.
     *
     * @param request DescribeWebLockTotalFileChangeCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockTotalFileChangeCountResponse
     */
    public DescribeWebLockTotalFileChangeCountResponse describeWebLockTotalFileChangeCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockTotalFileChangeCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockTotalFileChangeCountResponse());
    }

    /**
     * @summary Queries the number of times that the files protected by web tamper proofing are changed.
     *
     * @return DescribeWebLockTotalFileChangeCountResponse
     */
    public DescribeWebLockTotalFileChangeCountResponse describeWebLockTotalFileChangeCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockTotalFileChangeCountWithOptions(runtime);
    }

    /**
     * @summary Queries the custom web directories that are scanned based on the alerting feature.
     *
     * @param request DescribeWebPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebPathResponse
     */
    public DescribeWebPathResponse describeWebPathWithOptions(DescribeWebPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebPathResponse());
    }

    /**
     * @summary Queries the custom web directories that are scanned based on the alerting feature.
     *
     * @param request DescribeWebPathRequest
     * @return DescribeWebPathResponse
     */
    public DescribeWebPathResponse describeWebPath(DescribeWebPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebPathWithOptions(request, runtime);
    }

    /**
     * @summary Disables an IP address blocking policy that is in effect.
     *
     * @param request DisableBruteForceRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DisableBruteForceRecordResponse
     */
    public DisableBruteForceRecordResponse disableBruteForceRecordWithOptions(DisableBruteForceRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableBruteForceRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DisableBruteForceRecordResponse());
    }

    /**
     * @summary Disables an IP address blocking policy that is in effect.
     *
     * @param request DisableBruteForceRecordRequest
     * @return DisableBruteForceRecordResponse
     */
    public DisableBruteForceRecordResponse disableBruteForceRecord(DisableBruteForceRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.disableBruteForceRecordWithOptions(request, runtime);
    }

    /**
     * @summary Disables a custom IP address blocking policy for servers.
     *
     * @param request DisableCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DisableCustomBlockRecordResponse
     */
    public DisableCustomBlockRecordResponse disableCustomBlockRecordWithOptions(DisableCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new DisableCustomBlockRecordResponse());
    }

    /**
     * @summary Disables a custom IP address blocking policy for servers.
     *
     * @param request DisableCustomBlockRecordRequest
     * @return DisableCustomBlockRecordResponse
     */
    public DisableCustomBlockRecordResponse disableCustomBlockRecord(DisableCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.disableCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * @summary Enables an IP address blocking policy for a specified server.
     *
     * @param request EnableBruteForceRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return EnableBruteForceRecordResponse
     */
    public EnableBruteForceRecordResponse enableBruteForceRecordWithOptions(EnableBruteForceRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableBruteForceRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableBruteForceRecordResponse());
    }

    /**
     * @summary Enables an IP address blocking policy for a specified server.
     *
     * @param request EnableBruteForceRecordRequest
     * @return EnableBruteForceRecordResponse
     */
    public EnableBruteForceRecordResponse enableBruteForceRecord(EnableBruteForceRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.enableBruteForceRecordWithOptions(request, runtime);
    }

    /**
     * @summary Enables a custom IP address blocking policy.
     *
     * @param request EnableCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return EnableCustomBlockRecordResponse
     */
    public EnableCustomBlockRecordResponse enableCustomBlockRecordWithOptions(EnableCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableCustomBlockRecordResponse());
    }

    /**
     * @summary Enables a custom IP address blocking policy.
     *
     * @param request EnableCustomBlockRecordRequest
     * @return EnableCustomBlockRecordResponse
     */
    public EnableCustomBlockRecordResponse enableCustomBlockRecord(EnableCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.enableCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * @summary Enables a custom rule for an instance.
     *
     * @param request EnableCustomInstanceBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return EnableCustomInstanceBlockRecordResponse
     */
    public EnableCustomInstanceBlockRecordResponse enableCustomInstanceBlockRecordWithOptions(EnableCustomInstanceBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableCustomInstanceBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new EnableCustomInstanceBlockRecordResponse());
    }

    /**
     * @summary Enables a custom rule for an instance.
     *
     * @param request EnableCustomInstanceBlockRecordRequest
     * @return EnableCustomInstanceBlockRecordResponse
     */
    public EnableCustomInstanceBlockRecordResponse enableCustomInstanceBlockRecord(EnableCustomInstanceBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.enableCustomInstanceBlockRecordWithOptions(request, runtime);
    }

    /**
     * @summary Performs a baseline check on servers to which a specified baseline check policy is applied.
     *
     * @param request ExecStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExecStrategyResponse
     */
    public ExecStrategyResponse execStrategyWithOptions(ExecStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExecStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExecStrategyResponse());
    }

    /**
     * @summary Performs a baseline check on servers to which a specified baseline check policy is applied.
     *
     * @param request ExecStrategyRequest
     * @return ExecStrategyResponse
     */
    public ExecStrategyResponse execStrategy(ExecStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.execStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
     *
     * @description You can call the operation to export the following check result lists:
     * *   The list of servers on the Host page.
     * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
     * *   The list of attack analysis data on the Attack Awareness page.
     * *   The list of check results for AccessKey pair leaks on the AK leak detection page.
     *
     * @param request ExportRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportRecordResponse
     */
    public ExportRecordResponse exportRecordWithOptions(ExportRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportFileType)) {
            query.put("ExportFileType", request.exportFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exportType)) {
            query.put("ExportType", request.exportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.params)) {
            query.put("Params", request.params);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExportRecordResponse());
    }

    /**
     * @summary Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
     *
     * @description You can call the operation to export the following check result lists:
     * *   The list of servers on the Host page.
     * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
     * *   The list of attack analysis data on the Attack Awareness page.
     * *   The list of check results for AccessKey pair leaks on the AK leak detection page.
     *
     * @param request ExportRecordRequest
     * @return ExportRecordResponse
     */
    public ExportRecordResponse exportRecord(ExportRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportRecordWithOptions(request, runtime);
    }

    /**
     * @summary Exports the information about exceptions to a file.
     *
     * @param request ExportSuspEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportSuspEventsResponse
     */
    public ExportSuspEventsResponse exportSuspEventsWithOptions(ExportSuspEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetsTypeList)) {
            query.put("AssetsTypeList", request.assetsTypeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateErrorCodeList)) {
            query.put("OperateErrorCodeList", request.operateErrorCodeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentEventTypes)) {
            query.put("ParentEventTypes", request.parentEventTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniqueInfo)) {
            query.put("UniqueInfo", request.uniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportSuspEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExportSuspEventsResponse());
    }

    /**
     * @summary Exports the information about exceptions to a file.
     *
     * @param request ExportSuspEventsRequest
     * @return ExportSuspEventsResponse
     */
    public ExportSuspEventsResponse exportSuspEvents(ExportSuspEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportSuspEventsWithOptions(request, runtime);
    }

    /**
     * @summary Exports vulnerabilities.
     *
     * @description You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
     * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
     * ### Limits
     * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ExportVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportVulResponse
     */
    public ExportVulResponse exportVulWithOptions(ExportVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attachTypes)) {
            query.put("AttachTypes", request.attachTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerName)) {
            query.put("ContainerName", request.containerName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.createTsEnd)) {
            query.put("CreateTsEnd", request.createTsEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.createTsStart)) {
            query.put("CreateTsStart", request.createTsStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cveId)) {
            query.put("CveId", request.cveId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.path)) {
            query.put("Path", request.path);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchTags)) {
            query.put("SearchTags", request.searchTags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcInstanceIds)) {
            query.put("VpcInstanceIds", request.vpcInstanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExportVulResponse());
    }

    /**
     * @summary Exports vulnerabilities.
     *
     * @description You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
     * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
     * ### Limits
     * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ExportVulRequest
     * @return ExportVulResponse
     */
    public ExportVulResponse exportVul(ExportVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportVulWithOptions(request, runtime);
    }

    /**
     * @summary Exports baseline check results.
     *
     * @param request ExportWarningRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportWarningResponse
     */
    public ExportWarningResponse exportWarningWithOptions(ExportWarningRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exportType)) {
            query.put("ExportType", request.exportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isCleartextPwd)) {
            query.put("IsCleartextPwd", request.isCleartextPwd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isSummaryExport)) {
            query.put("IsSummaryExport", request.isSummaryExport);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskIds)) {
            query.put("RiskIds", request.riskIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevels)) {
            query.put("RiskLevels", request.riskLevels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskName)) {
            query.put("RiskName", request.riskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subTypeNames)) {
            query.put("SubTypeNames", request.subTypeNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeName)) {
            query.put("TypeName", request.typeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeNames)) {
            query.put("TypeNames", request.typeNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportWarning"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ExportWarningResponse());
    }

    /**
     * @summary Exports baseline check results.
     *
     * @param request ExportWarningRequest
     * @return ExportWarningResponse
     */
    public ExportWarningResponse exportWarning(ExportWarningRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportWarningWithOptions(request, runtime);
    }

    /**
     * @summary 容器网络连接
     *
     * @param tmpReq FindContainerNetworkConnectRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return FindContainerNetworkConnectResponse
     */
    public FindContainerNetworkConnectResponse findContainerNetworkConnectWithOptions(FindContainerNetworkConnectRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        FindContainerNetworkConnectShrinkRequest request = new FindContainerNetworkConnectShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.dstNode)) {
            request.dstNodeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.dstNode, "DstNode", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.srcNode)) {
            request.srcNodeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.srcNode, "SrcNode", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dstNodeShrink)) {
            query.put("DstNode", request.dstNodeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcNodeShrink)) {
            query.put("SrcNode", request.srcNodeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "FindContainerNetworkConnect"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new FindContainerNetworkConnectResponse());
    }

    /**
     * @summary 容器网络连接
     *
     * @param request FindContainerNetworkConnectRequest
     * @return FindContainerNetworkConnectResponse
     */
    public FindContainerNetworkConnectResponse findContainerNetworkConnect(FindContainerNetworkConnectRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.findContainerNetworkConnectWithOptions(request, runtime);
    }

    /**
     * @summary Fixes a baseline risk item.
     *
     * @param request FixCheckWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return FixCheckWarningsResponse
     */
    public FixCheckWarningsResponse fixCheckWarningsWithOptions(FixCheckWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkParams)) {
            query.put("CheckParams", request.checkParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "FixCheckWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new FixCheckWarningsResponse());
    }

    /**
     * @summary Fixes a baseline risk item.
     *
     * @param request FixCheckWarningsRequest
     * @return FixCheckWarningsResponse
     */
    public FixCheckWarningsResponse fixCheckWarnings(FixCheckWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.fixCheckWarningsWithOptions(request, runtime);
    }

    /**
     * @summary Generates a command that is used to add a self-managed Kubernetes cluster.
     *
     * @param request GenerateK8sAccessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GenerateK8sAccessInfoResponse
     */
    public GenerateK8sAccessInfoResponse generateK8sAccessInfoWithOptions(GenerateK8sAccessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayApiName)) {
            query.put("AliyunYundunGatewayApiName", request.aliyunYundunGatewayApiName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayPopName)) {
            query.put("AliyunYundunGatewayPopName", request.aliyunYundunGatewayPopName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayProjectName)) {
            query.put("AliyunYundunGatewayProjectName", request.aliyunYundunGatewayProjectName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.auditLogStore)) {
            query.put("AuditLogStore", request.auditLogStore);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.auditProject)) {
            query.put("AuditProject", request.auditProject);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.auditRegionId)) {
            query.put("AuditRegionId", request.auditRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.expireDate)) {
            query.put("ExpireDate", request.expireDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GenerateK8sAccessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GenerateK8sAccessInfoResponse());
    }

    /**
     * @summary Generates a command that is used to add a self-managed Kubernetes cluster.
     *
     * @param request GenerateK8sAccessInfoRequest
     * @return GenerateK8sAccessInfoResponse
     */
    public GenerateK8sAccessInfoResponse generateK8sAccessInfo(GenerateK8sAccessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.generateK8sAccessInfoWithOptions(request, runtime);
    }

    /**
     * @summary Creates a one-time scan task.
     *
     * @param request GenerateOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GenerateOnceTaskResponse
     */
    public GenerateOnceTaskResponse generateOnceTaskWithOptions(GenerateOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.param)) {
            query.put("Param", request.param);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GenerateOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GenerateOnceTaskResponse());
    }

    /**
     * @summary Creates a one-time scan task.
     *
     * @param request GenerateOnceTaskRequest
     * @return GenerateOnceTaskResponse
     */
    public GenerateOnceTaskResponse generateOnceTask(GenerateOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.generateOnceTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries search conditions that can be used to search for container file protection rules.
     *
     * @param request GetAegisContainerPluginRuleCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAegisContainerPluginRuleCriteriaResponse
     */
    public GetAegisContainerPluginRuleCriteriaResponse getAegisContainerPluginRuleCriteriaWithOptions(GetAegisContainerPluginRuleCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAegisContainerPluginRuleCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAegisContainerPluginRuleCriteriaResponse());
    }

    /**
     * @summary Queries search conditions that can be used to search for container file protection rules.
     *
     * @param request GetAegisContainerPluginRuleCriteriaRequest
     * @return GetAegisContainerPluginRuleCriteriaResponse
     */
    public GetAegisContainerPluginRuleCriteriaResponse getAegisContainerPluginRuleCriteria(GetAegisContainerPluginRuleCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAegisContainerPluginRuleCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of agentless detection tasks.
     *
     * @param request GetAgentlessTaskCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAgentlessTaskCountResponse
     */
    public GetAgentlessTaskCountResponse getAgentlessTaskCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAgentlessTaskCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAgentlessTaskCountResponse());
    }

    /**
     * @summary Queries the number of agentless detection tasks.
     *
     * @return GetAgentlessTaskCountResponse
     */
    public GetAgentlessTaskCountResponse getAgentlessTaskCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAgentlessTaskCountWithOptions(runtime);
    }

    /**
     * @summary Queries the number of servers on which alerts are generated.
     *
     * @param request GetAlarmMachineCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAlarmMachineCountResponse
     */
    public GetAlarmMachineCountResponse getAlarmMachineCountWithOptions(GetAlarmMachineCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAlarmMachineCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAlarmMachineCountResponse());
    }

    /**
     * @summary Queries the number of servers on which alerts are generated.
     *
     * @param request GetAlarmMachineCountRequest
     * @return GetAlarmMachineCountResponse
     */
    public GetAlarmMachineCountResponse getAlarmMachineCount(GetAlarmMachineCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAlarmMachineCountWithOptions(request, runtime);
    }

    /**
     * @summary Queries the network topology between containerized applications.
     *
     * @param request GetAppNetworkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAppNetworkResponse
     */
    public GetAppNetworkResponse getAppNetworkWithOptions(GetAppNetworkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAppNetwork"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAppNetworkResponse());
    }

    /**
     * @summary Queries the network topology between containerized applications.
     *
     * @param request GetAppNetworkRequest
     * @return GetAppNetworkResponse
     */
    public GetAppNetworkResponse getAppNetwork(GetAppNetworkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAppNetworkWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
     *
     * @param request GetAssetDetailByUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetDetailByUuidResponse
     */
    public GetAssetDetailByUuidResponse getAssetDetailByUuidWithOptions(GetAssetDetailByUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetDetailByUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetDetailByUuidResponse());
    }

    /**
     * @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
     *
     * @param request GetAssetDetailByUuidRequest
     * @return GetAssetDetailByUuidResponse
     */
    public GetAssetDetailByUuidResponse getAssetDetailByUuid(GetAssetDetailByUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetDetailByUuidWithOptions(request, runtime);
    }

    /**
     * @summary Queries asset selection configurations.
     *
     * @param request GetAssetSelectionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetSelectionConfigResponse
     */
    public GetAssetSelectionConfigResponse getAssetSelectionConfigWithOptions(GetAssetSelectionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.businessType)) {
            query.put("BusinessType", request.businessType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetSelectionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetSelectionConfigResponse());
    }

    /**
     * @summary Queries asset selection configurations.
     *
     * @param request GetAssetSelectionConfigRequest
     * @return GetAssetSelectionConfigResponse
     */
    public GetAssetSelectionConfigResponse getAssetSelectionConfig(GetAssetSelectionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetSelectionConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
     *
     * @param request GetAssetsPropertyDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetsPropertyDetailResponse
     */
    public GetAssetsPropertyDetailResponse getAssetsPropertyDetailWithOptions(GetAssetsPropertyDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.itemName)) {
            query.put("ItemName", request.itemName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchCriteriaList)) {
            query.put("SearchCriteriaList", request.searchCriteriaList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetsPropertyDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetsPropertyDetailResponse());
    }

    /**
     * @summary Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
     *
     * @param request GetAssetsPropertyDetailRequest
     * @return GetAssetsPropertyDetailResponse
     */
    public GetAssetsPropertyDetailResponse getAssetsPropertyDetail(GetAssetsPropertyDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetsPropertyDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
     *
     * @param request GetAssetsPropertyItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetsPropertyItemResponse
     */
    public GetAssetsPropertyItemResponse getAssetsPropertyItemWithOptions(GetAssetsPropertyItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfo)) {
            query.put("SearchInfo", request.searchInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItem)) {
            query.put("SearchItem", request.searchItem);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetsPropertyItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetsPropertyItemResponse());
    }

    /**
     * @summary Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
     *
     * @param request GetAssetsPropertyItemRequest
     * @return GetAssetsPropertyItemResponse
     */
    public GetAssetsPropertyItemResponse getAssetsPropertyItem(GetAssetsPropertyItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetsPropertyItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics about the numbers of assets protected by each edition of Security Center.
     *
     * @param request GetAuthVersionStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAuthVersionStatisticResponse
     */
    public GetAuthVersionStatisticResponse getAuthVersionStatisticWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAuthVersionStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetAuthVersionStatisticResponse());
    }

    /**
     * @summary Queries the statistics about the numbers of assets protected by each edition of Security Center.
     *
     * @return GetAuthVersionStatisticResponse
     */
    public GetAuthVersionStatisticResponse getAuthVersionStatistic() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAuthVersionStatisticWithOptions(runtime);
    }

    /**
     * @summary 查询防勒索存储统计
     *
     * @param request GetBackupStorageCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBackupStorageCountResponse
     */
    public GetBackupStorageCountResponse getBackupStorageCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetBackupStorageCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetBackupStorageCountResponse());
    }

    /**
     * @summary 查询防勒索存储统计
     *
     * @return GetBackupStorageCountResponse
     */
    public GetBackupStorageCountResponse getBackupStorageCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getBackupStorageCountWithOptions(runtime);
    }

    /**
     * @summary Queries the information about an automatic configuration check on cloud services.
     *
     * @param request GetCheckConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckConfigResponse
     */
    public GetCheckConfigResponse getCheckConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckConfigResponse());
    }

    /**
     * @summary Queries the information about an automatic configuration check on cloud services.
     *
     * @return GetCheckConfigResponse
     */
    public GetCheckConfigResponse getCheckConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckConfigWithOptions(runtime);
    }

    /**
     * @summary Queries the details about a check item that is used for configuration assessment.
     *
     * @param request GetCheckDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckDetailResponse
     */
    public GetCheckDetailResponse getCheckDetailWithOptions(GetCheckDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckDetailResponse());
    }

    /**
     * @summary Queries the details about a check item that is used for configuration assessment.
     *
     * @param request GetCheckDetailRequest
     * @return GetCheckDetailResponse
     */
    public GetCheckDetailResponse getCheckDetail(GetCheckDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the progress of a configuration check task on cloud services.
     *
     * @param request GetCheckProcessRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckProcessResponse
     */
    public GetCheckProcessResponse getCheckProcessWithOptions(GetCheckProcessRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckProcess"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckProcessResponse());
    }

    /**
     * @summary Queries the progress of a configuration check task on cloud services.
     *
     * @param request GetCheckProcessRequest
     * @return GetCheckProcessResponse
     */
    public GetCheckProcessResponse getCheckProcess(GetCheckProcessRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckProcessWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
     *
     * @param request GetCheckRiskStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckRiskStatisticsResponse
     */
    public GetCheckRiskStatisticsResponse getCheckRiskStatisticsWithOptions(GetCheckRiskStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckRiskStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckRiskStatisticsResponse());
    }

    /**
     * @summary Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
     *
     * @param request GetCheckRiskStatisticsRequest
     * @return GetCheckRiskStatisticsResponse
     */
    public GetCheckRiskStatisticsResponse getCheckRiskStatistics(GetCheckRiskStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckRiskStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
     *
     * @param request GetCheckSaleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckSaleResponse
     */
    public GetCheckSaleResponse getCheckSaleWithOptions(GetCheckSaleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckSale"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckSaleResponse());
    }

    /**
     * @summary Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
     *
     * @param request GetCheckSaleRequest
     * @return GetCheckSaleResponse
     */
    public GetCheckSaleResponse getCheckSale(GetCheckSaleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckSaleWithOptions(request, runtime);
    }

    /**
     * @summary Queries the summary information about the configuration checks on cloud services.
     *
     * @param request GetCheckSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckSummaryResponse
     */
    public GetCheckSummaryResponse getCheckSummaryWithOptions(GetCheckSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.isItemStatistic)) {
            query.put("IsItemStatistic", request.isItemStatistic);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckSummaryResponse());
    }

    /**
     * @summary Queries the summary information about the configuration checks on cloud services.
     *
     * @param request GetCheckSummaryRequest
     * @return GetCheckSummaryResponse
     */
    public GetCheckSummaryResponse getCheckSummary(GetCheckSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckSummaryWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI GetClientInstallationStatistic is deprecated, please use Sas::2018-12-03::GetClientRatioStatistic instead.
     *
     * @summary Queries the installation rate of the client on cloud assets in the specified period of time.
     *
     * @param request GetClientInstallationStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClientInstallationStatisticResponse
     */
    // Deprecated
    public GetClientInstallationStatisticResponse getClientInstallationStatisticWithOptions(GetClientInstallationStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClientInstallationStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetClientInstallationStatisticResponse());
    }

    /**
     * @deprecated OpenAPI GetClientInstallationStatistic is deprecated, please use Sas::2018-12-03::GetClientRatioStatistic instead.
     *
     * @summary Queries the installation rate of the client on cloud assets in the specified period of time.
     *
     * @param request GetClientInstallationStatisticRequest
     * @return GetClientInstallationStatisticResponse
     */
    // Deprecated
    public GetClientInstallationStatisticResponse getClientInstallationStatistic(GetClientInstallationStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClientInstallationStatisticWithOptions(request, runtime);
    }

    /**
     * @summary Queries the installation rate and online rate of the agent.
     *
     * @param request GetClientRatioStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClientRatioStatisticResponse
     */
    public GetClientRatioStatisticResponse getClientRatioStatisticWithOptions(GetClientRatioStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticTypes)) {
            query.put("StatisticTypes", request.statisticTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClientRatioStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetClientRatioStatisticResponse());
    }

    /**
     * @summary Queries the installation rate and online rate of the agent.
     *
     * @param request GetClientRatioStatisticRequest
     * @return GetClientRatioStatisticResponse
     */
    public GetClientRatioStatisticResponse getClientRatioStatistic(GetClientRatioStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClientRatioStatisticWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a custom defense rule.
     *
     * @param request GetClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClientUserDefineRuleResponse
     */
    public GetClientUserDefineRuleResponse getClientUserDefineRuleWithOptions(GetClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetClientUserDefineRuleResponse());
    }

    /**
     * @summary Queries the information about a custom defense rule.
     *
     * @param request GetClientUserDefineRuleRequest
     * @return GetClientUserDefineRuleResponse
     */
    public GetClientUserDefineRuleResponse getClientUserDefineRule(GetClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * @summary Queries the filter conditions that are used to search for cloud assets.
     *
     * @param request GetCloudAssetCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCloudAssetCriteriaResponse
     */
    public GetCloudAssetCriteriaResponse getCloudAssetCriteriaWithOptions(GetCloudAssetCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetTypes)) {
            query.put("CloudAssetTypes", request.cloudAssetTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCloudAssetCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCloudAssetCriteriaResponse());
    }

    /**
     * @summary Queries the filter conditions that are used to search for cloud assets.
     *
     * @param request GetCloudAssetCriteriaRequest
     * @return GetCloudAssetCriteriaResponse
     */
    public GetCloudAssetCriteriaResponse getCloudAssetCriteria(GetCloudAssetCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCloudAssetCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Obtains the details of cloud assets.
     *
     * @param request GetCloudAssetDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCloudAssetDetailResponse
     */
    public GetCloudAssetDetailResponse getCloudAssetDetailWithOptions(GetCloudAssetDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetSubType)) {
            query.put("AssetSubType", request.assetSubType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetInstances)) {
            query.put("CloudAssetInstances", request.cloudAssetInstances);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCloudAssetDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCloudAssetDetailResponse());
    }

    /**
     * @summary Obtains the details of cloud assets.
     *
     * @param request GetCloudAssetDetailRequest
     * @return GetCloudAssetDetailResponse
     */
    public GetCloudAssetDetailResponse getCloudAssetDetail(GetCloudAssetDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCloudAssetDetailWithOptions(request, runtime);
    }

    /**
     * @summary The total number of instances that are at risk.
     *
     * @param request GetCloudAssetSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCloudAssetSummaryResponse
     */
    public GetCloudAssetSummaryResponse getCloudAssetSummaryWithOptions(GetCloudAssetSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCloudAssetSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCloudAssetSummaryResponse());
    }

    /**
     * @summary The total number of instances that are at risk.
     *
     * @param request GetCloudAssetSummaryRequest
     * @return GetCloudAssetSummaryResponse
     */
    public GetCloudAssetSummaryResponse getCloudAssetSummary(GetCloudAssetSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCloudAssetSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics on baseline risk items of container clusters.
     *
     * @param request GetClusterCheckItemWarningStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterCheckItemWarningStatisticsResponse
     */
    public GetClusterCheckItemWarningStatisticsResponse getClusterCheckItemWarningStatisticsWithOptions(GetClusterCheckItemWarningStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterCheckItemWarningStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterCheckItemWarningStatisticsResponse());
    }

    /**
     * @summary Queries the statistics on baseline risk items of container clusters.
     *
     * @param request GetClusterCheckItemWarningStatisticsRequest
     * @return GetClusterCheckItemWarningStatisticsResponse
     */
    public GetClusterCheckItemWarningStatisticsResponse getClusterCheckItemWarningStatistics(GetClusterCheckItemWarningStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterCheckItemWarningStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the overall information about cluster defense rules that are configured for the container firewall feature.
     *
     * @param request GetClusterRuleSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterRuleSummaryResponse
     */
    public GetClusterRuleSummaryResponse getClusterRuleSummaryWithOptions(GetClusterRuleSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterRuleSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterRuleSummaryResponse());
    }

    /**
     * @summary Queries the overall information about cluster defense rules that are configured for the container firewall feature.
     *
     * @param request GetClusterRuleSummaryRequest
     * @return GetClusterRuleSummaryResponse
     */
    public GetClusterRuleSummaryResponse getClusterRuleSummary(GetClusterRuleSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterRuleSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of policies in each cluster.
     *
     * @param request GetClusterStrategyCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterStrategyCountResponse
     */
    public GetClusterStrategyCountResponse getClusterStrategyCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterStrategyCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterStrategyCountResponse());
    }

    /**
     * @summary Queries the number of policies in each cluster.
     *
     * @return GetClusterStrategyCountResponse
     */
    public GetClusterStrategyCountResponse getClusterStrategyCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterStrategyCountWithOptions(runtime);
    }

    /**
     * @summary Queries the statistics on alert events that are generated for containers.
     *
     * @param request GetClusterSuspEventStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterSuspEventStatisticsResponse
     */
    public GetClusterSuspEventStatisticsResponse getClusterSuspEventStatisticsWithOptions(GetClusterSuspEventStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterSuspEventStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterSuspEventStatisticsResponse());
    }

    /**
     * @summary Queries the statistics on alert events that are generated for containers.
     *
     * @param request GetClusterSuspEventStatisticsRequest
     * @return GetClusterSuspEventStatisticsResponse
     */
    public GetClusterSuspEventStatisticsResponse getClusterSuspEventStatistics(GetClusterSuspEventStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterSuspEventStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configuration of a common switch.
     *
     * @param request GetCommonSwitchConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCommonSwitchConfigResponse
     */
    public GetCommonSwitchConfigResponse getCommonSwitchConfigWithOptions(GetCommonSwitchConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCommonSwitchConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetCommonSwitchConfigResponse());
    }

    /**
     * @summary Queries the configuration of a common switch.
     *
     * @param request GetCommonSwitchConfigRequest
     * @return GetCommonSwitchConfigResponse
     */
    public GetCommonSwitchConfigResponse getCommonSwitchConfig(GetCommonSwitchConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCommonSwitchConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of a rule for non-image program defense.
     *
     * @param request GetContainerDefenseRuleDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetContainerDefenseRuleDetailResponse
     */
    public GetContainerDefenseRuleDetailResponse getContainerDefenseRuleDetailWithOptions(GetContainerDefenseRuleDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetContainerDefenseRuleDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetContainerDefenseRuleDetailResponse());
    }

    /**
     * @summary Queries the details of a rule for non-image program defense.
     *
     * @param request GetContainerDefenseRuleDetailRequest
     * @return GetContainerDefenseRuleDetailResponse
     */
    public GetContainerDefenseRuleDetailResponse getContainerDefenseRuleDetail(GetContainerDefenseRuleDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getContainerDefenseRuleDetailWithOptions(request, runtime);
    }

    /**
     * @summary Obtains the usage information of the malicious file detection SDK.
     *
     * @param request GetFileDetectApiInvokeInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileDetectApiInvokeInfoResponse
     */
    public GetFileDetectApiInvokeInfoResponse getFileDetectApiInvokeInfoWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileDetectApiInvokeInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileDetectApiInvokeInfoResponse());
    }

    /**
     * @summary Obtains the usage information of the malicious file detection SDK.
     *
     * @return GetFileDetectApiInvokeInfoResponse
     */
    public GetFileDetectApiInvokeInfoResponse getFileDetectApiInvokeInfo() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileDetectApiInvokeInfoWithOptions(runtime);
    }

    /**
     * @summary Queries the cloud sandbox check results of malicious files.
     *
     * @param request GetFileDetectReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileDetectReportResponse
     */
    public GetFileDetectReportResponse getFileDetectReportWithOptions(GetFileDetectReportRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.field)) {
            query.put("Field", request.field);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileHash)) {
            query.put("FileHash", request.fileHash);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileDetectReport"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileDetectReportResponse());
    }

    /**
     * @summary Queries the cloud sandbox check results of malicious files.
     *
     * @param request GetFileDetectReportRequest
     * @return GetFileDetectReportResponse
     */
    public GetFileDetectReportResponse getFileDetectReport(GetFileDetectReportRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileDetectReportWithOptions(request, runtime);
    }

    /**
     * @summary Obtains file detection results.
     *
     * @description The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
     *
     * @param request GetFileDetectResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileDetectResultResponse
     */
    public GetFileDetectResultResponse getFileDetectResultWithOptions(GetFileDetectResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.hashKeyList)) {
            query.put("HashKeyList", request.hashKeyList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileDetectResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileDetectResultResponse());
    }

    /**
     * @summary Obtains file detection results.
     *
     * @description The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
     *
     * @param request GetFileDetectResultRequest
     * @return GetFileDetectResultResponse
     */
    public GetFileDetectResultResponse getFileDetectResult(GetFileDetectResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileDetectResultWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
     *
     * @param request GetFileProtectDashboardRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectDashboardResponse
     */
    public GetFileProtectDashboardResponse getFileProtectDashboardWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectDashboard"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectDashboardResponse());
    }

    /**
     * @summary Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
     *
     * @return GetFileProtectDashboardResponse
     */
    public GetFileProtectDashboardResponse getFileProtectDashboard() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectDashboardWithOptions(runtime);
    }

    /**
     * @summary Queries information about core file monitoring events.
     *
     * @param request GetFileProtectEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectEventResponse
     */
    public GetFileProtectEventResponse getFileProtectEventWithOptions(GetFileProtectEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectEventResponse());
    }

    /**
     * @summary Queries information about core file monitoring events.
     *
     * @param request GetFileProtectEventRequest
     * @return GetFileProtectEventResponse
     */
    public GetFileProtectEventResponse getFileProtectEvent(GetFileProtectEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectEventWithOptions(request, runtime);
    }

    /**
     * @summary Queries the total number of core file monitoring events by filter condition.
     *
     * @param request GetFileProtectEventCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectEventCountResponse
     */
    public GetFileProtectEventCountResponse getFileProtectEventCountWithOptions(GetFileProtectEventCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectEventCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectEventCountResponse());
    }

    /**
     * @summary Queries the total number of core file monitoring events by filter condition.
     *
     * @param request GetFileProtectEventCountRequest
     * @return GetFileProtectEventCountResponse
     */
    public GetFileProtectEventCountResponse getFileProtectEventCount(GetFileProtectEventCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectEventCountWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a core file monitoring rule based on the ID of the rule.
     *
     * @param request GetFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectRuleResponse
     */
    public GetFileProtectRuleResponse getFileProtectRuleWithOptions(GetFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectRuleResponse());
    }

    /**
     * @summary Queries the information about a core file monitoring rule based on the ID of the rule.
     *
     * @param request GetFileProtectRuleRequest
     * @return GetFileProtectRuleResponse
     */
    public GetFileProtectRuleResponse getFileProtectRule(GetFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * @summary Queries the queries per second (QPS) limit on the files uploaded from the client.
     *
     * @param request GetFileUploadLimitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileUploadLimitResponse
     */
    public GetFileUploadLimitResponse getFileUploadLimitWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileUploadLimit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileUploadLimitResponse());
    }

    /**
     * @summary Queries the queries per second (QPS) limit on the files uploaded from the client.
     *
     * @return GetFileUploadLimitResponse
     */
    public GetFileUploadLimitResponse getFileUploadLimit() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileUploadLimitWithOptions(runtime);
    }

    /**
     * @summary Obtains the URL that is used to upload a file to a honeypot.
     *
     * @param request GetHoneyPotUploadPolicyInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneyPotUploadPolicyInfoResponse
     */
    public GetHoneyPotUploadPolicyInfoResponse getHoneyPotUploadPolicyInfoWithOptions(GetHoneyPotUploadPolicyInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneyPotUploadPolicyInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneyPotUploadPolicyInfoResponse());
    }

    /**
     * @summary Obtains the URL that is used to upload a file to a honeypot.
     *
     * @param request GetHoneyPotUploadPolicyInfoRequest
     * @return GetHoneyPotUploadPolicyInfoResponse
     */
    public GetHoneyPotUploadPolicyInfoResponse getHoneyPotUploadPolicyInfo(GetHoneyPotUploadPolicyInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneyPotUploadPolicyInfoWithOptions(request, runtime);
    }

    /**
     * @param request GetHoneypotAttackStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotAttackStatisticsResponse
     */
    public GetHoneypotAttackStatisticsResponse getHoneypotAttackStatisticsWithOptions(GetHoneypotAttackStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevelList)) {
            query.put("RiskLevelList", request.riskLevelList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsType)) {
            query.put("StatisticsType", request.statisticsType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotAttackStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotAttackStatisticsResponse());
    }

    /**
     * @param request GetHoneypotAttackStatisticsRequest
     * @return GetHoneypotAttackStatisticsResponse
     */
    public GetHoneypotAttackStatisticsResponse getHoneypotAttackStatistics(GetHoneypotAttackStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotAttackStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Obtain attack trend statistics for a single attack source.
     *
     * @param request GetHoneypotEventTrendRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotEventTrendResponse
     */
    public GetHoneypotEventTrendResponse getHoneypotEventTrendWithOptions(GetHoneypotEventTrendRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevelList)) {
            query.put("RiskLevelList", request.riskLevelList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotEventTrend"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotEventTrendResponse());
    }

    /**
     * @summary Obtain attack trend statistics for a single attack source.
     *
     * @param request GetHoneypotEventTrendRequest
     * @return GetHoneypotEventTrendResponse
     */
    public GetHoneypotEventTrendResponse getHoneypotEventTrend(GetHoneypotEventTrendRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotEventTrendWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of a specified management node.
     *
     * @param request GetHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotNodeResponse
     */
    public GetHoneypotNodeResponse getHoneypotNodeWithOptions(GetHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotNodeResponse());
    }

    /**
     * @summary Queries the details of a specified management node.
     *
     * @param request GetHoneypotNodeRequest
     * @return GetHoneypotNodeResponse
     */
    public GetHoneypotNodeResponse getHoneypotNode(GetHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * @summary Queries the monitoring data of management nodes to which the cloud honeypot belongs.
     *
     * @param request GetHoneypotNodeMetricListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotNodeMetricListResponse
     */
    public GetHoneypotNodeMetricListResponse getHoneypotNodeMetricListWithOptions(GetHoneypotNodeMetricListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.express)) {
            query.put("Express", request.express);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.length)) {
            query.put("Length", request.length);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.period)) {
            query.put("Period", request.period);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotNodeMetricList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotNodeMetricListResponse());
    }

    /**
     * @summary Queries the monitoring data of management nodes to which the cloud honeypot belongs.
     *
     * @param request GetHoneypotNodeMetricListRequest
     * @return GetHoneypotNodeMetricListResponse
     */
    public GetHoneypotNodeMetricListResponse getHoneypotNodeMetricList(GetHoneypotNodeMetricListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotNodeMetricListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of a specified honeypot template.
     *
     * @param request GetHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotPresetResponse
     */
    public GetHoneypotPresetResponse getHoneypotPresetWithOptions(GetHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotPresetId)) {
            query.put("HoneypotPresetId", request.honeypotPresetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotPresetResponse());
    }

    /**
     * @summary Queries the configurations of a specified honeypot template.
     *
     * @param request GetHoneypotPresetRequest
     * @return GetHoneypotPresetResponse
     */
    public GetHoneypotPresetResponse getHoneypotPreset(GetHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details about a specified probe.
     *
     * @param request GetHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotProbeResponse
     */
    public GetHoneypotProbeResponse getHoneypotProbeWithOptions(GetHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotProbeResponse());
    }

    /**
     * @summary Queries the details about a specified probe.
     *
     * @param request GetHoneypotProbeRequest
     * @return GetHoneypotProbeResponse
     */
    public GetHoneypotProbeResponse getHoneypotProbe(GetHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * @summary 获取蜜罐使用量的统计数据
     *
     * @param request GetHoneypotStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotStatisticsResponse
     */
    public GetHoneypotStatisticsResponse getHoneypotStatisticsWithOptions(GetHoneypotStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotStatisticsResponse());
    }

    /**
     * @summary 获取蜜罐使用量的统计数据
     *
     * @param request GetHoneypotStatisticsRequest
     * @return GetHoneypotStatisticsResponse
     */
    public GetHoneypotStatisticsResponse getHoneypotStatistics(GetHoneypotStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries alert handling rules.
     *
     * @param request GetImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageEventOperationResponse
     */
    public GetImageEventOperationResponse getImageEventOperationWithOptions(GetImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetImageEventOperationResponse());
    }

    /**
     * @summary Queries alert handling rules.
     *
     * @param request GetImageEventOperationRequest
     * @return GetImageEventOperationResponse
     */
    public GetImageEventOperationResponse getImageEventOperation(GetImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getImageEventOperationWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of image scans that are performed within the last several days.
     *
     * @param request GetImageScanNumInPeriodRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageScanNumInPeriodResponse
     */
    public GetImageScanNumInPeriodResponse getImageScanNumInPeriodWithOptions(GetImageScanNumInPeriodRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pastDay)) {
            query.put("PastDay", request.pastDay);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetImageScanNumInPeriod"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetImageScanNumInPeriodResponse());
    }

    /**
     * @summary Queries the number of image scans that are performed within the last several days.
     *
     * @param request GetImageScanNumInPeriodRequest
     * @return GetImageScanNumInPeriodResponse
     */
    public GetImageScanNumInPeriodResponse getImageScanNumInPeriod(GetImageScanNumInPeriodRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getImageScanNumInPeriodWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of a microsegmentation defense rule.
     *
     * @param request GetInterceptionRuleDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInterceptionRuleDetailResponse
     */
    public GetInterceptionRuleDetailResponse getInterceptionRuleDetailWithOptions(GetInterceptionRuleDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInterceptionRuleDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetInterceptionRuleDetailResponse());
    }

    /**
     * @summary Queries the details of a microsegmentation defense rule.
     *
     * @param request GetInterceptionRuleDetailRequest
     * @return GetInterceptionRuleDetailResponse
     */
    public GetInterceptionRuleDetailResponse getInterceptionRuleDetail(GetInterceptionRuleDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInterceptionRuleDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics of the container firewall feature.
     *
     * @param request GetInterceptionSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInterceptionSummaryResponse
     */
    public GetInterceptionSummaryResponse getInterceptionSummaryWithOptions(GetInterceptionSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInterceptionSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetInterceptionSummaryResponse());
    }

    /**
     * @summary Queries the statistics of the container firewall feature.
     *
     * @param request GetInterceptionSummaryRequest
     * @return GetInterceptionSummaryResponse
     */
    public GetInterceptionSummaryResponse getInterceptionSummary(GetInterceptionSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInterceptionSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about a specified network object that is protected by the container firewall feature.
     *
     * @param request GetInterceptionTargetDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInterceptionTargetDetailResponse
     */
    public GetInterceptionTargetDetailResponse getInterceptionTargetDetailWithOptions(GetInterceptionTargetDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetId)) {
            query.put("TargetId", request.targetId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInterceptionTargetDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetInterceptionTargetDetailResponse());
    }

    /**
     * @summary Queries the information about a specified network object that is protected by the container firewall feature.
     *
     * @param request GetInterceptionTargetDetailRequest
     * @return GetInterceptionTargetDetailResponse
     */
    public GetInterceptionTargetDetailResponse getInterceptionTargetDetail(GetInterceptionTargetDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInterceptionTargetDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about the latest scan task to determine whether the task is complete.
     *
     * @param request GetLastOnceTaskInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLastOnceTaskInfoResponse
     */
    public GetLastOnceTaskInfoResponse getLastOnceTaskInfoWithOptions(GetLastOnceTaskInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetLastOnceTaskInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetLastOnceTaskInfoResponse());
    }

    /**
     * @summary Queries information about the latest scan task to determine whether the task is complete.
     *
     * @param request GetLastOnceTaskInfoRequest
     * @return GetLastOnceTaskInfoResponse
     */
    public GetLastOnceTaskInfoResponse getLastOnceTaskInfo(GetLastOnceTaskInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getLastOnceTaskInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the status of a data shipping task of a log.
     *
     * @param request GetLogMetaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLogMetaResponse
     */
    public GetLogMetaResponse getLogMetaWithOptions(GetLogMetaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.logStore)) {
            query.put("LogStore", request.logStore);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetLogMeta"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetLogMetaResponse());
    }

    /**
     * @summary Queries the status of a data shipping task of a log.
     *
     * @param request GetLogMetaRequest
     * @return GetLogMetaResponse
     */
    public GetLogMetaResponse getLogMeta(GetLogMetaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getLogMetaWithOptions(request, runtime);
    }

    /**
     * @summary Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request GetMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMaliciousFileWhitelistConfigResponse
     */
    public GetMaliciousFileWhitelistConfigResponse getMaliciousFileWhitelistConfigWithOptions(GetMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetMaliciousFileWhitelistConfigResponse());
    }

    /**
     * @summary Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request GetMaliciousFileWhitelistConfigRequest
     * @return GetMaliciousFileWhitelistConfigResponse
     */
    public GetMaliciousFileWhitelistConfigResponse getMaliciousFileWhitelistConfig(GetMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of a module.
     *
     * @param request GetModuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetModuleConfigResponse
     */
    public GetModuleConfigResponse getModuleConfigWithOptions(GetModuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetModuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetModuleConfigResponse());
    }

    /**
     * @summary Queries the configurations of a module.
     *
     * @param request GetModuleConfigRequest
     * @return GetModuleConfigResponse
     */
    public GetModuleConfigResponse getModuleConfig(GetModuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getModuleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis.
     *
     * @param request GetModuleTrialAuthInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetModuleTrialAuthInfoResponse
     */
    public GetModuleTrialAuthInfoResponse getModuleTrialAuthInfoWithOptions(GetModuleTrialAuthInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.moduleCode)) {
            query.put("ModuleCode", request.moduleCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetModuleTrialAuthInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetModuleTrialAuthInfoResponse());
    }

    /**
     * @summary Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis.
     *
     * @param request GetModuleTrialAuthInfoRequest
     * @return GetModuleTrialAuthInfoResponse
     */
    public GetModuleTrialAuthInfoResponse getModuleTrialAuthInfo(GetModuleTrialAuthInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getModuleTrialAuthInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of an alert event that is generated for a malicious object.
     *
     * @param request GetObjectScanEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetObjectScanEventResponse
     */
    public GetObjectScanEventResponse getObjectScanEventWithOptions(GetObjectScanEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetObjectScanEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetObjectScanEventResponse());
    }

    /**
     * @summary Queries the details of an alert event that is generated for a malicious object.
     *
     * @param request GetObjectScanEventRequest
     * @return GetObjectScanEventResponse
     */
    public GetObjectScanEventResponse getObjectScanEvent(GetObjectScanEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getObjectScanEventWithOptions(request, runtime);
    }

    /**
     * @summary Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
     *
     * @param request GetOnceTaskResultInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOnceTaskResultInfoResponse
     */
    public GetOnceTaskResultInfoResponse getOnceTaskResultInfoWithOptions(GetOnceTaskResultInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOnceTaskResultInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOnceTaskResultInfoResponse());
    }

    /**
     * @summary Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
     *
     * @param request GetOnceTaskResultInfoRequest
     * @return GetOnceTaskResultInfoResponse
     */
    public GetOnceTaskResultInfoResponse getOnceTaskResultInfo(GetOnceTaskResultInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOnceTaskResultInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the baselines that are supported by at-risk image blocking.
     *
     * @param request GetOpaClusterBaseLineListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterBaseLineListResponse
     */
    public GetOpaClusterBaseLineListResponse getOpaClusterBaseLineListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterBaseLineList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterBaseLineListResponse());
    }

    /**
     * @summary Queries the baselines that are supported by at-risk image blocking.
     *
     * @return GetOpaClusterBaseLineListResponse
     */
    public GetOpaClusterBaseLineListResponse getOpaClusterBaseLineList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterBaseLineListWithOptions(runtime);
    }

    /**
     * @summary 查询集群镜像
     *
     * @param request GetOpaClusterImageListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterImageListResponse
     */
    public GetOpaClusterImageListResponse getOpaClusterImageListWithOptions(GetOpaClusterImageListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterImageList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterImageListResponse());
    }

    /**
     * @summary 查询集群镜像
     *
     * @param request GetOpaClusterImageListRequest
     * @return GetOpaClusterImageListResponse
     */
    public GetOpaClusterImageListResponse getOpaClusterImageList(GetOpaClusterImageListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterImageListWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
     *
     * @param request GetOpaClusterLabelListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterLabelListResponse
     */
    public GetOpaClusterLabelListResponse getOpaClusterLabelListWithOptions(GetOpaClusterLabelListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagName)) {
            query.put("TagName", request.tagName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterLabelList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterLabelListResponse());
    }

    /**
     * @summary Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
     *
     * @param request GetOpaClusterLabelListRequest
     * @return GetOpaClusterLabelListResponse
     */
    public GetOpaClusterLabelListResponse getOpaClusterLabelList(GetOpaClusterLabelListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterLabelListWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
     *
     * @param request GetOpaClusterNamespaceListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterNamespaceListResponse
     */
    public GetOpaClusterNamespaceListResponse getOpaClusterNamespaceListWithOptions(GetOpaClusterNamespaceListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpaceName)) {
            query.put("NameSpaceName", request.nameSpaceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterNamespaceList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterNamespaceListResponse());
    }

    /**
     * @summary Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
     *
     * @param request GetOpaClusterNamespaceListRequest
     * @return GetOpaClusterNamespaceListResponse
     */
    public GetOpaClusterNamespaceListResponse getOpaClusterNamespaceList(GetOpaClusterNamespaceListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterNamespaceListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
     *
     * @param request GetOpaPluginStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaPluginStatusResponse
     */
    public GetOpaPluginStatusResponse getOpaPluginStatusWithOptions(GetOpaPluginStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaPluginStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaPluginStatusResponse());
    }

    /**
     * @summary Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
     *
     * @param request GetOpaPluginStatusRequest
     * @return GetOpaPluginStatusResponse
     */
    public GetOpaPluginStatusResponse getOpaPluginStatus(GetOpaPluginStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaPluginStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of the rule that is used to block at-risk images.
     *
     * @param request GetOpaStrategyDetailNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaStrategyDetailNewResponse
     */
    public GetOpaStrategyDetailNewResponse getOpaStrategyDetailNewWithOptions(GetOpaStrategyDetailNewRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaStrategyDetailNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaStrategyDetailNewResponse());
    }

    /**
     * @summary Queries the details of the rule that is used to block at-risk images.
     *
     * @param request GetOpaStrategyDetailNewRequest
     * @return GetOpaStrategyDetailNewResponse
     */
    public GetOpaStrategyDetailNewResponse getOpaStrategyDetailNew(GetOpaStrategyDetailNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaStrategyDetailNewWithOptions(request, runtime);
    }

    /**
     * @summary Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
     *
     * @param request GetOpaStrategyTemplateSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaStrategyTemplateSummaryResponse
     */
    public GetOpaStrategyTemplateSummaryResponse getOpaStrategyTemplateSummaryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaStrategyTemplateSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaStrategyTemplateSummaryResponse());
    }

    /**
     * @summary Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
     *
     * @return GetOpaStrategyTemplateSummaryResponse
     */
    public GetOpaStrategyTemplateSummaryResponse getOpaStrategyTemplateSummary() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaStrategyTemplateSummaryWithOptions(runtime);
    }

    /**
     * @summary Queries the statistics about an Object Storage Service (OSS) bucket check.
     *
     * @param request GetOssBucketScanStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOssBucketScanStatisticResponse
     */
    public GetOssBucketScanStatisticResponse getOssBucketScanStatisticWithOptions(GetOssBucketScanStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOssBucketScanStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOssBucketScanStatisticResponse());
    }

    /**
     * @summary Queries the statistics about an Object Storage Service (OSS) bucket check.
     *
     * @param request GetOssBucketScanStatisticRequest
     * @return GetOssBucketScanStatisticResponse
     */
    public GetOssBucketScanStatisticResponse getOssBucketScanStatistic(GetOssBucketScanStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOssBucketScanStatisticWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations of an Object Storage Service (OSS) bucket check policy.
     *
     * @param request GetOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOssScanConfigResponse
     */
    public GetOssScanConfigResponse getOssScanConfigWithOptions(GetOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetOssScanConfigResponse());
    }

    /**
     * @summary Queries the configurations of an Object Storage Service (OSS) bucket check policy.
     *
     * @param request GetOssScanConfigRequest
     * @return GetOssScanConfigResponse
     */
    public GetOssScanConfigResponse getOssScanConfig(GetOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOssScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations for the collection frequency of asset fingerprints.
     *
     * @param request GetPropertyScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPropertyScheduleConfigResponse
     */
    public GetPropertyScheduleConfigResponse getPropertyScheduleConfigWithOptions(GetPropertyScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetPropertyScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetPropertyScheduleConfigResponse());
    }

    /**
     * @summary Queries the configurations for the collection frequency of asset fingerprints.
     *
     * @param request GetPropertyScheduleConfigRequest
     * @return GetPropertyScheduleConfigResponse
     */
    public GetPropertyScheduleConfigResponse getPropertyScheduleConfig(GetPropertyScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getPropertyScheduleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the numbers of system defense rules and custom defense rules.
     *
     * @param request GetRulesCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRulesCountResponse
     */
    public GetRulesCountResponse getRulesCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetRulesCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetRulesCountResponse());
    }

    /**
     * @summary Queries the numbers of system defense rules and custom defense rules.
     *
     * @return GetRulesCountResponse
     */
    public GetRulesCountResponse getRulesCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getRulesCountWithOptions(runtime);
    }

    /**
     * @summary Queries the applications that are specified in a rule for container tamper-proofing.
     *
     * @param request GetSasContainerWebDefenseRuleApplicationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSasContainerWebDefenseRuleApplicationResponse
     */
    public GetSasContainerWebDefenseRuleApplicationResponse getSasContainerWebDefenseRuleApplicationWithOptions(GetSasContainerWebDefenseRuleApplicationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSasContainerWebDefenseRuleApplication"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSasContainerWebDefenseRuleApplicationResponse());
    }

    /**
     * @summary Queries the applications that are specified in a rule for container tamper-proofing.
     *
     * @param request GetSasContainerWebDefenseRuleApplicationRequest
     * @return GetSasContainerWebDefenseRuleApplicationResponse
     */
    public GetSasContainerWebDefenseRuleApplicationResponse getSasContainerWebDefenseRuleApplication(GetSasContainerWebDefenseRuleApplicationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSasContainerWebDefenseRuleApplicationWithOptions(request, runtime);
    }

    /**
     * @summary Queries search conditions that can be used to search for container file protection rules.
     *
     * @param request GetSasContainerWebDefenseRuleCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSasContainerWebDefenseRuleCriteriaResponse
     */
    public GetSasContainerWebDefenseRuleCriteriaResponse getSasContainerWebDefenseRuleCriteriaWithOptions(GetSasContainerWebDefenseRuleCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSasContainerWebDefenseRuleCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSasContainerWebDefenseRuleCriteriaResponse());
    }

    /**
     * @summary Queries search conditions that can be used to search for container file protection rules.
     *
     * @param request GetSasContainerWebDefenseRuleCriteriaRequest
     * @return GetSasContainerWebDefenseRuleCriteriaResponse
     */
    public GetSasContainerWebDefenseRuleCriteriaResponse getSasContainerWebDefenseRuleCriteria(GetSasContainerWebDefenseRuleCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSasContainerWebDefenseRuleCriteriaWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of the deduction modules of the security score feature, including custom settings.
     *
     * @param request GetSecurityScoreRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSecurityScoreRuleResponse
     */
    public GetSecurityScoreRuleResponse getSecurityScoreRuleWithOptions(GetSecurityScoreRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSecurityScoreRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSecurityScoreRuleResponse());
    }

    /**
     * @summary Queries the details of the deduction modules of the security score feature, including custom settings.
     *
     * @param request GetSecurityScoreRuleRequest
     * @return GetSecurityScoreRuleResponse
     */
    public GetSecurityScoreRuleResponse getSecurityScoreRule(GetSecurityScoreRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSecurityScoreRuleWithOptions(request, runtime);
    }

    /**
     * @summary Queries the check rules of sensitive files.
     *
     * @param request GetSensitiveDefineRuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSensitiveDefineRuleConfigResponse
     */
    public GetSensitiveDefineRuleConfigResponse getSensitiveDefineRuleConfigWithOptions(GetSensitiveDefineRuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSensitiveDefineRuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSensitiveDefineRuleConfigResponse());
    }

    /**
     * @summary Queries the check rules of sensitive files.
     *
     * @param request GetSensitiveDefineRuleConfigRequest
     * @return GetSensitiveDefineRuleConfigResponse
     */
    public GetSensitiveDefineRuleConfigResponse getSensitiveDefineRuleConfig(GetSensitiveDefineRuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSensitiveDefineRuleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the service trail that was delivered to ActionTrail.
     *
     * @param request GetServiceTrailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetServiceTrailResponse
     */
    public GetServiceTrailResponse getServiceTrailWithOptions(GetServiceTrailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetServiceTrail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetServiceTrailResponse());
    }

    /**
     * @summary Queries the service trail that was delivered to ActionTrail.
     *
     * @param request GetServiceTrailRequest
     * @return GetServiceTrailResponse
     */
    public GetServiceTrailResponse getServiceTrail(GetServiceTrailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getServiceTrailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
     *
     * @param request GetStrategyTemplateDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetStrategyTemplateDetailResponse
     */
    public GetStrategyTemplateDetailResponse getStrategyTemplateDetailWithOptions(GetStrategyTemplateDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetStrategyTemplateDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetStrategyTemplateDetailResponse());
    }

    /**
     * @summary Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
     *
     * @param request GetStrategyTemplateDetailRequest
     * @return GetStrategyTemplateDetailResponse
     */
    public GetStrategyTemplateDetailResponse getStrategyTemplateDetail(GetStrategyTemplateDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getStrategyTemplateDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics on alerts in one or more asset groups.
     *
     * @param request GetSuspiciousStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSuspiciousStatisticsResponse
     */
    public GetSuspiciousStatisticsResponse getSuspiciousStatisticsWithOptions(GetSuspiciousStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupIdList)) {
            query.put("GroupIdList", request.groupIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSuspiciousStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSuspiciousStatisticsResponse());
    }

    /**
     * @summary Queries the statistics on alerts in one or more asset groups.
     *
     * @param request GetSuspiciousStatisticsRequest
     * @return GetSuspiciousStatisticsResponse
     */
    public GetSuspiciousStatisticsResponse getSuspiciousStatistics(GetSuspiciousStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSuspiciousStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the status and progress of the task that is run to migrate a server from a region inside the Chinese mainland to the Singapore region.
     *
     * @param request GetSwitchRegionDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSwitchRegionDetailResponse
     */
    public GetSwitchRegionDetailResponse getSwitchRegionDetailWithOptions(GetSwitchRegionDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSwitchRegionDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetSwitchRegionDetailResponse());
    }

    /**
     * @summary Queries the status and progress of the task that is run to migrate a server from a region inside the Chinese mainland to the Singapore region.
     *
     * @param request GetSwitchRegionDetailRequest
     * @return GetSwitchRegionDetailResponse
     */
    public GetSwitchRegionDetailResponse getSwitchRegionDetail(GetSwitchRegionDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSwitchRegionDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the language settings of log analysis.
     *
     * @param request GetUserLangRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserLangResponse
     */
    public GetUserLangResponse getUserLangWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUserLang"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetUserLangResponse());
    }

    /**
     * @summary Queries the language settings of log analysis.
     *
     * @return GetUserLangResponse
     */
    public GetUserLangResponse getUserLang() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getUserLangWithOptions(runtime);
    }

    /**
     * @summary Queries the configurations of a periodic virus scan task.
     *
     * @param request GetVirusScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVirusScanConfigResponse
     */
    public GetVirusScanConfigResponse getVirusScanConfigWithOptions(GetVirusScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVirusScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetVirusScanConfigResponse());
    }

    /**
     * @summary Queries the configurations of a periodic virus scan task.
     *
     * @param request GetVirusScanConfigRequest
     * @return GetVirusScanConfigResponse
     */
    public GetVirusScanConfigResponse getVirusScanConfig(GetVirusScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVirusScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the latest virus scan task.
     *
     * @param request GetVirusScanLatestTaskStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVirusScanLatestTaskStatisticResponse
     */
    public GetVirusScanLatestTaskStatisticResponse getVirusScanLatestTaskStatisticWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVirusScanLatestTaskStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetVirusScanLatestTaskStatisticResponse());
    }

    /**
     * @summary Queries the information about the latest virus scan task.
     *
     * @return GetVirusScanLatestTaskStatisticResponse
     */
    public GetVirusScanLatestTaskStatisticResponse getVirusScanLatestTaskStatistic() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVirusScanLatestTaskStatisticWithOptions(runtime);
    }

    /**
     * @summary Queries the statistics on vulnerabilities in asset groups.
     *
     * @param request GetVulStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVulStatisticsResponse
     */
    public GetVulStatisticsResponse getVulStatisticsWithOptions(GetVulStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupIdList)) {
            query.put("GroupIdList", request.groupIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeList)) {
            query.put("TypeList", request.typeList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVulStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetVulStatisticsResponse());
    }

    /**
     * @summary Queries the statistics on vulnerabilities in asset groups.
     *
     * @param request GetVulStatisticsRequest
     * @return GetVulStatisticsResponse
     */
    public GetVulStatisticsResponse getVulStatistics(GetVulStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVulStatisticsWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about a vulnerability whitelist.
     *
     * @param request GetVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVulWhitelistResponse
     */
    public GetVulWhitelistResponse getVulWhitelistWithOptions(GetVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vulWhitelistId)) {
            query.put("VulWhitelistId", request.vulWhitelistId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new GetVulWhitelistResponse());
    }

    /**
     * @summary Queries information about a vulnerability whitelist.
     *
     * @param request GetVulWhitelistRequest
     * @return GetVulWhitelistResponse
     */
    public GetVulWhitelistResponse getVulWhitelist(GetVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVulWhitelistWithOptions(request, runtime);
    }

    /**
     * @summary Handles alert events.
     *
     * @param request HandleSecurityEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return HandleSecurityEventsResponse
     */
    public HandleSecurityEventsResponse handleSecurityEventsWithOptions(HandleSecurityEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.markBatch)) {
            query.put("MarkBatch", request.markBatch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.markMissParam)) {
            query.put("MarkMissParam", request.markMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationParams)) {
            query.put("OperationParams", request.operationParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "HandleSecurityEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new HandleSecurityEventsResponse());
    }

    /**
     * @summary Handles alert events.
     *
     * @param request HandleSecurityEventsRequest
     * @return HandleSecurityEventsResponse
     */
    public HandleSecurityEventsResponse handleSecurityEvents(HandleSecurityEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.handleSecurityEventsWithOptions(request, runtime);
    }

    /**
     * @summary Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
     *
     * @param request HandleSimilarSecurityEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return HandleSimilarSecurityEventsResponse
     */
    public HandleSimilarSecurityEventsResponse handleSimilarSecurityEventsWithOptions(HandleSimilarSecurityEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.markMissParam)) {
            query.put("MarkMissParam", request.markMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationParams)) {
            query.put("OperationParams", request.operationParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "HandleSimilarSecurityEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new HandleSimilarSecurityEventsResponse());
    }

    /**
     * @summary Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
     *
     * @param request HandleSimilarSecurityEventsRequest
     * @return HandleSimilarSecurityEventsResponse
     */
    public HandleSimilarSecurityEventsResponse handleSimilarSecurityEvents(HandleSimilarSecurityEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.handleSimilarSecurityEventsWithOptions(request, runtime);
    }

    /**
     * @summary Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
     *
     * @param request IgnoreCheckItemsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return IgnoreCheckItemsResponse
     */
    public IgnoreCheckItemsResponse ignoreCheckItemsWithOptions(IgnoreCheckItemsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkAndRiskTypeList)) {
            query.put("CheckAndRiskTypeList", request.checkAndRiskTypeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "IgnoreCheckItems"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new IgnoreCheckItemsResponse());
    }

    /**
     * @summary Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
     *
     * @param request IgnoreCheckItemsRequest
     * @return IgnoreCheckItemsResponse
     */
    public IgnoreCheckItemsResponse ignoreCheckItems(IgnoreCheckItemsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.ignoreCheckItemsWithOptions(request, runtime);
    }

    /**
     * @summary Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
     *
     * @param request IgnoreHcCheckWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return IgnoreHcCheckWarningsResponse
     */
    public IgnoreHcCheckWarningsResponse ignoreHcCheckWarningsWithOptions(IgnoreHcCheckWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkWarningIds)) {
            query.put("CheckWarningIds", request.checkWarningIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "IgnoreHcCheckWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new IgnoreHcCheckWarningsResponse());
    }

    /**
     * @summary Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
     *
     * @param request IgnoreHcCheckWarningsRequest
     * @return IgnoreHcCheckWarningsResponse
     */
    public IgnoreHcCheckWarningsResponse ignoreHcCheckWarnings(IgnoreHcCheckWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.ignoreHcCheckWarningsWithOptions(request, runtime);
    }

    /**
     * @summary The UUID of the server on which you want to install the anti-ransomware agent. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
     * >  You must specify at least one of the UuidList and Uuid parameters.
     *
     * @param request InstallBackupClientRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallBackupClientResponse
     */
    public InstallBackupClientResponse installBackupClientWithOptions(InstallBackupClientRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallBackupClient"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InstallBackupClientResponse());
    }

    /**
     * @summary The UUID of the server on which you want to install the anti-ransomware agent. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
     * >  You must specify at least one of the UuidList and Uuid parameters.
     *
     * @param request InstallBackupClientRequest
     * @return InstallBackupClientResponse
     */
    public InstallBackupClientResponse installBackupClient(InstallBackupClientRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installBackupClientWithOptions(request, runtime);
    }

    /**
     * @summary Installs the CloudMonitor agent on specified servers.
     *
     * @description > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
     *
     * @param request InstallCloudMonitorRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallCloudMonitorResponse
     */
    public InstallCloudMonitorResponse installCloudMonitorWithOptions(InstallCloudMonitorRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.agentAccessKey)) {
            query.put("AgentAccessKey", request.agentAccessKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.agentSecretKey)) {
            query.put("AgentSecretKey", request.agentSecretKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.argusVersion)) {
            query.put("ArgusVersion", request.argusVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallCloudMonitor"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InstallCloudMonitorResponse());
    }

    /**
     * @summary Installs the CloudMonitor agent on specified servers.
     *
     * @description > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
     *
     * @param request InstallCloudMonitorRequest
     * @return InstallCloudMonitorResponse
     */
    public InstallCloudMonitorResponse installCloudMonitor(InstallCloudMonitorRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installCloudMonitorWithOptions(request, runtime);
    }

    /**
     * @summary Installs the Security Center agent on a proxy server in a hybrid cloud.
     *
     * @param request InstallHybridProxyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallHybridProxyResponse
     */
    public InstallHybridProxyResponse installHybridProxyWithOptions(InstallHybridProxyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.installCode)) {
            query.put("InstallCode", request.installCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.yundunUuids)) {
            query.put("YundunUuids", request.yundunUuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallHybridProxy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InstallHybridProxyResponse());
    }

    /**
     * @summary Installs the Security Center agent on a proxy server in a hybrid cloud.
     *
     * @param request InstallHybridProxyRequest
     * @return InstallHybridProxyResponse
     */
    public InstallHybridProxyResponse installHybridProxy(InstallHybridProxyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installHybridProxyWithOptions(request, runtime);
    }

    /**
     * @summary Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
     *
     * @param request InstallPmAgentRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallPmAgentResponse
     */
    public InstallPmAgentResponse installPmAgentWithOptions(InstallPmAgentRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallPmAgent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InstallPmAgentResponse());
    }

    /**
     * @summary Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
     *
     * @param request InstallPmAgentRequest
     * @return InstallPmAgentResponse
     */
    public InstallPmAgentResponse installPmAgent(InstallPmAgentRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installPmAgentWithOptions(request, runtime);
    }

    /**
     * @summary Installs the Runtime Application Self-Protection (RASP) agent on Elastic Compute Service (ECS) instances to enable automatic application protection.
     *
     * @param request InstallRaspAttachRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallRaspAttachResponse
     */
    public InstallRaspAttachResponse installRaspAttachWithOptions(InstallRaspAttachRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.applicationId)) {
            query.put("ApplicationId", request.applicationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ecsUUIDList)) {
            query.put("EcsUUIDList", request.ecsUUIDList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallRaspAttach"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InstallRaspAttachResponse());
    }

    /**
     * @summary Installs the Runtime Application Self-Protection (RASP) agent on Elastic Compute Service (ECS) instances to enable automatic application protection.
     *
     * @param request InstallRaspAttachRequest
     * @return InstallRaspAttachResponse
     */
    public InstallRaspAttachResponse installRaspAttach(InstallRaspAttachRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installRaspAttachWithOptions(request, runtime);
    }

    /**
     * @summary Installs the anti-ransomware agent for databases.
     *
     * @param request InstallUniBackupAgentRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallUniBackupAgentResponse
     */
    public InstallUniBackupAgentResponse installUniBackupAgentWithOptions(InstallUniBackupAgentRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallUniBackupAgent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new InstallUniBackupAgentResponse());
    }

    /**
     * @summary Installs the anti-ransomware agent for databases.
     *
     * @param request InstallUniBackupAgentRequest
     * @return InstallUniBackupAgentResponse
     */
    public InstallUniBackupAgentResponse installUniBackupAgent(InstallUniBackupAgentRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installUniBackupAgentWithOptions(request, runtime);
    }

    /**
     * @summary Adds processes to the process whitelist of web tamper proofing.
     *
     * @param request JoinWebLockProcessWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return JoinWebLockProcessWhiteListResponse
     */
    public JoinWebLockProcessWhiteListResponse joinWebLockProcessWhiteListWithOptions(JoinWebLockProcessWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.processPaths)) {
            query.put("ProcessPaths", request.processPaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "JoinWebLockProcessWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new JoinWebLockProcessWhiteListResponse());
    }

    /**
     * @summary Adds processes to the process whitelist of web tamper proofing.
     *
     * @param request JoinWebLockProcessWhiteListRequest
     * @return JoinWebLockProcessWhiteListResponse
     */
    public JoinWebLockProcessWhiteListResponse joinWebLockProcessWhiteList(JoinWebLockProcessWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.joinWebLockProcessWhiteListWithOptions(request, runtime);
    }

    /**
     * @summary Queries defense rules against container escapes.
     *
     * @param request ListAegisContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAegisContainerPluginRuleResponse
     */
    public ListAegisContainerPluginRuleResponse listAegisContainerPluginRuleWithOptions(ListAegisContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAegisContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAegisContainerPluginRuleResponse());
    }

    /**
     * @summary Queries defense rules against container escapes.
     *
     * @param request ListAegisContainerPluginRuleRequest
     * @return ListAegisContainerPluginRuleResponse
     */
    public ListAegisContainerPluginRuleResponse listAegisContainerPluginRule(ListAegisContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAegisContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * @summary Queries malicious files that are detected by agentless detection tasks.
     *
     * @param request ListAgentlessMaliciousFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessMaliciousFilesResponse
     */
    public ListAgentlessMaliciousFilesResponse listAgentlessMaliciousFilesWithOptions(ListAgentlessMaliciousFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzyMaliciousName)) {
            query.put("FuzzyMaliciousName", request.fuzzyMaliciousName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousMd5)) {
            query.put("MaliciousMd5", request.maliciousMd5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousType)) {
            query.put("MaliciousType", request.maliciousType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessMaliciousFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessMaliciousFilesResponse());
    }

    /**
     * @summary Queries malicious files that are detected by agentless detection tasks.
     *
     * @param request ListAgentlessMaliciousFilesRequest
     * @return ListAgentlessMaliciousFilesResponse
     */
    public ListAgentlessMaliciousFilesResponse listAgentlessMaliciousFiles(ListAgentlessMaliciousFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessMaliciousFilesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the regions that are supported by the agentless detection feature.
     *
     * @param request ListAgentlessRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessRegionResponse
     */
    public ListAgentlessRegionResponse listAgentlessRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessRegionResponse());
    }

    /**
     * @summary Queries the regions that are supported by the agentless detection feature.
     *
     * @return ListAgentlessRegionResponse
     */
    public ListAgentlessRegionResponse listAgentlessRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessRegionWithOptions(runtime);
    }

    /**
     * @summary Obtains the risks associated with an agentless detection event.
     *
     * @param request ListAgentlessRelateMaliciousRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessRelateMaliciousResponse
     */
    public ListAgentlessRelateMaliciousResponse listAgentlessRelateMaliciousWithOptions(ListAgentlessRelateMaliciousRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessRelateMalicious"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessRelateMaliciousResponse());
    }

    /**
     * @summary Obtains the risks associated with an agentless detection event.
     *
     * @param request ListAgentlessRelateMaliciousRequest
     * @return ListAgentlessRelateMaliciousResponse
     */
    public ListAgentlessRelateMaliciousResponse listAgentlessRelateMalicious(ListAgentlessRelateMaliciousRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessRelateMaliciousWithOptions(request, runtime);
    }

    /**
     * @summary Queries at-risk hosts that are detected by the agentless detection feature.
     *
     * @param request ListAgentlessRiskUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessRiskUuidResponse
     */
    public ListAgentlessRiskUuidResponse listAgentlessRiskUuidWithOptions(ListAgentlessRiskUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.risk)) {
            query.put("Risk", request.risk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessRiskUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessRiskUuidResponse());
    }

    /**
     * @summary Queries at-risk hosts that are detected by the agentless detection feature.
     *
     * @param request ListAgentlessRiskUuidRequest
     * @return ListAgentlessRiskUuidResponse
     */
    public ListAgentlessRiskUuidResponse listAgentlessRiskUuid(ListAgentlessRiskUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessRiskUuidWithOptions(request, runtime);
    }

    /**
     * @summary Queries agentless detection tasks.
     *
     * @param request ListAgentlessTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessTaskResponse
     */
    public ListAgentlessTaskResponse listAgentlessTaskWithOptions(ListAgentlessTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTask)) {
            query.put("RootTask", request.rootTask);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTaskId)) {
            query.put("RootTaskId", request.rootTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessTaskResponse());
    }

    /**
     * @summary Queries agentless detection tasks.
     *
     * @param request ListAgentlessTaskRequest
     * @return ListAgentlessTaskResponse
     */
    public ListAgentlessTaskResponse listAgentlessTask(ListAgentlessTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries the configurations for cleaning offline hosts whose provider cannot be identified.
     *
     * @param request ListAssetCleanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetCleanConfigResponse
     */
    public ListAssetCleanConfigResponse listAssetCleanConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetCleanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetCleanConfigResponse());
    }

    /**
     * @summary Queries the configurations for cleaning offline hosts whose provider cannot be identified.
     *
     * @return ListAssetCleanConfigResponse
     */
    public ListAssetCleanConfigResponse listAssetCleanConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetCleanConfigWithOptions(runtime);
    }

    /**
     * @summary Queries the configurations of asset synchronization.
     *
     * @param request ListAssetRefreshTaskConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetRefreshTaskConfigResponse
     */
    public ListAssetRefreshTaskConfigResponse listAssetRefreshTaskConfigWithOptions(ListAssetRefreshTaskConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.refreshConfigType)) {
            query.put("RefreshConfigType", request.refreshConfigType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetId)) {
            query.put("TargetId", request.targetId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetRefreshTaskConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetRefreshTaskConfigResponse());
    }

    /**
     * @summary Queries the configurations of asset synchronization.
     *
     * @param request ListAssetRefreshTaskConfigRequest
     * @return ListAssetRefreshTaskConfigResponse
     */
    public ListAssetRefreshTaskConfigResponse listAssetRefreshTaskConfig(ListAssetRefreshTaskConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetRefreshTaskConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the selected assets.
     *
     * @param request ListAssetSelectionSelectedTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetSelectionSelectedTargetResponse
     */
    public ListAssetSelectionSelectedTargetResponse listAssetSelectionSelectedTargetWithOptions(ListAssetSelectionSelectedTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetList)) {
            query.put("TargetList", request.targetList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetSelectionSelectedTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetSelectionSelectedTargetResponse());
    }

    /**
     * @summary Queries the selected assets.
     *
     * @param request ListAssetSelectionSelectedTargetRequest
     * @return ListAssetSelectionSelectedTargetResponse
     */
    public ListAssetSelectionSelectedTargetResponse listAssetSelectionSelectedTarget(ListAssetSelectionSelectedTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetSelectionSelectedTargetWithOptions(request, runtime);
    }

    /**
     * @summary Queries the required asset.
     *
     * @param request ListAssetSelectionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetSelectionTargetResponse
     */
    public ListAssetSelectionTargetResponse listAssetSelectionTargetWithOptions(ListAssetSelectionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetSelectionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetSelectionTargetResponse());
    }

    /**
     * @summary Queries the required asset.
     *
     * @param request ListAssetSelectionTargetRequest
     * @return ListAssetSelectionTargetResponse
     */
    public ListAssetSelectionTargetResponse listAssetSelectionTarget(ListAssetSelectionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetSelectionTargetWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about available honeypot templates.
     *
     * @param request ListAvailableHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAvailableHoneypotResponse
     */
    public ListAvailableHoneypotResponse listAvailableHoneypotWithOptions(ListAvailableHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAvailableHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListAvailableHoneypotResponse());
    }

    /**
     * @summary Queries the information about available honeypot templates.
     *
     * @param request ListAvailableHoneypotRequest
     * @return ListAvailableHoneypotResponse
     */
    public ListAvailableHoneypotResponse listAvailableHoneypot(ListAvailableHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAvailableHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Queries backup records.
     *
     * @param request ListBackupRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListBackupRecordResponse
     */
    public ListBackupRecordResponse listBackupRecordWithOptions(ListBackupRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.backupEndTime)) {
            query.put("BackupEndTime", request.backupEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.backupStartTime)) {
            query.put("BackupStartTime", request.backupStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListBackupRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListBackupRecordResponse());
    }

    /**
     * @summary Queries backup records.
     *
     * @param request ListBackupRecordRequest
     * @return ListBackupRecordResponse
     */
    public ListBackupRecordResponse listBackupRecord(ListBackupRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listBackupRecordWithOptions(request, runtime);
    }

    /**
     * @summary Queries the instances that failed a specified check item of configuration assessment.
     *
     * @param request ListCheckInstanceResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckInstanceResultResponse
     */
    public ListCheckInstanceResultResponse listCheckInstanceResultWithOptions(ListCheckInstanceResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdKey)) {
            query.put("InstanceIdKey", request.instanceIdKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceNameKey)) {
            query.put("InstanceNameKey", request.instanceNameKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIdKey)) {
            query.put("RegionIdKey", request.regionIdKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortTypes)) {
            query.put("SortTypes", request.sortTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statuses)) {
            query.put("Statuses", request.statuses);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckInstanceResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckInstanceResultResponse());
    }

    /**
     * @summary Queries the instances that failed a specified check item of configuration assessment.
     *
     * @param request ListCheckInstanceResultRequest
     * @return ListCheckInstanceResultResponse
     */
    public ListCheckInstanceResultResponse listCheckInstanceResult(ListCheckInstanceResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckInstanceResultWithOptions(request, runtime);
    }

    /**
     * @summary Queries the check items that can be customized.
     *
     * @param request ListCheckItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckItemResponse
     */
    public ListCheckItemResponse listCheckItemWithOptions(ListCheckItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckItemResponse());
    }

    /**
     * @summary Queries the check items that can be customized.
     *
     * @param request ListCheckItemRequest
     * @return ListCheckItemResponse
     */
    public ListCheckItemResponse listCheckItem(ListCheckItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckItemWithOptions(request, runtime);
    }

    /**
     * @summary Queries the servers that are affected by baseline risks.
     *
     * @param request ListCheckItemWarningMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckItemWarningMachineResponse
     */
    public ListCheckItemWarningMachineResponse listCheckItemWarningMachineWithOptions(ListCheckItemWarningMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskType)) {
            query.put("RiskType", request.riskType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckItemWarningMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckItemWarningMachineResponse());
    }

    /**
     * @summary Queries the servers that are affected by baseline risks.
     *
     * @param request ListCheckItemWarningMachineRequest
     * @return ListCheckItemWarningMachineResponse
     */
    public ListCheckItemWarningMachineResponse listCheckItemWarningMachine(ListCheckItemWarningMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckItemWarningMachineWithOptions(request, runtime);
    }

    /**
     * @summary Queries the risk statistics of check items by page.
     *
     * @param request ListCheckItemWarningSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckItemWarningSummaryResponse
     */
    public ListCheckItemWarningSummaryResponse listCheckItemWarningSummaryWithOptions(ListCheckItemWarningSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkItemFuzzy)) {
            query.put("CheckItemFuzzy", request.checkItemFuzzy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkLevel)) {
            query.put("CheckLevel", request.checkLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkType)) {
            query.put("CheckType", request.checkType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkWarningStatus)) {
            query.put("CheckWarningStatus", request.checkWarningStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskType)) {
            query.put("RiskType", request.riskType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckItemWarningSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckItemWarningSummaryResponse());
    }

    /**
     * @summary Queries the risk statistics of check items by page.
     *
     * @param request ListCheckItemWarningSummaryRequest
     * @return ListCheckItemWarningSummaryResponse
     */
    public ListCheckItemWarningSummaryResponse listCheckItemWarningSummary(ListCheckItemWarningSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckItemWarningSummaryWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of the risk items that are detected in the configuration checks on cloud services.
     *
     * @param request ListCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckResultResponse
     */
    public ListCheckResultResponse listCheckResultWithOptions(ListCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkKey)) {
            query.put("CheckKey", request.checkKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.customParam)) {
            query.put("CustomParam", request.customParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceTypes)) {
            query.put("InstanceTypes", request.instanceTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requirementIds)) {
            query.put("RequirementIds", request.requirementIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevels)) {
            query.put("RiskLevels", request.riskLevels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortTypes)) {
            query.put("SortTypes", request.sortTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.standardIds)) {
            query.put("StandardIds", request.standardIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statuses)) {
            query.put("Statuses", request.statuses);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckResultResponse());
    }

    /**
     * @summary Queries the details of the risk items that are detected in the configuration checks on cloud services.
     *
     * @param request ListCheckResultRequest
     * @return ListCheckResultResponse
     */
    public ListCheckResultResponse listCheckResult(ListCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckResultWithOptions(request, runtime);
    }

    /**
     * @summary Queries the standards of configuration checks.
     *
     * @param request ListCheckStandardRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckStandardResponse
     */
    public ListCheckStandardResponse listCheckStandardWithOptions(ListCheckStandardRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceSubTypes)) {
            query.put("InstanceSubTypes", request.instanceSubTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceTypes)) {
            query.put("InstanceTypes", request.instanceTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckStandard"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckStandardResponse());
    }

    /**
     * @summary Queries the standards of configuration checks.
     *
     * @param request ListCheckStandardRequest
     * @return ListCheckStandardResponse
     */
    public ListCheckStandardResponse listCheckStandard(ListCheckStandardRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckStandardWithOptions(request, runtime);
    }

    /**
     * @summary Queries the types of check items that meet the specified conditions based on the ID of a baseline.
     *
     * @param request ListCheckTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckTypesResponse
     */
    public ListCheckTypesResponse listCheckTypesWithOptions(ListCheckTypesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.showChecks)) {
            query.put("ShowChecks", request.showChecks);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckTypesResponse());
    }

    /**
     * @summary Queries the types of check items that meet the specified conditions based on the ID of a baseline.
     *
     * @param request ListCheckTypesRequest
     * @return ListCheckTypesResponse
     */
    public ListCheckTypesResponse listCheckTypes(ListCheckTypesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckTypesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
     *
     * @param request ListClientAlertModeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClientAlertModeResponse
     */
    public ListClientAlertModeResponse listClientAlertModeWithOptions(ListClientAlertModeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClientAlertMode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListClientAlertModeResponse());
    }

    /**
     * @summary Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
     *
     * @param request ListClientAlertModeRequest
     * @return ListClientAlertModeResponse
     */
    public ListClientAlertModeResponse listClientAlertMode(ListClientAlertModeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClientAlertModeWithOptions(request, runtime);
    }

    /**
     * @summary 获取客户端支持的所有用户自定义类型
     *
     * @param request ListClientUserDefineRuleTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClientUserDefineRuleTypesResponse
     */
    public ListClientUserDefineRuleTypesResponse listClientUserDefineRuleTypesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClientUserDefineRuleTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListClientUserDefineRuleTypesResponse());
    }

    /**
     * @summary 获取客户端支持的所有用户自定义类型
     *
     * @return ListClientUserDefineRuleTypesResponse
     */
    public ListClientUserDefineRuleTypesResponse listClientUserDefineRuleTypes() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClientUserDefineRuleTypesWithOptions(runtime);
    }

    /**
     * @summary Queries custom defense rules.
     *
     * @param request ListClientUserDefineRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClientUserDefineRulesResponse
     */
    public ListClientUserDefineRulesResponse listClientUserDefineRulesWithOptions(ListClientUserDefineRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClientUserDefineRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListClientUserDefineRulesResponse());
    }

    /**
     * @summary Queries custom defense rules.
     *
     * @param request ListClientUserDefineRulesRequest
     * @return ListClientUserDefineRulesResponse
     */
    public ListClientUserDefineRulesResponse listClientUserDefineRules(ListClientUserDefineRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClientUserDefineRulesWithOptions(request, runtime);
    }

    /**
     * @summary Queries cloud service assets.
     *
     * @param request ListCloudAssetInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCloudAssetInstancesResponse
     */
    public ListCloudAssetInstancesResponse listCloudAssetInstancesWithOptions(ListCloudAssetInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetTypes)) {
            query.put("CloudAssetTypes", request.cloudAssetTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCloudAssetInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCloudAssetInstancesResponse());
    }

    /**
     * @summary Queries cloud service assets.
     *
     * @param request ListCloudAssetInstancesRequest
     * @return ListCloudAssetInstancesResponse
     */
    public ListCloudAssetInstancesResponse listCloudAssetInstances(ListCloudAssetInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCloudAssetInstancesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the synchronization region configurations of other clouds on a site.
     *
     * @param request ListCloudVendorRegionsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCloudVendorRegionsResponse
     */
    public ListCloudVendorRegionsResponse listCloudVendorRegionsWithOptions(ListCloudVendorRegionsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCloudVendorRegions"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCloudVendorRegionsResponse());
    }

    /**
     * @summary Queries the synchronization region configurations of other clouds on a site.
     *
     * @param request ListCloudVendorRegionsRequest
     * @return ListCloudVendorRegionsResponse
     */
    public ListCloudVendorRegionsResponse listCloudVendorRegions(ListCloudVendorRegionsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCloudVendorRegionsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the protection status of the container firewall.
     *
     * @param request ListClusterCnnfStatusDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClusterCnnfStatusDetailResponse
     */
    public ListClusterCnnfStatusDetailResponse listClusterCnnfStatusDetailWithOptions(ListClusterCnnfStatusDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClusterCnnfStatusDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListClusterCnnfStatusDetailResponse());
    }

    /**
     * @summary Queries the protection status of the container firewall.
     *
     * @param request ListClusterCnnfStatusDetailRequest
     * @return ListClusterCnnfStatusDetailResponse
     */
    public ListClusterCnnfStatusDetailResponse listClusterCnnfStatusDetail(ListClusterCnnfStatusDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClusterCnnfStatusDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries the defense rules that are created for a cluster.
     *
     * @param request ListClusterInterceptionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClusterInterceptionConfigResponse
     */
    public ListClusterInterceptionConfigResponse listClusterInterceptionConfigWithOptions(ListClusterInterceptionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterCNNFStatus)) {
            query.put("ClusterCNNFStatus", request.clusterCNNFStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClusterInterceptionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListClusterInterceptionConfigResponse());
    }

    /**
     * @summary Queries the defense rules that are created for a cluster.
     *
     * @param request ListClusterInterceptionConfigRequest
     * @return ListClusterInterceptionConfigResponse
     */
    public ListClusterInterceptionConfigResponse listClusterInterceptionConfig(ListClusterInterceptionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClusterInterceptionConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the status of plug-ins on clusters.
     *
     * @param request ListClusterPluginInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClusterPluginInfoResponse
     */
    public ListClusterPluginInfoResponse listClusterPluginInfoWithOptions(ListClusterPluginInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pluginName)) {
            query.put("PluginName", request.pluginName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClusterPluginInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListClusterPluginInfoResponse());
    }

    /**
     * @summary Queries the status of plug-ins on clusters.
     *
     * @param request ListClusterPluginInfoRequest
     * @return ListClusterPluginInfoResponse
     */
    public ListClusterPluginInfoResponse listClusterPluginInfo(ListClusterPluginInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClusterPluginInfoWithOptions(request, runtime);
    }

    /**
     * @summary 获取压缩包检测结果。
     *
     * @param request ListCompressFileDetectResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCompressFileDetectResultResponse
     */
    public ListCompressFileDetectResultResponse listCompressFileDetectResultWithOptions(ListCompressFileDetectResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hashKey)) {
            query.put("HashKey", request.hashKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCompressFileDetectResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCompressFileDetectResultResponse());
    }

    /**
     * @summary 获取压缩包检测结果。
     *
     * @param request ListCompressFileDetectResultRequest
     * @return ListCompressFileDetectResultResponse
     */
    public ListCompressFileDetectResultResponse listCompressFileDetectResult(ListCompressFileDetectResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCompressFileDetectResultWithOptions(request, runtime);
    }

    /**
     * @summary Queries a list of rules for non-image program defense.
     *
     * @param request ListContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListContainerDefenseRuleResponse
     */
    public ListContainerDefenseRuleResponse listContainerDefenseRuleWithOptions(ListContainerDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.conditions)) {
            query.put("Conditions", request.conditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isDefaultRule)) {
            query.put("IsDefaultRule", request.isDefaultRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListContainerDefenseRuleResponse());
    }

    /**
     * @summary Queries a list of rules for non-image program defense.
     *
     * @param request ListContainerDefenseRuleRequest
     * @return ListContainerDefenseRuleResponse
     */
    public ListContainerDefenseRuleResponse listContainerDefenseRule(ListContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @summary Queries a list of clusters that are included in a rule for non-image program defense.
     *
     * @param request ListContainerDefenseRuleClustersRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListContainerDefenseRuleClustersResponse
     */
    public ListContainerDefenseRuleClustersResponse listContainerDefenseRuleClustersWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListContainerDefenseRuleClusters"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListContainerDefenseRuleClustersResponse());
    }

    /**
     * @summary Queries a list of clusters that are included in a rule for non-image program defense.
     *
     * @return ListContainerDefenseRuleClustersResponse
     */
    public ListContainerDefenseRuleClustersResponse listContainerDefenseRuleClusters() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listContainerDefenseRuleClustersWithOptions(runtime);
    }

    /**
     * @summary Queries the IDs and names of rules configured for proactive defense for containers.
     *
     * @param request ListCriteriaStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCriteriaStrategyResponse
     */
    public ListCriteriaStrategyResponse listCriteriaStrategyWithOptions(ListCriteriaStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCriteriaStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListCriteriaStrategyResponse());
    }

    /**
     * @summary Queries the IDs and names of rules configured for proactive defense for containers.
     *
     * @param request ListCriteriaStrategyRequest
     * @return ListCriteriaStrategyResponse
     */
    public ListCriteriaStrategyResponse listCriteriaStrategy(ListCriteriaStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCriteriaStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Queries core file monitoring rules that meet the specified filter condition.
     *
     * @param request ListFileProtectEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFileProtectEventResponse
     */
    public ListFileProtectEventResponse listFileProtectEventWithOptions(ListFileProtectEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevels)) {
            query.put("AlertLevels", request.alertLevels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListFileProtectEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListFileProtectEventResponse());
    }

    /**
     * @summary Queries core file monitoring rules that meet the specified filter condition.
     *
     * @param request ListFileProtectEventRequest
     * @return ListFileProtectEventResponse
     */
    public ListFileProtectEventResponse listFileProtectEvent(ListFileProtectEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listFileProtectEventWithOptions(request, runtime);
    }

    /**
     * @summary Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
     *
     * @param request ListFileProtectPluginStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFileProtectPluginStatusResponse
     */
    public ListFileProtectPluginStatusResponse listFileProtectPluginStatusWithOptions(ListFileProtectPluginStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchId)) {
            query.put("SwitchId", request.switchId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListFileProtectPluginStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListFileProtectPluginStatusResponse());
    }

    /**
     * @summary Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
     *
     * @param request ListFileProtectPluginStatusRequest
     * @return ListFileProtectPluginStatusResponse
     */
    public ListFileProtectPluginStatusResponse listFileProtectPluginStatus(ListFileProtectPluginStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listFileProtectPluginStatusWithOptions(request, runtime);
    }

    /**
     * @summary Queries core file monitoring rules.
     *
     * @param request ListFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFileProtectRuleResponse
     */
    public ListFileProtectRuleResponse listFileProtectRuleWithOptions(ListFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListFileProtectRuleResponse());
    }

    /**
     * @summary Queries core file monitoring rules.
     *
     * @param request ListFileProtectRuleRequest
     * @return ListFileProtectRuleResponse
     */
    public ListFileProtectRuleResponse listFileProtectRule(ListFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * @summary Queries the server groups.
     *
     * @param request ListGroupsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListGroupsResponse
     */
    public ListGroupsResponse listGroupsWithOptions(ListGroupsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.useNextToken)) {
            query.put("UseNextToken", request.useNextToken);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListGroups"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListGroupsResponse());
    }

    /**
     * @summary Queries the server groups.
     *
     * @param request ListGroupsRequest
     * @return ListGroupsResponse
     */
    public ListGroupsResponse listGroups(ListGroupsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listGroupsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about honeypots.
     *
     * @param request ListHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotResponse
     */
    public ListHoneypotResponse listHoneypotWithOptions(ListHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotIds)) {
            query.put("HoneypotIds", request.honeypotIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotName)) {
            query.put("HoneypotName", request.honeypotName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotResponse());
    }

    /**
     * @summary Queries the information about honeypots.
     *
     * @param request ListHoneypotRequest
     * @return ListHoneypotResponse
     */
    public ListHoneypotResponse listHoneypot(ListHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about alert events that are generated.
     *
     * @param request ListHoneypotAlarmEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotAlarmEventsResponse
     */
    public ListHoneypotAlarmEventsResponse listHoneypotAlarmEventsWithOptions(ListHoneypotAlarmEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotAlarmEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotAlarmEventsResponse());
    }

    /**
     * @summary Queries the information about alert events that are generated.
     *
     * @param request ListHoneypotAlarmEventsRequest
     * @return ListHoneypotAlarmEventsResponse
     */
    public ListHoneypotAlarmEventsResponse listHoneypotAlarmEvents(ListHoneypotAlarmEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotAlarmEventsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the attacker profile based on the source IP address of the attack.
     *
     * @param request ListHoneypotAttackerPortraitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotAttackerPortraitResponse
     */
    public ListHoneypotAttackerPortraitResponse listHoneypotAttackerPortraitWithOptions(ListHoneypotAttackerPortraitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotAttackerPortrait"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotAttackerPortraitResponse());
    }

    /**
     * @summary Queries the attacker profile based on the source IP address of the attack.
     *
     * @param request ListHoneypotAttackerPortraitRequest
     * @return ListHoneypotAttackerPortraitResponse
     */
    public ListHoneypotAttackerPortraitResponse listHoneypotAttackerPortrait(ListHoneypotAttackerPortraitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotAttackerPortraitWithOptions(request, runtime);
    }

    /**
     * @summary Queries the attack source IP addresses that are used to attack a honeypot.
     *
     * @param request ListHoneypotAttackerSourceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotAttackerSourceResponse
     */
    public ListHoneypotAttackerSourceResponse listHoneypotAttackerSourceWithOptions(ListHoneypotAttackerSourceRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevelList)) {
            query.put("RiskLevelList", request.riskLevelList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotAttackerSource"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotAttackerSourceResponse());
    }

    /**
     * @summary Queries the attack source IP addresses that are used to attack a honeypot.
     *
     * @param request ListHoneypotAttackerSourceRequest
     * @return ListHoneypotAttackerSourceResponse
     */
    public ListHoneypotAttackerSourceResponse listHoneypotAttackerSource(ListHoneypotAttackerSourceRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotAttackerSourceWithOptions(request, runtime);
    }

    /**
     * @summary Queries the details of an intrusion event in a honeypot.
     *
     * @param request ListHoneypotEventFlowsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotEventFlowsResponse
     */
    public ListHoneypotEventFlowsResponse listHoneypotEventFlowsWithOptions(ListHoneypotEventFlowsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotEventFlows"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotEventFlowsResponse());
    }

    /**
     * @summary Queries the details of an intrusion event in a honeypot.
     *
     * @param request ListHoneypotEventFlowsRequest
     * @return ListHoneypotEventFlowsResponse
     */
    public ListHoneypotEventFlowsResponse listHoneypotEventFlows(ListHoneypotEventFlowsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotEventFlowsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the intrusion events detected by honeypots.
     *
     * @param request ListHoneypotEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotEventsResponse
     */
    public ListHoneypotEventsResponse listHoneypotEventsWithOptions(ListHoneypotEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotEventsResponse());
    }

    /**
     * @summary Queries the intrusion events detected by honeypots.
     *
     * @param request ListHoneypotEventsRequest
     * @return ListHoneypotEventsResponse
     */
    public ListHoneypotEventsResponse listHoneypotEvents(ListHoneypotEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotEventsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about management nodes.
     *
     * @param request ListHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotNodeResponse
     */
    public ListHoneypotNodeResponse listHoneypotNodeWithOptions(ListHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotNodeResponse());
    }

    /**
     * @summary Queries the information about management nodes.
     *
     * @param request ListHoneypotNodeRequest
     * @return ListHoneypotNodeResponse
     */
    public ListHoneypotNodeResponse listHoneypotNode(ListHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * @summary Queries honeypot templates.
     *
     * @param request ListHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotPresetResponse
     */
    public ListHoneypotPresetResponse listHoneypotPresetWithOptions(ListHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.presetName)) {
            query.put("PresetName", request.presetName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotPresetResponse());
    }

    /**
     * @summary Queries honeypot templates.
     *
     * @param request ListHoneypotPresetRequest
     * @return ListHoneypotPresetResponse
     */
    public ListHoneypotPresetResponse listHoneypotPreset(ListHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * @summary Queries probes.
     *
     * @param request ListHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotProbeResponse
     */
    public ListHoneypotProbeResponse listHoneypotProbeWithOptions(ListHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.displayName)) {
            query.put("DisplayName", request.displayName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeStatus)) {
            query.put("ProbeStatus", request.probeStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeType)) {
            query.put("ProbeType", request.probeType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotProbeResponse());
    }

    /**
     * @summary Queries probes.
     *
     * @param request ListHoneypotProbeRequest
     * @return ListHoneypotProbeResponse
     */
    public ListHoneypotProbeResponse listHoneypotProbe(ListHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * @summary 查询已安装的探针
     *
     * @param request ListHoneypotProbeUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotProbeUuidResponse
     */
    public ListHoneypotProbeUuidResponse listHoneypotProbeUuidWithOptions(ListHoneypotProbeUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.controlNodeId)) {
            query.put("ControlNodeId", request.controlNodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeType)) {
            query.put("ProbeType", request.probeType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotProbeUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotProbeUuidResponse());
    }

    /**
     * @summary 查询已安装的探针
     *
     * @param request ListHoneypotProbeUuidRequest
     * @return ListHoneypotProbeUuidResponse
     */
    public ListHoneypotProbeUuidResponse listHoneypotProbeUuid(ListHoneypotProbeUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotProbeUuidWithOptions(request, runtime);
    }

    /**
     * @summary List image risk items.
     *
     * @param request ListImageBuildRiskItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListImageBuildRiskItemResponse
     */
    public ListImageBuildRiskItemResponse listImageBuildRiskItemWithOptions(ListImageBuildRiskItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListImageBuildRiskItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListImageBuildRiskItemResponse());
    }

    /**
     * @summary List image risk items.
     *
     * @param request ListImageBuildRiskItemRequest
     * @return ListImageBuildRiskItemResponse
     */
    public ListImageBuildRiskItemResponse listImageBuildRiskItem(ListImageBuildRiskItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listImageBuildRiskItemWithOptions(request, runtime);
    }

    /**
     * @summary The region ID of the image.
     *
     * @param request ListImageRegistryRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListImageRegistryRegionResponse
     */
    public ListImageRegistryRegionResponse listImageRegistryRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListImageRegistryRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListImageRegistryRegionResponse());
    }

    /**
     * @summary The region ID of the image.
     *
     * @return ListImageRegistryRegionResponse
     */
    public ListImageRegistryRegionResponse listImageRegistryRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listImageRegistryRegionWithOptions(runtime);
    }

    /**
     * @summary Queries security information about a container image.
     *
     * @param request ListImageRiskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListImageRiskResponse
     */
    public ListImageRiskResponse listImageRiskWithOptions(ListImageRiskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListImageRisk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListImageRiskResponse());
    }

    /**
     * @summary Queries security information about a container image.
     *
     * @param request ListImageRiskRequest
     * @return ListImageRiskResponse
     */
    public ListImageRiskResponse listImageRisk(ListImageRiskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listImageRiskWithOptions(request, runtime);
    }

    /**
     * @summary Queries the asset types and asset subtypes for configuration assessment.
     *
     * @param request ListInstanceCatalogRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInstanceCatalogResponse
     */
    public ListInstanceCatalogResponse listInstanceCatalogWithOptions(ListInstanceCatalogRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requirementIds)) {
            query.put("RequirementIds", request.requirementIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.standardIds)) {
            query.put("StandardIds", request.standardIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInstanceCatalog"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListInstanceCatalogResponse());
    }

    /**
     * @summary Queries the asset types and asset subtypes for configuration assessment.
     *
     * @param request ListInstanceCatalogRequest
     * @return ListInstanceCatalogResponse
     */
    public ListInstanceCatalogResponse listInstanceCatalog(ListInstanceCatalogRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInstanceCatalogWithOptions(request, runtime);
    }

    /**
     * @summary Queries the risk levels of instances.
     *
     * @param request ListInstanceRiskLevelsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInstanceRiskLevelsResponse
     */
    public ListInstanceRiskLevelsResponse listInstanceRiskLevelsWithOptions(ListInstanceRiskLevelsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceList)) {
            query.put("InstanceList", request.instanceList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInstanceRiskLevels"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListInstanceRiskLevelsResponse());
    }

    /**
     * @summary Queries the risk levels of instances.
     *
     * @param request ListInstanceRiskLevelsRequest
     * @return ListInstanceRiskLevelsResponse
     */
    public ListInstanceRiskLevelsResponse listInstanceRiskLevels(ListInstanceRiskLevelsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInstanceRiskLevelsWithOptions(request, runtime);
    }

    /**
     * @summary Queries the statistics about risks in instances.
     *
     * @param request ListInstanceRiskNumRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInstanceRiskNumResponse
     */
    public ListInstanceRiskNumResponse listInstanceRiskNumWithOptions(ListInstanceRiskNumRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceList)) {
            query.put("InstanceList", request.instanceList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInstanceRiskNum"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListInstanceRiskNumResponse());
    }

    /**
     * @summary Queries the statistics about risks in instances.
     *
     * @param request ListInstanceRiskNumRequest
     * @return ListInstanceRiskNumResponse
     */
    public ListInstanceRiskNumResponse listInstanceRiskNum(ListInstanceRiskNumRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInstanceRiskNumWithOptions(request, runtime);
    }

    /**
     * @summary Queries the alerts generated by defense rules.
     *
     * @param request ListInterceptionHistoryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInterceptionHistoryResponse
     */
    public ListInterceptionHistoryResponse listInterceptionHistoryWithOptions(ListInterceptionHistoryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.historyName)) {
            query.put("HistoryName", request.historyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interceptionTypes)) {
            query.put("InterceptionTypes", request.interceptionTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInterceptionHistory"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListInterceptionHistoryResponse());
    }

    /**
     * @summary Queries the alerts generated by defense rules.
     *
     * @param request ListInterceptionHistoryRequest
     * @return ListInterceptionHistoryResponse
     */
    public ListInterceptionHistoryResponse listInterceptionHistory(ListInterceptionHistoryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInterceptionHistoryWithOptions(request, runtime);
    }

    /**
     * @summary Queries defense rules that are configured for the container firewall feature.
     *
     * @param request ListInterceptionRulePageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInterceptionRulePageResponse
     */
    public ListInterceptionRulePageResponse listInterceptionRulePageWithOptions(ListInterceptionRulePageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInterceptionRulePage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListInterceptionRulePageResponse());
    }

    /**
     * @summary Queries defense rules that are configured for the container firewall feature.
     *
     * @param request ListInterceptionRulePageRequest
     * @return ListInterceptionRulePageResponse
     */
    public ListInterceptionRulePageResponse listInterceptionRulePage(ListInterceptionRulePageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInterceptionRulePageWithOptions(request, runtime);
    }

    /**
     * @summary Queries the network objects that are protected by the container firewall feature.
     *
     * @param request ListInterceptionTargetPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInterceptionTargetPageResponse
     */
    public ListInterceptionTargetPageResponse listInterceptionTargetPageWithOptions(ListInterceptionTargetPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageList)) {
            query.put("ImageList", request.imageList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInterceptionTargetPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListInterceptionTargetPageResponse());
    }

    /**
     * @summary Queries the network objects that are protected by the container firewall feature.
     *
     * @param request ListInterceptionTargetPageRequest
     * @return ListInterceptionTargetPageResponse
     */
    public ListInterceptionTargetPageResponse listInterceptionTargetPage(ListInterceptionTargetPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInterceptionTargetPageWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about Kubernetes clusters that are added to Security Center.
     *
     * @description You can use this operation to query the access information about Kubernetes clusters.
     *
     * @param request ListK8sAccessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListK8sAccessInfoResponse
     */
    public ListK8sAccessInfoResponse listK8sAccessInfoWithOptions(ListK8sAccessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayApiName)) {
            query.put("AliyunYundunGatewayApiName", request.aliyunYundunGatewayApiName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayPopName)) {
            query.put("AliyunYundunGatewayPopName", request.aliyunYundunGatewayPopName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayProjectName)) {
            query.put("AliyunYundunGatewayProjectName", request.aliyunYundunGatewayProjectName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListK8sAccessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListK8sAccessInfoResponse());
    }

    /**
     * @summary Queries the information about Kubernetes clusters that are added to Security Center.
     *
     * @description You can use this operation to query the access information about Kubernetes clusters.
     *
     * @param request ListK8sAccessInfoRequest
     * @return ListK8sAccessInfoResponse
     */
    public ListK8sAccessInfoResponse listK8sAccessInfo(ListK8sAccessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listK8sAccessInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request ListMaliciousFileWhitelistConfigsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListMaliciousFileWhitelistConfigsResponse
     */
    public ListMaliciousFileWhitelistConfigsResponse listMaliciousFileWhitelistConfigsWithOptions(ListMaliciousFileWhitelistConfigsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListMaliciousFileWhitelistConfigs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListMaliciousFileWhitelistConfigsResponse());
    }

    /**
     * @summary Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request ListMaliciousFileWhitelistConfigsRequest
     * @return ListMaliciousFileWhitelistConfigsResponse
     */
    public ListMaliciousFileWhitelistConfigsResponse listMaliciousFileWhitelistConfigs(ListMaliciousFileWhitelistConfigsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listMaliciousFileWhitelistConfigsWithOptions(request, runtime);
    }

    /**
     * @summary Queries alerts that are generated for malicious files.
     *
     * @param request ListObjectScanEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListObjectScanEventResponse
     */
    public ListObjectScanEventResponse listObjectScanEventWithOptions(ListObjectScanEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.md5)) {
            query.put("Md5", request.md5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ossKey)) {
            query.put("OssKey", request.ossKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentEventId)) {
            query.put("ParentEventId", request.parentEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListObjectScanEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListObjectScanEventResponse());
    }

    /**
     * @summary Queries alerts that are generated for malicious files.
     *
     * @param request ListObjectScanEventRequest
     * @return ListObjectScanEventResponse
     */
    public ListObjectScanEventResponse listObjectScanEvent(ListObjectScanEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listObjectScanEventWithOptions(request, runtime);
    }

    /**
     * @summary Queries at-risk image blocking rules.
     *
     * @param request ListOpaClusterStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOpaClusterStrategyNewResponse
     */
    public ListOpaClusterStrategyNewResponse listOpaClusterStrategyNewWithOptions(ListOpaClusterStrategyNewRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOpaClusterStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListOpaClusterStrategyNewResponse());
    }

    /**
     * @summary Queries at-risk image blocking rules.
     *
     * @param request ListOpaClusterStrategyNewRequest
     * @return ListOpaClusterStrategyNewResponse
     */
    public ListOpaClusterStrategyNewResponse listOpaClusterStrategyNew(ListOpaClusterStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOpaClusterStrategyNewWithOptions(request, runtime);
    }

    /**
     * @summary Queries Object Storage Service (OSS) buckets.
     *
     * @param request ListOssBucketRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOssBucketResponse
     */
    public ListOssBucketResponse listOssBucketWithOptions(ListOssBucketRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOssBucket"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListOssBucketResponse());
    }

    /**
     * @summary Queries Object Storage Service (OSS) buckets.
     *
     * @param request ListOssBucketRequest
     * @return ListOssBucketResponse
     */
    public ListOssBucketResponse listOssBucket(ListOssBucketRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOssBucketWithOptions(request, runtime);
    }

    /**
     * @summary Queries the risk information of an Object Storage Service (OSS) bucket.
     *
     * @param request ListOssBucketScanInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOssBucketScanInfoResponse
     */
    public ListOssBucketScanInfoResponse listOssBucketScanInfoWithOptions(ListOssBucketScanInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzBucketName)) {
            query.put("FuzzBucketName", request.fuzzBucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hasRisk)) {
            query.put("HasRisk", request.hasRisk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOssBucketScanInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListOssBucketScanInfoResponse());
    }

    /**
     * @summary Queries the risk information of an Object Storage Service (OSS) bucket.
     *
     * @param request ListOssBucketScanInfoRequest
     * @return ListOssBucketScanInfoResponse
     */
    public ListOssBucketScanInfoResponse listOssBucketScanInfo(ListOssBucketScanInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOssBucketScanInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries oss scan policies.
     *
     * @param request ListOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOssScanConfigResponse
     */
    public ListOssScanConfigResponse listOssScanConfigWithOptions(ListOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListOssScanConfigResponse());
    }

    /**
     * @summary Queries oss scan policies.
     *
     * @param request ListOssScanConfigRequest
     * @return ListOssScanConfigResponse
     */
    public ListOssScanConfigResponse listOssScanConfig(ListOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOssScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about plug-ins on a server.
     *
     * @param tmpReq ListPluginForUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPluginForUuidResponse
     */
    public ListPluginForUuidResponse listPluginForUuidWithOptions(ListPluginForUuidRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ListPluginForUuidShrinkRequest request = new ListPluginForUuidShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.types)) {
            request.typesShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.types, "Types", "simple");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.typesShrink)) {
            query.put("Types", request.typesShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPluginForUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPluginForUuidResponse());
    }

    /**
     * @summary Queries the information about plug-ins on a server.
     *
     * @param request ListPluginForUuidRequest
     * @return ListPluginForUuidResponse
     */
    public ListPluginForUuidResponse listPluginForUuid(ListPluginForUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPluginForUuidWithOptions(request, runtime);
    }

    /**
     * @summary Queries the security risks of a pod.
     *
     * @param request ListPodRiskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPodRiskResponse
     */
    public ListPodRiskResponse listPodRiskWithOptions(ListPodRiskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.podName)) {
            query.put("PodName", request.podName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPodRisk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPodRiskResponse());
    }

    /**
     * @summary Queries the security risks of a pod.
     *
     * @param request ListPodRiskRequest
     * @return ListPodRiskResponse
     */
    public ListPodRiskResponse listPodRisk(ListPodRiskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPodRiskWithOptions(request, runtime);
    }

    /**
     * @summary Queries image repositories.
     *
     * @param request ListPrivateRegistryListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPrivateRegistryListResponse
     */
    public ListPrivateRegistryListResponse listPrivateRegistryListWithOptions(ListPrivateRegistryListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryType)) {
            query.put("RegistryType", request.registryType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPrivateRegistryList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPrivateRegistryListResponse());
    }

    /**
     * @summary Queries image repositories.
     *
     * @param request ListPrivateRegistryListRequest
     * @return ListPrivateRegistryListResponse
     */
    public ListPrivateRegistryListResponse listPrivateRegistryList(ListPrivateRegistryListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPrivateRegistryListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of image repositories of each type.
     *
     * @param request ListPrivateRegistryTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPrivateRegistryTypeResponse
     */
    public ListPrivateRegistryTypeResponse listPrivateRegistryTypeWithOptions(ListPrivateRegistryTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPrivateRegistryType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListPrivateRegistryTypeResponse());
    }

    /**
     * @summary Queries the number of image repositories of each type.
     *
     * @param request ListPrivateRegistryTypeRequest
     * @return ListPrivateRegistryTypeResponse
     */
    public ListPrivateRegistryTypeResponse listPrivateRegistryType(ListPrivateRegistryTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPrivateRegistryTypeWithOptions(request, runtime);
    }

    /**
     * @summary Queries the installation information of one or more Runtime Application Self-protection-enabled (RASP-enabled) applications.
     *
     * @param request ListQueryRaspAppInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListQueryRaspAppInfoResponse
     */
    public ListQueryRaspAppInfoResponse listQueryRaspAppInfoWithOptions(ListQueryRaspAppInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListQueryRaspAppInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListQueryRaspAppInfoResponse());
    }

    /**
     * @summary Queries the installation information of one or more Runtime Application Self-protection-enabled (RASP-enabled) applications.
     *
     * @param request ListQueryRaspAppInfoRequest
     * @return ListQueryRaspAppInfoResponse
     */
    public ListQueryRaspAppInfoResponse listQueryRaspAppInfo(ListQueryRaspAppInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listQueryRaspAppInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the network objects based on which a specified cluster is protected.
     *
     * @param request ListRuleTargetAllRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListRuleTargetAllResponse
     */
    public ListRuleTargetAllResponse listRuleTargetAllWithOptions(ListRuleTargetAllRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListRuleTargetAll"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListRuleTargetAllResponse());
    }

    /**
     * @summary Queries the network objects based on which a specified cluster is protected.
     *
     * @param request ListRuleTargetAllRequest
     * @return ListRuleTargetAllResponse
     */
    public ListRuleTargetAllResponse listRuleTargetAll(ListRuleTargetAllRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listRuleTargetAllWithOptions(request, runtime);
    }

    /**
     * @summary Queries rules for container tamper-proofing.
     *
     * @param request ListSasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSasContainerWebDefenseRuleResponse
     */
    public ListSasContainerWebDefenseRuleResponse listSasContainerWebDefenseRuleWithOptions(ListSasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSasContainerWebDefenseRuleResponse());
    }

    /**
     * @summary Queries rules for container tamper-proofing.
     *
     * @param request ListSasContainerWebDefenseRuleRequest
     * @return ListSasContainerWebDefenseRuleResponse
     */
    public ListSasContainerWebDefenseRuleResponse listSasContainerWebDefenseRule(ListSasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @summary Queries supported file suffixes.
     *
     * @param request ListSupportObjectSuffixRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSupportObjectSuffixResponse
     */
    public ListSupportObjectSuffixResponse listSupportObjectSuffixWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSupportObjectSuffix"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSupportObjectSuffixResponse());
    }

    /**
     * @summary Queries supported file suffixes.
     *
     * @return ListSupportObjectSuffixResponse
     */
    public ListSupportObjectSuffixResponse listSupportObjectSuffix() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSupportObjectSuffixWithOptions(runtime);
    }

    /**
     * @summary Queries the details about the aggregation types of system defense rules.
     *
     * @param request ListSystemAggregationRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemAggregationRulesResponse
     */
    public ListSystemAggregationRulesResponse listSystemAggregationRulesWithOptions(ListSystemAggregationRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemAggregationRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemAggregationRulesResponse());
    }

    /**
     * @summary Queries the details about the aggregation types of system defense rules.
     *
     * @param request ListSystemAggregationRulesRequest
     * @return ListSystemAggregationRulesResponse
     */
    public ListSystemAggregationRulesResponse listSystemAggregationRules(ListSystemAggregationRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemAggregationRulesWithOptions(request, runtime);
    }

    /**
     * @summary 查询对用户生效的系统规则类型
     *
     * @param request ListSystemClientRuleTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemClientRuleTypesResponse
     */
    public ListSystemClientRuleTypesResponse listSystemClientRuleTypesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemClientRuleTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemClientRuleTypesResponse());
    }

    /**
     * @summary 查询对用户生效的系统规则类型
     *
     * @return ListSystemClientRuleTypesResponse
     */
    public ListSystemClientRuleTypesResponse listSystemClientRuleTypes() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemClientRuleTypesWithOptions(runtime);
    }

    /**
     * @summary Queries system defense rules.
     *
     * @param request ListSystemClientRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemClientRulesResponse
     */
    public ListSystemClientRulesResponse listSystemClientRulesWithOptions(ListSystemClientRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aggregationIds)) {
            query.put("AggregationIds", request.aggregationIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isContainer)) {
            query.put("IsContainer", request.isContainer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleTypes)) {
            query.put("RuleTypes", request.ruleTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.systemType)) {
            query.put("SystemType", request.systemType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemClientRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemClientRulesResponse());
    }

    /**
     * @summary Queries system defense rules.
     *
     * @param request ListSystemClientRulesRequest
     * @return ListSystemClientRulesResponse
     */
    public ListSystemClientRulesResponse listSystemClientRules(ListSystemClientRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemClientRulesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the aggregation types of system defense rules.
     *
     * @param request ListSystemRuleAggregationTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemRuleAggregationTypesResponse
     */
    public ListSystemRuleAggregationTypesResponse listSystemRuleAggregationTypesWithOptions(ListSystemRuleAggregationTypesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemRuleAggregationTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemRuleAggregationTypesResponse());
    }

    /**
     * @summary Queries the aggregation types of system defense rules.
     *
     * @param request ListSystemRuleAggregationTypesRequest
     * @return ListSystemRuleAggregationTypesResponse
     */
    public ListSystemRuleAggregationTypesResponse listSystemRuleAggregationTypes(ListSystemRuleAggregationTypesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemRuleAggregationTypesWithOptions(request, runtime);
    }

    /**
     * @summary Queries tasks that are not complete by task type.
     *
     * @param request ListUnfinishedOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUnfinishedOnceTaskResponse
     */
    public ListUnfinishedOnceTaskResponse listUnfinishedOnceTaskWithOptions(ListUnfinishedOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUnfinishedOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListUnfinishedOnceTaskResponse());
    }

    /**
     * @summary Queries tasks that are not complete by task type.
     *
     * @param request ListUnfinishedOnceTaskRequest
     * @return ListUnfinishedOnceTaskResponse
     */
    public ListUnfinishedOnceTaskResponse listUnfinishedOnceTask(ListUnfinishedOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUnfinishedOnceTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries the information about the servers whose Security Center agent is not installed.
     *
     * @param request ListUninstallAegisMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUninstallAegisMachinesResponse
     */
    public ListUninstallAegisMachinesResponse listUninstallAegisMachinesWithOptions(ListUninstallAegisMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIdStr)) {
            query.put("RegionIdStr", request.regionIdStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionNo)) {
            query.put("RegionNo", request.regionNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUninstallAegisMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListUninstallAegisMachinesResponse());
    }

    /**
     * @summary Queries the information about the servers whose Security Center agent is not installed.
     *
     * @param request ListUninstallAegisMachinesRequest
     * @return ListUninstallAegisMachinesResponse
     */
    public ListUninstallAegisMachinesResponse listUninstallAegisMachines(ListUninstallAegisMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUninstallAegisMachinesWithOptions(request, runtime);
    }

    /**
     * @summary Queries protected assets by using the paths to specific web directories.
     *
     * @param request ListUuidsByWebPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUuidsByWebPathResponse
     */
    public ListUuidsByWebPathResponse listUuidsByWebPathWithOptions(ListUuidsByWebPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webPath)) {
            query.put("WebPath", request.webPath);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUuidsByWebPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListUuidsByWebPathResponse());
    }

    /**
     * @summary Queries protected assets by using the paths to specific web directories.
     *
     * @param request ListUuidsByWebPathRequest
     * @return ListUuidsByWebPathResponse
     */
    public ListUuidsByWebPathResponse listUuidsByWebPath(ListUuidsByWebPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUuidsByWebPathWithOptions(request, runtime);
    }

    /**
     * @summary Queries servers on which virus detection and removal tasks are performed.
     *
     * @param request ListVirusScanMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVirusScanMachineResponse
     */
    public ListVirusScanMachineResponse listVirusScanMachineWithOptions(ListVirusScanMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVirusScanMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListVirusScanMachineResponse());
    }

    /**
     * @summary Queries servers on which virus detection and removal tasks are performed.
     *
     * @param request ListVirusScanMachineRequest
     * @return ListVirusScanMachineResponse
     */
    public ListVirusScanMachineResponse listVirusScanMachine(ListVirusScanMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVirusScanMachineWithOptions(request, runtime);
    }

    /**
     * @summary Queries the alert events that are generated for viruses detected on a server.
     *
     * @param request ListVirusScanMachineEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVirusScanMachineEventResponse
     */
    public ListVirusScanMachineEventResponse listVirusScanMachineEventWithOptions(ListVirusScanMachineEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateTaskId)) {
            query.put("OperateTaskId", request.operateTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVirusScanMachineEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListVirusScanMachineEventResponse());
    }

    /**
     * @summary Queries the alert events that are generated for viruses detected on a server.
     *
     * @param request ListVirusScanMachineEventRequest
     * @return ListVirusScanMachineEventResponse
     */
    public ListVirusScanMachineEventResponse listVirusScanMachineEvent(ListVirusScanMachineEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVirusScanMachineEventWithOptions(request, runtime);
    }

    /**
     * @summary Queries virus scan tasks based on conditions such as the task type, task status, and server information.
     *
     * @param request ListVirusScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVirusScanTaskResponse
     */
    public ListVirusScanTaskResponse listVirusScanTaskWithOptions(ListVirusScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTask)) {
            query.put("RootTask", request.rootTask);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTaskId)) {
            query.put("RootTaskId", request.rootTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanType)) {
            query.put("ScanType", request.scanType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVirusScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListVirusScanTaskResponse());
    }

    /**
     * @summary Queries virus scan tasks based on conditions such as the task type, task status, and server information.
     *
     * @param request ListVirusScanTaskRequest
     * @return ListVirusScanTaskResponse
     */
    public ListVirusScanTaskResponse listVirusScanTask(ListVirusScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVirusScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries the existing configurations of vulnerabilities that can be automatically fixed.
     *
     * @param request ListVulAutoRepairConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVulAutoRepairConfigResponse
     */
    public ListVulAutoRepairConfigResponse listVulAutoRepairConfigWithOptions(ListVulAutoRepairConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVulAutoRepairConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListVulAutoRepairConfigResponse());
    }

    /**
     * @summary Queries the existing configurations of vulnerabilities that can be automatically fixed.
     *
     * @param request ListVulAutoRepairConfigRequest
     * @return ListVulAutoRepairConfigResponse
     */
    public ListVulAutoRepairConfigResponse listVulAutoRepairConfig(ListVulAutoRepairConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVulAutoRepairConfigWithOptions(request, runtime);
    }

    /**
     * @summary Queries the global configurations of vulnerability detection.
     *
     * @param request ListVulGlobalConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVulGlobalConfigResponse
     */
    public ListVulGlobalConfigResponse listVulGlobalConfigWithOptions(ListVulGlobalConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configKey)) {
            query.put("ConfigKey", request.configKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVulGlobalConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ListVulGlobalConfigResponse());
    }

    /**
     * @summary Queries the global configurations of vulnerability detection.
     *
     * @param request ListVulGlobalConfigRequest
     * @return ListVulGlobalConfigResponse
     */
    public ListVulGlobalConfigResponse listVulGlobalConfig(ListVulGlobalConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVulGlobalConfigWithOptions(request, runtime);
    }

    /**
     * @summary Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
     *
     * @param request MarkMonitorAccountsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return MarkMonitorAccountsResponse
     */
    public MarkMonitorAccountsResponse markMonitorAccountsWithOptions(MarkMonitorAccountsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountIds)) {
            query.put("AccountIds", request.accountIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "MarkMonitorAccounts"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new MarkMonitorAccountsResponse());
    }

    /**
     * @summary Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
     *
     * @param request MarkMonitorAccountsRequest
     * @return MarkMonitorAccountsResponse
     */
    public MarkMonitorAccountsResponse markMonitorAccounts(MarkMonitorAccountsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.markMonitorAccountsWithOptions(request, runtime);
    }

    /**
     * @summary Handles AccessKey pair leaks.
     *
     * @param request ModifyAccessKeyLeakDealRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAccessKeyLeakDealResponse
     */
    public ModifyAccessKeyLeakDealResponse modifyAccessKeyLeakDealWithOptions(ModifyAccessKeyLeakDealRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.idList)) {
            query.put("IdList", request.idList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAccessKeyLeakDeal"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAccessKeyLeakDealResponse());
    }

    /**
     * @summary Handles AccessKey pair leaks.
     *
     * @param request ModifyAccessKeyLeakDealRequest
     * @return ModifyAccessKeyLeakDealResponse
     */
    public ModifyAccessKeyLeakDealResponse modifyAccessKeyLeakDeal(ModifyAccessKeyLeakDealRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAccessKeyLeakDealWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a defense rule against brute-force attacks.
     *
     * @param request ModifyAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAntiBruteForceRuleResponse
     */
    public ModifyAntiBruteForceRuleResponse modifyAntiBruteForceRuleWithOptions(ModifyAntiBruteForceRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defaultRule)) {
            query.put("DefaultRule", request.defaultRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.failCount)) {
            query.put("FailCount", request.failCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forbiddenTime)) {
            query.put("ForbiddenTime", request.forbiddenTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.span)) {
            query.put("Span", request.span);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAntiBruteForceRuleResponse());
    }

    /**
     * @summary Modifies a defense rule against brute-force attacks.
     *
     * @param request ModifyAntiBruteForceRuleRequest
     * @return ModifyAntiBruteForceRuleResponse
     */
    public ModifyAntiBruteForceRuleResponse modifyAntiBruteForceRule(ModifyAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * @summary Configures a scan cycle for application vulnerabilities.
     *
     * @param request ModifyAppVulScanCycleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAppVulScanCycleResponse
     */
    public ModifyAppVulScanCycleResponse modifyAppVulScanCycleWithOptions(ModifyAppVulScanCycleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cycle)) {
            query.put("Cycle", request.cycle);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAppVulScanCycle"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAppVulScanCycleResponse());
    }

    /**
     * @summary Configures a scan cycle for application vulnerabilities.
     *
     * @param request ModifyAppVulScanCycleRequest
     * @return ModifyAppVulScanCycleResponse
     */
    public ModifyAppVulScanCycleResponse modifyAppVulScanCycle(ModifyAppVulScanCycleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAppVulScanCycleWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
     *
     * @param request ModifyAssetCleanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAssetCleanConfigResponse
     */
    public ModifyAssetCleanConfigResponse modifyAssetCleanConfigWithOptions(ModifyAssetCleanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetCleanConfigs)) {
            query.put("AssetCleanConfigs", request.assetCleanConfigs);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAssetCleanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAssetCleanConfigResponse());
    }

    /**
     * @summary Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
     *
     * @param request ModifyAssetCleanConfigRequest
     * @return ModifyAssetCleanConfigResponse
     */
    public ModifyAssetCleanConfigResponse modifyAssetCleanConfig(ModifyAssetCleanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAssetCleanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Changes the server group to which specified servers belong.
     *
     * @description You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
     * ### Limits
     * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ModifyAssetGroupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAssetGroupResponse
     */
    public ModifyAssetGroupResponse modifyAssetGroupWithOptions(ModifyAssetGroupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAssetGroup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAssetGroupResponse());
    }

    /**
     * @summary Changes the server group to which specified servers belong.
     *
     * @description You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
     * ### Limits
     * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ModifyAssetGroupRequest
     * @return ModifyAssetGroupResponse
     */
    public ModifyAssetGroupResponse modifyAssetGroup(ModifyAssetGroupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAssetGroupWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the importance of an asset.
     *
     * @param request ModifyAssetImportantRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAssetImportantResponse
     */
    public ModifyAssetImportantResponse modifyAssetImportantWithOptions(ModifyAssetImportantRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.importantCode)) {
            query.put("ImportantCode", request.importantCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAssetImportant"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAssetImportantResponse());
    }

    /**
     * @summary Modifies the importance of an asset.
     *
     * @param request ModifyAssetImportantRequest
     * @return ModifyAssetImportantResponse
     */
    public ModifyAssetImportantResponse modifyAssetImportant(ModifyAssetImportantRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAssetImportantWithOptions(request, runtime);
    }

    /**
     * @summary Specifies the number of days after which a detected vulnerability is automatically deleted.
     *
     * @param request ModifyAutoDelConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAutoDelConfigResponse
     */
    public ModifyAutoDelConfigResponse modifyAutoDelConfigWithOptions(ModifyAutoDelConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.days)) {
            query.put("Days", request.days);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAutoDelConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAutoDelConfigResponse());
    }

    /**
     * @summary Specifies the number of days after which a detected vulnerability is automatically deleted.
     *
     * @param request ModifyAutoDelConfigRequest
     * @return ModifyAutoDelConfigResponse
     */
    public ModifyAutoDelConfigResponse modifyAutoDelConfig(ModifyAutoDelConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAutoDelConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies an anti-ransomware policy.
     *
     * @param tmpReq ModifyBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyBackupPolicyResponse
     */
    public ModifyBackupPolicyResponse modifyBackupPolicyWithOptions(ModifyBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyBackupPolicyShrinkRequest request = new ModifyBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.policy)) {
            request.policyShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.policy, "Policy", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyShrink)) {
            query.put("Policy", request.policyShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyRegionId)) {
            query.put("PolicyRegionId", request.policyRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyBackupPolicyResponse());
    }

    /**
     * @summary Modifies an anti-ransomware policy.
     *
     * @param request ModifyBackupPolicyRequest
     * @return ModifyBackupPolicyResponse
     */
    public ModifyBackupPolicyResponse modifyBackupPolicy(ModifyBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyBackupPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables an anti-ransomware policy.
     *
     * @param request ModifyBackupPolicyStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyBackupPolicyStatusResponse
     */
    public ModifyBackupPolicyStatusResponse modifyBackupPolicyStatusWithOptions(ModifyBackupPolicyStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyBackupPolicyStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyBackupPolicyStatusResponse());
    }

    /**
     * @summary Enables or disables an anti-ransomware policy.
     *
     * @param request ModifyBackupPolicyStatusRequest
     * @return ModifyBackupPolicyStatusResponse
     */
    public ModifyBackupPolicyStatusResponse modifyBackupPolicyStatus(ModifyBackupPolicyStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyBackupPolicyStatusWithOptions(request, runtime);
    }

    /**
     * @summary 修改日志容量
     *
     * @param request ModifyClearLogstoreStorageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClearLogstoreStorageResponse
     */
    public ModifyClearLogstoreStorageResponse modifyClearLogstoreStorageWithOptions(ModifyClearLogstoreStorageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userLogStore)) {
            query.put("UserLogStore", request.userLogStore);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userProject)) {
            query.put("UserProject", request.userProject);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClearLogstoreStorage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClearLogstoreStorageResponse());
    }

    /**
     * @summary 修改日志容量
     *
     * @param request ModifyClearLogstoreStorageRequest
     * @return ModifyClearLogstoreStorageResponse
     */
    public ModifyClearLogstoreStorageResponse modifyClearLogstoreStorage(ModifyClearLogstoreStorageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClearLogstoreStorageWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the resource configurations of the Security Center agent.
     *
     * @param request ModifyClientConfSetupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClientConfSetupResponse
     */
    public ModifyClientConfSetupResponse modifyClientConfSetupWithOptions(ModifyClientConfSetupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyConfig)) {
            query.put("StrategyConfig", request.strategyConfig);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTag)) {
            query.put("StrategyTag", request.strategyTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTagValue)) {
            query.put("StrategyTagValue", request.strategyTagValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClientConfSetup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClientConfSetupResponse());
    }

    /**
     * @summary Modifies the resource configurations of the Security Center agent.
     *
     * @param request ModifyClientConfSetupRequest
     * @return ModifyClientConfSetupResponse
     */
    public ModifyClientConfSetupResponse modifyClientConfSetup(ModifyClientConfSetupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClientConfSetupWithOptions(request, runtime);
    }

    /**
     * @summary Modifies an agent configuration policy.
     *
     * @param request ModifyClientConfStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClientConfStrategyResponse
     */
    public ModifyClientConfStrategyResponse modifyClientConfStrategyWithOptions(ModifyClientConfStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagExt)) {
            query.put("TagExt", request.tagExt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagValue)) {
            query.put("TagValue", request.tagValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClientConfStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClientConfStrategyResponse());
    }

    /**
     * @summary Modifies an agent configuration policy.
     *
     * @param request ModifyClientConfStrategyRequest
     * @return ModifyClientConfStrategyResponse
     */
    public ModifyClientConfStrategyResponse modifyClientConfStrategy(ModifyClientConfStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClientConfStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a custom defense rule.
     *
     * @param request ModifyClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClientUserDefineRuleResponse
     */
    public ModifyClientUserDefineRuleResponse modifyClientUserDefineRuleWithOptions(ModifyClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.actionType)) {
            query.put("ActionType", request.actionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cmdline)) {
            query.put("Cmdline", request.cmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domain)) {
            query.put("Domain", request.domain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePath)) {
            query.put("FilePath", request.filePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.IP)) {
            query.put("IP", request.IP);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.md5List)) {
            query.put("Md5List", request.md5List);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.newFilePath)) {
            query.put("NewFilePath", request.newFilePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentCmdline)) {
            query.put("ParentCmdline", request.parentCmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentProcPath)) {
            query.put("ParentProcPath", request.parentProcPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.portStr)) {
            query.put("PortStr", request.portStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPath)) {
            query.put("ProcPath", request.procPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryContent)) {
            query.put("RegistryContent", request.registryContent);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryKey)) {
            query.put("RegistryKey", request.registryKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClientUserDefineRuleResponse());
    }

    /**
     * @summary Modifies a custom defense rule.
     *
     * @param request ModifyClientUserDefineRuleRequest
     * @return ModifyClientUserDefineRuleResponse
     */
    public ModifyClientUserDefineRuleResponse modifyClientUserDefineRule(ModifyClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * @summary Fixes the blocking status of clusters whose status is Normal to be confirmed.
     *
     * @param request ModifyClusterCnnfStatusUserConfirmRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClusterCnnfStatusUserConfirmResponse
     */
    public ModifyClusterCnnfStatusUserConfirmResponse modifyClusterCnnfStatusUserConfirmWithOptions(ModifyClusterCnnfStatusUserConfirmRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userConfirm)) {
            query.put("UserConfirm", request.userConfirm);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClusterCnnfStatusUserConfirm"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClusterCnnfStatusUserConfirmResponse());
    }

    /**
     * @summary Fixes the blocking status of clusters whose status is Normal to be confirmed.
     *
     * @param request ModifyClusterCnnfStatusUserConfirmRequest
     * @return ModifyClusterCnnfStatusUserConfirmResponse
     */
    public ModifyClusterCnnfStatusUserConfirmResponse modifyClusterCnnfStatusUserConfirm(ModifyClusterCnnfStatusUserConfirmRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClusterCnnfStatusUserConfirmWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the priority to fix vulnerabilities.
     *
     * @param request ModifyConcernNecessityRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyConcernNecessityResponse
     */
    public ModifyConcernNecessityResponse modifyConcernNecessityWithOptions(ModifyConcernNecessityRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.concernNecessity)) {
            query.put("ConcernNecessity", request.concernNecessity);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyConcernNecessity"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyConcernNecessityResponse());
    }

    /**
     * @summary Modifies the priority to fix vulnerabilities.
     *
     * @param request ModifyConcernNecessityRequest
     * @return ModifyConcernNecessityResponse
     */
    public ModifyConcernNecessityResponse modifyConcernNecessity(ModifyConcernNecessityRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyConcernNecessityWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a rule for non-image program defense.
     *
     * @param tmpReq ModifyContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerDefenseRuleResponse
     */
    public ModifyContainerDefenseRuleResponse modifyContainerDefenseRuleWithOptions(ModifyContainerDefenseRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyContainerDefenseRuleShrinkRequest request = new ModifyContainerDefenseRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.whitelist)) {
            request.whitelistShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.whitelist, "Whitelist", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scope)) {
            query.put("Scope", request.scope);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelistShrink)) {
            query.put("Whitelist", request.whitelistShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerDefenseRuleResponse());
    }

    /**
     * @summary Modifies a rule for non-image program defense.
     *
     * @param request ModifyContainerDefenseRuleRequest
     * @return ModifyContainerDefenseRuleResponse
     */
    public ModifyContainerDefenseRuleResponse modifyContainerDefenseRule(ModifyContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @summary Changes the status of rules for non-image program defense.
     *
     * @param request ModifyContainerDefenseRuleSwitchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerDefenseRuleSwitchResponse
     */
    public ModifyContainerDefenseRuleSwitchResponse modifyContainerDefenseRuleSwitchWithOptions(ModifyContainerDefenseRuleSwitchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerDefenseRuleSwitch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerDefenseRuleSwitchResponse());
    }

    /**
     * @summary Changes the status of rules for non-image program defense.
     *
     * @param request ModifyContainerDefenseRuleSwitchRequest
     * @return ModifyContainerDefenseRuleSwitchResponse
     */
    public ModifyContainerDefenseRuleSwitchResponse modifyContainerDefenseRuleSwitch(ModifyContainerDefenseRuleSwitchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerDefenseRuleSwitchWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the defense rule against container escapes.
     *
     * @param request ModifyContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerPluginRuleResponse
     */
    public ModifyContainerPluginRuleResponse modifyContainerPluginRuleWithOptions(ModifyContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectedPolicy)) {
            query.put("SelectedPolicy", request.selectedPolicy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteImages)) {
            query.put("WhiteImages", request.whiteImages);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerPluginRuleResponse());
    }

    /**
     * @summary Modifies the defense rule against container escapes.
     *
     * @param request ModifyContainerPluginRuleRequest
     * @return ModifyContainerPluginRuleResponse
     */
    public ModifyContainerPluginRuleResponse modifyContainerPluginRule(ModifyContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configurations of vulnerability scan for a running container.
     *
     * @param request ModifyContainerScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerScanConfigResponse
     */
    public ModifyContainerScanConfigResponse modifyContainerScanConfigWithOptions(ModifyContainerScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appNames)) {
            query.put("AppNames", request.appNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerScanConfigResponse());
    }

    /**
     * @summary Modifies the configurations of vulnerability scan for a running container.
     *
     * @param request ModifyContainerScanConfigRequest
     * @return ModifyContainerScanConfigResponse
     */
    public ModifyContainerScanConfigResponse modifyContainerScanConfig(ModifyContainerScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
     *
     * @param request ModifyCreateVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCreateVulWhitelistResponse
     */
    public ModifyCreateVulWhitelistResponse modifyCreateVulWhitelistWithOptions(ModifyCreateVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetInfo)) {
            query.put("TargetInfo", request.targetInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelist)) {
            query.put("Whitelist", request.whitelist);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCreateVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCreateVulWhitelistResponse());
    }

    /**
     * @summary Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
     *
     * @param request ModifyCreateVulWhitelistRequest
     * @return ModifyCreateVulWhitelistResponse
     */
    public ModifyCreateVulWhitelistResponse modifyCreateVulWhitelist(ModifyCreateVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCreateVulWhitelistWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a custom IP address blocking policy.
     *
     * @param request ModifyCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCustomBlockRecordResponse
     */
    public ModifyCustomBlockRecordResponse modifyCustomBlockRecordWithOptions(ModifyCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.expireTime)) {
            query.put("ExpireTime", request.expireTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCustomBlockRecordResponse());
    }

    /**
     * @summary Modifies a custom IP address blocking policy.
     *
     * @param request ModifyCustomBlockRecordRequest
     * @return ModifyCustomBlockRecordResponse
     */
    public ModifyCustomBlockRecordResponse modifyCustomBlockRecord(ModifyCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
     *
     * @param request ModifyCycleTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCycleTaskResponse
     */
    public ModifyCycleTaskResponse modifyCycleTaskWithOptions(ModifyCycleTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.firstDateStr)) {
            query.put("FirstDateStr", request.firstDateStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalPeriod)) {
            query.put("IntervalPeriod", request.intervalPeriod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.param)) {
            query.put("Param", request.param);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.periodUnit)) {
            query.put("PeriodUnit", request.periodUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetEndTime)) {
            query.put("TargetEndTime", request.targetEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetStartTime)) {
            query.put("TargetStartTime", request.targetStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCycleTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCycleTaskResponse());
    }

    /**
     * @summary Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
     *
     * @param request ModifyCycleTaskRequest
     * @return ModifyCycleTaskResponse
     */
    public ModifyCycleTaskResponse modifyCycleTask(ModifyCycleTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCycleTaskWithOptions(request, runtime);
    }

    /**
     * @summary Runs a scan task for urgent vulnerabilities.
     *
     * @param request ModifyEmgVulSubmitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyEmgVulSubmitResponse
     */
    public ModifyEmgVulSubmitResponse modifyEmgVulSubmitWithOptions(ModifyEmgVulSubmitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userAgreement)) {
            query.put("UserAgreement", request.userAgreement);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyEmgVulSubmit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyEmgVulSubmitResponse());
    }

    /**
     * @summary Runs a scan task for urgent vulnerabilities.
     *
     * @param request ModifyEmgVulSubmitRequest
     * @return ModifyEmgVulSubmitResponse
     */
    public ModifyEmgVulSubmitResponse modifyEmgVulSubmit(ModifyEmgVulSubmitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyEmgVulSubmitWithOptions(request, runtime);
    }

    /**
     * @summary Changes the name of a server group.
     *
     * @param request ModifyGroupPropertyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyGroupPropertyResponse
     */
    public ModifyGroupPropertyResponse modifyGroupPropertyWithOptions(ModifyGroupPropertyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("Data", request.data);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyGroupProperty"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyGroupPropertyResponse());
    }

    /**
     * @summary Changes the name of a server group.
     *
     * @param request ModifyGroupPropertyRequest
     * @return ModifyGroupPropertyResponse
     */
    public ModifyGroupPropertyResponse modifyGroupProperty(ModifyGroupPropertyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyGroupPropertyWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configurations of a scheduled image fix.
     *
     * @param request ModifyImageFixCycleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyImageFixCycleConfigResponse
     */
    public ModifyImageFixCycleConfigResponse modifyImageFixCycleConfigWithOptions(ModifyImageFixCycleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.imageFixCycle)) {
            body.put("ImageFixCycle", request.imageFixCycle);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageFixSwitch)) {
            body.put("ImageFixSwitch", request.imageFixSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageFixTarget)) {
            body.put("ImageFixTarget", request.imageFixTarget);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTimeRange)) {
            body.put("ImageTimeRange", request.imageTimeRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyImageFixCycleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyImageFixCycleConfigResponse());
    }

    /**
     * @summary Modifies the configurations of a scheduled image fix.
     *
     * @param request ModifyImageFixCycleConfigRequest
     * @return ModifyImageFixCycleConfigResponse
     */
    public ModifyImageFixCycleConfigResponse modifyImageFixCycleConfig(ModifyImageFixCycleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyImageFixCycleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the transfer time of an image repository.
     *
     * @param request ModifyImageRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyImageRegistryResponse
     */
    public ModifyImageRegistryResponse modifyImageRegistryWithOptions(ModifyImageRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            body.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.password)) {
            body.put("Password", request.password);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.transPerHour)) {
            body.put("TransPerHour", request.transPerHour);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userName)) {
            body.put("UserName", request.userName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyImageRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyImageRegistryResponse());
    }

    /**
     * @summary Modifies the transfer time of an image repository.
     *
     * @param request ModifyImageRegistryRequest
     * @return ModifyImageRegistryResponse
     */
    public ModifyImageRegistryResponse modifyImageRegistry(ModifyImageRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyImageRegistryWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the defense rule against brute-force attacks that is applied to a specified server.
     *
     * @param request ModifyInstanceAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInstanceAntiBruteForceRuleResponse
     */
    public ModifyInstanceAntiBruteForceRuleResponse modifyInstanceAntiBruteForceRuleWithOptions(ModifyInstanceAntiBruteForceRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.newRuleId)) {
            query.put("NewRuleId", request.newRuleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInstanceAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInstanceAntiBruteForceRuleResponse());
    }

    /**
     * @summary Modifies the defense rule against brute-force attacks that is applied to a specified server.
     *
     * @param request ModifyInstanceAntiBruteForceRuleRequest
     * @return ModifyInstanceAntiBruteForceRuleResponse
     */
    public ModifyInstanceAntiBruteForceRuleResponse modifyInstanceAntiBruteForceRule(ModifyInstanceAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInstanceAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a proactive defense rule for containers.
     *
     * @param tmpReq ModifyInterceptionRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInterceptionRuleResponse
     */
    public ModifyInterceptionRuleResponse modifyInterceptionRuleWithOptions(ModifyInterceptionRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyInterceptionRuleShrinkRequest request = new ModifyInterceptionRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.dstTarget)) {
            request.dstTargetShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.dstTarget, "DstTarget", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.srcTarget)) {
            request.srcTargetShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, "SrcTarget", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dstTargetShrink)) {
            query.put("DstTarget", request.dstTargetShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interceptType)) {
            query.put("InterceptType", request.interceptType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderIndex)) {
            query.put("OrderIndex", request.orderIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcTargetShrink)) {
            query.put("SrcTarget", request.srcTargetShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInterceptionRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInterceptionRuleResponse());
    }

    /**
     * @summary Modifies a proactive defense rule for containers.
     *
     * @param request ModifyInterceptionRuleRequest
     * @return ModifyInterceptionRuleResponse
     */
    public ModifyInterceptionRuleResponse modifyInterceptionRule(ModifyInterceptionRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInterceptionRuleWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables a proactive defense rule for containers.
     *
     * @param request ModifyInterceptionRuleSwitchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInterceptionRuleSwitchResponse
     */
    public ModifyInterceptionRuleSwitchResponse modifyInterceptionRuleSwitchWithOptions(ModifyInterceptionRuleSwitchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInterceptionRuleSwitch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInterceptionRuleSwitchResponse());
    }

    /**
     * @summary Enables or disables a proactive defense rule for containers.
     *
     * @param request ModifyInterceptionRuleSwitchRequest
     * @return ModifyInterceptionRuleSwitchResponse
     */
    public ModifyInterceptionRuleSwitchResponse modifyInterceptionRuleSwitch(ModifyInterceptionRuleSwitchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInterceptionRuleSwitchWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the information about a network object of the container firewall feature.
     *
     * @param request ModifyInterceptionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInterceptionTargetResponse
     */
    public ModifyInterceptionTargetResponse modifyInterceptionTargetWithOptions(ModifyInterceptionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageList)) {
            query.put("ImageList", request.imageList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetId)) {
            query.put("TargetId", request.targetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInterceptionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInterceptionTargetResponse());
    }

    /**
     * @summary Modifies the information about a network object of the container firewall feature.
     *
     * @param request ModifyInterceptionTargetRequest
     * @return ModifyInterceptionTargetResponse
     */
    public ModifyInterceptionTargetResponse modifyInterceptionTarget(ModifyInterceptionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInterceptionTargetWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables the log analysis feature.
     *
     * @param request ModifyLogMetaStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyLogMetaStatusResponse
     */
    public ModifyLogMetaStatusResponse modifyLogMetaStatusWithOptions(ModifyLogMetaStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logStore)) {
            query.put("LogStore", request.logStore);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.project)) {
            query.put("Project", request.project);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyLogMetaStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyLogMetaStatusResponse());
    }

    /**
     * @summary Enables or disables the log analysis feature.
     *
     * @param request ModifyLogMetaStatusRequest
     * @return ModifyLogMetaStatusResponse
     */
    public ModifyLogMetaStatusResponse modifyLogMetaStatus(ModifyLogMetaStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyLogMetaStatusWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the logon configuration for a specified asset.
     *
     * @param request ModifyLoginBaseConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyLoginBaseConfigResponse
     */
    public ModifyLoginBaseConfigResponse modifyLoginBaseConfigWithOptions(ModifyLoginBaseConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyLoginBaseConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyLoginBaseConfigResponse());
    }

    /**
     * @summary Modifies the logon configuration for a specified asset.
     *
     * @param request ModifyLoginBaseConfigRequest
     * @return ModifyLoginBaseConfigResponse
     */
    public ModifyLoginBaseConfigResponse modifyLoginBaseConfig(ModifyLoginBaseConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyLoginBaseConfigWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables the logon security settings for an asset.
     *
     * @param request ModifyLoginSwitchConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyLoginSwitchConfigResponse
     */
    public ModifyLoginSwitchConfigResponse modifyLoginSwitchConfigWithOptions(ModifyLoginSwitchConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.item)) {
            query.put("Item", request.item);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyLoginSwitchConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyLoginSwitchConfigResponse());
    }

    /**
     * @summary Enables or disables the logon security settings for an asset.
     *
     * @param request ModifyLoginSwitchConfigRequest
     * @return ModifyLoginSwitchConfigResponse
     */
    public ModifyLoginSwitchConfigResponse modifyLoginSwitchConfig(ModifyLoginSwitchConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyLoginSwitchConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies notification settings.
     *
     * @param request ModifyNoticeConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyNoticeConfigResponse
     */
    public ModifyNoticeConfigResponse modifyNoticeConfigWithOptions(ModifyNoticeConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.project)) {
            query.put("Project", request.project);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.route)) {
            query.put("Route", request.route);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeLimit)) {
            query.put("TimeLimit", request.timeLimit);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyNoticeConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyNoticeConfigResponse());
    }

    /**
     * @summary Modifies notification settings.
     *
     * @param request ModifyNoticeConfigRequest
     * @return ModifyNoticeConfigResponse
     */
    public ModifyNoticeConfigResponse modifyNoticeConfig(ModifyNoticeConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyNoticeConfigWithOptions(request, runtime);
    }

    /**
     * @summary Activates Simple Log Service.
     *
     * @description **Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
     *
     * @param request ModifyOpenLogShipperRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyOpenLogShipperResponse
     */
    public ModifyOpenLogShipperResponse modifyOpenLogShipperWithOptions(ModifyOpenLogShipperRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyOpenLogShipper"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyOpenLogShipperResponse());
    }

    /**
     * @summary Activates Simple Log Service.
     *
     * @description **Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
     *
     * @param request ModifyOpenLogShipperRequest
     * @return ModifyOpenLogShipperResponse
     */
    public ModifyOpenLogShipperResponse modifyOpenLogShipper(ModifyOpenLogShipperRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyOpenLogShipperWithOptions(request, runtime);
    }

    /**
     * @summary Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
     *
     * @param request ModifyOperateVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyOperateVulResponse
     */
    public ModifyOperateVulResponse modifyOperateVulWithOptions(ModifyOperateVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.info)) {
            query.put("Info", request.info);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyOperateVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyOperateVulResponse());
    }

    /**
     * @summary Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
     *
     * @param request ModifyOperateVulRequest
     * @return ModifyOperateVulResponse
     */
    public ModifyOperateVulResponse modifyOperateVul(ModifyOperateVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyOperateVulWithOptions(request, runtime);
    }

    /**
     * @summary The new collection frequency of asset fingerprints. Valid values:
     * *   **0**: disabled, which indicates that the asset fingerprints are not automatically or periodically collected.
     * *   **1**: collects asset fingerprints once an hour.
     * *   **3**: collects asset fingerprints once every 3 hours.
     * *   **12**: collects asset fingerprints once every 12 hours.
     * *   **24**: collects asset fingerprints once a day.
     * *   **168**: collects asset fingerprints once every 7 days.
     *
     * @param request ModifyPropertyScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyPropertyScheduleConfigResponse
     */
    public ModifyPropertyScheduleConfigResponse modifyPropertyScheduleConfigWithOptions(ModifyPropertyScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scheduleTime)) {
            query.put("ScheduleTime", request.scheduleTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyPropertyScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyPropertyScheduleConfigResponse());
    }

    /**
     * @summary The new collection frequency of asset fingerprints. Valid values:
     * *   **0**: disabled, which indicates that the asset fingerprints are not automatically or periodically collected.
     * *   **1**: collects asset fingerprints once an hour.
     * *   **3**: collects asset fingerprints once every 3 hours.
     * *   **12**: collects asset fingerprints once every 12 hours.
     * *   **24**: collects asset fingerprints once a day.
     * *   **168**: collects asset fingerprints once every 7 days.
     *
     * @param request ModifyPropertyScheduleConfigRequest
     * @return ModifyPropertyScheduleConfigResponse
     */
    public ModifyPropertyScheduleConfigResponse modifyPropertyScheduleConfig(ModifyPropertyScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyPropertyScheduleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Performs security check tasks on servers with a few clicks.
     *
     * @param request ModifyPushAllTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyPushAllTaskResponse
     */
    public ModifyPushAllTaskResponse modifyPushAllTaskWithOptions(ModifyPushAllTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tasks)) {
            query.put("Tasks", request.tasks);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyPushAllTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyPushAllTaskResponse());
    }

    /**
     * @summary Performs security check tasks on servers with a few clicks.
     *
     * @param request ModifyPushAllTaskRequest
     * @return ModifyPushAllTaskResponse
     */
    public ModifyPushAllTaskResponse modifyPushAllTask(ModifyPushAllTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyPushAllTaskWithOptions(request, runtime);
    }

    /**
     * @summary Refreshes the list of processes that are associated with a Linux software vulnerability.
     *
     * @param request ModifyRefreshProcessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyRefreshProcessInfoResponse
     */
    public ModifyRefreshProcessInfoResponse modifyRefreshProcessInfoWithOptions(ModifyRefreshProcessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyRefreshProcessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyRefreshProcessInfoResponse());
    }

    /**
     * @summary Refreshes the list of processes that are associated with a Linux software vulnerability.
     *
     * @param request ModifyRefreshProcessInfoRequest
     * @return ModifyRefreshProcessInfoResponse
     */
    public ModifyRefreshProcessInfoResponse modifyRefreshProcessInfo(ModifyRefreshProcessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyRefreshProcessInfoWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI ModifyRiskCheckStatus is deprecated
     *
     * @summary Changes the status of a check item in the results of a check task. You can ignore or cancel ignoring a check item.
     *
     * @description This operation is phased out. You can use the following operations:
     * \\-To **ignore a check item**, use the AddCheckResultWhiteList operation.
     * \\-To **cancel ignoring a check item**, use the RemoveCheckResultWhiteList operation.
     *
     * @param request ModifyRiskCheckStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyRiskCheckStatusResponse
     */
    // Deprecated
    public ModifyRiskCheckStatusResponse modifyRiskCheckStatusWithOptions(ModifyRiskCheckStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.itemId)) {
            query.put("ItemId", request.itemId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyRiskCheckStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyRiskCheckStatusResponse());
    }

    /**
     * @deprecated OpenAPI ModifyRiskCheckStatus is deprecated
     *
     * @summary Changes the status of a check item in the results of a check task. You can ignore or cancel ignoring a check item.
     *
     * @description This operation is phased out. You can use the following operations:
     * \\-To **ignore a check item**, use the AddCheckResultWhiteList operation.
     * \\-To **cancel ignoring a check item**, use the RemoveCheckResultWhiteList operation.
     *
     * @param request ModifyRiskCheckStatusRequest
     * @return ModifyRiskCheckStatusResponse
     */
    // Deprecated
    public ModifyRiskCheckStatusResponse modifyRiskCheckStatus(ModifyRiskCheckStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyRiskCheckStatusWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI ModifyRiskSingleResultStatus is deprecated
     *
     * @summary Modifies the status of a risk item that affects your assets. You can ignore the risk item or cancel ignoring the risk item.
     *
     * @description This operation is phased out. You can use the following operations:
     * \\-To **ignore a risk item**, use the AddCheckInstanceResultWhiteList operation.
     * \\-To **cancel ignoring a risk item**, use the RemoveCheckInstanceResultWhiteList operation.
     *
     * @param request ModifyRiskSingleResultStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyRiskSingleResultStatusResponse
     */
    // Deprecated
    public ModifyRiskSingleResultStatusResponse modifyRiskSingleResultStatusWithOptions(ModifyRiskSingleResultStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyRiskSingleResultStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyRiskSingleResultStatusResponse());
    }

    /**
     * @deprecated OpenAPI ModifyRiskSingleResultStatus is deprecated
     *
     * @summary Modifies the status of a risk item that affects your assets. You can ignore the risk item or cancel ignoring the risk item.
     *
     * @description This operation is phased out. You can use the following operations:
     * \\-To **ignore a risk item**, use the AddCheckInstanceResultWhiteList operation.
     * \\-To **cancel ignoring a risk item**, use the RemoveCheckInstanceResultWhiteList operation.
     *
     * @param request ModifyRiskSingleResultStatusRequest
     * @return ModifyRiskSingleResultStatusResponse
     */
    // Deprecated
    public ModifyRiskSingleResultStatusResponse modifyRiskSingleResultStatus(ModifyRiskSingleResultStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyRiskSingleResultStatusWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a rule for container tamper-proofing.
     *
     * @param request ModifySasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySasContainerWebDefenseRuleResponse
     */
    public ModifySasContainerWebDefenseRuleResponse modifySasContainerWebDefenseRuleWithOptions(ModifySasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pathConfDTOList)) {
            query.put("PathConfDTOList", request.pathConfDTOList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySasContainerWebDefenseRuleResponse());
    }

    /**
     * @summary Modifies a rule for container tamper-proofing.
     *
     * @param request ModifySasContainerWebDefenseRuleRequest
     * @return ModifySasContainerWebDefenseRuleResponse
     */
    public ModifySasContainerWebDefenseRuleResponse modifySasContainerWebDefenseRule(ModifySasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated
     *
     * @summary Specifies the time when an automatic configuration check is performed on cloud services.
     *
     * @description This operation is phased out. You can use the ChangeCheckConfig operation.
     *
     * @param request ModifySecurityCheckScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySecurityCheckScheduleConfigResponse
     */
    // Deprecated
    public ModifySecurityCheckScheduleConfigResponse modifySecurityCheckScheduleConfigWithOptions(ModifySecurityCheckScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.daysOfWeek)) {
            query.put("DaysOfWeek", request.daysOfWeek);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySecurityCheckScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySecurityCheckScheduleConfigResponse());
    }

    /**
     * @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated
     *
     * @summary Specifies the time when an automatic configuration check is performed on cloud services.
     *
     * @description This operation is phased out. You can use the ChangeCheckConfig operation.
     *
     * @param request ModifySecurityCheckScheduleConfigRequest
     * @return ModifySecurityCheckScheduleConfigResponse
     */
    // Deprecated
    public ModifySecurityCheckScheduleConfigResponse modifySecurityCheckScheduleConfig(ModifySecurityCheckScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySecurityCheckScheduleConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the alert handling rule for alerts that are added to the whitelist by asset.
     *
     * @param request ModifySecurityEventMarkMissIndividuallyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySecurityEventMarkMissIndividuallyResponse
     */
    public ModifySecurityEventMarkMissIndividuallyResponse modifySecurityEventMarkMissIndividuallyWithOptions(ModifySecurityEventMarkMissIndividuallyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.deleteMarkMissParam)) {
            body.put("DeleteMarkMissParam", request.deleteMarkMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            body.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.insertMarkMissParam)) {
            body.put("InsertMarkMissParam", request.insertMarkMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySecurityEventMarkMissIndividually"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySecurityEventMarkMissIndividuallyResponse());
    }

    /**
     * @summary Modifies the alert handling rule for alerts that are added to the whitelist by asset.
     *
     * @param request ModifySecurityEventMarkMissIndividuallyRequest
     * @return ModifySecurityEventMarkMissIndividuallyResponse
     */
    public ModifySecurityEventMarkMissIndividuallyResponse modifySecurityEventMarkMissIndividually(ModifySecurityEventMarkMissIndividuallyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySecurityEventMarkMissIndividuallyWithOptions(request, runtime);
    }

    /**
     * @summary Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
     *
     * @param request ModifyStartVulScanRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyStartVulScanResponse
     */
    public ModifyStartVulScanResponse modifyStartVulScanWithOptions(ModifyStartVulScanRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyStartVulScan"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyStartVulScanResponse());
    }

    /**
     * @summary Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
     *
     * @param request ModifyStartVulScanRequest
     * @return ModifyStartVulScanResponse
     */
    public ModifyStartVulScanResponse modifyStartVulScan(ModifyStartVulScanRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyStartVulScanWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a baseline check policy.
     *
     * @param request ModifyStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyStrategyResponse
     */
    public ModifyStrategyResponse modifyStrategyWithOptions(ModifyStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.customType)) {
            query.put("CustomType", request.customType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cycleDays)) {
            query.put("CycleDays", request.cycleDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cycleStartTime)) {
            query.put("CycleStartTime", request.cycleStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskCustomParams)) {
            query.put("RiskCustomParams", request.riskCustomParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskSubTypeName)) {
            query.put("RiskSubTypeName", request.riskSubTypeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyStrategyResponse());
    }

    /**
     * @summary Modifies a baseline check policy.
     *
     * @param request ModifyStrategyRequest
     * @return ModifyStrategyResponse
     */
    public ModifyStrategyResponse modifyStrategy(ModifyStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyStrategyWithOptions(request, runtime);
    }

    /**
     * @summary The source IP address of the request.
     *
     * @param request ModifyStrategyTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyStrategyTargetResponse
     */
    public ModifyStrategyTargetResponse modifyStrategyTargetWithOptions(ModifyStrategyTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyStrategyTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyStrategyTargetResponse());
    }

    /**
     * @summary The source IP address of the request.
     *
     * @param request ModifyStrategyTargetRequest
     * @return ModifyStrategyTargetResponse
     */
    public ModifyStrategyTargetResponse modifyStrategyTarget(ModifyStrategyTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyStrategyTargetWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the names of the tags that are added to assets, or modifies the tags for assets.
     *
     * @param request ModifyTagWithUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyTagWithUuidResponse
     */
    public ModifyTagWithUuidResponse modifyTagWithUuidWithOptions(ModifyTagWithUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagId)) {
            query.put("TagId", request.tagId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyTagWithUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyTagWithUuidResponse());
    }

    /**
     * @summary Modifies the names of the tags that are added to assets, or modifies the tags for assets.
     *
     * @param request ModifyTagWithUuidRequest
     * @return ModifyTagWithUuidResponse
     */
    public ModifyTagWithUuidResponse modifyTagWithUuid(ModifyTagWithUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyTagWithUuidWithOptions(request, runtime);
    }

    /**
     * @summary Modifies an anti-ransomware policy for databases.
     *
     * @param tmpReq ModifyUniBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyUniBackupPolicyResponse
     */
    public ModifyUniBackupPolicyResponse modifyUniBackupPolicyWithOptions(ModifyUniBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyUniBackupPolicyShrinkRequest request = new ModifyUniBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.fullPlan)) {
            request.fullPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, "FullPlan", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.incPlan)) {
            request.incPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, "IncPlan", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountName)) {
            query.put("AccountName", request.accountName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.accountPassword)) {
            query.put("AccountPassword", request.accountPassword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fullPlanShrink)) {
            query.put("FullPlan", request.fullPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incPlanShrink)) {
            query.put("IncPlan", request.incPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyName)) {
            query.put("PolicyName", request.policyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyStatus)) {
            query.put("PolicyStatus", request.policyStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.retention)) {
            query.put("Retention", request.retention);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.speedLimiter)) {
            query.put("SpeedLimiter", request.speedLimiter);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyUniBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyUniBackupPolicyResponse());
    }

    /**
     * @summary Modifies an anti-ransomware policy for databases.
     *
     * @param request ModifyUniBackupPolicyRequest
     * @return ModifyUniBackupPolicyResponse
     */
    public ModifyUniBackupPolicyResponse modifyUniBackupPolicy(ModifyUniBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyUniBackupPolicyWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables a honeypot.
     *
     * @param request ModifyVpcHoneyPotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVpcHoneyPotResponse
     */
    public ModifyVpcHoneyPotResponse modifyVpcHoneyPotWithOptions(ModifyVpcHoneyPotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeyPotAction)) {
            query.put("HoneyPotAction", request.honeyPotAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVpcHoneyPot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVpcHoneyPotResponse());
    }

    /**
     * @summary Enables or disables a honeypot.
     *
     * @param request ModifyVpcHoneyPotRequest
     * @return ModifyVpcHoneyPotResponse
     */
    public ModifyVpcHoneyPotResponse modifyVpcHoneyPot(ModifyVpcHoneyPotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVpcHoneyPotWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configurations of the vulnerability scan feature.
     *
     * @param request ModifyVulConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulConfigResponse
     */
    public ModifyVulConfigResponse modifyVulConfigWithOptions(ModifyVulConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulConfigResponse());
    }

    /**
     * @summary Modifies the configurations of the vulnerability scan feature.
     *
     * @param request ModifyVulConfigRequest
     * @return ModifyVulConfigResponse
     */
    public ModifyVulConfigResponse modifyVulConfig(ModifyVulConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configurations of the vulnerability scan feature for a server.
     *
     * @param request ModifyVulTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulTargetResponse
     */
    public ModifyVulTargetResponse modifyVulTargetWithOptions(ModifyVulTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulTargetResponse());
    }

    /**
     * @summary Modifies the configurations of the vulnerability scan feature for a server.
     *
     * @param request ModifyVulTargetRequest
     * @return ModifyVulTargetResponse
     */
    public ModifyVulTargetResponse modifyVulTarget(ModifyVulTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulTargetWithOptions(request, runtime);
    }

    /**
     * @summary Configures vulnerability scan for a server.
     *
     * @param request ModifyVulTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulTargetConfigResponse
     */
    public ModifyVulTargetConfigResponse modifyVulTargetConfigWithOptions(ModifyVulTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulTargetConfigResponse());
    }

    /**
     * @summary Configures vulnerability scan for a server.
     *
     * @param request ModifyVulTargetConfigRequest
     * @return ModifyVulTargetConfigResponse
     */
    public ModifyVulTargetConfigResponse modifyVulTargetConfig(ModifyVulTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulTargetConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the servers that are added to a vulnerability whitelist.
     *
     * @param request ModifyVulWhitelistTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulWhitelistTargetResponse
     */
    public ModifyVulWhitelistTargetResponse modifyVulWhitelistTargetWithOptions(ModifyVulWhitelistTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetInfo)) {
            query.put("TargetInfo", request.targetInfo);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulWhitelistTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulWhitelistTargetResponse());
    }

    /**
     * @summary Modifies the servers that are added to a vulnerability whitelist.
     *
     * @param request ModifyVulWhitelistTargetRequest
     * @return ModifyVulWhitelistTargetResponse
     */
    public ModifyVulWhitelistTargetResponse modifyVulWhitelistTarget(ModifyVulWhitelistTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulWhitelistTargetWithOptions(request, runtime);
    }

    /**
     * @summary Adds a directory to protect for a specified server.
     *
     * @param request ModifyWebLockCreateConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockCreateConfigResponse
     */
    public ModifyWebLockCreateConfigResponse modifyWebLockCreateConfigWithOptions(ModifyWebLockCreateConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defenceMode)) {
            query.put("DefenceMode", request.defenceMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dir)) {
            query.put("Dir", request.dir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveDir)) {
            query.put("ExclusiveDir", request.exclusiveDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFile)) {
            query.put("ExclusiveFile", request.exclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFileType)) {
            query.put("ExclusiveFileType", request.exclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFile)) {
            query.put("InclusiveFile", request.inclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFileType)) {
            query.put("InclusiveFileType", request.inclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.localBackupDir)) {
            query.put("LocalBackupDir", request.localBackupDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockCreateConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockCreateConfigResponse());
    }

    /**
     * @summary Adds a directory to protect for a specified server.
     *
     * @param request ModifyWebLockCreateConfigRequest
     * @return ModifyWebLockCreateConfigResponse
     */
    public ModifyWebLockCreateConfigResponse modifyWebLockCreateConfig(ModifyWebLockCreateConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockCreateConfigWithOptions(request, runtime);
    }

    /**
     * @summary Deletes a directory on a specified server from the protected directories of web tamper proofing.
     *
     * @description After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
     *
     * @param request ModifyWebLockDeleteConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockDeleteConfigResponse
     */
    public ModifyWebLockDeleteConfigResponse modifyWebLockDeleteConfigWithOptions(ModifyWebLockDeleteConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockDeleteConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockDeleteConfigResponse());
    }

    /**
     * @summary Deletes a directory on a specified server from the protected directories of web tamper proofing.
     *
     * @description After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
     *
     * @param request ModifyWebLockDeleteConfigRequest
     * @return ModifyWebLockDeleteConfigResponse
     */
    public ModifyWebLockDeleteConfigResponse modifyWebLockDeleteConfig(ModifyWebLockDeleteConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockDeleteConfigWithOptions(request, runtime);
    }

    /**
     * @summary Changes the status of processes for web tamper proofing.
     *
     * @param request ModifyWebLockProcessStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockProcessStatusResponse
     */
    public ModifyWebLockProcessStatusResponse modifyWebLockProcessStatusWithOptions(ModifyWebLockProcessStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealAll)) {
            query.put("DealAll", request.dealAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateInfo)) {
            query.put("OperateInfo", request.operateInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processPath)) {
            query.put("ProcessPath", request.processPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockProcessStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockProcessStatusResponse());
    }

    /**
     * @summary Changes the status of processes for web tamper proofing.
     *
     * @param request ModifyWebLockProcessStatusRequest
     * @return ModifyWebLockProcessStatusResponse
     */
    public ModifyWebLockProcessStatusResponse modifyWebLockProcessStatus(ModifyWebLockProcessStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockProcessStatusWithOptions(request, runtime);
    }

    /**
     * @summary Enables web tamper proofing for a specified server.
     *
     * @param request ModifyWebLockStartRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockStartResponse
     */
    public ModifyWebLockStartResponse modifyWebLockStartWithOptions(ModifyWebLockStartRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defenceMode)) {
            query.put("DefenceMode", request.defenceMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dir)) {
            query.put("Dir", request.dir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveDir)) {
            query.put("ExclusiveDir", request.exclusiveDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFile)) {
            query.put("ExclusiveFile", request.exclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFileType)) {
            query.put("ExclusiveFileType", request.exclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFileType)) {
            query.put("InclusiveFileType", request.inclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.localBackupDir)) {
            query.put("LocalBackupDir", request.localBackupDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockStart"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockStartResponse());
    }

    /**
     * @summary Enables web tamper proofing for a specified server.
     *
     * @param request ModifyWebLockStartRequest
     * @return ModifyWebLockStartResponse
     */
    public ModifyWebLockStartResponse modifyWebLockStart(ModifyWebLockStartRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockStartWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables web tamper proofing for a server.
     *
     * @param request ModifyWebLockStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockStatusResponse
     */
    public ModifyWebLockStatusResponse modifyWebLockStatusWithOptions(ModifyWebLockStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockStatusResponse());
    }

    /**
     * @summary Enables or disables web tamper proofing for a server.
     *
     * @param request ModifyWebLockStatusRequest
     * @return ModifyWebLockStatusResponse
     */
    public ModifyWebLockStatusResponse modifyWebLockStatus(ModifyWebLockStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockStatusWithOptions(request, runtime);
    }

    /**
     * @summary Disables web tamper proofing for a specified server.
     *
     * @param request ModifyWebLockUnbindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockUnbindResponse
     */
    public ModifyWebLockUnbindResponse modifyWebLockUnbindWithOptions(ModifyWebLockUnbindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockUnbind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockUnbindResponse());
    }

    /**
     * @summary Disables web tamper proofing for a specified server.
     *
     * @param request ModifyWebLockUnbindRequest
     * @return ModifyWebLockUnbindResponse
     */
    public ModifyWebLockUnbindResponse modifyWebLockUnbind(ModifyWebLockUnbindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockUnbindWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the protection policy for a specified server.
     *
     * @param request ModifyWebLockUpdateConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockUpdateConfigResponse
     */
    public ModifyWebLockUpdateConfigResponse modifyWebLockUpdateConfigWithOptions(ModifyWebLockUpdateConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defenceMode)) {
            query.put("DefenceMode", request.defenceMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dir)) {
            query.put("Dir", request.dir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveDir)) {
            query.put("ExclusiveDir", request.exclusiveDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFile)) {
            query.put("ExclusiveFile", request.exclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFileType)) {
            query.put("ExclusiveFileType", request.exclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFile)) {
            query.put("InclusiveFile", request.inclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFileType)) {
            query.put("InclusiveFileType", request.inclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.localBackupDir)) {
            query.put("LocalBackupDir", request.localBackupDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockUpdateConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockUpdateConfigResponse());
    }

    /**
     * @summary Modifies the protection policy for a specified server.
     *
     * @param request ModifyWebLockUpdateConfigRequest
     * @return ModifyWebLockUpdateConfigResponse
     */
    public ModifyWebLockUpdateConfigResponse modifyWebLockUpdateConfig(ModifyWebLockUpdateConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockUpdateConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a custom web directory.
     *
     * @param request ModifyWebPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebPathResponse
     */
    public ModifyWebPathResponse modifyWebPathWithOptions(ModifyWebPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebPathResponse());
    }

    /**
     * @summary Modifies a custom web directory.
     *
     * @param request ModifyWebPathRequest
     * @return ModifyWebPathResponse
     */
    public ModifyWebPathResponse modifyWebPath(ModifyWebPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebPathWithOptions(request, runtime);
    }

    /**
     * @summary 开启按量购买。
     *
     * @param request OpenPartialBuyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OpenPartialBuyResponse
     */
    public OpenPartialBuyResponse openPartialBuyWithOptions(OpenPartialBuyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OpenPartialBuy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OpenPartialBuyResponse());
    }

    /**
     * @summary 开启按量购买。
     *
     * @param request OpenPartialBuyRequest
     * @return OpenPartialBuyResponse
     */
    public OpenPartialBuyResponse openPartialBuy(OpenPartialBuyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.openPartialBuyWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables sensitive file scan.
     *
     * @param request OpenSensitiveFileScanRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OpenSensitiveFileScanResponse
     */
    public OpenSensitiveFileScanResponse openSensitiveFileScanWithOptions(OpenSensitiveFileScanRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.switchOn)) {
            query.put("SwitchOn", request.switchOn);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OpenSensitiveFileScan"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OpenSensitiveFileScanResponse());
    }

    /**
     * @summary Enables or disables sensitive file scan.
     *
     * @param request OpenSensitiveFileScanRequest
     * @return OpenSensitiveFileScanResponse
     */
    public OpenSensitiveFileScanResponse openSensitiveFileScan(OpenSensitiveFileScanRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.openSensitiveFileScanWithOptions(request, runtime);
    }

    /**
     * @summary Installs the Security Center agent on servers.
     *
     * @param request OperateAgentClientInstallRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateAgentClientInstallResponse
     */
    public OperateAgentClientInstallResponse operateAgentClientInstallWithOptions(OperateAgentClientInstallRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.region)) {
            query.put("Region", request.region);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateAgentClientInstall"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateAgentClientInstallResponse());
    }

    /**
     * @summary Installs the Security Center agent on servers.
     *
     * @param request OperateAgentClientInstallRequest
     * @return OperateAgentClientInstallResponse
     */
    public OperateAgentClientInstallResponse operateAgentClientInstall(OperateAgentClientInstallRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateAgentClientInstallWithOptions(request, runtime);
    }

    /**
     * @summary Adds or deletes container applications for tamper proofing.
     *
     * @param request OperateApplicationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateApplicationResponse
     */
    public OperateApplicationResponse operateApplicationWithOptions(OperateApplicationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.containerWebDefenseApplicationDTOS)) {
            query.put("ContainerWebDefenseApplicationDTOS", request.containerWebDefenseApplicationDTOS);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateApplication"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateApplicationResponse());
    }

    /**
     * @summary Adds or deletes container applications for tamper proofing.
     *
     * @param request OperateApplicationRequest
     * @return OperateApplicationResponse
     */
    public OperateApplicationResponse operateApplication(OperateApplicationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateApplicationWithOptions(request, runtime);
    }

    /**
     * @summary Manages an Object Storage Service (OSS) bucket check task.
     *
     * @param request OperateBucketScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateBucketScanTaskResponse
     */
    public OperateBucketScanTaskResponse operateBucketScanTaskWithOptions(OperateBucketScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateCode)) {
            query.put("OperateCode", request.operateCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateBucketScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateBucketScanTaskResponse());
    }

    /**
     * @summary Manages an Object Storage Service (OSS) bucket check task.
     *
     * @param request OperateBucketScanTaskRequest
     * @return OperateBucketScanTaskResponse
     */
    public OperateBucketScanTaskResponse operateBucketScanTask(OperateBucketScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateBucketScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables a feature by type.
     *
     * @param request OperateCommonOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateCommonOverallConfigResponse
     */
    public OperateCommonOverallConfigResponse operateCommonOverallConfigWithOptions(OperateCommonOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noTargetAsOn)) {
            query.put("NoTargetAsOn", request.noTargetAsOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateCommonOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateCommonOverallConfigResponse());
    }

    /**
     * @summary Enables or disables a feature by type.
     *
     * @param request OperateCommonOverallConfigRequest
     * @return OperateCommonOverallConfigResponse
     */
    public OperateCommonOverallConfigResponse operateCommonOverallConfig(OperateCommonOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateCommonOverallConfigWithOptions(request, runtime);
    }

    /**
     * @summary Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
     *
     * @param request OperateCommonTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateCommonTargetConfigResponse
     */
    public OperateCommonTargetConfigResponse operateCommonTargetConfigWithOptions(OperateCommonTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetOperations)) {
            query.put("TargetOperations", request.targetOperations);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateCommonTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateCommonTargetConfigResponse());
    }

    /**
     * @summary Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
     *
     * @param request OperateCommonTargetConfigRequest
     * @return OperateCommonTargetConfigResponse
     */
    public OperateCommonTargetConfigResponse operateCommonTargetConfig(OperateCommonTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateCommonTargetConfigWithOptions(request, runtime);
    }

    /**
     * @summary Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
     *
     * @param request OperateImageBaselineWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateImageBaselineWhitelistResponse
     */
    public OperateImageBaselineWhitelistResponse operateImageBaselineWhitelistWithOptions(OperateImageBaselineWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineItemKeyList)) {
            query.put("BaselineItemKeyList", request.baselineItemKeyList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operation)) {
            query.put("Operation", request.operation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateImageBaselineWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateImageBaselineWhitelistResponse());
    }

    /**
     * @summary Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
     *
     * @param request OperateImageBaselineWhitelistRequest
     * @return OperateImageBaselineWhitelistResponse
     */
    public OperateImageBaselineWhitelistResponse operateImageBaselineWhitelist(OperateImageBaselineWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateImageBaselineWhitelistWithOptions(request, runtime);
    }

    /**
     * @summary Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
     *
     * @param request OperateImageVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateImageVulResponse
     */
    public OperateImageVulResponse operateImageVulWithOptions(OperateImageVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.info)) {
            query.put("Info", request.info);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateImageVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateImageVulResponse());
    }

    /**
     * @summary Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
     *
     * @param request OperateImageVulRequest
     * @return OperateImageVulResponse
     */
    public OperateImageVulResponse operateImageVul(OperateImageVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateImageVulWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables a feature that detects exceptions.
     *
     * @param request OperateSuspiciousOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateSuspiciousOverallConfigResponse
     */
    public OperateSuspiciousOverallConfigResponse operateSuspiciousOverallConfigWithOptions(OperateSuspiciousOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noTargetAsOn)) {
            query.put("NoTargetAsOn", request.noTargetAsOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateSuspiciousOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateSuspiciousOverallConfigResponse());
    }

    /**
     * @summary Enables or disables a feature that detects exceptions.
     *
     * @param request OperateSuspiciousOverallConfigRequest
     * @return OperateSuspiciousOverallConfigResponse
     */
    public OperateSuspiciousOverallConfigResponse operateSuspiciousOverallConfig(OperateSuspiciousOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateSuspiciousOverallConfigWithOptions(request, runtime);
    }

    /**
     * @summary Configures the scope on which proactive defense takes effect.
     *
     * @param request OperateSuspiciousTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateSuspiciousTargetConfigResponse
     */
    public OperateSuspiciousTargetConfigResponse operateSuspiciousTargetConfigWithOptions(OperateSuspiciousTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetOperations)) {
            query.put("TargetOperations", request.targetOperations);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateSuspiciousTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateSuspiciousTargetConfigResponse());
    }

    /**
     * @summary Configures the scope on which proactive defense takes effect.
     *
     * @param request OperateSuspiciousTargetConfigRequest
     * @return OperateSuspiciousTargetConfigResponse
     */
    public OperateSuspiciousTargetConfigResponse operateSuspiciousTargetConfig(OperateSuspiciousTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateSuspiciousTargetConfigWithOptions(request, runtime);
    }

    /**
     * @summary Change the rule status for non-image program defense.
     *
     * @param request OperateSwitchStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateSwitchStatusResponse
     */
    public OperateSwitchStatusResponse operateSwitchStatusWithOptions(OperateSwitchStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateSwitchStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateSwitchStatusResponse());
    }

    /**
     * @summary Change the rule status for non-image program defense.
     *
     * @param request OperateSwitchStatusRequest
     * @return OperateSwitchStatusResponse
     */
    public OperateSwitchStatusResponse operateSwitchStatus(OperateSwitchStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateSwitchStatusWithOptions(request, runtime);
    }

    /**
     * @summary Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
     *
     * @param request OperateVirusEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateVirusEventsResponse
     */
    public OperateVirusEventsResponse operateVirusEventsWithOptions(OperateVirusEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.operationAll)) {
            query.put("OperationAll", request.operationAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationRange)) {
            query.put("OperationRange", request.operationRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateVirusEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateVirusEventsResponse());
    }

    /**
     * @summary Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
     *
     * @param request OperateVirusEventsRequest
     * @return OperateVirusEventsResponse
     */
    public OperateVirusEventsResponse operateVirusEvents(OperateVirusEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateVirusEventsWithOptions(request, runtime);
    }

    /**
     * @summary Fixes Linux software vulnerabilities.
     *
     * @param request OperateVulsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateVulsResponse
     */
    public OperateVulsResponse operateVulsWithOptions(OperateVulsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulNames)) {
            query.put("VulNames", request.vulNames);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateVuls"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateVulsResponse());
    }

    /**
     * @summary Fixes Linux software vulnerabilities.
     *
     * @param request OperateVulsRequest
     * @return OperateVulsResponse
     */
    public OperateVulsResponse operateVuls(OperateVulsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateVulsWithOptions(request, runtime);
    }

    /**
     * @summary Handles alert events that are generated for web tamper proofing.
     *
     * @param request OperateWebLockFileEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateWebLockFileEventsResponse
     */
    public OperateWebLockFileEventsResponse operateWebLockFileEventsWithOptions(OperateWebLockFileEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealAll)) {
            query.put("DealAll", request.dealAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventIds)) {
            query.put("EventIds", request.eventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateWebLockFileEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperateWebLockFileEventsResponse());
    }

    /**
     * @summary Handles alert events that are generated for web tamper proofing.
     *
     * @param request OperateWebLockFileEventsRequest
     * @return OperateWebLockFileEventsResponse
     */
    public OperateWebLockFileEventsResponse operateWebLockFileEvents(OperateWebLockFileEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateWebLockFileEventsWithOptions(request, runtime);
    }

    /**
     * @summary Cancels ignoring alert events.
     *
     * @param request OperationCancelIgnoreSuspEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperationCancelIgnoreSuspEventResponse
     */
    public OperationCancelIgnoreSuspEventResponse operationCancelIgnoreSuspEventWithOptions(OperationCancelIgnoreSuspEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperationCancelIgnoreSuspEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperationCancelIgnoreSuspEventResponse());
    }

    /**
     * @summary Cancels ignoring alert events.
     *
     * @param request OperationCancelIgnoreSuspEventRequest
     * @return OperationCancelIgnoreSuspEventResponse
     */
    public OperationCancelIgnoreSuspEventResponse operationCancelIgnoreSuspEvent(OperationCancelIgnoreSuspEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operationCancelIgnoreSuspEventWithOptions(request, runtime);
    }

    /**
     * @summary Handles multiple exceptions at a time.
     *
     * @param request OperationSuspEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperationSuspEventsResponse
     */
    public OperationSuspEventsResponse operationSuspEventsWithOptions(OperationSuspEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operation)) {
            query.put("Operation", request.operation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subOperation)) {
            query.put("SubOperation", request.subOperation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.suspiciousEventIds)) {
            query.put("SuspiciousEventIds", request.suspiciousEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.warnType)) {
            query.put("WarnType", request.warnType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperationSuspEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new OperationSuspEventsResponse());
    }

    /**
     * @summary Handles multiple exceptions at a time.
     *
     * @param request OperationSuspEventsRequest
     * @return OperationSuspEventsResponse
     */
    public OperationSuspEventsResponse operationSuspEvents(OperationSuspEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operationSuspEventsWithOptions(request, runtime);
    }

    /**
     * @summary Queries image repositories by page.
     *
     * @param request PageImageRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PageImageRegistryResponse
     */
    public PageImageRegistryResponse pageImageRegistryWithOptions(PageImageRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            body.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            body.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryNameLike)) {
            body.put("RegistryNameLike", request.registryNameLike);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypeInList)) {
            body.put("RegistryTypeInList", request.registryTypeInList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypeNotInList)) {
            body.put("RegistryTypeNotInList", request.registryTypeNotInList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PageImageRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PageImageRegistryResponse());
    }

    /**
     * @summary Queries image repositories by page.
     *
     * @param request PageImageRegistryRequest
     * @return PageImageRegistryResponse
     */
    public PageImageRegistryResponse pageImageRegistry(PageImageRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.pageImageRegistryWithOptions(request, runtime);
    }

    /**
     * @summary Enables or disables the Security Center agent.
     *
     * @param request PauseClientRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PauseClientResponse
     */
    public PauseClientResponse pauseClientWithOptions(PauseClientRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PauseClient"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PauseClientResponse());
    }

    /**
     * @summary Enables or disables the Security Center agent.
     *
     * @param request PauseClientRequest
     * @return PauseClientResponse
     */
    public PauseClientResponse pauseClient(PauseClientRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.pauseClientWithOptions(request, runtime);
    }

    /**
     * @summary Creates an image scan task.
     *
     * @description Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
     *
     * @param request PublicCreateImageScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PublicCreateImageScanTaskResponse
     */
    public PublicCreateImageScanTaskResponse publicCreateImageScanTaskWithOptions(PublicCreateImageScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.digests)) {
            query.put("Digests", request.digests);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIds)) {
            query.put("RegionIds", request.regionIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypes)) {
            query.put("RegistryTypes", request.registryTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoIds)) {
            query.put("RepoIds", request.repoIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNames)) {
            query.put("RepoNames", request.repoNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespaces)) {
            query.put("RepoNamespaces", request.repoNamespaces);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PublicCreateImageScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PublicCreateImageScanTaskResponse());
    }

    /**
     * @summary Creates an image scan task.
     *
     * @description Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
     *
     * @param request PublicCreateImageScanTaskRequest
     * @return PublicCreateImageScanTaskResponse
     */
    public PublicCreateImageScanTaskResponse publicCreateImageScanTask(PublicCreateImageScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.publicCreateImageScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary 预检测，不会实际创建扫描任务，返回本次扫描涉及的镜像数量和消耗授权数量。
     *
     * @param request PublicPreCheckImageScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PublicPreCheckImageScanTaskResponse
     */
    public PublicPreCheckImageScanTaskResponse publicPreCheckImageScanTaskWithOptions(PublicPreCheckImageScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.digests)) {
            query.put("Digests", request.digests);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIds)) {
            query.put("RegionIds", request.regionIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypes)) {
            query.put("RegistryTypes", request.registryTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoIds)) {
            query.put("RepoIds", request.repoIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNames)) {
            query.put("RepoNames", request.repoNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespaces)) {
            query.put("RepoNamespaces", request.repoNamespaces);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PublicPreCheckImageScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PublicPreCheckImageScanTaskResponse());
    }

    /**
     * @summary 预检测，不会实际创建扫描任务，返回本次扫描涉及的镜像数量和消耗授权数量。
     *
     * @param request PublicPreCheckImageScanTaskRequest
     * @return PublicPreCheckImageScanTaskResponse
     */
    public PublicPreCheckImageScanTaskResponse publicPreCheckImageScanTask(PublicPreCheckImageScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.publicPreCheckImageScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Adds images to Security Center and creates an image scan task to scan the images.
     *
     * @param request PublicSyncAndCreateImageScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PublicSyncAndCreateImageScanTaskResponse
     */
    public PublicSyncAndCreateImageScanTaskResponse publicSyncAndCreateImageScanTaskWithOptions(PublicSyncAndCreateImageScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.images)) {
            query.put("Images", request.images);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PublicSyncAndCreateImageScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new PublicSyncAndCreateImageScanTaskResponse());
    }

    /**
     * @summary Adds images to Security Center and creates an image scan task to scan the images.
     *
     * @param request PublicSyncAndCreateImageScanTaskRequest
     * @return PublicSyncAndCreateImageScanTaskResponse
     */
    public PublicSyncAndCreateImageScanTaskResponse publicSyncAndCreateImageScanTask(PublicSyncAndCreateImageScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.publicSyncAndCreateImageScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Queries the number of alert events in each attack phase.
     *
     * @param request QueryAttackCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAttackCountResponse
     */
    public QueryAttackCountResponse queryAttackCountWithOptions(QueryAttackCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            body.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackCountResponse());
    }

    /**
     * @summary Queries the number of alert events in each attack phase.
     *
     * @param request QueryAttackCountRequest
     * @return QueryAttackCountResponse
     */
    public QueryAttackCountResponse queryAttackCount(QueryAttackCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryAttackCountWithOptions(request, runtime);
    }

    /**
     * @summary Queries the progress of a database scan task.
     *
     * @param request QueryDiscoverDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDiscoverDatabaseResponse
     */
    public QueryDiscoverDatabaseResponse queryDiscoverDatabaseWithOptions(QueryDiscoverDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.createMark)) {
            query.put("CreateMark", request.createMark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryDiscoverDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryDiscoverDatabaseResponse());
    }

    /**
     * @summary Queries the progress of a database scan task.
     *
     * @param request QueryDiscoverDatabaseRequest
     * @return QueryDiscoverDatabaseResponse
     */
    public QueryDiscoverDatabaseResponse queryDiscoverDatabase(QueryDiscoverDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryDiscoverDatabaseWithOptions(request, runtime);
    }

    /**
     * @summary Queries the ID of an asset group by using the name of the asset group.
     *
     * @description You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
     * ### Limits
     * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryGroupIdByGroupNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupIdByGroupNameResponse
     */
    public QueryGroupIdByGroupNameResponse queryGroupIdByGroupNameWithOptions(QueryGroupIdByGroupNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupName)) {
            query.put("GroupName", request.groupName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGroupIdByGroupName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGroupIdByGroupNameResponse());
    }

    /**
     * @summary Queries the ID of an asset group by using the name of the asset group.
     *
     * @description You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
     * ### Limits
     * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryGroupIdByGroupNameRequest
     * @return QueryGroupIdByGroupNameResponse
     */
    public QueryGroupIdByGroupNameResponse queryGroupIdByGroupName(QueryGroupIdByGroupNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryGroupIdByGroupNameWithOptions(request, runtime);
    }

    /**
     * @summary Queries whitelist rules.
     *
     * @param request QueryGroupedSecurityEventMarkMissListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupedSecurityEventMarkMissListResponse
     */
    public QueryGroupedSecurityEventMarkMissListResponse queryGroupedSecurityEventMarkMissListWithOptions(QueryGroupedSecurityEventMarkMissListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.disposalWay)) {
            query.put("DisposalWay", request.disposalWay);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            body.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            body.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            body.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            body.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            body.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGroupedSecurityEventMarkMissList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGroupedSecurityEventMarkMissListResponse());
    }

    /**
     * @summary Queries whitelist rules.
     *
     * @param request QueryGroupedSecurityEventMarkMissListRequest
     * @return QueryGroupedSecurityEventMarkMissListResponse
     */
    public QueryGroupedSecurityEventMarkMissListResponse queryGroupedSecurityEventMarkMissList(QueryGroupedSecurityEventMarkMissListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryGroupedSecurityEventMarkMissListWithOptions(request, runtime);
    }

    /**
     * @summary Queries the icons that correspond to nodes and edges.
     *
     * @param request QueryIncidentIconListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentIconListResponse
     */
    public QueryIncidentIconListResponse queryIncidentIconListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentIconList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentIconListResponse());
    }

    /**
     * @summary Queries the icons that correspond to nodes and edges.
     *
     * @return QueryIncidentIconListResponse
     */
    public QueryIncidentIconListResponse queryIncidentIconList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentIconListWithOptions(runtime);
    }

    /**
     * @summary Queries whether a node can be drilled down.
     *
     * @param request QueryIncidentSubNodesCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentSubNodesCountResponse
     */
    public QueryIncidentSubNodesCountResponse queryIncidentSubNodesCountWithOptions(QueryIncidentSubNodesCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.body)) {
            body.put("body", request.body);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentSubNodesCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentSubNodesCountResponse());
    }

    /**
     * @summary Queries whether a node can be drilled down.
     *
     * @param request QueryIncidentSubNodesCountRequest
     * @return QueryIncidentSubNodesCountResponse
     */
    public QueryIncidentSubNodesCountResponse queryIncidentSubNodesCount(QueryIncidentSubNodesCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentSubNodesCountWithOptions(request, runtime);
    }

    /**
     * @summary Queries the provenance graph of an event by using the event ID.
     *
     * @param request QueryIncidentTracingDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentTracingDetailResponse
     */
    public QueryIncidentTracingDetailResponse queryIncidentTracingDetailWithOptions(QueryIncidentTracingDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.incidentId)) {
            body.put("IncidentId", request.incidentId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentTracingDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentTracingDetailResponse());
    }

    /**
     * @summary Queries the provenance graph of an event by using the event ID.
     *
     * @param request QueryIncidentTracingDetailRequest
     * @return QueryIncidentTracingDetailResponse
     */
    public QueryIncidentTracingDetailResponse queryIncidentTracingDetail(QueryIncidentTracingDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentTracingDetailWithOptions(request, runtime);
    }

    /**
     * @summary Queries whether an event has a provenance graph based on the event ID.
     *
     * @param request QueryIncidentTracingJudgeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentTracingJudgeResponse
     */
    public QueryIncidentTracingJudgeResponse queryIncidentTracingJudgeWithOptions(QueryIncidentTracingJudgeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.incidentId)) {
            body.put("IncidentId", request.incidentId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentTracingJudge"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentTracingJudgeResponse());
    }

    /**
     * @summary Queries whether an event has a provenance graph based on the event ID.
     *
     * @param request QueryIncidentTracingJudgeRequest
     * @return QueryIncidentTracingJudgeResponse
     */
    public QueryIncidentTracingJudgeResponse queryIncidentTracingJudge(QueryIncidentTracingJudgeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentTracingJudgeWithOptions(request, runtime);
    }

    /**
     * @summary Queries the extended information about an event node.
     *
     * @param request QueryIncidentVertexExtendInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentVertexExtendInfoResponse
     */
    public QueryIncidentVertexExtendInfoResponse queryIncidentVertexExtendInfoWithOptions(QueryIncidentVertexExtendInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.offset)) {
            body.put("Offset", request.offset);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.relationType)) {
            body.put("RelationType", request.relationType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.size)) {
            body.put("Size", request.size);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            body.put("VertexId", request.vertexId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexLabel)) {
            body.put("VertexLabel", request.vertexLabel);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentVertexExtendInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentVertexExtendInfoResponse());
    }

    /**
     * @summary Queries the extended information about an event node.
     *
     * @param request QueryIncidentVertexExtendInfoRequest
     * @return QueryIncidentVertexExtendInfoResponse
     */
    public QueryIncidentVertexExtendInfoResponse queryIncidentVertexExtendInfo(QueryIncidentVertexExtendInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentVertexExtendInfoWithOptions(request, runtime);
    }

    /**
     * @summary Queries the detailed information about an event node.
     *
     * @param tmpReq QueryIncidentVertexNodesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentVertexNodesResponse
     */
    public QueryIncidentVertexNodesResponse queryIncidentVertexNodesWithOptions(QueryIncidentVertexNodesRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        QueryIncidentVertexNodesShrinkRequest request = new QueryIncidentVertexNodesShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.edgeLabelList)) {
            request.edgeLabelListShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.edgeLabelList, "EdgeLabelList", "simple");
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.edgeLabelListShrink)) {
            body.put("EdgeLabelList", request.edgeLabelListShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.offset)) {
            body.put("Offset", request.offset);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.size)) {
            body.put("Size", request.size);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            body.put("VertexId", request.vertexId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexLabel)) {
            body.put("VertexLabel", request.vertexLabel);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentVertexNodes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentVertexNodesResponse());
    }

    /**
     * @summary Queries the detailed information about an event node.
     *
     * @param request QueryIncidentVertexNodesRequest
     * @return QueryIncidentVertexNodesResponse
     */
    public QueryIncidentVertexNodesResponse queryIncidentVertexNodes(QueryIncidentVertexNodesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentVertexNodesWithOptions(request, runtime);
    }

    /**
     * @summary Queries the retention period of images that are stored in a Jenkins image repository.
     *
     * @param request QueryJenkinsImageRegistryPersistenceDayRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryJenkinsImageRegistryPersistenceDayResponse
     */
    public QueryJenkinsImageRegistryPersistenceDayResponse queryJenkinsImageRegistryPersistenceDayWithOptions(QueryJenkinsImageRegistryPersistenceDayRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryJenkinsImageRegistryPersistenceDay"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryJenkinsImageRegistryPersistenceDayResponse());
    }

    /**
     * @summary Queries the retention period of images that are stored in a Jenkins image repository.
     *
     * @param request QueryJenkinsImageRegistryPersistenceDayRequest
     * @return QueryJenkinsImageRegistryPersistenceDayResponse
     */
    public QueryJenkinsImageRegistryPersistenceDayResponse queryJenkinsImageRegistryPersistenceDay(QueryJenkinsImageRegistryPersistenceDayRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
    }

    /**
     * @summary Queries the result of a database precheck task.
     *
     * @param request QueryPreCheckDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPreCheckDatabaseResponse
     */
    public QueryPreCheckDatabaseResponse queryPreCheckDatabaseWithOptions(QueryPreCheckDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceUuid)) {
            query.put("InstanceUuid", request.instanceUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryPreCheckDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new QueryPreCheckDatabaseResponse());
    }

    /**
     * @summary Queries the result of a database precheck task.
     *
     * @param request QueryPreCheckDatabaseRequest
     * @return QueryPreCheckDatabaseResponse
     */
    public QueryPreCheckDatabaseResponse queryPreCheckDatabase(QueryPreCheckDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryPreCheckDatabaseWithOptions(request, runtime);
    }

    /**
     * @summary Restarts a server. Only Windows servers are supported.
     *
     * @param request RebootMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RebootMachineResponse
     */
    public RebootMachineResponse rebootMachineWithOptions(RebootMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RebootMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RebootMachineResponse());
    }

    /**
     * @summary Restarts a server. Only Windows servers are supported.
     *
     * @param request RebootMachineRequest
     * @return RebootMachineResponse
     */
    public RebootMachineResponse rebootMachine(RebootMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.rebootMachineWithOptions(request, runtime);
    }

    /**
     * @summary Synchronizes assets.
     *
     * @param request RefreshAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RefreshAssetsResponse
     */
    public RefreshAssetsResponse refreshAssetsWithOptions(RefreshAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetSubType)) {
            query.put("CloudAssetSubType", request.cloudAssetSubType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetType)) {
            query.put("CloudAssetType", request.cloudAssetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RefreshAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RefreshAssetsResponse());
    }

    /**
     * @summary Synchronizes assets.
     *
     * @param request RefreshAssetsRequest
     * @return RefreshAssetsResponse
     */
    public RefreshAssetsResponse refreshAssets(RefreshAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.refreshAssetsWithOptions(request, runtime);
    }

    /**
     * @summary Refreshes the statistics of container assets in the Assets module.
     *
     * @param request RefreshContainerAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RefreshContainerAssetsResponse
     */
    public RefreshContainerAssetsResponse refreshContainerAssetsWithOptions(RefreshContainerAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RefreshContainerAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RefreshContainerAssetsResponse());
    }

    /**
     * @summary Refreshes the statistics of container assets in the Assets module.
     *
     * @param request RefreshContainerAssetsRequest
     * @return RefreshContainerAssetsResponse
     */
    public RefreshContainerAssetsResponse refreshContainerAssets(RefreshContainerAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.refreshContainerAssetsWithOptions(request, runtime);
    }

    /**
     * @summary Refreshes the list of Object Storage Service (OSS) buckets.
     *
     * @param request RefreshOssBucketScanInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RefreshOssBucketScanInfoResponse
     */
    public RefreshOssBucketScanInfoResponse refreshOssBucketScanInfoWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RefreshOssBucketScanInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RefreshOssBucketScanInfoResponse());
    }

    /**
     * @summary Refreshes the list of Object Storage Service (OSS) buckets.
     *
     * @return RefreshOssBucketScanInfoResponse
     */
    public RefreshOssBucketScanInfoResponse refreshOssBucketScanInfo() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.refreshOssBucketScanInfoWithOptions(runtime);
    }

    /**
     * @summary 释放云安全中心实例
     *
     * @param request ReleaseSasInstanceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReleaseSasInstanceResponse
     */
    public ReleaseSasInstanceResponse releaseSasInstanceWithOptions(ReleaseSasInstanceRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.chargeType)) {
            body.put("ChargeType", request.chargeType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            body.put("InstanceId", request.instanceId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ReleaseSasInstance"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ReleaseSasInstanceResponse());
    }

    /**
     * @summary 释放云安全中心实例
     *
     * @param request ReleaseSasInstanceRequest
     * @return ReleaseSasInstanceResponse
     */
    public ReleaseSasInstanceResponse releaseSasInstance(ReleaseSasInstanceRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.releaseSasInstanceWithOptions(request, runtime);
    }

    /**
     * @summary Removes an instance from the whitelist.
     *
     * @param request RemoveCheckInstanceResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveCheckInstanceResultWhiteListResponse
     */
    public RemoveCheckInstanceResultWhiteListResponse removeCheckInstanceResultWhiteListWithOptions(RemoveCheckInstanceResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RemoveCheckInstanceResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RemoveCheckInstanceResultWhiteListResponse());
    }

    /**
     * @summary Removes an instance from the whitelist.
     *
     * @param request RemoveCheckInstanceResultWhiteListRequest
     * @return RemoveCheckInstanceResultWhiteListResponse
     */
    public RemoveCheckInstanceResultWhiteListResponse removeCheckInstanceResultWhiteList(RemoveCheckInstanceResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.removeCheckInstanceResultWhiteListWithOptions(request, runtime);
    }

    /**
     * @summary Removes check items from the whitelist.
     *
     * @param request RemoveCheckResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveCheckResultWhiteListResponse
     */
    public RemoveCheckResultWhiteListResponse removeCheckResultWhiteListWithOptions(RemoveCheckResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkGroupId)) {
            query.put("CheckGroupId", request.checkGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RemoveCheckResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RemoveCheckResultWhiteListResponse());
    }

    /**
     * @summary Removes check items from the whitelist.
     *
     * @param request RemoveCheckResultWhiteListRequest
     * @return RemoveCheckResultWhiteListResponse
     */
    public RemoveCheckResultWhiteListResponse removeCheckResultWhiteList(RemoveCheckResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.removeCheckResultWhiteListWithOptions(request, runtime);
    }

    /**
     * @summary Reset the honeypot.
     *
     * @param request ResetHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ResetHoneypotResponse
     */
    public ResetHoneypotResponse resetHoneypotWithOptions(ResetHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ResetHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ResetHoneypotResponse());
    }

    /**
     * @summary Reset the honeypot.
     *
     * @param request ResetHoneypotRequest
     * @return ResetHoneypotResponse
     */
    public ResetHoneypotResponse resetHoneypot(ResetHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.resetHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Retries agentless detection tasks.
     *
     * @param request RetryAgentlessTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RetryAgentlessTaskResponse
     */
    public RetryAgentlessTaskResponse retryAgentlessTaskWithOptions(RetryAgentlessTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RetryAgentlessTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RetryAgentlessTaskResponse());
    }

    /**
     * @summary Retries agentless detection tasks.
     *
     * @param request RetryAgentlessTaskRequest
     * @return RetryAgentlessTaskResponse
     */
    public RetryAgentlessTaskResponse retryAgentlessTask(RetryAgentlessTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.retryAgentlessTaskWithOptions(request, runtime);
    }

    /**
     * @summary Retry installing the honeypot probe.
     *
     * @param request RetryInstallProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RetryInstallProbeResponse
     */
    public RetryInstallProbeResponse retryInstallProbeWithOptions(RetryInstallProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RetryInstallProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RetryInstallProbeResponse());
    }

    /**
     * @summary Retry installing the honeypot probe.
     *
     * @param request RetryInstallProbeRequest
     * @return RetryInstallProbeResponse
     */
    public RetryInstallProbeResponse retryInstallProbe(RetryInstallProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.retryInstallProbeWithOptions(request, runtime);
    }

    /**
     * @summary 取消对文件隔离箱中文件的隔离
     *
     * @param request RollbackSuspEventQuaraFileRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RollbackSuspEventQuaraFileResponse
     */
    public RollbackSuspEventQuaraFileResponse rollbackSuspEventQuaraFileWithOptions(RollbackSuspEventQuaraFileRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.quaraFileId)) {
            query.put("QuaraFileId", request.quaraFileId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RollbackSuspEventQuaraFile"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new RollbackSuspEventQuaraFileResponse());
    }

    /**
     * @summary 取消对文件隔离箱中文件的隔离
     *
     * @param request RollbackSuspEventQuaraFileRequest
     * @return RollbackSuspEventQuaraFileResponse
     */
    public RollbackSuspEventQuaraFileResponse rollbackSuspEventQuaraFile(RollbackSuspEventQuaraFileRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.rollbackSuspEventQuaraFileWithOptions(request, runtime);
    }

    /**
     * @summary SasInstallCode
     *
     * @param request SasInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SasInstallCodeResponse
     */
    public SasInstallCodeResponse sasInstallCodeWithOptions(SasInstallCodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SasInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SasInstallCodeResponse());
    }

    /**
     * @summary SasInstallCode
     *
     * @param request SasInstallCodeRequest
     * @return SasInstallCodeResponse
     */
    public SasInstallCodeResponse sasInstallCode(SasInstallCodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.sasInstallCodeWithOptions(request, runtime);
    }

    /**
     * @summary Saves a baseline check policy for images.
     *
     * @param request SaveImageBaselineStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveImageBaselineStrategyResponse
     */
    public SaveImageBaselineStrategyResponse saveImageBaselineStrategyWithOptions(SaveImageBaselineStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineItemList)) {
            query.put("BaselineItemList", request.baselineItemList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SaveImageBaselineStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SaveImageBaselineStrategyResponse());
    }

    /**
     * @summary Saves a baseline check policy for images.
     *
     * @param request SaveImageBaselineStrategyRequest
     * @return SaveImageBaselineStrategyResponse
     */
    public SaveImageBaselineStrategyResponse saveImageBaselineStrategy(SaveImageBaselineStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.saveImageBaselineStrategyWithOptions(request, runtime);
    }

    /**
     * @summary Saves alert settings.
     *
     * @param request SaveSuspEventUserSettingRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveSuspEventUserSettingResponse
     */
    public SaveSuspEventUserSettingResponse saveSuspEventUserSettingWithOptions(SaveSuspEventUserSettingRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levelsOn)) {
            query.put("LevelsOn", request.levelsOn);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SaveSuspEventUserSetting"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SaveSuspEventUserSettingResponse());
    }

    /**
     * @summary Saves alert settings.
     *
     * @param request SaveSuspEventUserSettingRequest
     * @return SaveSuspEventUserSettingResponse
     */
    public SaveSuspEventUserSettingResponse saveSuspEventUserSetting(SaveSuspEventUserSettingRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.saveSuspEventUserSettingWithOptions(request, runtime);
    }

    /**
     * @summary Configures the status of the container firewall feature.
     *
     * @param request SetClusterInterceptionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetClusterInterceptionConfigResponse
     */
    public SetClusterInterceptionConfigResponse setClusterInterceptionConfigWithOptions(SetClusterInterceptionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchOn)) {
            query.put("SwitchOn", request.switchOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchType)) {
            query.put("SwitchType", request.switchType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetClusterInterceptionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SetClusterInterceptionConfigResponse());
    }

    /**
     * @summary Configures the status of the container firewall feature.
     *
     * @param request SetClusterInterceptionConfigRequest
     * @return SetClusterInterceptionConfigResponse
     */
    public SetClusterInterceptionConfigResponse setClusterInterceptionConfig(SetClusterInterceptionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setClusterInterceptionConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the status of sensitive files in an image.
     *
     * @param request SetImageSensitiveFileStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetImageSensitiveFileStatusResponse
     */
    public SetImageSensitiveFileStatusResponse setImageSensitiveFileStatusWithOptions(SetImageSensitiveFileStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.imageUuids)) {
            query.put("ImageUuids", request.imageUuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sensitiveFileKey)) {
            query.put("SensitiveFileKey", request.sensitiveFileKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetImageSensitiveFileStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SetImageSensitiveFileStatusResponse());
    }

    /**
     * @summary Modifies the status of sensitive files in an image.
     *
     * @param request SetImageSensitiveFileStatusRequest
     * @return SetImageSensitiveFileStatusResponse
     */
    public SetImageSensitiveFileStatusResponse setImageSensitiveFileStatus(SetImageSensitiveFileStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setImageSensitiveFileStatusWithOptions(request, runtime);
    }

    /**
     * @summary Specifies a cycle to scan images for image repositories. Unit: days.
     *
     * @param request SetRegistryScanDayNumRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetRegistryScanDayNumResponse
     */
    public SetRegistryScanDayNumResponse setRegistryScanDayNumWithOptions(SetRegistryScanDayNumRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scanDayNum)) {
            query.put("ScanDayNum", request.scanDayNum);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetRegistryScanDayNum"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SetRegistryScanDayNumResponse());
    }

    /**
     * @summary Specifies a cycle to scan images for image repositories. Unit: days.
     *
     * @param request SetRegistryScanDayNumRequest
     * @return SetRegistryScanDayNumResponse
     */
    public SetRegistryScanDayNumResponse setRegistryScanDayNum(SetRegistryScanDayNumRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setRegistryScanDayNumWithOptions(request, runtime);
    }

    /**
     * @summary Configure the check rules of sensitive files.
     *
     * @param request SetSensitiveDefineRuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetSensitiveDefineRuleConfigResponse
     */
    public SetSensitiveDefineRuleConfigResponse setSensitiveDefineRuleConfigWithOptions(SetSensitiveDefineRuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetSensitiveDefineRuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SetSensitiveDefineRuleConfigResponse());
    }

    /**
     * @summary Configure the check rules of sensitive files.
     *
     * @param request SetSensitiveDefineRuleConfigRequest
     * @return SetSensitiveDefineRuleConfigResponse
     */
    public SetSensitiveDefineRuleConfigResponse setSensitiveDefineRuleConfig(SetSensitiveDefineRuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setSensitiveDefineRuleConfigWithOptions(request, runtime);
    }

    /**
     * @deprecated OpenAPI StartBaselineSecurityCheck is deprecated
     *
     * @summary Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
     *
     * @param request StartBaselineSecurityCheckRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartBaselineSecurityCheckResponse
     */
    // Deprecated
    public StartBaselineSecurityCheckResponse startBaselineSecurityCheckWithOptions(StartBaselineSecurityCheckRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.itemIds)) {
            query.put("ItemIds", request.itemIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartBaselineSecurityCheck"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StartBaselineSecurityCheckResponse());
    }

    /**
     * @deprecated OpenAPI StartBaselineSecurityCheck is deprecated
     *
     * @summary Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
     *
     * @param request StartBaselineSecurityCheckRequest
     * @return StartBaselineSecurityCheckResponse
     */
    // Deprecated
    public StartBaselineSecurityCheckResponse startBaselineSecurityCheck(StartBaselineSecurityCheckRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startBaselineSecurityCheckWithOptions(request, runtime);
    }

    /**
     * @summary Starts a database scan task.
     *
     * @param request StartDiscoverDatabaseTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartDiscoverDatabaseTaskResponse
     */
    public StartDiscoverDatabaseTaskResponse startDiscoverDatabaseTaskWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartDiscoverDatabaseTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StartDiscoverDatabaseTaskResponse());
    }

    /**
     * @summary Starts a database scan task.
     *
     * @return StartDiscoverDatabaseTaskResponse
     */
    public StartDiscoverDatabaseTaskResponse startDiscoverDatabaseTask() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startDiscoverDatabaseTaskWithOptions(runtime);
    }

    /**
     * @summary Start the honeypot.
     *
     * @param request StartHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartHoneypotResponse
     */
    public StartHoneypotResponse startHoneypotWithOptions(StartHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StartHoneypotResponse());
    }

    /**
     * @summary Start the honeypot.
     *
     * @param request StartHoneypotRequest
     * @return StartHoneypotResponse
     */
    public StartHoneypotResponse startHoneypot(StartHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Starts a database precheck task.
     *
     * @param request StartPreCheckDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartPreCheckDatabaseResponse
     */
    public StartPreCheckDatabaseResponse startPreCheckDatabaseWithOptions(StartPreCheckDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.databaseType)) {
            query.put("DatabaseType", request.databaseType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceUuid)) {
            query.put("InstanceUuid", request.instanceUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartPreCheckDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StartPreCheckDatabaseResponse());
    }

    /**
     * @summary Starts a database precheck task.
     *
     * @param request StartPreCheckDatabaseRequest
     * @return StartPreCheckDatabaseResponse
     */
    public StartPreCheckDatabaseResponse startPreCheckDatabase(StartPreCheckDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startPreCheckDatabaseWithOptions(request, runtime);
    }

    /**
     * @summary Performs a virus scan task on a server or multiple servers.
     *
     * @param request StartVirusScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartVirusScanTaskResponse
     */
    public StartVirusScanTaskResponse startVirusScanTaskWithOptions(StartVirusScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetInfo)) {
            query.put("TargetInfo", request.targetInfo);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartVirusScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StartVirusScanTaskResponse());
    }

    /**
     * @summary Performs a virus scan task on a server or multiple servers.
     *
     * @param request StartVirusScanTaskRequest
     * @return StartVirusScanTaskResponse
     */
    public StartVirusScanTaskResponse startVirusScanTask(StartVirusScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startVirusScanTaskWithOptions(request, runtime);
    }

    /**
     * @summary Stops a honeypot.
     *
     * @param request StopHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StopHoneypotResponse
     */
    public StopHoneypotResponse stopHoneypotWithOptions(StopHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StopHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new StopHoneypotResponse());
    }

    /**
     * @summary Stops a honeypot.
     *
     * @param request StopHoneypotRequest
     * @return StopHoneypotResponse
     */
    public StopHoneypotResponse stopHoneypot(StopHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.stopHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Submits a configuration assessment task.
     *
     * @param request SubmitCheckRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubmitCheckResponse
     */
    public SubmitCheckResponse submitCheckWithOptions(SubmitCheckRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SubmitCheck"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new SubmitCheckResponse());
    }

    /**
     * @summary Submits a configuration assessment task.
     *
     * @param request SubmitCheckRequest
     * @return SubmitCheckResponse
     */
    public SubmitCheckResponse submitCheck(SubmitCheckRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.submitCheckWithOptions(request, runtime);
    }

    /**
     * @summary Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
     *
     * @param request UnMarkMonitorAccountsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnMarkMonitorAccountsResponse
     */
    public UnMarkMonitorAccountsResponse unMarkMonitorAccountsWithOptions(UnMarkMonitorAccountsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountIds)) {
            query.put("AccountIds", request.accountIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UnMarkMonitorAccounts"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UnMarkMonitorAccountsResponse());
    }

    /**
     * @summary Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
     *
     * @param request UnMarkMonitorAccountsRequest
     * @return UnMarkMonitorAccountsResponse
     */
    public UnMarkMonitorAccountsResponse unMarkMonitorAccounts(UnMarkMonitorAccountsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.unMarkMonitorAccountsWithOptions(request, runtime);
    }

    /**
     * @summary Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
     *
     * @description If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
     * > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
     * **Prerequisites**
     * *   The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
     * *   The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
     *
     * @param request UnbindAegisRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnbindAegisResponse
     */
    public UnbindAegisResponse unbindAegisWithOptions(UnbindAegisRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UnbindAegis"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UnbindAegisResponse());
    }

    /**
     * @summary Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
     *
     * @description If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
     * > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
     * **Prerequisites**
     * *   The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
     * *   The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
     *
     * @param request UnbindAegisRequest
     * @return UnbindAegisResponse
     */
    public UnbindAegisResponse unbindAegis(UnbindAegisRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.unbindAegisWithOptions(request, runtime);
    }

    /**
     * @summary Uninstalls the anti-ransomware agent.
     *
     * @param request UninstallBackupClientRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UninstallBackupClientResponse
     */
    public UninstallBackupClientResponse uninstallBackupClientWithOptions(UninstallBackupClientRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UninstallBackupClient"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UninstallBackupClientResponse());
    }

    /**
     * @summary Uninstalls the anti-ransomware agent.
     *
     * @param request UninstallBackupClientRequest
     * @return UninstallBackupClientResponse
     */
    public UninstallBackupClientResponse uninstallBackupClient(UninstallBackupClientRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.uninstallBackupClientWithOptions(request, runtime);
    }

    /**
     * @summary Uninstalls the Runtime Application Self-Protection (RASP) agent that is installed on Elastic Compute Service (ECS) instances to enable automatic application protection.
     *
     * @param request UninstallRaspAttachRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UninstallRaspAttachResponse
     */
    public UninstallRaspAttachResponse uninstallRaspAttachWithOptions(UninstallRaspAttachRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.applicationId)) {
            query.put("ApplicationId", request.applicationId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ecsUUIDList)) {
            query.put("EcsUUIDList", request.ecsUUIDList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UninstallRaspAttach"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UninstallRaspAttachResponse());
    }

    /**
     * @summary Uninstalls the Runtime Application Self-Protection (RASP) agent that is installed on Elastic Compute Service (ECS) instances to enable automatic application protection.
     *
     * @param request UninstallRaspAttachRequest
     * @return UninstallRaspAttachResponse
     */
    public UninstallRaspAttachResponse uninstallRaspAttach(UninstallRaspAttachRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.uninstallRaspAttachWithOptions(request, runtime);
    }

    /**
     * @summary Uninstalls the database backup agent.
     *
     * @param request UninstallUniBackupAgentRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UninstallUniBackupAgentResponse
     */
    public UninstallUniBackupAgentResponse uninstallUniBackupAgentWithOptions(UninstallUniBackupAgentRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UninstallUniBackupAgent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UninstallUniBackupAgentResponse());
    }

    /**
     * @summary Uninstalls the database backup agent.
     *
     * @param request UninstallUniBackupAgentRequest
     * @return UninstallUniBackupAgentResponse
     */
    public UninstallUniBackupAgentResponse uninstallUniBackupAgent(UninstallUniBackupAgentRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.uninstallUniBackupAgentWithOptions(request, runtime);
    }

    /**
     * @summary Updates the status of the honeypot installation time.
     *
     * @param request UpdateAlarmEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateAlarmEventResponse
     */
    public UpdateAlarmEventResponse updateAlarmEventWithOptions(UpdateAlarmEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmEventIdList)) {
            body.put("AlarmEventIdList", request.alarmEventIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            body.put("OperationCode", request.operationCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateAlarmEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateAlarmEventResponse());
    }

    /**
     * @summary Updates the status of the honeypot installation time.
     *
     * @param request UpdateAlarmEventRequest
     * @return UpdateAlarmEventResponse
     */
    public UpdateAlarmEventResponse updateAlarmEvent(UpdateAlarmEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateAlarmEventWithOptions(request, runtime);
    }

    /**
     * @summary Modifies alerting settings for servers.
     *
     * @param request UpdateClientAlertModeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateClientAlertModeResponse
     */
    public UpdateClientAlertModeResponse updateClientAlertModeWithOptions(UpdateClientAlertModeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateClientAlertMode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateClientAlertModeResponse());
    }

    /**
     * @summary Modifies alerting settings for servers.
     *
     * @param request UpdateClientAlertModeRequest
     * @return UpdateClientAlertModeResponse
     */
    public UpdateClientAlertModeResponse updateClientAlertMode(UpdateClientAlertModeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateClientAlertModeWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the settings of common switches.
     *
     * @param request UpdateCommonSwitchConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateCommonSwitchConfigResponse
     */
    public UpdateCommonSwitchConfigResponse updateCommonSwitchConfigWithOptions(UpdateCommonSwitchConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetDefault)) {
            query.put("TargetDefault", request.targetDefault);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateCommonSwitchConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateCommonSwitchConfigResponse());
    }

    /**
     * @summary Modifies the settings of common switches.
     *
     * @param request UpdateCommonSwitchConfigRequest
     * @return UpdateCommonSwitchConfigResponse
     */
    public UpdateCommonSwitchConfigResponse updateCommonSwitchConfig(UpdateCommonSwitchConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateCommonSwitchConfigWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the status of core file monitoring events reported by the Security Center agent.
     *
     * @param request UpdateFileProtectEventStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileProtectEventStatusResponse
     */
    public UpdateFileProtectEventStatusResponse updateFileProtectEventStatusWithOptions(UpdateFileProtectEventStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileProtectEventStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileProtectEventStatusResponse());
    }

    /**
     * @summary Modifies the status of core file monitoring events reported by the Security Center agent.
     *
     * @param request UpdateFileProtectEventStatusRequest
     * @return UpdateFileProtectEventStatusResponse
     */
    public UpdateFileProtectEventStatusResponse updateFileProtectEventStatus(UpdateFileProtectEventStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileProtectEventStatusWithOptions(request, runtime);
    }

    /**
     * @summary Adds remarks to core file monitoring events reported by the Security Center agent.
     *
     * @param request UpdateFileProtectRemarkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileProtectRemarkResponse
     */
    public UpdateFileProtectRemarkResponse updateFileProtectRemarkWithOptions(UpdateFileProtectRemarkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileProtectRemark"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileProtectRemarkResponse());
    }

    /**
     * @summary Adds remarks to core file monitoring events reported by the Security Center agent.
     *
     * @param request UpdateFileProtectRemarkRequest
     * @return UpdateFileProtectRemarkResponse
     */
    public UpdateFileProtectRemarkResponse updateFileProtectRemark(UpdateFileProtectRemarkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileProtectRemarkWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the content of a core file monitoring rule based on the ID of the rule.
     *
     * @param request UpdateFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileProtectRuleResponse
     */
    public UpdateFileProtectRuleResponse updateFileProtectRuleWithOptions(UpdateFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileOps)) {
            query.put("FileOps", request.fileOps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePaths)) {
            query.put("FilePaths", request.filePaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPaths)) {
            query.put("ProcPaths", request.procPaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileProtectRuleResponse());
    }

    /**
     * @summary Modifies the content of a core file monitoring rule based on the ID of the rule.
     *
     * @param request UpdateFileProtectRuleRequest
     * @return UpdateFileProtectRuleResponse
     */
    public UpdateFileProtectRuleResponse updateFileProtectRule(UpdateFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the queries per second (QPS) limit on the files uploaded from the client.
     *
     * @param request UpdateFileUploadLimitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileUploadLimitResponse
     */
    public UpdateFileUploadLimitResponse updateFileUploadLimitWithOptions(UpdateFileUploadLimitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.limit)) {
            query.put("Limit", request.limit);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileUploadLimit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileUploadLimitResponse());
    }

    /**
     * @summary Modifies the queries per second (QPS) limit on the files uploaded from the client.
     *
     * @param request UpdateFileUploadLimitRequest
     * @return UpdateFileUploadLimitResponse
     */
    public UpdateFileUploadLimitResponse updateFileUploadLimit(UpdateFileUploadLimitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileUploadLimitWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configuration of a specified honeypot.
     *
     * @param request UpdateHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotResponse
     */
    public UpdateHoneypotResponse updateHoneypotWithOptions(UpdateHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotName)) {
            query.put("HoneypotName", request.honeypotName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotResponse());
    }

    /**
     * @summary Modifies the configuration of a specified honeypot.
     *
     * @param request UpdateHoneypotRequest
     * @return UpdateHoneypotResponse
     */
    public UpdateHoneypotResponse updateHoneypot(UpdateHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configuration of a specified management node.
     *
     * @param request UpdateHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotNodeResponse
     */
    public UpdateHoneypotNodeResponse updateHoneypotNodeWithOptions(UpdateHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.availableProbeNum)) {
            query.put("AvailableProbeNum", request.availableProbeNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityGroupProbeIpList)) {
            query.put("SecurityGroupProbeIpList", request.securityGroupProbeIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotNodeResponse());
    }

    /**
     * @summary Modifies the configuration of a specified management node.
     *
     * @param request UpdateHoneypotNodeRequest
     * @return UpdateHoneypotNodeResponse
     */
    public UpdateHoneypotNodeResponse updateHoneypotNode(UpdateHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the configurations of the specified honeypot template.
     *
     * @param request UpdateHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotPresetResponse
     */
    public UpdateHoneypotPresetResponse updateHoneypotPresetWithOptions(UpdateHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotPresetId)) {
            query.put("HoneypotPresetId", request.honeypotPresetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.presetName)) {
            query.put("PresetName", request.presetName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotPresetResponse());
    }

    /**
     * @summary Modifies the configurations of the specified honeypot template.
     *
     * @param request UpdateHoneypotPresetRequest
     * @return UpdateHoneypotPresetResponse
     */
    public UpdateHoneypotPresetResponse updateHoneypotPreset(UpdateHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the attributes of a specified probe.
     *
     * @param request UpdateHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotProbeResponse
     */
    public UpdateHoneypotProbeResponse updateHoneypotProbeWithOptions(UpdateHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.arp)) {
            query.put("Arp", request.arp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.displayName)) {
            query.put("DisplayName", request.displayName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ping)) {
            query.put("Ping", request.ping);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceIpList)) {
            query.put("ServiceIpList", request.serviceIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotProbeResponse());
    }

    /**
     * @summary Modifies the attributes of a specified probe.
     *
     * @param request UpdateHoneypotProbeRequest
     * @return UpdateHoneypotProbeResponse
     */
    public UpdateHoneypotProbeResponse updateHoneypotProbe(UpdateHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * @summary Modifies a probe service.
     *
     * @param request UpdateHoneypotProbeBindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotProbeBindResponse
     */
    public UpdateHoneypotProbeBindResponse updateHoneypotProbeBindWithOptions(UpdateHoneypotProbeBindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindId)) {
            query.put("BindId", request.bindId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindPortList)) {
            query.put("BindPortList", request.bindPortList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindType)) {
            query.put("BindType", request.bindType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ports)) {
            query.put("Ports", request.ports);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceIpList)) {
            query.put("ServiceIpList", request.serviceIpList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.setStatus)) {
            query.put("SetStatus", request.setStatus);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotProbeBind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotProbeBindResponse());
    }

    /**
     * @summary Modifies a probe service.
     *
     * @param request UpdateHoneypotProbeBindRequest
     * @return UpdateHoneypotProbeBindResponse
     */
    public UpdateHoneypotProbeBindResponse updateHoneypotProbeBind(UpdateHoneypotProbeBindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotProbeBindWithOptions(request, runtime);
    }

    /**
     * @summary Updates an alert handling rule.
     *
     * @param request UpdateImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateImageEventOperationResponse
     */
    public UpdateImageEventOperationResponse updateImageEventOperationWithOptions(UpdateImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenarios)) {
            query.put("Scenarios", request.scenarios);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateImageEventOperationResponse());
    }

    /**
     * @summary Updates an alert handling rule.
     *
     * @param request UpdateImageEventOperationRequest
     * @return UpdateImageEventOperationResponse
     */
    public UpdateImageEventOperationResponse updateImageEventOperation(UpdateImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateImageEventOperationWithOptions(request, runtime);
    }

    /**
     * @summary Updates the vulnerability whitelist of an image.
     *
     * @param request UpdateImageVulWhitelistTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateImageVulWhitelistTargetResponse
     */
    public UpdateImageVulWhitelistTargetResponse updateImageVulWhitelistTargetWithOptions(UpdateImageVulWhitelistTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateImageVulWhitelistTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateImageVulWhitelistTargetResponse());
    }

    /**
     * @summary Updates the vulnerability whitelist of an image.
     *
     * @param request UpdateImageVulWhitelistTargetRequest
     * @return UpdateImageVulWhitelistTargetResponse
     */
    public UpdateImageVulWhitelistTargetResponse updateImageVulWhitelistTarget(UpdateImageVulWhitelistTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateImageVulWhitelistTargetWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the name of a Jenkins image repository.
     *
     * @param request UpdateJenkinsImageRegistryNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateJenkinsImageRegistryNameResponse
     */
    public UpdateJenkinsImageRegistryNameResponse updateJenkinsImageRegistryNameWithOptions(UpdateJenkinsImageRegistryNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            body.put("RegistryId", request.registryId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryName)) {
            body.put("RegistryName", request.registryName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateJenkinsImageRegistryName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateJenkinsImageRegistryNameResponse());
    }

    /**
     * @summary Modifies the name of a Jenkins image repository.
     *
     * @param request UpdateJenkinsImageRegistryNameRequest
     * @return UpdateJenkinsImageRegistryNameResponse
     */
    public UpdateJenkinsImageRegistryNameResponse updateJenkinsImageRegistryName(UpdateJenkinsImageRegistryNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateJenkinsImageRegistryNameWithOptions(request, runtime);
    }

    /**
     * @summary Modifies the retention period of images that are stored in a Jenkins image repository.
     *
     * @param request UpdateJenkinsImageRegistryPersistenceDayRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateJenkinsImageRegistryPersistenceDayResponse
     */
    public UpdateJenkinsImageRegistryPersistenceDayResponse updateJenkinsImageRegistryPersistenceDayWithOptions(UpdateJenkinsImageRegistryPersistenceDayRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.persistenceDay)) {
            body.put("PersistenceDay", request.persistenceDay);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            body.put("RegistryId", request.registryId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateJenkinsImageRegistryPersistenceDay"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateJenkinsImageRegistryPersistenceDayResponse());
    }

    /**
     * @summary Modifies the retention period of images that are stored in a Jenkins image repository.
     *
     * @param request UpdateJenkinsImageRegistryPersistenceDayRequest
     * @return UpdateJenkinsImageRegistryPersistenceDayResponse
     */
    public UpdateJenkinsImageRegistryPersistenceDayResponse updateJenkinsImageRegistryPersistenceDay(UpdateJenkinsImageRegistryPersistenceDayRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
    }

    /**
     * @summary Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request UpdateMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateMaliciousFileWhitelistConfigResponse
     */
    public UpdateMaliciousFileWhitelistConfigResponse updateMaliciousFileWhitelistConfigWithOptions(UpdateMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.field)) {
            query.put("Field", request.field);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operator)) {
            query.put("Operator", request.operator);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetValue)) {
            query.put("TargetValue", request.targetValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateMaliciousFileWhitelistConfigResponse());
    }

    /**
     * @summary Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
     *
     * @param request UpdateMaliciousFileWhitelistConfigRequest
     * @return UpdateMaliciousFileWhitelistConfigResponse
     */
    public UpdateMaliciousFileWhitelistConfigResponse updateMaliciousFileWhitelistConfig(UpdateMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * @summary Updates the blocking rule for at-risk images.
     *
     * @param tmpReq UpdateOpaStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateOpaStrategyNewResponse
     */
    public UpdateOpaStrategyNewResponse updateOpaStrategyNewWithOptions(UpdateOpaStrategyNewRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        UpdateOpaStrategyNewShrinkRequest request = new UpdateOpaStrategyNewShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.alarmDetail)) {
            request.alarmDetailShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.alarmDetail, "AlarmDetail", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmDetailShrink)) {
            query.put("AlarmDetail", request.alarmDetailShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousImage)) {
            query.put("MaliciousImage", request.maliciousImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scopes)) {
            query.put("Scopes", request.scopes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTemplateId)) {
            query.put("StrategyTemplateId", request.strategyTemplateId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unScanedImage)) {
            query.put("UnScanedImage", request.unScanedImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteList)) {
            query.put("WhiteList", request.whiteList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateOpaStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateOpaStrategyNewResponse());
    }

    /**
     * @summary Updates the blocking rule for at-risk images.
     *
     * @param request UpdateOpaStrategyNewRequest
     * @return UpdateOpaStrategyNewResponse
     */
    public UpdateOpaStrategyNewResponse updateOpaStrategyNew(UpdateOpaStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateOpaStrategyNewWithOptions(request, runtime);
    }

    /**
     * @summary Updates the configurations of a bucket check policy.
     *
     * @param request UpdateOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateOssScanConfigResponse
     */
    public UpdateOssScanConfigResponse updateOssScanConfigWithOptions(UpdateOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allKeyPrefix)) {
            query.put("AllKeyPrefix", request.allKeyPrefix);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyPrefixList)) {
            query.put("KeyPrefixList", request.keyPrefixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keySuffixList)) {
            query.put("KeySuffixList", request.keySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanDayList)) {
            query.put("ScanDayList", request.scanDayList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateOssScanConfigResponse());
    }

    /**
     * @summary Updates the configurations of a bucket check policy.
     *
     * @param request UpdateOssScanConfigRequest
     * @return UpdateOssScanConfigResponse
     */
    public UpdateOssScanConfigResponse updateOssScanConfig(UpdateOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateOssScanConfigWithOptions(request, runtime);
    }

    /**
     * @summary Updates the unique identifier of an asset selection.
     *
     * @param request UpdateSelectionKeyByTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateSelectionKeyByTypeResponse
     */
    public UpdateSelectionKeyByTypeResponse updateSelectionKeyByTypeWithOptions(UpdateSelectionKeyByTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.businessType)) {
            query.put("BusinessType", request.businessType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSelectionKeyByType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSelectionKeyByTypeResponse());
    }

    /**
     * @summary Updates the unique identifier of an asset selection.
     *
     * @param request UpdateSelectionKeyByTypeRequest
     * @return UpdateSelectionKeyByTypeResponse
     */
    public UpdateSelectionKeyByTypeResponse updateSelectionKeyByType(UpdateSelectionKeyByTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateSelectionKeyByTypeWithOptions(request, runtime);
    }

    /**
     * @summary Upgrades the version of an anti-ransomware policy.
     *
     * @param request UpgradeBackupPolicyVersionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpgradeBackupPolicyVersionResponse
     */
    public UpgradeBackupPolicyVersionResponse upgradeBackupPolicyVersionWithOptions(UpgradeBackupPolicyVersionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpgradeBackupPolicyVersion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UpgradeBackupPolicyVersionResponse());
    }

    /**
     * @summary Upgrades the version of an anti-ransomware policy.
     *
     * @param request UpgradeBackupPolicyVersionRequest
     * @return UpgradeBackupPolicyVersionResponse
     */
    public UpgradeBackupPolicyVersionResponse upgradeBackupPolicyVersion(UpgradeBackupPolicyVersionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.upgradeBackupPolicyVersionWithOptions(request, runtime);
    }

    /**
     * @summary Uploads a honeypot file.
     *
     * @param request UploadedHoneyPotFileRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UploadedHoneyPotFileResponse
     */
    public UploadedHoneyPotFileResponse uploadedHoneyPotFileWithOptions(UploadedHoneyPotFileRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.fileKey)) {
            query.put("FileKey", request.fileKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileName)) {
            query.put("FileName", request.fileName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileType)) {
            query.put("FileType", request.fileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.templateExtra)) {
            query.put("TemplateExtra", request.templateExtra);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UploadedHoneyPotFile"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new UploadedHoneyPotFileResponse());
    }

    /**
     * @summary Uploads a honeypot file.
     *
     * @param request UploadedHoneyPotFileRequest
     * @return UploadedHoneyPotFileResponse
     */
    public UploadedHoneyPotFileResponse uploadedHoneyPotFile(UploadedHoneyPotFileRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.uploadedHoneyPotFileWithOptions(request, runtime);
    }

    /**
     * @summary Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
     *
     * @param request ValidateHcWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ValidateHcWarningsResponse
     */
    public ValidateHcWarningsResponse validateHcWarningsWithOptions(ValidateHcWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskIds)) {
            query.put("RiskIds", request.riskIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ValidateHcWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new ValidateHcWarningsResponse());
    }

    /**
     * @summary Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
     *
     * @param request ValidateHcWarningsRequest
     * @return ValidateHcWarningsResponse
     */
    public ValidateHcWarningsResponse validateHcWarnings(ValidateHcWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.validateHcWarningsWithOptions(request, runtime);
    }

    /**
     * @summary Verifies the instances on which risks are detected based on a check item.
     *
     * @param request VerifyCheckInstanceResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return VerifyCheckInstanceResultResponse
     */
    public VerifyCheckInstanceResultResponse verifyCheckInstanceResultWithOptions(VerifyCheckInstanceResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "VerifyCheckInstanceResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new VerifyCheckInstanceResultResponse());
    }

    /**
     * @summary Verifies the instances on which risks are detected based on a check item.
     *
     * @param request VerifyCheckInstanceResultRequest
     * @return VerifyCheckInstanceResultResponse
     */
    public VerifyCheckInstanceResultResponse verifyCheckInstanceResult(VerifyCheckInstanceResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.verifyCheckInstanceResultWithOptions(request, runtime);
    }

    /**
     * @summary Verifies risk items that are detected based on check items.
     *
     * @param request VerifyCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return VerifyCheckResultResponse
     */
    public VerifyCheckResultResponse verifyCheckResultWithOptions(VerifyCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "VerifyCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        return TeaModel.toModel(this.callApi(params, req, runtime), new VerifyCheckResultResponse());
    }

    /**
     * @summary Verifies risk items that are detected based on check items.
     *
     * @param request VerifyCheckResultRequest
     * @return VerifyCheckResultResponse
     */
    public VerifyCheckResultResponse verifyCheckResult(VerifyCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.verifyCheckResultWithOptions(request, runtime);
    }
}
