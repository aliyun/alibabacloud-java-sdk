// This file is auto-generated, don't edit it. Thanks.
package com.aliyun.sas20181203;

import com.aliyun.tea.*;
import com.aliyun.sas20181203.models.*;

public class Client extends com.aliyun.teaopenapi.Client {

    public Client(com.aliyun.teaopenapi.models.Config config) throws Exception {
        super(config);
        this._endpointRule = "regional";
        this._endpointMap = TeaConverter.buildMap(
            new TeaPair("cn-qingdao", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-beijing", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-zhangjiakou", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-huhehaote", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-wulanchabu", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-hangzhou", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-shanghai", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-nanjing", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-fuzhou", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-shenzhen", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-heyuan", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-guangzhou", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("ap-southeast-2", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-southeast-6", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-northeast-2", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-southeast-3", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-northeast-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-southeast-7", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("cn-chengdu", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("ap-southeast-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-southeast-5", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("cn-hongkong", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("eu-central-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("us-east-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("us-west-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("eu-west-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("me-east-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("me-central-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("ap-south-1", "tds.ap-southeast-1.aliyuncs.com"),
            new TeaPair("cn-beijing-finance-1", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-hangzhou-finance", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-shanghai-finance-1", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-shenzhen-finance-1", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-heyuan-acdr-1", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-north-2-gov-1", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-qingdao-acdr-ut-1", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-shanghai-mybk", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-wuhan-lr", "tds.cn-shanghai.aliyuncs.com"),
            new TeaPair("cn-zhengzhou-jva", "tds.cn-shanghai.aliyuncs.com")
        );
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("sas", _regionId, _endpointRule, _network, _suffix, _endpointMap, _endpoint);
    }


    public String getEndpoint(String productId, String regionId, String endpointRule, String network, String suffix, java.util.Map<String, String> endpointMap, String endpoint) throws Exception {
        if (!com.aliyun.teautil.Common.empty(endpoint)) {
            return endpoint;
        }

        if (!com.aliyun.teautil.Common.isUnset(endpointMap) && !com.aliyun.teautil.Common.empty(endpointMap.get(regionId))) {
            return endpointMap.get(regionId);
        }

        return com.aliyun.endpointutil.Client.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }

    /**
     * <b>summary</b> : 
     * <p>Select an operation for assets.</p>
     * 
     * @param request AddAssetSelectionCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddAssetSelectionCriteriaResponse
     */
    public AddAssetSelectionCriteriaResponse addAssetSelectionCriteriaWithOptions(AddAssetSelectionCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaOperation)) {
            query.put("CriteriaOperation", request.criteriaOperation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetOperationList)) {
            query.put("TargetOperationList", request.targetOperationList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddAssetSelectionCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddAssetSelectionCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddAssetSelectionCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Select an operation for assets.</p>
     * 
     * @param request AddAssetSelectionCriteriaRequest
     * @return AddAssetSelectionCriteriaResponse
     */
    public AddAssetSelectionCriteriaResponse addAssetSelectionCriteria(AddAssetSelectionCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addAssetSelectionCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a whitelist rule for a baseline check item.</p>
     * 
     * @param request AddBaselineCheckWhiteRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddBaselineCheckWhiteRecordResponse
     */
    public AddBaselineCheckWhiteRecordResponse addBaselineCheckWhiteRecordWithOptions(AddBaselineCheckWhiteRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddBaselineCheckWhiteRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddBaselineCheckWhiteRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddBaselineCheckWhiteRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a whitelist rule for a baseline check item.</p>
     * 
     * @param request AddBaselineCheckWhiteRecordRequest
     * @return AddBaselineCheckWhiteRecordResponse
     */
    public AddBaselineCheckWhiteRecordResponse addBaselineCheckWhiteRecord(AddBaselineCheckWhiteRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addBaselineCheckWhiteRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.</p>
     * 
     * @param request AddCheckInstanceResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCheckInstanceResultWhiteListResponse
     */
    public AddCheckInstanceResultWhiteListResponse addCheckInstanceResultWhiteListWithOptions(AddCheckInstanceResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkGroupId)) {
            query.put("CheckGroupId", request.checkGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceList)) {
            query.put("InstanceList", request.instanceList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddCheckInstanceResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddCheckInstanceResultWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddCheckInstanceResultWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.</p>
     * 
     * @param request AddCheckInstanceResultWhiteListRequest
     * @return AddCheckInstanceResultWhiteListResponse
     */
    public AddCheckInstanceResultWhiteListResponse addCheckInstanceResultWhiteList(AddCheckInstanceResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addCheckInstanceResultWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds the check items of the configuration assessment feature to the whitelist.</p>
     * 
     * @param request AddCheckResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCheckResultWhiteListResponse
     */
    public AddCheckResultWhiteListResponse addCheckResultWhiteListWithOptions(AddCheckResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddCheckResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddCheckResultWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddCheckResultWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds the check items of the configuration assessment feature to the whitelist.</p>
     * 
     * @param request AddCheckResultWhiteListRequest
     * @return AddCheckResultWhiteListResponse
     */
    public AddCheckResultWhiteListResponse addCheckResultWhiteList(AddCheckResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addCheckResultWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a custom defense rule.</p>
     * 
     * @param request AddClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddClientUserDefineRuleResponse
     */
    public AddClientUserDefineRuleResponse addClientUserDefineRuleWithOptions(AddClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.actionType)) {
            query.put("ActionType", request.actionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cmdline)) {
            query.put("Cmdline", request.cmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domain)) {
            query.put("Domain", request.domain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePath)) {
            query.put("FilePath", request.filePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.IP)) {
            query.put("IP", request.IP);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.md5List)) {
            query.put("Md5List", request.md5List);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.newFilePath)) {
            query.put("NewFilePath", request.newFilePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentCmdline)) {
            query.put("ParentCmdline", request.parentCmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentProcPath)) {
            query.put("ParentProcPath", request.parentProcPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.portStr)) {
            query.put("PortStr", request.portStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPath)) {
            query.put("ProcPath", request.procPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryContent)) {
            query.put("RegistryContent", request.registryContent);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryKey)) {
            query.put("RegistryKey", request.registryKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddClientUserDefineRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddClientUserDefineRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a custom defense rule.</p>
     * 
     * @param request AddClientUserDefineRuleRequest
     * @return AddClientUserDefineRuleResponse
     */
    public AddClientUserDefineRuleResponse addClientUserDefineRule(AddClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds the configuration information of multi-cloud assets.</p>
     * 
     * @param request AddCloudVendorAccountAKRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCloudVendorAccountAKResponse
     */
    public AddCloudVendorAccountAKResponse addCloudVendorAccountAKWithOptions(AddCloudVendorAccountAKRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.akType)) {
            query.put("AkType", request.akType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authModules)) {
            query.put("AuthModules", request.authModules);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domain)) {
            query.put("Domain", request.domain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regions)) {
            query.put("Regions", request.regions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.secretId)) {
            query.put("SecretId", request.secretId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.secretKey)) {
            query.put("SecretKey", request.secretKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subscriptionIds)) {
            query.put("SubscriptionIds", request.subscriptionIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tenantId)) {
            query.put("TenantId", request.tenantId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendorAuthAlias)) {
            query.put("VendorAuthAlias", request.vendorAuthAlias);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddCloudVendorAccountAK"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddCloudVendorAccountAKResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddCloudVendorAccountAKResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds the configuration information of multi-cloud assets.</p>
     * 
     * @param request AddCloudVendorAccountAKRequest
     * @return AddCloudVendorAccountAKResponse
     */
    public AddCloudVendorAccountAKResponse addCloudVendorAccountAK(AddCloudVendorAccountAKRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addCloudVendorAccountAKWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Add Trail Configuration</p>
     * 
     * @param request AddCloudVendorTrialConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCloudVendorTrialConfigResponse
     */
    public AddCloudVendorTrialConfigResponse addCloudVendorTrialConfigWithOptions(AddCloudVendorTrialConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authInfo)) {
            query.put("AuthInfo", request.authInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddCloudVendorTrialConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddCloudVendorTrialConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddCloudVendorTrialConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Add Trail Configuration</p>
     * 
     * @param request AddCloudVendorTrialConfigRequest
     * @return AddCloudVendorTrialConfigResponse
     */
    public AddCloudVendorTrialConfigResponse addCloudVendorTrialConfig(AddCloudVendorTrialConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addCloudVendorTrialConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a rule for non-image program defense.</p>
     * 
     * @param tmpReq AddContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddContainerDefenseRuleResponse
     */
    public AddContainerDefenseRuleResponse addContainerDefenseRuleWithOptions(AddContainerDefenseRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        AddContainerDefenseRuleShrinkRequest request = new AddContainerDefenseRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.whitelist)) {
            request.whitelistShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.whitelist, "Whitelist", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scope)) {
            query.put("Scope", request.scope);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelistShrink)) {
            query.put("Whitelist", request.whitelistShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddContainerDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddContainerDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a rule for non-image program defense.</p>
     * 
     * @param request AddContainerDefenseRuleRequest
     * @return AddContainerDefenseRuleResponse
     */
    public AddContainerDefenseRuleResponse addContainerDefenseRule(AddContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense rule against container escapes.</p>
     * 
     * @param request AddContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddContainerPluginRuleResponse
     */
    public AddContainerPluginRuleResponse addContainerPluginRuleWithOptions(AddContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleTemplateId)) {
            query.put("RuleTemplateId", request.ruleTemplateId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectedPolicy)) {
            query.put("SelectedPolicy", request.selectedPolicy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteImages)) {
            query.put("WhiteImages", request.whiteImages);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddContainerPluginRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddContainerPluginRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense rule against container escapes.</p>
     * 
     * @param request AddContainerPluginRuleRequest
     * @return AddContainerPluginRuleResponse
     */
    public AddContainerPluginRuleResponse addContainerPluginRule(AddContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.</p>
     * 
     * @param request AddIdcProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddIdcProbeResponse
     */
    public AddIdcProbeResponse addIdcProbeWithOptions(AddIdcProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.idcName)) {
            query.put("IdcName", request.idcName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.idcRegion)) {
            query.put("IdcRegion", request.idcRegion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalPeriod)) {
            query.put("IntervalPeriod", request.intervalPeriod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ipSegments)) {
            query.put("IpSegments", request.ipSegments);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.linuxPort)) {
            query.put("LinuxPort", request.linuxPort);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.periodUnit)) {
            query.put("PeriodUnit", request.periodUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.winPort)) {
            query.put("WinPort", request.winPort);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddIdcProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddIdcProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddIdcProbeResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.</p>
     * 
     * @param request AddIdcProbeRequest
     * @return AddIdcProbeResponse
     */
    public AddIdcProbeResponse addIdcProbe(AddIdcProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addIdcProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates an alert handling rule.</p>
     * 
     * @param request AddImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddImageEventOperationResponse
     */
    public AddImageEventOperationResponse addImageEventOperationWithOptions(AddImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.conditions)) {
            query.put("Conditions", request.conditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventKey)) {
            query.put("EventKey", request.eventKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.note)) {
            query.put("Note", request.note);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenarios)) {
            query.put("Scenarios", request.scenarios);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddImageEventOperationResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddImageEventOperationResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates an alert handling rule.</p>
     * 
     * @param request AddImageEventOperationRequest
     * @return AddImageEventOperationResponse
     */
    public AddImageEventOperationResponse addImageEventOperation(AddImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addImageEventOperationWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds image vulnerabilities to the whitelist.</p>
     * 
     * @param request AddImageVulWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddImageVulWhiteListResponse
     */
    public AddImageVulWhiteListResponse addImageVulWhiteListWithOptions(AddImageVulWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelist)) {
            query.put("Whitelist", request.whitelist);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddImageVulWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddImageVulWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddImageVulWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds image vulnerabilities to the whitelist.</p>
     * 
     * @param request AddImageVulWhiteListRequest
     * @return AddImageVulWhiteListResponse
     */
    public AddImageVulWhiteListResponse addImageVulWhiteList(AddImageVulWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addImageVulWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a command that is used to install the Security Center agent.</p>
     * 
     * @param request AddInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddInstallCodeResponse
     */
    public AddInstallCodeResponse addInstallCodeWithOptions(AddInstallCodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.expiredDate)) {
            query.put("ExpiredDate", request.expiredDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.onlyImage)) {
            query.put("OnlyImage", request.onlyImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.privateLinkId)) {
            query.put("PrivateLinkId", request.privateLinkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.proxyCluster)) {
            query.put("ProxyCluster", request.proxyCluster);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendorName)) {
            query.put("VendorName", request.vendorName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddInstallCodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddInstallCodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a command that is used to install the Security Center agent.</p>
     * 
     * @param request AddInstallCodeRequest
     * @return AddInstallCodeResponse
     */
    public AddInstallCodeResponse addInstallCode(AddInstallCodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addInstallCodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds a self-managed image repository.</p>
     * 
     * @param request AddPrivateRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddPrivateRegistryResponse
     */
    public AddPrivateRegistryResponse addPrivateRegistryWithOptions(AddPrivateRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.domainName)) {
            query.put("DomainName", request.domainName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extraParam)) {
            query.put("ExtraParam", request.extraParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.netType)) {
            query.put("NetType", request.netType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.password)) {
            query.put("Password", request.password);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.protocolType)) {
            query.put("ProtocolType", request.protocolType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryHostIp)) {
            query.put("RegistryHostIp", request.registryHostIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryRegionId)) {
            query.put("RegistryRegionId", request.registryRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryType)) {
            query.put("RegistryType", request.registryType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryVersion)) {
            query.put("RegistryVersion", request.registryVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.transPerHour)) {
            query.put("TransPerHour", request.transPerHour);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userName)) {
            query.put("UserName", request.userName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddPrivateRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddPrivateRegistryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddPrivateRegistryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds a self-managed image repository.</p>
     * 
     * @param request AddPrivateRegistryRequest
     * @return AddPrivateRegistryResponse
     */
    public AddPrivateRegistryResponse addPrivateRegistry(AddPrivateRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addPrivateRegistryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Add or update the whitelist for VPC purchases</p>
     * 
     * @param request AddProtectVpcListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddProtectVpcListResponse
     */
    public AddProtectVpcListResponse addProtectVpcListWithOptions(AddProtectVpcListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.addVpcInstanceIdList)) {
            query.put("AddVpcInstanceIdList", request.addVpcInstanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.delVpcInstanceIdList)) {
            query.put("DelVpcInstanceIdList", request.delVpcInstanceIdList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddProtectVpcList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddProtectVpcListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddProtectVpcListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Add or update the whitelist for VPC purchases</p>
     * 
     * @param request AddProtectVpcListRequest
     * @return AddProtectVpcListResponse
     */
    public AddProtectVpcListResponse addProtectVpcList(AddProtectVpcListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addProtectVpcListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Upgrades the Security Center agent in batches.</p>
     * 
     * @param request AddPublishBatchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddPublishBatchResponse
     */
    public AddPublishBatchResponse addPublishBatchWithOptions(AddPublishBatchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.batchName)) {
            query.put("BatchName", request.batchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interval)) {
            query.put("Interval", request.interval);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationBase)) {
            query.put("OperationBase", request.operationBase);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.upgradeVersion)) {
            query.put("UpgradeVersion", request.upgradeVersion);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddPublishBatch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddPublishBatchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddPublishBatchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Upgrades the Security Center agent in batches.</p>
     * 
     * @param request AddPublishBatchRequest
     * @return AddPublishBatchResponse
     */
    public AddPublishBatchResponse addPublishBatch(AddPublishBatchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addPublishBatchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a rule for container tamper-proofing.</p>
     * 
     * @param request AddSasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddSasContainerWebDefenseRuleResponse
     */
    public AddSasContainerWebDefenseRuleResponse addSasContainerWebDefenseRuleWithOptions(AddSasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pathConfDTOList)) {
            query.put("PathConfDTOList", request.pathConfDTOList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddSasContainerWebDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddSasContainerWebDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a rule for container tamper-proofing.</p>
     * 
     * @param request AddSasContainerWebDefenseRuleRequest
     * @return AddSasContainerWebDefenseRuleResponse
     */
    public AddSasContainerWebDefenseRuleResponse addSasContainerWebDefenseRule(AddSasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addSasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.</p>
     * 
     * @param request AddSasModuleTrialRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddSasModuleTrialResponse
     */
    public AddSasModuleTrialResponse addSasModuleTrialWithOptions(AddSasModuleTrialRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.moduleCode)) {
            query.put("ModuleCode", request.moduleCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddSasModuleTrial"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddSasModuleTrialResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddSasModuleTrialResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.</p>
     * 
     * @param request AddSasModuleTrialRequest
     * @return AddSasModuleTrialResponse
     */
    public AddSasModuleTrialResponse addSasModuleTrial(AddSasModuleTrialRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addSasModuleTrialWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.</p>
     * 
     * <b>summary</b> : 
     * <p>Adds a tag to assets.</p>
     * 
     * @param request AddTagWithUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddTagWithUuidResponse
     */
    public AddTagWithUuidResponse addTagWithUuidWithOptions(AddTagWithUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tagName)) {
            query.put("TagName", request.tagName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddTagWithUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddTagWithUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddTagWithUuidResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.</p>
     * 
     * <b>summary</b> : 
     * <p>Adds a tag to assets.</p>
     * 
     * @param request AddTagWithUuidRequest
     * @return AddTagWithUuidResponse
     */
    public AddTagWithUuidResponse addTagWithUuid(AddTagWithUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addTagWithUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds servers from which you want to uninstall the Security Center agent.</p>
     * 
     * @param request AddUninstallClientsByUuidsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddUninstallClientsByUuidsResponse
     */
    public AddUninstallClientsByUuidsResponse addUninstallClientsByUuidsWithOptions(AddUninstallClientsByUuidsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.callMethod)) {
            query.put("CallMethod", request.callMethod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.feedback)) {
            query.put("Feedback", request.feedback);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.region)) {
            query.put("Region", request.region);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddUninstallClientsByUuids"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddUninstallClientsByUuidsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddUninstallClientsByUuidsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds servers from which you want to uninstall the Security Center agent.</p>
     * 
     * @param request AddUninstallClientsByUuidsRequest
     * @return AddUninstallClientsByUuidsResponse
     */
    public AddUninstallClientsByUuidsResponse addUninstallClientsByUuids(AddUninstallClientsByUuidsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addUninstallClientsByUuidsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a honeypot.</p>
     * 
     * @param request AddVpcHoneyPotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddVpcHoneyPotResponse
     */
    public AddVpcHoneyPotResponse addVpcHoneyPotWithOptions(AddVpcHoneyPotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AddVpcHoneyPot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AddVpcHoneyPotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AddVpcHoneyPotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a honeypot.</p>
     * 
     * @param request AddVpcHoneyPotRequest
     * @return AddVpcHoneyPotResponse
     */
    public AddVpcHoneyPotResponse addVpcHoneyPot(AddVpcHoneyPotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.addVpcHoneyPotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of an advanced whitelist rule.</p>
     * 
     * @param request AdvanceSecurityEventOperationsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AdvanceSecurityEventOperationsResponse
     */
    public AdvanceSecurityEventOperationsResponse advanceSecurityEventOperationsWithOptions(AdvanceSecurityEventOperationsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "AdvanceSecurityEventOperations"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new AdvanceSecurityEventOperationsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new AdvanceSecurityEventOperationsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of an advanced whitelist rule.</p>
     * 
     * @param request AdvanceSecurityEventOperationsRequest
     * @return AdvanceSecurityEventOperationsResponse
     */
    public AdvanceSecurityEventOperationsResponse advanceSecurityEventOperations(AdvanceSecurityEventOperationsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.advanceSecurityEventOperationsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds alert description in batches.</p>
     * 
     * @param request BatchCreateMaliciousNoteRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchCreateMaliciousNoteResponse
     */
    public BatchCreateMaliciousNoteResponse batchCreateMaliciousNoteWithOptions(BatchCreateMaliciousNoteRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.imageMaliciousFileList)) {
            query.put("ImageMaliciousFileList", request.imageMaliciousFileList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchCreateMaliciousNote"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new BatchCreateMaliciousNoteResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new BatchCreateMaliciousNoteResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds alert description in batches.</p>
     * 
     * @param request BatchCreateMaliciousNoteRequest
     * @return BatchCreateMaliciousNoteResponse
     */
    public BatchCreateMaliciousNoteResponse batchCreateMaliciousNote(BatchCreateMaliciousNoteRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.batchCreateMaliciousNoteWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.</p>
     * 
     * @param request BatchDeleteMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchDeleteMaliciousFileWhitelistConfigResponse
     */
    public BatchDeleteMaliciousFileWhitelistConfigResponse batchDeleteMaliciousFileWhitelistConfigWithOptions(BatchDeleteMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configIdList)) {
            query.put("ConfigIdList", request.configIdList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchDeleteMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new BatchDeleteMaliciousFileWhitelistConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new BatchDeleteMaliciousFileWhitelistConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.</p>
     * 
     * @param request BatchDeleteMaliciousFileWhitelistConfigRequest
     * @return BatchDeleteMaliciousFileWhitelistConfigResponse
     */
    public BatchDeleteMaliciousFileWhitelistConfigResponse batchDeleteMaliciousFileWhitelistConfig(BatchDeleteMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.batchDeleteMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables multiple features in proactive defense at a time.</p>
     * 
     * @param request BatchOperateCommonOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchOperateCommonOverallConfigResponse
     */
    public BatchOperateCommonOverallConfigResponse batchOperateCommonOverallConfigWithOptions(BatchOperateCommonOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeList)) {
            query.put("TypeList", request.typeList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchOperateCommonOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new BatchOperateCommonOverallConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new BatchOperateCommonOverallConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables multiple features in proactive defense at a time.</p>
     * 
     * @param request BatchOperateCommonOverallConfigRequest
     * @return BatchOperateCommonOverallConfigResponse
     */
    public BatchOperateCommonOverallConfigResponse batchOperateCommonOverallConfig(BatchOperateCommonOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.batchOperateCommonOverallConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.</p>
     * 
     * @param request BatchUpdateMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchUpdateMaliciousFileWhitelistConfigResponse
     */
    public BatchUpdateMaliciousFileWhitelistConfigResponse batchUpdateMaliciousFileWhitelistConfigWithOptions(BatchUpdateMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configList)) {
            query.put("ConfigList", request.configList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BatchUpdateMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new BatchUpdateMaliciousFileWhitelistConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new BatchUpdateMaliciousFileWhitelistConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.</p>
     * 
     * @param request BatchUpdateMaliciousFileWhitelistConfigRequest
     * @return BatchUpdateMaliciousFileWhitelistConfigResponse
     */
    public BatchUpdateMaliciousFileWhitelistConfigResponse batchUpdateMaliciousFileWhitelistConfig(BatchUpdateMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.batchUpdateMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Binds servers to Security Center or unbinds servers from Security Center.</p>
     * 
     * @param request BindAuthToMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BindAuthToMachineResponse
     */
    public BindAuthToMachineResponse bindAuthToMachineWithOptions(BindAuthToMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.authVersion)) {
            query.put("AuthVersion", request.authVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.autoBind)) {
            query.put("AutoBind", request.autoBind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bind)) {
            query.put("Bind", request.bind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindAll)) {
            query.put("BindAll", request.bindAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isPreBind)) {
            query.put("IsPreBind", request.isPreBind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ntmVersion)) {
            query.put("NtmVersion", request.ntmVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.preBindOrderId)) {
            query.put("PreBindOrderId", request.preBindOrderId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unBind)) {
            query.put("UnBind", request.unBind);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BindAuthToMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new BindAuthToMachineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new BindAuthToMachineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Binds servers to Security Center or unbinds servers from Security Center.</p>
     * 
     * @param request BindAuthToMachineRequest
     * @return BindAuthToMachineResponse
     */
    public BindAuthToMachineResponse bindAuthToMachine(BindAuthToMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.bindAuthToMachineWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.</p>
     * 
     * @param request BindHybridProxyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return BindHybridProxyResponse
     */
    public BindHybridProxyResponse bindHybridProxyWithOptions(BindHybridProxyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.yundunUuids)) {
            query.put("YundunUuids", request.yundunUuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "BindHybridProxy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new BindHybridProxyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new BindHybridProxyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.</p>
     * 
     * @param request BindHybridProxyRequest
     * @return BindHybridProxyResponse
     */
    public BindHybridProxyResponse bindHybridProxy(BindHybridProxyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.bindHybridProxyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Cancels the main task.</p>
     * 
     * @param request CancelOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelOnceTaskResponse
     */
    public CancelOnceTaskResponse cancelOnceTaskWithOptions(CancelOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CancelOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CancelOnceTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CancelOnceTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Cancels the main task.</p>
     * 
     * @param request CancelOnceTaskRequest
     * @return CancelOnceTaskResponse
     */
    public CancelOnceTaskResponse cancelOnceTask(CancelOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.cancelOnceTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the interval of asset synchronization configurations.</p>
     * 
     * @param request ChangeAssetRefreshTaskConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeAssetRefreshTaskConfigResponse
     */
    public ChangeAssetRefreshTaskConfigResponse changeAssetRefreshTaskConfigWithOptions(ChangeAssetRefreshTaskConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetRefreshConfigs)) {
            query.put("AssetRefreshConfigs", request.assetRefreshConfigs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeAssetRefreshTaskConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeAssetRefreshTaskConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ChangeAssetRefreshTaskConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the interval of asset synchronization configurations.</p>
     * 
     * @param request ChangeAssetRefreshTaskConfigRequest
     * @return ChangeAssetRefreshTaskConfigResponse
     */
    public ChangeAssetRefreshTaskConfigResponse changeAssetRefreshTaskConfig(ChangeAssetRefreshTaskConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeAssetRefreshTaskConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration items of the configuration assessment feature.</p>
     * 
     * @param tmpReq ChangeCheckConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeCheckConfigResponse
     */
    public ChangeCheckConfigResponse changeCheckConfigWithOptions(ChangeCheckConfigRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ChangeCheckConfigShrinkRequest request = new ChangeCheckConfigShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.configRequirementIds)) {
            request.configRequirementIdsShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.configRequirementIds, "ConfigRequirementIds", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.configStandardIds)) {
            request.configStandardIdsShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.configStandardIds, "ConfigStandardIds", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.addedCheck)) {
            query.put("AddedCheck", request.addedCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configRequirementIdsShrink)) {
            query.put("ConfigRequirementIds", request.configRequirementIdsShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configStandardIdsShrink)) {
            query.put("ConfigStandardIds", request.configStandardIdsShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configure)) {
            query.put("Configure", request.configure);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cycleDays)) {
            query.put("CycleDays", request.cycleDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enableAddCheck)) {
            query.put("EnableAddCheck", request.enableAddCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enableAutoCheck)) {
            query.put("EnableAutoCheck", request.enableAutoCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.removedCheck)) {
            query.put("RemovedCheck", request.removedCheck);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.standardIds)) {
            query.put("StandardIds", request.standardIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.systemConfig)) {
            query.put("SystemConfig", request.systemConfig);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeCheckConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeCheckConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ChangeCheckConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration items of the configuration assessment feature.</p>
     * 
     * @param request ChangeCheckConfigRequest
     * @return ChangeCheckConfigResponse
     */
    public ChangeCheckConfigResponse changeCheckConfig(ChangeCheckConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeCheckConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the custom configuration items of a check item.</p>
     * 
     * @param request ChangeCheckCustomConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeCheckCustomConfigResponse
     */
    public ChangeCheckCustomConfigResponse changeCheckCustomConfigWithOptions(ChangeCheckCustomConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.customConfigs)) {
            query.put("CustomConfigs", request.customConfigs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repairConfigs)) {
            query.put("RepairConfigs", request.repairConfigs);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeCheckCustomConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeCheckCustomConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ChangeCheckCustomConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the custom configuration items of a check item.</p>
     * 
     * @param request ChangeCheckCustomConfigRequest
     * @return ChangeCheckCustomConfigResponse
     */
    public ChangeCheckCustomConfigResponse changeCheckCustomConfig(ChangeCheckCustomConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeCheckCustomConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the details of the deduction modules of the security score feature, including custom settings.</p>
     * 
     * @param request ChangeSecurityScoreRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeSecurityScoreRuleResponse
     */
    public ChangeSecurityScoreRuleResponse changeSecurityScoreRuleWithOptions(ChangeSecurityScoreRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resetSecurityScoreRule)) {
            query.put("ResetSecurityScoreRule", request.resetSecurityScoreRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityScoreRuleList)) {
            query.put("SecurityScoreRuleList", request.securityScoreRuleList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeSecurityScoreRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeSecurityScoreRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ChangeSecurityScoreRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the details of the deduction modules of the security score feature, including custom settings.</p>
     * 
     * @param request ChangeSecurityScoreRuleRequest
     * @return ChangeSecurityScoreRuleResponse
     */
    public ChangeSecurityScoreRuleResponse changeSecurityScoreRule(ChangeSecurityScoreRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeSecurityScoreRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.</p>
     * 
     * @param request ChangeUserLangRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeUserLangResponse
     */
    public ChangeUserLangResponse changeUserLangWithOptions(ChangeUserLangRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.userLang)) {
            query.put("UserLang", request.userLang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ChangeUserLang"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ChangeUserLangResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ChangeUserLangResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.</p>
     * 
     * @param request ChangeUserLangRequest
     * @return ChangeUserLangResponse
     */
    public ChangeUserLangResponse changeUserLang(ChangeUserLangRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.changeUserLangWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the IDs of quarantined files are valid.</p>
     * 
     * @deprecated OpenAPI CheckQuaraFileId is deprecated
     * 
     * @param request CheckQuaraFileIdRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckQuaraFileIdResponse
     */
    @Deprecated
    // Deprecated
    public CheckQuaraFileIdResponse checkQuaraFileIdWithOptions(CheckQuaraFileIdRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.quaraFileIds)) {
            query.put("QuaraFileIds", request.quaraFileIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckQuaraFileId"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CheckQuaraFileIdResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CheckQuaraFileIdResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the IDs of quarantined files are valid.</p>
     * 
     * @deprecated OpenAPI CheckQuaraFileId is deprecated
     * 
     * @param request CheckQuaraFileIdRequest
     * @return CheckQuaraFileIdResponse
     */
    @Deprecated
    // Deprecated
    public CheckQuaraFileIdResponse checkQuaraFileId(CheckQuaraFileIdRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkQuaraFileIdWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.</p>
     * 
     * @param request CheckSecurityEventIdRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckSecurityEventIdResponse
     */
    public CheckSecurityEventIdResponse checkSecurityEventIdWithOptions(CheckSecurityEventIdRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckSecurityEventId"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CheckSecurityEventIdResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CheckSecurityEventIdResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.</p>
     * 
     * @param request CheckSecurityEventIdRequest
     * @return CheckSecurityEventIdResponse
     */
    public CheckSecurityEventIdResponse checkSecurityEventId(CheckSecurityEventIdRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkSecurityEventIdWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.</p>
     * 
     * @param request CheckStsTokenAuthRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckStsTokenAuthResponse
     */
    public CheckStsTokenAuthResponse checkStsTokenAuthWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckStsTokenAuth"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CheckStsTokenAuthResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CheckStsTokenAuthResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.</p>
     * @return CheckStsTokenAuthResponse
     */
    public CheckStsTokenAuthResponse checkStsTokenAuth() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkStsTokenAuthWithOptions(runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.</p>
     * 
     * <b>summary</b> : 
     * <p>Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.</p>
     * 
     * @param request CheckTrialFixCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckTrialFixCountResponse
     */
    public CheckTrialFixCountResponse checkTrialFixCountWithOptions(CheckTrialFixCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.info)) {
            query.put("Info", request.info);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulNames)) {
            query.put("VulNames", request.vulNames);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckTrialFixCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CheckTrialFixCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CheckTrialFixCountResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.</p>
     * 
     * <b>summary</b> : 
     * <p>Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.</p>
     * 
     * @param request CheckTrialFixCountRequest
     * @return CheckTrialFixCountResponse
     */
    public CheckTrialFixCountResponse checkTrialFixCount(CheckTrialFixCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkTrialFixCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether Elastic Compute Service (ECS) instances exist.</p>
     * 
     * @param request CheckUserHasEcsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckUserHasEcsResponse
     */
    public CheckUserHasEcsResponse checkUserHasEcsWithOptions(CheckUserHasEcsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CheckUserHasEcs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CheckUserHasEcsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CheckUserHasEcsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether Elastic Compute Service (ECS) instances exist.</p>
     * 
     * @param request CheckUserHasEcsRequest
     * @return CheckUserHasEcsResponse
     */
    public CheckUserHasEcsResponse checkUserHasEcs(CheckUserHasEcsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.checkUserHasEcsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Confirms the alert events that you want to handle.</p>
     * 
     * @param request ConfirmVirusEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ConfirmVirusEventsResponse
     */
    public ConfirmVirusEventsResponse confirmVirusEventsWithOptions(ConfirmVirusEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.operationAll)) {
            query.put("OperationAll", request.operationAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationRange)) {
            query.put("OperationRange", request.operationRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ConfirmVirusEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ConfirmVirusEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ConfirmVirusEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Confirms the alert events that you want to handle.</p>
     * 
     * @param request ConfirmVirusEventsRequest
     * @return ConfirmVirusEventsResponse
     */
    public ConfirmVirusEventsResponse confirmVirusEvents(ConfirmVirusEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.confirmVirusEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Clones an existing security report. The new security report has the same configuration as the existing security report.</p>
     * 
     * @param request CopyCustomizeReportConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CopyCustomizeReportConfigResponse
     */
    public CopyCustomizeReportConfigResponse copyCustomizeReportConfigWithOptions(CopyCustomizeReportConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CopyCustomizeReportConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CopyCustomizeReportConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CopyCustomizeReportConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Clones an existing security report. The new security report has the same configuration as the existing security report.</p>
     * 
     * @param request CopyCustomizeReportConfigRequest
     * @return CopyCustomizeReportConfigResponse
     */
    public CopyCustomizeReportConfigResponse copyCustomizeReportConfig(CopyCustomizeReportConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.copyCustomizeReportConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates an agentless detection task.</p>
     * 
     * @param request CreateAgentlessScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAgentlessScanTaskResponse
     */
    public CreateAgentlessScanTaskResponse createAgentlessScanTaskWithOptions(CreateAgentlessScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetSelectionType)) {
            query.put("AssetSelectionType", request.assetSelectionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.autoDeleteDays)) {
            query.put("AutoDeleteDays", request.autoDeleteDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.releaseAfterScan)) {
            query.put("ReleaseAfterScan", request.releaseAfterScan);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanDataDisk)) {
            query.put("ScanDataDisk", request.scanDataDisk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAgentlessScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAgentlessScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateAgentlessScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates an agentless detection task.</p>
     * 
     * @param request CreateAgentlessScanTaskRequest
     * @return CreateAgentlessScanTaskResponse
     */
    public CreateAgentlessScanTaskResponse createAgentlessScanTask(CreateAgentlessScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createAgentlessScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense rule against brute-force attacks.</p>
     * 
     * @param tmpReq CreateAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAntiBruteForceRuleResponse
     */
    public CreateAntiBruteForceRuleResponse createAntiBruteForceRuleWithOptions(CreateAntiBruteForceRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateAntiBruteForceRuleShrinkRequest request = new CreateAntiBruteForceRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.protocolType)) {
            request.protocolTypeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.protocolType, "ProtocolType", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defaultRule)) {
            query.put("DefaultRule", request.defaultRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.failCount)) {
            query.put("FailCount", request.failCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forbiddenTime)) {
            query.put("ForbiddenTime", request.forbiddenTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.protocolTypeShrink)) {
            query.put("ProtocolType", request.protocolTypeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.span)) {
            query.put("Span", request.span);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAntiBruteForceRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateAntiBruteForceRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense rule against brute-force attacks.</p>
     * 
     * @param request CreateAntiBruteForceRuleRequest
     * @return CreateAntiBruteForceRuleResponse
     */
    public CreateAntiBruteForceRuleResponse createAntiBruteForceRule(CreateAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Create asset selection configurations.</p>
     * 
     * @param request CreateAssetSelectionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAssetSelectionConfigResponse
     */
    public CreateAssetSelectionConfigResponse createAssetSelectionConfigWithOptions(CreateAssetSelectionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.businessType)) {
            query.put("BusinessType", request.businessType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAssetSelectionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAssetSelectionConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateAssetSelectionConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Create asset selection configurations.</p>
     * 
     * @param request CreateAssetSelectionConfigRequest
     * @return CreateAssetSelectionConfigResponse
     */
    public CreateAssetSelectionConfigResponse createAssetSelectionConfig(CreateAssetSelectionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createAssetSelectionConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a witness.</p>
     * 
     * @param request CreateAttestorRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAttestorResponse
     */
    public CreateAttestorResponse createAttestorWithOptions(CreateAttestorRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.keyId)) {
            query.put("KeyId", request.keyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyRegionId)) {
            query.put("KeyRegionId", request.keyRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyVersionId)) {
            query.put("KeyVersionId", request.keyVersionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateAttestor"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateAttestorResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateAttestorResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a witness.</p>
     * 
     * @param request CreateAttestorRequest
     * @return CreateAttestorResponse
     */
    public CreateAttestorResponse createAttestor(CreateAttestorRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createAttestorWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates an anti-ransomware policy for servers.</p>
     * 
     * @param tmpReq CreateBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateBackupPolicyResponse
     */
    public CreateBackupPolicyResponse createBackupPolicyWithOptions(CreateBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateBackupPolicyShrinkRequest request = new CreateBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.policy)) {
            request.policyShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.policy, "Policy", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyShrink)) {
            query.put("Policy", request.policyShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyRegionId)) {
            query.put("PolicyRegionId", request.policyRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateBackupPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateBackupPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates an anti-ransomware policy for servers.</p>
     * 
     * @param request CreateBackupPolicyRequest
     * @return CreateBackupPolicyResponse
     */
    public CreateBackupPolicyResponse createBackupPolicy(CreateBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createBackupPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the parameters that are required to upload a file for detection.</p>
     * 
     * @param request CreateBatchUploadUrlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateBatchUploadUrlResponse
     */
    public CreateBatchUploadUrlResponse createBatchUploadUrlWithOptions(CreateBatchUploadUrlRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.md5List)) {
            query.put("Md5List", request.md5List);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateBatchUploadUrl"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateBatchUploadUrlResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateBatchUploadUrlResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the parameters that are required to upload a file for detection.</p>
     * 
     * @param request CreateBatchUploadUrlRequest
     * @return CreateBatchUploadUrlResponse
     */
    public CreateBatchUploadUrlResponse createBatchUploadUrl(CreateBatchUploadUrlRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createBatchUploadUrlWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a binary security policy.</p>
     * 
     * @param request CreateBinarySecurityPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateBinarySecurityPolicyResponse
     */
    public CreateBinarySecurityPolicyResponse createBinarySecurityPolicyWithOptions(CreateBinarySecurityPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusters)) {
            query.put("Clusters", request.clusters);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policy)) {
            query.put("Policy", request.policy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateBinarySecurityPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateBinarySecurityPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateBinarySecurityPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a binary security policy.</p>
     * 
     * @param request CreateBinarySecurityPolicyRequest
     * @return CreateBinarySecurityPolicyResponse
     */
    public CreateBinarySecurityPolicyResponse createBinarySecurityPolicy(CreateBinarySecurityPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createBinarySecurityPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a container scan task.</p>
     * 
     * @param request CreateContainerScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateContainerScanTaskResponse
     */
    public CreateContainerScanTaskResponse createContainerScanTaskWithOptions(CreateContainerScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerIds)) {
            query.put("ContainerIds", request.containerIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateContainerScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateContainerScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateContainerScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a container scan task.</p>
     * 
     * @param request CreateContainerScanTaskRequest
     * @return CreateContainerScanTaskResponse
     */
    public CreateContainerScanTaskResponse createContainerScanTask(CreateContainerScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createContainerScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a scan task for a running container application based on the application name.</p>
     * 
     * @param request CreateContainerScanTaskByAppNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateContainerScanTaskByAppNameResponse
     */
    public CreateContainerScanTaskByAppNameResponse createContainerScanTaskByAppNameWithOptions(CreateContainerScanTaskByAppNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appNames)) {
            query.put("AppNames", request.appNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateContainerScanTaskByAppName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateContainerScanTaskByAppNameResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateContainerScanTaskByAppNameResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a scan task for a running container application based on the application name.</p>
     * 
     * @param request CreateContainerScanTaskByAppNameRequest
     * @return CreateContainerScanTaskByAppNameResponse
     */
    public CreateContainerScanTaskByAppNameResponse createContainerScanTaskByAppName(CreateContainerScanTaskByAppNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createContainerScanTaskByAppNameWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates an IP address blocking policy for one or more servers.</p>
     * 
     * @param request CreateCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCustomBlockRecordResponse
     */
    public CreateCustomBlockRecordResponse createCustomBlockRecordWithOptions(CreateCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.expireTime)) {
            query.put("ExpireTime", request.expireTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateCustomBlockRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateCustomBlockRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates an IP address blocking policy for one or more servers.</p>
     * 
     * @param request CreateCustomBlockRecordRequest
     * @return CreateCustomBlockRecordResponse
     */
    public CreateCustomBlockRecordResponse createCustomBlockRecord(CreateCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates custom weak password rules.</p>
     * 
     * @param request CreateCustomizedDictRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCustomizedDictResponse
     */
    public CreateCustomizedDictResponse createCustomizedDictWithOptions(CreateCustomizedDictRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateCustomizedDict"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateCustomizedDictResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateCustomizedDictResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates custom weak password rules.</p>
     * 
     * @param request CreateCustomizedDictRequest
     * @return CreateCustomizedDictResponse
     */
    public CreateCustomizedDictResponse createCustomizedDict(CreateCustomizedDictRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createCustomizedDictWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.</p>
     * 
     * @param request CreateCycleTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCycleTaskResponse
     */
    public CreateCycleTaskResponse createCycleTaskWithOptions(CreateCycleTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.firstDateStr)) {
            query.put("FirstDateStr", request.firstDateStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalPeriod)) {
            query.put("IntervalPeriod", request.intervalPeriod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.param)) {
            query.put("Param", request.param);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.periodUnit)) {
            query.put("PeriodUnit", request.periodUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetEndTime)) {
            query.put("TargetEndTime", request.targetEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetStartTime)) {
            query.put("TargetStartTime", request.targetStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateCycleTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateCycleTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateCycleTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.</p>
     * 
     * @param request CreateCycleTaskRequest
     * @return CreateCycleTaskResponse
     */
    public CreateCycleTaskResponse createCycleTask(CreateCycleTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createCycleTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a dynamic dictionary of weak passwords.</p>
     * 
     * @param request CreateDynamicDictRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDynamicDictResponse
     */
    public CreateDynamicDictResponse createDynamicDictWithOptions(CreateDynamicDictRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.override)) {
            query.put("Override", request.override);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateDynamicDict"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateDynamicDictResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateDynamicDictResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a dynamic dictionary of weak passwords.</p>
     * 
     * @param request CreateDynamicDictRequest
     * @return CreateDynamicDictResponse
     */
    public CreateDynamicDictResponse createDynamicDict(CreateDynamicDictRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createDynamicDictWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.</p>
     * 
     * <b>summary</b> : 
     * <p>Pushes a file to the cloud for detection.</p>
     * 
     * @param request CreateFileDetectRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileDetectResponse
     */
    public CreateFileDetectResponse createFileDetectWithOptions(CreateFileDetectRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.decompress)) {
            query.put("Decompress", request.decompress);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.downloadUrl)) {
            query.put("DownloadUrl", request.downloadUrl);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hashKey)) {
            query.put("HashKey", request.hashKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ossKey)) {
            query.put("OssKey", request.ossKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileDetect"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileDetectResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateFileDetectResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.</p>
     * 
     * <b>summary</b> : 
     * <p>Pushes a file to the cloud for detection.</p>
     * 
     * @param request CreateFileDetectRequest
     * @return CreateFileDetectResponse
     */
    public CreateFileDetectResponse createFileDetect(CreateFileDetectRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileDetectWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
     * The form upload method is provided by OSS. For more information, see <a href="https://help.aliyun.com/document_detail/84788.html">Form upload</a>.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the parameters that are required to upload a file for detection.</p>
     * 
     * @param request CreateFileDetectUploadUrlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileDetectUploadUrlResponse
     */
    public CreateFileDetectUploadUrlResponse createFileDetectUploadUrlWithOptions(CreateFileDetectUploadUrlRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.hashKeyContextList)) {
            query.put("HashKeyContextList", request.hashKeyContextList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hashKeyList)) {
            query.put("HashKeyList", request.hashKeyList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileDetectUploadUrl"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileDetectUploadUrlResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateFileDetectUploadUrlResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
     * The form upload method is provided by OSS. For more information, see <a href="https://help.aliyun.com/document_detail/84788.html">Form upload</a>.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the parameters that are required to upload a file for detection.</p>
     * 
     * @param request CreateFileDetectUploadUrlRequest
     * @return CreateFileDetectUploadUrlResponse
     */
    public CreateFileDetectUploadUrlResponse createFileDetectUploadUrl(CreateFileDetectUploadUrlRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileDetectUploadUrlWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a core file monitoring rule.</p>
     * 
     * @param request CreateFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileProtectRuleResponse
     */
    public CreateFileProtectRuleResponse createFileProtectRuleWithOptions(CreateFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileOps)) {
            query.put("FileOps", request.fileOps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePaths)) {
            query.put("FilePaths", request.filePaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPaths)) {
            query.put("ProcPaths", request.procPaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchId)) {
            query.put("SwitchId", request.switchId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileProtectRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateFileProtectRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a core file monitoring rule.</p>
     * 
     * @param request CreateFileProtectRuleRequest
     * @return CreateFileProtectRuleResponse
     */
    public CreateFileProtectRuleResponse createFileProtectRule(CreateFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Specifies the queries per second (QPS) limit on the files uploaded from the client.</p>
     * 
     * @param request CreateFileUploadLimitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFileUploadLimitResponse
     */
    public CreateFileUploadLimitResponse createFileUploadLimitWithOptions(CreateFileUploadLimitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.limit)) {
            query.put("Limit", request.limit);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateFileUploadLimit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateFileUploadLimitResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateFileUploadLimitResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Specifies the queries per second (QPS) limit on the files uploaded from the client.</p>
     * 
     * @param request CreateFileUploadLimitRequest
     * @return CreateFileUploadLimitResponse
     */
    public CreateFileUploadLimitResponse createFileUploadLimit(CreateFileUploadLimitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createFileUploadLimitWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a honeypot.</p>
     * 
     * @param request CreateHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotResponse
     */
    public CreateHoneypotResponse createHoneypotWithOptions(CreateHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageId)) {
            query.put("HoneypotImageId", request.honeypotImageId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotName)) {
            query.put("HoneypotName", request.honeypotName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a honeypot.</p>
     * 
     * @param request CreateHoneypotRequest
     * @return CreateHoneypotResponse
     */
    public CreateHoneypotResponse createHoneypot(CreateHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a management node.</p>
     * 
     * @param request CreateHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotNodeResponse
     */
    public CreateHoneypotNodeResponse createHoneypotNodeWithOptions(CreateHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allowHoneypotAccessInternet)) {
            query.put("AllowHoneypotAccessInternet", request.allowHoneypotAccessInternet);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.availableProbeNum)) {
            query.put("AvailableProbeNum", request.availableProbeNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityGroupProbeIpList)) {
            query.put("SecurityGroupProbeIpList", request.securityGroupProbeIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateHoneypotNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a management node.</p>
     * 
     * @param request CreateHoneypotNodeRequest
     * @return CreateHoneypotNodeResponse
     */
    public CreateHoneypotNodeResponse createHoneypotNode(CreateHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a honeypot template.</p>
     * 
     * @param request CreateHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotPresetResponse
     */
    public CreateHoneypotPresetResponse createHoneypotPresetWithOptions(CreateHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.presetName)) {
            query.put("PresetName", request.presetName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotPresetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateHoneypotPresetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a honeypot template.</p>
     * 
     * @param request CreateHoneypotPresetRequest
     * @return CreateHoneypotPresetResponse
     */
    public CreateHoneypotPresetResponse createHoneypotPreset(CreateHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a probe.</p>
     * 
     * @param request CreateHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotProbeResponse
     */
    public CreateHoneypotProbeResponse createHoneypotProbeWithOptions(CreateHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.arp)) {
            query.put("Arp", request.arp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.businessGroupId)) {
            query.put("BusinessGroupId", request.businessGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.controlNodeId)) {
            query.put("ControlNodeId", request.controlNodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.displayName)) {
            query.put("DisplayName", request.displayName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotBindList)) {
            query.put("HoneypotBindList", request.honeypotBindList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ping)) {
            query.put("Ping", request.ping);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeType)) {
            query.put("ProbeType", request.probeType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeVersion)) {
            query.put("ProbeVersion", request.probeVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.proxyIp)) {
            query.put("ProxyIp", request.proxyIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateHoneypotProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a probe.</p>
     * 
     * @param request CreateHoneypotProbeRequest
     * @return CreateHoneypotProbeResponse
     */
    public CreateHoneypotProbeResponse createHoneypotProbe(CreateHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a monitoring or forwarding service for a probe.</p>
     * 
     * @param request CreateHoneypotProbeBindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHoneypotProbeBindResponse
     */
    public CreateHoneypotProbeBindResponse createHoneypotProbeBindWithOptions(CreateHoneypotProbeBindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindPortList)) {
            query.put("BindPortList", request.bindPortList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceIpList)) {
            query.put("ServiceIpList", request.serviceIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHoneypotProbeBind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHoneypotProbeBindResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateHoneypotProbeBindResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a monitoring or forwarding service for a probe.</p>
     * 
     * @param request CreateHoneypotProbeBindRequest
     * @return CreateHoneypotProbeBindResponse
     */
    public CreateHoneypotProbeBindResponse createHoneypotProbeBind(CreateHoneypotProbeBindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHoneypotProbeBindWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a hybrid-cloud proxy cluster.</p>
     * 
     * @param request CreateHybridProxyClusterRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateHybridProxyClusterResponse
     */
    public CreateHybridProxyClusterResponse createHybridProxyClusterWithOptions(CreateHybridProxyClusterRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ip)) {
            query.put("Ip", request.ip);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateHybridProxyCluster"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateHybridProxyClusterResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateHybridProxyClusterResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a hybrid-cloud proxy cluster.</p>
     * 
     * @param request CreateHybridProxyClusterRequest
     * @return CreateHybridProxyClusterResponse
     */
    public CreateHybridProxyClusterResponse createHybridProxyCluster(CreateHybridProxyClusterRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createHybridProxyClusterWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense rule in the container firewall module.</p>
     * 
     * @param tmpReq CreateInterceptionRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateInterceptionRuleResponse
     */
    public CreateInterceptionRuleResponse createInterceptionRuleWithOptions(CreateInterceptionRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateInterceptionRuleShrinkRequest request = new CreateInterceptionRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.dstTargetList)) {
            request.dstTargetListShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.dstTargetList, "DstTargetList", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.srcTarget)) {
            request.srcTargetShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, "SrcTarget", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dstTargetListShrink)) {
            query.put("DstTargetList", request.dstTargetListShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interceptType)) {
            query.put("InterceptType", request.interceptType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderIndex)) {
            query.put("OrderIndex", request.orderIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcTargetShrink)) {
            query.put("SrcTarget", request.srcTargetShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateInterceptionRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateInterceptionRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateInterceptionRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense rule in the container firewall module.</p>
     * 
     * @param request CreateInterceptionRuleRequest
     * @return CreateInterceptionRuleResponse
     */
    public CreateInterceptionRuleResponse createInterceptionRule(CreateInterceptionRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createInterceptionRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense object.</p>
     * 
     * @param request CreateInterceptionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateInterceptionTargetResponse
     */
    public CreateInterceptionTargetResponse createInterceptionTargetWithOptions(CreateInterceptionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageList)) {
            query.put("ImageList", request.imageList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateInterceptionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateInterceptionTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateInterceptionTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a defense object.</p>
     * 
     * @param request CreateInterceptionTargetRequest
     * @return CreateInterceptionTargetResponse
     */
    public CreateInterceptionTargetResponse createInterceptionTarget(CreateInterceptionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createInterceptionTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a Jenkins image repository.</p>
     * 
     * @param request CreateJenkinsImageRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateJenkinsImageRegistryResponse
     */
    public CreateJenkinsImageRegistryResponse createJenkinsImageRegistryWithOptions(CreateJenkinsImageRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.domainName)) {
            body.put("DomainName", request.domainName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extraParam)) {
            body.put("ExtraParam", request.extraParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.netType)) {
            body.put("NetType", request.netType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.password)) {
            body.put("Password", request.password);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.persistenceDay)) {
            body.put("PersistenceDay", request.persistenceDay);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.protocolType)) {
            body.put("ProtocolType", request.protocolType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            body.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryHostIp)) {
            body.put("RegistryHostIp", request.registryHostIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryName)) {
            body.put("RegistryName", request.registryName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryType)) {
            body.put("RegistryType", request.registryType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryVersion)) {
            body.put("RegistryVersion", request.registryVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.transPerHour)) {
            body.put("TransPerHour", request.transPerHour);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userName)) {
            body.put("UserName", request.userName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            body.put("VpcId", request.vpcId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteList)) {
            body.put("WhiteList", request.whiteList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateJenkinsImageRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateJenkinsImageRegistryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateJenkinsImageRegistryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a Jenkins image repository.</p>
     * 
     * @param request CreateJenkinsImageRegistryRequest
     * @return CreateJenkinsImageRegistryResponse
     */
    public CreateJenkinsImageRegistryResponse createJenkinsImageRegistry(CreateJenkinsImageRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createJenkinsImageRegistryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a Jenkins scan task.</p>
     * 
     * @param request CreateJenkinsImageScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateJenkinsImageScanTaskResponse
     */
    public CreateJenkinsImageScanTaskResponse createJenkinsImageScanTaskWithOptions(CreateJenkinsImageScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.jenkinsEnv)) {
            query.put("JenkinsEnv", request.jenkinsEnv);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.digest)) {
            body.put("Digest", request.digest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageCreate)) {
            body.put("ImageCreate", request.imageCreate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageId)) {
            body.put("ImageId", request.imageId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageSize)) {
            body.put("ImageSize", request.imageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUpdate)) {
            body.put("ImageUpdate", request.imageUpdate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            body.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            body.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            body.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.token)) {
            body.put("Token", request.token);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            body.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateJenkinsImageScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateJenkinsImageScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateJenkinsImageScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a Jenkins scan task.</p>
     * 
     * @param request CreateJenkinsImageScanTaskRequest
     * @return CreateJenkinsImageScanTaskResponse
     */
    public CreateJenkinsImageScanTaskResponse createJenkinsImageScanTask(CreateJenkinsImageScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createJenkinsImageScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request CreateMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMaliciousFileWhitelistConfigResponse
     */
    public CreateMaliciousFileWhitelistConfigResponse createMaliciousFileWhitelistConfigWithOptions(CreateMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.field)) {
            query.put("Field", request.field);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operator)) {
            query.put("Operator", request.operator);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetValue)) {
            query.put("TargetValue", request.targetValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateMaliciousFileWhitelistConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateMaliciousFileWhitelistConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request CreateMaliciousFileWhitelistConfigRequest
     * @return CreateMaliciousFileWhitelistConfigResponse
     */
    public CreateMaliciousFileWhitelistConfigResponse createMaliciousFileWhitelistConfig(CreateMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds remarks to alert events for agentless detection.</p>
     * 
     * @param request CreateMaliciousNoteRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMaliciousNoteResponse
     */
    public CreateMaliciousNoteResponse createMaliciousNoteWithOptions(CreateMaliciousNoteRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.note)) {
            query.put("Note", request.note);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateMaliciousNote"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateMaliciousNoteResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateMaliciousNoteResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds remarks to alert events for agentless detection.</p>
     * 
     * @param request CreateMaliciousNoteRequest
     * @return CreateMaliciousNoteResponse
     */
    public CreateMaliciousNoteResponse createMaliciousNote(CreateMaliciousNoteRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createMaliciousNoteWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.</p>
     * 
     * @param request CreateMonitorAccountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMonitorAccountResponse
     */
    public CreateMonitorAccountResponse createMonitorAccountWithOptions(CreateMonitorAccountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountIds)) {
            query.put("AccountIds", request.accountIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateMonitorAccount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateMonitorAccountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateMonitorAccountResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.</p>
     * 
     * @param request CreateMonitorAccountRequest
     * @return CreateMonitorAccountResponse
     */
    public CreateMonitorAccountResponse createMonitorAccount(CreateMonitorAccountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createMonitorAccountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.</p>
     * 
     * @param request CreateOpaClusterPluginRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOpaClusterPluginResponse
     */
    public CreateOpaClusterPluginResponse createOpaClusterPluginWithOptions(CreateOpaClusterPluginRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOpaClusterPlugin"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOpaClusterPluginResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateOpaClusterPluginResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.</p>
     * 
     * @param request CreateOpaClusterPluginRequest
     * @return CreateOpaClusterPluginResponse
     */
    public CreateOpaClusterPluginResponse createOpaClusterPlugin(CreateOpaClusterPluginRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOpaClusterPluginWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a rule to block at-risk images.</p>
     * 
     * @param tmpReq CreateOpaStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOpaStrategyNewResponse
     */
    public CreateOpaStrategyNewResponse createOpaStrategyNewWithOptions(CreateOpaStrategyNewRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateOpaStrategyNewShrinkRequest request = new CreateOpaStrategyNewShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.alarmDetail)) {
            request.alarmDetailShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.alarmDetail, "AlarmDetail", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmDetailShrink)) {
            query.put("AlarmDetail", request.alarmDetailShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousImage)) {
            query.put("MaliciousImage", request.maliciousImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scopes)) {
            query.put("Scopes", request.scopes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTemplateId)) {
            query.put("StrategyTemplateId", request.strategyTemplateId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unScanedImage)) {
            query.put("UnScanedImage", request.unScanedImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteList)) {
            query.put("WhiteList", request.whiteList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOpaStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOpaStrategyNewResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateOpaStrategyNewResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a rule to block at-risk images.</p>
     * 
     * @param request CreateOpaStrategyNewRequest
     * @return CreateOpaStrategyNewResponse
     */
    public CreateOpaStrategyNewResponse createOpaStrategyNew(CreateOpaStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOpaStrategyNewWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.</p>
     * 
     * <b>summary</b> : 
     * <p>Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.</p>
     * 
     * @param request CreateOrUpdateAssetGroupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOrUpdateAssetGroupResponse
     */
    public CreateOrUpdateAssetGroupResponse createOrUpdateAssetGroupWithOptions(CreateOrUpdateAssetGroupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupName)) {
            query.put("GroupName", request.groupName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOrUpdateAssetGroup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOrUpdateAssetGroupResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateOrUpdateAssetGroupResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.</p>
     * 
     * <b>summary</b> : 
     * <p>Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.</p>
     * 
     * @param request CreateOrUpdateAssetGroupRequest
     * @return CreateOrUpdateAssetGroupResponse
     */
    public CreateOrUpdateAssetGroupResponse createOrUpdateAssetGroup(CreateOrUpdateAssetGroupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOrUpdateAssetGroupWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.</p>
     * 
     * @param request CreateOrUpdateAutoTagRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOrUpdateAutoTagRuleResponse
     */
    public CreateOrUpdateAutoTagRuleResponse createOrUpdateAutoTagRuleWithOptions(CreateOrUpdateAutoTagRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkAll)) {
            query.put("CheckAll", request.checkAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.expression)) {
            query.put("Expression", request.expression);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleDesc)) {
            query.put("RuleDesc", request.ruleDesc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagContext)) {
            query.put("TagContext", request.tagContext);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagType)) {
            query.put("TagType", request.tagType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOrUpdateAutoTagRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOrUpdateAutoTagRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateOrUpdateAutoTagRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.</p>
     * 
     * @param request CreateOrUpdateAutoTagRuleRequest
     * @return CreateOrUpdateAutoTagRuleResponse
     */
    public CreateOrUpdateAutoTagRuleResponse createOrUpdateAutoTagRule(CreateOrUpdateAutoTagRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOrUpdateAutoTagRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates or modifies a DingTalk chatbot that sends notifications.</p>
     * 
     * @param request CreateOrUpdateDingTalkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOrUpdateDingTalkResponse
     */
    public CreateOrUpdateDingTalkResponse createOrUpdateDingTalkWithOptions(CreateOrUpdateDingTalkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configList)) {
            query.put("ConfigList", request.configList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dingTalkLang)) {
            query.put("DingTalkLang", request.dingTalkLang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupIdList)) {
            query.put("GroupIdList", request.groupIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalTime)) {
            query.put("IntervalTime", request.intervalTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleActionName)) {
            query.put("RuleActionName", request.ruleActionName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sendUrl)) {
            query.put("SendUrl", request.sendUrl);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOrUpdateDingTalk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOrUpdateDingTalkResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateOrUpdateDingTalkResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates or modifies a DingTalk chatbot that sends notifications.</p>
     * 
     * @param request CreateOrUpdateDingTalkRequest
     * @return CreateOrUpdateDingTalkResponse
     */
    public CreateOrUpdateDingTalkResponse createOrUpdateDingTalk(CreateOrUpdateDingTalkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOrUpdateDingTalkWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a bucket check task.</p>
     * 
     * @param request CreateOssBucketScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOssBucketScanTaskResponse
     */
    public CreateOssBucketScanTaskResponse createOssBucketScanTaskWithOptions(CreateOssBucketScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allKeyPrefix)) {
            query.put("AllKeyPrefix", request.allKeyPrefix);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decryptionList)) {
            query.put("DecryptionList", request.decryptionList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.excludeKeySuffixList)) {
            query.put("ExcludeKeySuffixList", request.excludeKeySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyPrefixList)) {
            query.put("KeyPrefixList", request.keyPrefixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keySuffixList)) {
            query.put("KeySuffixList", request.keySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastModifiedStartTime)) {
            query.put("LastModifiedStartTime", request.lastModifiedStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanMode)) {
            query.put("ScanMode", request.scanMode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOssBucketScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOssBucketScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateOssBucketScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a bucket check task.</p>
     * 
     * @param request CreateOssBucketScanTaskRequest
     * @return CreateOssBucketScanTaskResponse
     */
    public CreateOssBucketScanTaskResponse createOssBucketScanTask(CreateOssBucketScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOssBucketScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.</p>
     * 
     * @param request CreateOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOssScanConfigResponse
     */
    public CreateOssScanConfigResponse createOssScanConfigWithOptions(CreateOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allKeyPrefix)) {
            query.put("AllKeyPrefix", request.allKeyPrefix);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decryptionList)) {
            query.put("DecryptionList", request.decryptionList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyPrefixList)) {
            query.put("KeyPrefixList", request.keyPrefixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keySuffixList)) {
            query.put("KeySuffixList", request.keySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastModifiedStartTime)) {
            query.put("LastModifiedStartTime", request.lastModifiedStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanDayList)) {
            query.put("ScanDayList", request.scanDayList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateOssScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateOssScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.</p>
     * 
     * @param request CreateOssScanConfigRequest
     * @return CreateOssScanConfigResponse
     */
    public CreateOssScanConfigResponse createOssScanConfig(CreateOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createOssScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.</p>
     * 
     * @param request CreateRdDefaultSyncListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateRdDefaultSyncListResponse
     */
    public CreateRdDefaultSyncListResponse createRdDefaultSyncListWithOptions(CreateRdDefaultSyncListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.folderIds)) {
            query.put("FolderIds", request.folderIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateRdDefaultSyncList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateRdDefaultSyncListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateRdDefaultSyncListResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.</p>
     * 
     * @param request CreateRdDefaultSyncListRequest
     * @return CreateRdDefaultSyncListResponse
     */
    public CreateRdDefaultSyncListResponse createRdDefaultSyncList(CreateRdDefaultSyncListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createRdDefaultSyncListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a restoration task.</p>
     * 
     * @param request CreateRestoreJobRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateRestoreJobResponse
     */
    public CreateRestoreJobResponse createRestoreJobWithOptions(CreateRestoreJobRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.includes)) {
            query.put("Includes", request.includes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotHash)) {
            query.put("SnapshotHash", request.snapshotHash);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotId)) {
            query.put("SnapshotId", request.snapshotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotVersion)) {
            query.put("SnapshotVersion", request.snapshotVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vaultId)) {
            query.put("VaultId", request.vaultId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateRestoreJob"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateRestoreJobResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateRestoreJobResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a restoration task.</p>
     * 
     * @param request CreateRestoreJobRequest
     * @return CreateRestoreJobResponse
     */
    public CreateRestoreJobResponse createRestoreJob(CreateRestoreJobRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createRestoreJobWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Applies for a trial of Security Center.</p>
     * 
     * @param tmpReq CreateSasTrialRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSasTrialResponse
     */
    public CreateSasTrialResponse createSasTrialWithOptions(CreateSasTrialRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateSasTrialShrinkRequest request = new CreateSasTrialShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.requestForm)) {
            request.requestFormShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.requestForm, "RequestForm", "json");
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.fromEcs)) {
            body.put("FromEcs", request.fromEcs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestFormShrink)) {
            body.put("RequestForm", request.requestFormShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tryType)) {
            body.put("TryType", request.tryType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tryVersion)) {
            body.put("TryVersion", request.tryVersion);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSasTrial"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSasTrialResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateSasTrialResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Applies for a trial of Security Center.</p>
     * 
     * @param request CreateSasTrialRequest
     * @return CreateSasTrialResponse
     */
    public CreateSasTrialResponse createSasTrial(CreateSasTrialRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createSasTrialWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>For more information about service-linked roles, see <a href="https://help.aliyun.com/document_detail/160674.html">Service-linked roles</a>.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates a service-linked role and authorizes Security Center to access cloud resources.</p>
     * 
     * @param request CreateServiceLinkedRoleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateServiceLinkedRoleResponse
     */
    public CreateServiceLinkedRoleResponse createServiceLinkedRoleWithOptions(CreateServiceLinkedRoleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.serviceLinkedRole)) {
            query.put("ServiceLinkedRole", request.serviceLinkedRole);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateServiceLinkedRole"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateServiceLinkedRoleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateServiceLinkedRoleResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>For more information about service-linked roles, see <a href="https://help.aliyun.com/document_detail/160674.html">Service-linked roles</a>.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates a service-linked role and authorizes Security Center to access cloud resources.</p>
     * 
     * @param request CreateServiceLinkedRoleRequest
     * @return CreateServiceLinkedRoleResponse
     */
    public CreateServiceLinkedRoleResponse createServiceLinkedRole(CreateServiceLinkedRoleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createServiceLinkedRoleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Create a service trail.</p>
     * 
     * @param request CreateServiceTrailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateServiceTrailResponse
     */
    public CreateServiceTrailResponse createServiceTrailWithOptions(CreateServiceTrailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateServiceTrail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateServiceTrailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateServiceTrailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Create a service trail.</p>
     * 
     * @param request CreateServiceTrailRequest
     * @return CreateServiceTrailResponse
     */
    public CreateServiceTrailResponse createServiceTrail(CreateServiceTrailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createServiceTrailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a task to query alert events that are triggered by the same rule or of the same alert type.</p>
     * 
     * @param request CreateSimilarSecurityEventsQueryTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSimilarSecurityEventsQueryTaskResponse
     */
    public CreateSimilarSecurityEventsQueryTaskResponse createSimilarSecurityEventsQueryTaskWithOptions(CreateSimilarSecurityEventsQueryTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.similarEventScenarioCode)) {
            query.put("SimilarEventScenarioCode", request.similarEventScenarioCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSimilarSecurityEventsQueryTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSimilarSecurityEventsQueryTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateSimilarSecurityEventsQueryTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a task to query alert events that are triggered by the same rule or of the same alert type.</p>
     * 
     * @param request CreateSimilarSecurityEventsQueryTaskRequest
     * @return CreateSimilarSecurityEventsQueryTaskResponse
     */
    public CreateSimilarSecurityEventsQueryTaskResponse createSimilarSecurityEventsQueryTask(CreateSimilarSecurityEventsQueryTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createSimilarSecurityEventsQueryTaskWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates a task on the My Policies tab of the Playbook page.</p>
     * 
     * @param request CreateSoarStrategyTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSoarStrategyTaskResponse
     */
    public CreateSoarStrategyTaskResponse createSoarStrategyTaskWithOptions(CreateSoarStrategyTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTaskName)) {
            query.put("StrategyTaskName", request.strategyTaskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTaskParams)) {
            query.put("StrategyTaskParams", request.strategyTaskParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTaskPlanExeTime)) {
            query.put("StrategyTaskPlanExeTime", request.strategyTaskPlanExeTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSoarStrategyTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSoarStrategyTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateSoarStrategyTaskResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates a task on the My Policies tab of the Playbook page.</p>
     * 
     * @param request CreateSoarStrategyTaskRequest
     * @return CreateSoarStrategyTaskResponse
     */
    public CreateSoarStrategyTaskResponse createSoarStrategyTask(CreateSoarStrategyTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createSoarStrategyTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds remarks to an alert event.</p>
     * 
     * @param request CreateSuspEventNoteRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSuspEventNoteResponse
     */
    public CreateSuspEventNoteResponse createSuspEventNoteWithOptions(CreateSuspEventNoteRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.note)) {
            query.put("Note", request.note);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateSuspEventNote"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateSuspEventNoteResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateSuspEventNoteResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds remarks to an alert event.</p>
     * 
     * @param request CreateSuspEventNoteRequest
     * @return CreateSuspEventNoteResponse
     */
    public CreateSuspEventNoteResponse createSuspEventNote(CreateSuspEventNoteRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createSuspEventNoteWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates an anti-ransomware policy for a database.</p>
     * 
     * @param tmpReq CreateUniBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUniBackupPolicyResponse
     */
    public CreateUniBackupPolicyResponse createUniBackupPolicyWithOptions(CreateUniBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        CreateUniBackupPolicyShrinkRequest request = new CreateUniBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.fullPlan)) {
            request.fullPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, "FullPlan", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.incPlan)) {
            request.incPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, "IncPlan", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountName)) {
            query.put("AccountName", request.accountName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.accountPassword)) {
            query.put("AccountPassword", request.accountPassword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.databaseAddByUser)) {
            query.put("DatabaseAddByUser", request.databaseAddByUser);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.databaseType)) {
            query.put("DatabaseType", request.databaseType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fullPlanShrink)) {
            query.put("FullPlan", request.fullPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incPlanShrink)) {
            query.put("IncPlan", request.incPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyName)) {
            query.put("PolicyName", request.policyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.retention)) {
            query.put("Retention", request.retention);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.speedLimiter)) {
            query.put("SpeedLimiter", request.speedLimiter);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateUniBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateUniBackupPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateUniBackupPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates an anti-ransomware policy for a database.</p>
     * 
     * @param request CreateUniBackupPolicyRequest
     * @return CreateUniBackupPolicyResponse
     */
    public CreateUniBackupPolicyResponse createUniBackupPolicy(CreateUniBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createUniBackupPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a restoration task for a database.</p>
     * 
     * @param request CreateUniRestorePlanRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUniRestorePlanResponse
     */
    public CreateUniRestorePlanResponse createUniRestorePlanWithOptions(CreateUniRestorePlanRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.database)) {
            query.put("Database", request.database);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceUuid)) {
            query.put("InstanceUuid", request.instanceUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resetScn)) {
            query.put("ResetScn", request.resetScn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resetTime)) {
            query.put("ResetTime", request.resetTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.restoreInfo)) {
            query.put("RestoreInfo", request.restoreInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timePoint)) {
            query.put("TimePoint", request.timePoint);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateUniRestorePlan"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateUniRestorePlanResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateUniRestorePlanResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a restoration task for a database.</p>
     * 
     * @param request CreateUniRestorePlanRequest
     * @return CreateUniRestorePlanResponse
     */
    public CreateUniRestorePlanResponse createUniRestorePlan(CreateUniRestorePlanRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createUniRestorePlanWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates the risk level settings for baseline check items.</p>
     * 
     * @param request CreateUserSettingRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUserSettingResponse
     */
    public CreateUserSettingResponse createUserSettingWithOptions(CreateUserSettingRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevels)) {
            query.put("AlertLevels", request.alertLevels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.invalidWarningKeepDays)) {
            query.put("InvalidWarningKeepDays", request.invalidWarningKeepDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateUserSetting"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateUserSettingResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateUserSettingResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates the risk level settings for baseline check items.</p>
     * 
     * @param request CreateUserSettingRequest
     * @return CreateUserSettingResponse
     */
    public CreateUserSettingResponse createUserSetting(CreateUserSettingRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createUserSettingWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a one-time virus scan task that is immediately executed.</p>
     * 
     * @param request CreateVirusScanOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateVirusScanOnceTaskResponse
     */
    public CreateVirusScanOnceTaskResponse createVirusScanOnceTaskWithOptions(CreateVirusScanOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scanPath)) {
            query.put("ScanPath", request.scanPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanType)) {
            query.put("ScanType", request.scanType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateVirusScanOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateVirusScanOnceTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateVirusScanOnceTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a one-time virus scan task that is immediately executed.</p>
     * 
     * @param request CreateVirusScanOnceTaskRequest
     * @return CreateVirusScanOnceTaskResponse
     */
    public CreateVirusScanOnceTaskResponse createVirusScanOnceTask(CreateVirusScanOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createVirusScanOnceTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.</p>
     * 
     * @param request CreateVulAutoRepairConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateVulAutoRepairConfigResponse
     */
    public CreateVulAutoRepairConfigResponse createVulAutoRepairConfigWithOptions(CreateVulAutoRepairConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulAutoRepairConfigList)) {
            query.put("VulAutoRepairConfigList", request.vulAutoRepairConfigList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "CreateVulAutoRepairConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new CreateVulAutoRepairConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new CreateVulAutoRepairConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.</p>
     * 
     * @param request CreateVulAutoRepairConfigRequest
     * @return CreateVulAutoRepairConfigResponse
     */
    public CreateVulAutoRepairConfigResponse createVulAutoRepairConfig(CreateVulAutoRepairConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.createVulAutoRepairConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the specified defense rules against brute-force attacks.</p>
     * 
     * @param request DeleteAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteAntiBruteForceRuleResponse
     */
    public DeleteAntiBruteForceRuleResponse deleteAntiBruteForceRuleWithOptions(DeleteAntiBruteForceRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteAntiBruteForceRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteAntiBruteForceRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the specified defense rules against brute-force attacks.</p>
     * 
     * @param request DeleteAntiBruteForceRuleRequest
     * @return DeleteAntiBruteForceRuleResponse
     */
    public DeleteAntiBruteForceRuleResponse deleteAntiBruteForceRule(DeleteAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a witness.</p>
     * 
     * @param request DeleteAttestorRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteAttestorResponse
     */
    public DeleteAttestorResponse deleteAttestorWithOptions(DeleteAttestorRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteAttestor"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteAttestorResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteAttestorResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a witness.</p>
     * 
     * @param request DeleteAttestorRequest
     * @return DeleteAttestorResponse
     */
    public DeleteAttestorResponse deleteAttestor(DeleteAttestorRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteAttestorWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration &gt; Feature Settings &gt; Multi-cloud Configuration Management &gt; Asset Management Rule page in the Security Center console.</p>
     * 
     * @param request DeleteAutoTagRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteAutoTagRulesResponse
     */
    public DeleteAutoTagRulesResponse deleteAutoTagRulesWithOptions(DeleteAutoTagRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleIdList)) {
            query.put("RuleIdList", request.ruleIdList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteAutoTagRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteAutoTagRulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteAutoTagRulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration &gt; Feature Settings &gt; Multi-cloud Configuration Management &gt; Asset Management Rule page in the Security Center console.</p>
     * 
     * @param request DeleteAutoTagRulesRequest
     * @return DeleteAutoTagRulesResponse
     */
    public DeleteAutoTagRulesResponse deleteAutoTagRules(DeleteAutoTagRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteAutoTagRulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an anti-ransomware policy.</p>
     * 
     * @param request DeleteBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBackupPolicyResponse
     */
    public DeleteBackupPolicyResponse deleteBackupPolicyWithOptions(DeleteBackupPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBackupPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteBackupPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an anti-ransomware policy.</p>
     * 
     * @param request DeleteBackupPolicyRequest
     * @return DeleteBackupPolicyResponse
     */
    public DeleteBackupPolicyResponse deleteBackupPolicy(DeleteBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBackupPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.</p>
     * 
     * @param request DeleteBackupPolicyMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBackupPolicyMachineResponse
     */
    public DeleteBackupPolicyMachineResponse deleteBackupPolicyMachineWithOptions(DeleteBackupPolicyMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBackupPolicyMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBackupPolicyMachineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteBackupPolicyMachineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.</p>
     * 
     * @param request DeleteBackupPolicyMachineRequest
     * @return DeleteBackupPolicyMachineResponse
     */
    public DeleteBackupPolicyMachineResponse deleteBackupPolicyMachine(DeleteBackupPolicyMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBackupPolicyMachineWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a backup snapshot that is created for anti-ransomware.</p>
     * 
     * @param request DeleteBackupSnapshotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBackupSnapshotResponse
     */
    public DeleteBackupSnapshotResponse deleteBackupSnapshotWithOptions(DeleteBackupSnapshotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.backupRegionIdList)) {
            query.put("BackupRegionIdList", request.backupRegionIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.backupSnapshotList)) {
            query.put("BackupSnapshotList", request.backupSnapshotList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.retainLatestSnapshot)) {
            query.put("RetainLatestSnapshot", request.retainLatestSnapshot);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBackupSnapshot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBackupSnapshotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteBackupSnapshotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a backup snapshot that is created for anti-ransomware.</p>
     * 
     * @param request DeleteBackupSnapshotRequest
     * @return DeleteBackupSnapshotResponse
     */
    public DeleteBackupSnapshotResponse deleteBackupSnapshot(DeleteBackupSnapshotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBackupSnapshotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the whitelist record for a baseline check item.</p>
     * 
     * @param request DeleteBaselineCheckWhiteRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBaselineCheckWhiteRecordResponse
     */
    public DeleteBaselineCheckWhiteRecordResponse deleteBaselineCheckWhiteRecordWithOptions(DeleteBaselineCheckWhiteRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.recordIds)) {
            query.put("RecordIds", request.recordIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBaselineCheckWhiteRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBaselineCheckWhiteRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteBaselineCheckWhiteRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the whitelist record for a baseline check item.</p>
     * 
     * @param request DeleteBaselineCheckWhiteRecordRequest
     * @return DeleteBaselineCheckWhiteRecordResponse
     */
    public DeleteBaselineCheckWhiteRecordResponse deleteBaselineCheckWhiteRecord(DeleteBaselineCheckWhiteRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBaselineCheckWhiteRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a binary security policy from the container signature feature.</p>
     * 
     * @param request DeleteBinarySecurityPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBinarySecurityPolicyResponse
     */
    public DeleteBinarySecurityPolicyResponse deleteBinarySecurityPolicyWithOptions(DeleteBinarySecurityPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteBinarySecurityPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteBinarySecurityPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteBinarySecurityPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a binary security policy from the container signature feature.</p>
     * 
     * @param request DeleteBinarySecurityPolicyRequest
     * @return DeleteBinarySecurityPolicyResponse
     */
    public DeleteBinarySecurityPolicyResponse deleteBinarySecurityPolicy(DeleteBinarySecurityPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteBinarySecurityPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes specified custom defense rules.</p>
     * 
     * @param request DeleteClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteClientUserDefineRuleResponse
     */
    public DeleteClientUserDefineRuleResponse deleteClientUserDefineRuleWithOptions(DeleteClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.idList)) {
            query.put("IdList", request.idList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteClientUserDefineRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteClientUserDefineRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes specified custom defense rules.</p>
     * 
     * @param request DeleteClientUserDefineRuleRequest
     * @return DeleteClientUserDefineRuleResponse
     */
    public DeleteClientUserDefineRuleResponse deleteClientUserDefineRule(DeleteClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>删除多云资产同步配置</p>
     * 
     * @param request DeleteCloudVendorAccountAKRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCloudVendorAccountAKResponse
     */
    public DeleteCloudVendorAccountAKResponse deleteCloudVendorAccountAKWithOptions(DeleteCloudVendorAccountAKRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authModules)) {
            query.put("AuthModules", request.authModules);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCloudVendorAccountAK"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCloudVendorAccountAKResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteCloudVendorAccountAKResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>删除多云资产同步配置</p>
     * 
     * @param request DeleteCloudVendorAccountAKRequest
     * @return DeleteCloudVendorAccountAKResponse
     */
    public DeleteCloudVendorAccountAKResponse deleteCloudVendorAccountAK(DeleteCloudVendorAccountAKRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteCloudVendorAccountAKWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a rule for non-image program defense.</p>
     * 
     * @param request DeleteContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteContainerDefenseRuleResponse
     */
    public DeleteContainerDefenseRuleResponse deleteContainerDefenseRuleWithOptions(DeleteContainerDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteContainerDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteContainerDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a rule for non-image program defense.</p>
     * 
     * @param request DeleteContainerDefenseRuleRequest
     * @return DeleteContainerDefenseRuleResponse
     */
    public DeleteContainerDefenseRuleResponse deleteContainerDefenseRule(DeleteContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a defense rule against container escapes.</p>
     * 
     * @param request DeleteContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteContainerPluginRuleResponse
     */
    public DeleteContainerPluginRuleResponse deleteContainerPluginRuleWithOptions(DeleteContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteContainerPluginRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteContainerPluginRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a defense rule against container escapes.</p>
     * 
     * @param request DeleteContainerPluginRuleRequest
     * @return DeleteContainerPluginRuleResponse
     */
    public DeleteContainerPluginRuleResponse deleteContainerPluginRule(DeleteContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified IP address blocking policy from one or more servers.</p>
     * 
     * @param request DeleteCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCustomBlockRecordResponse
     */
    public DeleteCustomBlockRecordResponse deleteCustomBlockRecordWithOptions(DeleteCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCustomBlockRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteCustomBlockRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified IP address blocking policy from one or more servers.</p>
     * 
     * @param request DeleteCustomBlockRecordRequest
     * @return DeleteCustomBlockRecordResponse
     */
    public DeleteCustomBlockRecordResponse deleteCustomBlockRecord(DeleteCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a custom security report.</p>
     * 
     * @param request DeleteCustomizeReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCustomizeReportResponse
     */
    public DeleteCustomizeReportResponse deleteCustomizeReportWithOptions(DeleteCustomizeReportRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCustomizeReport"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCustomizeReportResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteCustomizeReportResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a custom security report.</p>
     * 
     * @param request DeleteCustomizeReportRequest
     * @return DeleteCustomizeReportResponse
     */
    public DeleteCustomizeReportResponse deleteCustomizeReport(DeleteCustomizeReportRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteCustomizeReportWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the file that is uploaded to create custom weak password rules.</p>
     * 
     * @param request DeleteCustomizedDictRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCustomizedDictResponse
     */
    public DeleteCustomizedDictResponse deleteCustomizedDictWithOptions(DeleteCustomizedDictRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCustomizedDict"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCustomizedDictResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteCustomizedDictResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the file that is uploaded to create custom weak password rules.</p>
     * 
     * @param request DeleteCustomizedDictRequest
     * @return DeleteCustomizedDictResponse
     */
    public DeleteCustomizedDictResponse deleteCustomizedDict(DeleteCustomizedDictRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteCustomizedDictWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.</p>
     * 
     * @param request DeleteCycleTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCycleTaskResponse
     */
    public DeleteCycleTaskResponse deleteCycleTaskWithOptions(DeleteCycleTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteCycleTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteCycleTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteCycleTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.</p>
     * 
     * @param request DeleteCycleTaskRequest
     * @return DeleteCycleTaskResponse
     */
    public DeleteCycleTaskResponse deleteCycleTask(DeleteCycleTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteCycleTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.</p>
     * 
     * @param request DeleteDingTalkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteDingTalkResponse
     */
    public DeleteDingTalkResponse deleteDingTalkWithOptions(DeleteDingTalkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteDingTalk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteDingTalkResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteDingTalkResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.</p>
     * 
     * @param request DeleteDingTalkRequest
     * @return DeleteDingTalkResponse
     */
    public DeleteDingTalkResponse deleteDingTalk(DeleteDingTalkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteDingTalkWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes core file monitoring rules.</p>
     * 
     * @param request DeleteFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteFileProtectRuleResponse
     */
    public DeleteFileProtectRuleResponse deleteFileProtectRuleWithOptions(DeleteFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteFileProtectRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteFileProtectRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes core file monitoring rules.</p>
     * 
     * @param request DeleteFileProtectRuleRequest
     * @return DeleteFileProtectRuleResponse
     */
    public DeleteFileProtectRuleResponse deleteFileProtectRule(DeleteFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The <strong>Default</strong> server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the <strong>Default</strong> group.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a server group.</p>
     * 
     * @param request DeleteGroupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteGroupResponse
     */
    public DeleteGroupResponse deleteGroupWithOptions(DeleteGroupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteGroup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteGroupResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteGroupResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The <strong>Default</strong> server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the <strong>Default</strong> group.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a server group.</p>
     * 
     * @param request DeleteGroupRequest
     * @return DeleteGroupResponse
     */
    public DeleteGroupResponse deleteGroup(DeleteGroupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteGroupWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified honeypot.</p>
     * 
     * @param request DeleteHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotResponse
     */
    public DeleteHoneypotResponse deleteHoneypotWithOptions(DeleteHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified honeypot.</p>
     * 
     * @param request DeleteHoneypotRequest
     * @return DeleteHoneypotResponse
     */
    public DeleteHoneypotResponse deleteHoneypot(DeleteHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified management node.</p>
     * 
     * @param request DeleteHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotNodeResponse
     */
    public DeleteHoneypotNodeResponse deleteHoneypotNodeWithOptions(DeleteHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteHoneypotNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified management node.</p>
     * 
     * @param request DeleteHoneypotNodeRequest
     * @return DeleteHoneypotNodeResponse
     */
    public DeleteHoneypotNodeResponse deleteHoneypotNode(DeleteHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified honeypot template.</p>
     * 
     * @param request DeleteHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotPresetResponse
     */
    public DeleteHoneypotPresetResponse deleteHoneypotPresetWithOptions(DeleteHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotPresetId)) {
            query.put("HoneypotPresetId", request.honeypotPresetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotPresetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteHoneypotPresetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified honeypot template.</p>
     * 
     * @param request DeleteHoneypotPresetRequest
     * @return DeleteHoneypotPresetResponse
     */
    public DeleteHoneypotPresetResponse deleteHoneypotPreset(DeleteHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified probe.</p>
     * 
     * @param request DeleteHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotProbeResponse
     */
    public DeleteHoneypotProbeResponse deleteHoneypotProbeWithOptions(DeleteHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteHoneypotProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified probe.</p>
     * 
     * @param request DeleteHoneypotProbeRequest
     * @return DeleteHoneypotProbeResponse
     */
    public DeleteHoneypotProbeResponse deleteHoneypotProbe(DeleteHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Delete the probe service.</p>
     * 
     * @param request DeleteHoneypotProbeBindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHoneypotProbeBindResponse
     */
    public DeleteHoneypotProbeBindResponse deleteHoneypotProbeBindWithOptions(DeleteHoneypotProbeBindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindId)) {
            query.put("BindId", request.bindId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHoneypotProbeBind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHoneypotProbeBindResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteHoneypotProbeBindResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Delete the probe service.</p>
     * 
     * @param request DeleteHoneypotProbeBindRequest
     * @return DeleteHoneypotProbeBindResponse
     */
    public DeleteHoneypotProbeBindResponse deleteHoneypotProbeBind(DeleteHoneypotProbeBindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHoneypotProbeBindWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Removes a proxy node from a specified proxy cluster.</p>
     * 
     * @param request DeleteHybridProxyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHybridProxyResponse
     */
    public DeleteHybridProxyResponse deleteHybridProxyWithOptions(DeleteHybridProxyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHybridProxy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHybridProxyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteHybridProxyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Removes a proxy node from a specified proxy cluster.</p>
     * 
     * @param request DeleteHybridProxyRequest
     * @return DeleteHybridProxyResponse
     */
    public DeleteHybridProxyResponse deleteHybridProxy(DeleteHybridProxyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHybridProxyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a proxy cluster based on the name of the proxy cluster.</p>
     * 
     * @param request DeleteHybridProxyClusterRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteHybridProxyClusterResponse
     */
    public DeleteHybridProxyClusterResponse deleteHybridProxyClusterWithOptions(DeleteHybridProxyClusterRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteHybridProxyCluster"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteHybridProxyClusterResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteHybridProxyClusterResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a proxy cluster based on the name of the proxy cluster.</p>
     * 
     * @param request DeleteHybridProxyClusterRequest
     * @return DeleteHybridProxyClusterResponse
     */
    public DeleteHybridProxyClusterResponse deleteHybridProxyCluster(DeleteHybridProxyClusterRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteHybridProxyClusterWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an IDC probe that is created in Security Center.</p>
     * 
     * @param request DeleteIdcProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteIdcProbeResponse
     */
    public DeleteIdcProbeResponse deleteIdcProbeWithOptions(DeleteIdcProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteIdcProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteIdcProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteIdcProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an IDC probe that is created in Security Center.</p>
     * 
     * @param request DeleteIdcProbeRequest
     * @return DeleteIdcProbeResponse
     */
    public DeleteIdcProbeResponse deleteIdcProbe(DeleteIdcProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteIdcProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an alert handling rule.</p>
     * 
     * @param request DeleteImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteImageEventOperationResponse
     */
    public DeleteImageEventOperationResponse deleteImageEventOperationWithOptions(DeleteImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteImageEventOperationResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteImageEventOperationResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an alert handling rule.</p>
     * 
     * @param request DeleteImageEventOperationRequest
     * @return DeleteImageEventOperationResponse
     */
    public DeleteImageEventOperationResponse deleteImageEventOperation(DeleteImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteImageEventOperationWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an image vulnerability whitelist.</p>
     * 
     * @param request DeleteImageVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteImageVulWhitelistResponse
     */
    public DeleteImageVulWhitelistResponse deleteImageVulWhitelistWithOptions(DeleteImageVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteImageVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteImageVulWhitelistResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteImageVulWhitelistResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes an image vulnerability whitelist.</p>
     * 
     * @param request DeleteImageVulWhitelistRequest
     * @return DeleteImageVulWhitelistResponse
     */
    public DeleteImageVulWhitelistResponse deleteImageVulWhitelist(DeleteImageVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteImageVulWhitelistWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the command that is used to install the Security Center agent.</p>
     * 
     * @param request DeleteInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteInstallCodeResponse
     */
    public DeleteInstallCodeResponse deleteInstallCodeWithOptions(DeleteInstallCodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.captchaCode)) {
            query.put("CaptchaCode", request.captchaCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteInstallCodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteInstallCodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the command that is used to install the Security Center agent.</p>
     * 
     * @param request DeleteInstallCodeRequest
     * @return DeleteInstallCodeResponse
     */
    public DeleteInstallCodeResponse deleteInstallCode(DeleteInstallCodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteInstallCodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a defense rule in the container firewall module.</p>
     * 
     * @param request DeleteInterceptionRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteInterceptionRuleResponse
     */
    public DeleteInterceptionRuleResponse deleteInterceptionRuleWithOptions(DeleteInterceptionRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteInterceptionRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteInterceptionRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteInterceptionRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a defense rule in the container firewall module.</p>
     * 
     * @param request DeleteInterceptionRuleRequest
     * @return DeleteInterceptionRuleResponse
     */
    public DeleteInterceptionRuleResponse deleteInterceptionRule(DeleteInterceptionRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteInterceptionRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Removes the network objects that are in effect in the container firewall.</p>
     * 
     * @param request DeleteInterceptionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteInterceptionTargetResponse
     */
    public DeleteInterceptionTargetResponse deleteInterceptionTargetWithOptions(DeleteInterceptionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetIds)) {
            query.put("TargetIds", request.targetIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteInterceptionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteInterceptionTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteInterceptionTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Removes the network objects that are in effect in the container firewall.</p>
     * 
     * @param request DeleteInterceptionTargetRequest
     * @return DeleteInterceptionTargetResponse
     */
    public DeleteInterceptionTargetResponse deleteInterceptionTarget(DeleteInterceptionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteInterceptionTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the Kubernetes access information.</p>
     * 
     * @param request DeleteK8sAccessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteK8sAccessInfoResponse
     */
    public DeleteK8sAccessInfoResponse deleteK8sAccessInfoWithOptions(DeleteK8sAccessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayApiName)) {
            query.put("AliyunYundunGatewayApiName", request.aliyunYundunGatewayApiName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayPopName)) {
            query.put("AliyunYundunGatewayPopName", request.aliyunYundunGatewayPopName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayProjectName)) {
            query.put("AliyunYundunGatewayProjectName", request.aliyunYundunGatewayProjectName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteK8sAccessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteK8sAccessInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteK8sAccessInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the Kubernetes access information.</p>
     * 
     * @param request DeleteK8sAccessInfoRequest
     * @return DeleteK8sAccessInfoResponse
     */
    public DeleteK8sAccessInfoResponse deleteK8sAccessInfo(DeleteK8sAccessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteK8sAccessInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the basic configuration information from the logon security configurations for a specific asset.</p>
     * 
     * @param request DeleteLoginBaseConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLoginBaseConfigResponse
     */
    public DeleteLoginBaseConfigResponse deleteLoginBaseConfigWithOptions(DeleteLoginBaseConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteLoginBaseConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteLoginBaseConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteLoginBaseConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the basic configuration information from the logon security configurations for a specific asset.</p>
     * 
     * @param request DeleteLoginBaseConfigRequest
     * @return DeleteLoginBaseConfigResponse
     */
    public DeleteLoginBaseConfigResponse deleteLoginBaseConfig(DeleteLoginBaseConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteLoginBaseConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request DeleteMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMaliciousFileWhitelistConfigResponse
     */
    public DeleteMaliciousFileWhitelistConfigResponse deleteMaliciousFileWhitelistConfigWithOptions(DeleteMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteMaliciousFileWhitelistConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteMaliciousFileWhitelistConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request DeleteMaliciousFileWhitelistConfigRequest
     * @return DeleteMaliciousFileWhitelistConfigResponse
     */
    public DeleteMaliciousFileWhitelistConfigResponse deleteMaliciousFileWhitelistConfig(DeleteMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Removes the remarks added to alert events that are generated by the agentless detection feature.</p>
     * 
     * @param request DeleteMaliciousNoteRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMaliciousNoteResponse
     */
    public DeleteMaliciousNoteResponse deleteMaliciousNoteWithOptions(DeleteMaliciousNoteRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.noteId)) {
            query.put("NoteId", request.noteId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteMaliciousNote"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteMaliciousNoteResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteMaliciousNoteResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Removes the remarks added to alert events that are generated by the agentless detection feature.</p>
     * 
     * @param request DeleteMaliciousNoteRequest
     * @return DeleteMaliciousNoteResponse
     */
    public DeleteMaliciousNoteResponse deleteMaliciousNote(DeleteMaliciousNoteRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteMaliciousNoteWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a member of the account managed by Security Center type of the multi-account management feature.</p>
     * 
     * @param request DeleteMonitorAccountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMonitorAccountResponse
     */
    public DeleteMonitorAccountResponse deleteMonitorAccountWithOptions(DeleteMonitorAccountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountId)) {
            query.put("AccountId", request.accountId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteMonitorAccount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteMonitorAccountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteMonitorAccountResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a member of the account managed by Security Center type of the multi-account management feature.</p>
     * 
     * @param request DeleteMonitorAccountRequest
     * @return DeleteMonitorAccountResponse
     */
    public DeleteMonitorAccountResponse deleteMonitorAccount(DeleteMonitorAccountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteMonitorAccountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes rules of the at-risk image blocking type.</p>
     * 
     * @param request DeleteOpaStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteOpaStrategyNewResponse
     */
    public DeleteOpaStrategyNewResponse deleteOpaStrategyNewWithOptions(DeleteOpaStrategyNewRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyIds)) {
            query.put("StrategyIds", request.strategyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteOpaStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteOpaStrategyNewResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteOpaStrategyNewResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes rules of the at-risk image blocking type.</p>
     * 
     * @param request DeleteOpaStrategyNewRequest
     * @return DeleteOpaStrategyNewResponse
     */
    public DeleteOpaStrategyNewResponse deleteOpaStrategyNew(DeleteOpaStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteOpaStrategyNewWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the configuration of an Object Storage Service (OSS) file detection policy.</p>
     * 
     * @param request DeleteOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteOssScanConfigResponse
     */
    public DeleteOssScanConfigResponse deleteOssScanConfigWithOptions(DeleteOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteOssScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteOssScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the configuration of an Object Storage Service (OSS) file detection policy.</p>
     * 
     * @param request DeleteOssScanConfigRequest
     * @return DeleteOssScanConfigResponse
     */
    public DeleteOssScanConfigResponse deleteOssScanConfig(DeleteOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteOssScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a private image repository by using the ID of the image repository.</p>
     * 
     * @param request DeletePrivateRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeletePrivateRegistryResponse
     */
    public DeletePrivateRegistryResponse deletePrivateRegistryWithOptions(DeletePrivateRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            query.put("RegistryId", request.registryId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeletePrivateRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeletePrivateRegistryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeletePrivateRegistryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a private image repository by using the ID of the image repository.</p>
     * 
     * @param request DeletePrivateRegistryRequest
     * @return DeletePrivateRegistryResponse
     */
    public DeletePrivateRegistryResponse deletePrivateRegistry(DeletePrivateRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deletePrivateRegistryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a rule for container tamper-proofing.</p>
     * 
     * @param request DeleteSasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSasContainerWebDefenseRuleResponse
     */
    public DeleteSasContainerWebDefenseRuleResponse deleteSasContainerWebDefenseRuleWithOptions(DeleteSasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSasContainerWebDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteSasContainerWebDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a rule for container tamper-proofing.</p>
     * 
     * @param request DeleteSasContainerWebDefenseRuleRequest
     * @return DeleteSasContainerWebDefenseRuleResponse
     */
    public DeleteSasContainerWebDefenseRuleResponse deleteSasContainerWebDefenseRule(DeleteSasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.</p>
     * 
     * @param request DeleteSearchConditionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSearchConditionResponse
     */
    public DeleteSearchConditionResponse deleteSearchConditionWithOptions(DeleteSearchConditionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSearchCondition"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSearchConditionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteSearchConditionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.</p>
     * 
     * @param request DeleteSearchConditionRequest
     * @return DeleteSearchConditionResponse
     */
    public DeleteSearchConditionResponse deleteSearchCondition(DeleteSearchConditionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSearchConditionWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.</p>
     * 
     * @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
     * 
     * @param request DeleteSecurityEventMarkMissListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSecurityEventMarkMissListResponse
     */
    @Deprecated
    // Deprecated
    public DeleteSecurityEventMarkMissListResponse deleteSecurityEventMarkMissListWithOptions(DeleteSecurityEventMarkMissListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSecurityEventMarkMissList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSecurityEventMarkMissListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteSecurityEventMarkMissListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.</p>
     * 
     * @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
     * 
     * @param request DeleteSecurityEventMarkMissListRequest
     * @return DeleteSecurityEventMarkMissListResponse
     */
    @Deprecated
    // Deprecated
    public DeleteSecurityEventMarkMissListResponse deleteSecurityEventMarkMissList(DeleteSecurityEventMarkMissListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSecurityEventMarkMissListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a service trail.</p>
     * 
     * @param request DeleteServiceTrailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteServiceTrailResponse
     */
    public DeleteServiceTrailResponse deleteServiceTrailWithOptions(DeleteServiceTrailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteServiceTrail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteServiceTrailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteServiceTrailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a service trail.</p>
     * 
     * @param request DeleteServiceTrailRequest
     * @return DeleteServiceTrailResponse
     */
    public DeleteServiceTrailResponse deleteServiceTrail(DeleteServiceTrailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteServiceTrailWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a policy task that is in the waiting state on the Playbook page.</p>
     * 
     * @param request DeleteSoarStrategyTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSoarStrategyTaskResponse
     */
    public DeleteSoarStrategyTaskResponse deleteSoarStrategyTaskWithOptions(DeleteSoarStrategyTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyTaskId)) {
            query.put("StrategyTaskId", request.strategyTaskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSoarStrategyTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSoarStrategyTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteSoarStrategyTaskResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a policy task that is in the waiting state on the Playbook page.</p>
     * 
     * @param request DeleteSoarStrategyTaskRequest
     * @return DeleteSoarStrategyTaskResponse
     */
    public DeleteSoarStrategyTaskResponse deleteSoarStrategyTask(DeleteSoarStrategyTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSoarStrategyTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a baseline check policy.</p>
     * 
     * @param request DeleteStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteStrategyResponse
     */
    public DeleteStrategyResponse deleteStrategyWithOptions(DeleteStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a baseline check policy.</p>
     * 
     * @param request DeleteStrategyRequest
     * @return DeleteStrategyResponse
     */
    public DeleteStrategyResponse deleteStrategy(DeleteStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the description of an alert.</p>
     * 
     * @param request DeleteSuspEventNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSuspEventNodeResponse
     */
    public DeleteSuspEventNodeResponse deleteSuspEventNodeWithOptions(DeleteSuspEventNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.noteId)) {
            query.put("NoteId", request.noteId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteSuspEventNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteSuspEventNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteSuspEventNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes the description of an alert.</p>
     * 
     * @param request DeleteSuspEventNodeRequest
     * @return DeleteSuspEventNodeResponse
     */
    public DeleteSuspEventNodeResponse deleteSuspEventNode(DeleteSuspEventNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteSuspEventNodeWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.</p>
     * 
     * <b>summary</b> : 
     * <p>Removes custom tags from assets.</p>
     * 
     * @param request DeleteTagWithUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteTagWithUuidResponse
     */
    public DeleteTagWithUuidResponse deleteTagWithUuidWithOptions(DeleteTagWithUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tagName)) {
            query.put("TagName", request.tagName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteTagWithUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteTagWithUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteTagWithUuidResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.</p>
     * 
     * <b>summary</b> : 
     * <p>Removes custom tags from assets.</p>
     * 
     * @param request DeleteTagWithUuidRequest
     * @return DeleteTagWithUuidResponse
     */
    public DeleteTagWithUuidResponse deleteTagWithUuid(DeleteTagWithUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteTagWithUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes anti-ransomware policies that are created for databases.</p>
     * 
     * @param request DeleteUniBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteUniBackupPolicyResponse
     */
    public DeleteUniBackupPolicyResponse deleteUniBackupPolicyWithOptions(DeleteUniBackupPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyIds)) {
            query.put("PolicyIds", request.policyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteUniBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteUniBackupPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteUniBackupPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes anti-ransomware policies that are created for databases.</p>
     * 
     * @param request DeleteUniBackupPolicyRequest
     * @return DeleteUniBackupPolicyResponse
     */
    public DeleteUniBackupPolicyResponse deleteUniBackupPolicy(DeleteUniBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteUniBackupPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a honeypot.</p>
     * 
     * @param request DeleteVpcHoneyPotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteVpcHoneyPotResponse
     */
    public DeleteVpcHoneyPotResponse deleteVpcHoneyPotWithOptions(DeleteVpcHoneyPotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteVpcHoneyPot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteVpcHoneyPotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteVpcHoneyPotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a honeypot.</p>
     * 
     * @param request DeleteVpcHoneyPotRequest
     * @return DeleteVpcHoneyPotResponse
     */
    public DeleteVpcHoneyPotResponse deleteVpcHoneyPot(DeleteVpcHoneyPotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteVpcHoneyPotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.</p>
     * 
     * @param request DeleteVulAutoRepairConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteVulAutoRepairConfigResponse
     */
    public DeleteVulAutoRepairConfigResponse deleteVulAutoRepairConfigWithOptions(DeleteVulAutoRepairConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.configIdList)) {
            query.put("ConfigIdList", request.configIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteVulAutoRepairConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteVulAutoRepairConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteVulAutoRepairConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.</p>
     * 
     * @param request DeleteVulAutoRepairConfigRequest
     * @return DeleteVulAutoRepairConfigResponse
     */
    public DeleteVulAutoRepairConfigResponse deleteVulAutoRepairConfig(DeleteVulAutoRepairConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteVulAutoRepairConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified vulnerability whitelist.</p>
     * 
     * @param request DeleteVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteVulWhitelistResponse
     */
    public DeleteVulWhitelistResponse deleteVulWhitelistWithOptions(DeleteVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelist)) {
            query.put("Whitelist", request.whitelist);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DeleteVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DeleteVulWhitelistResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DeleteVulWhitelistResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Deletes a specified vulnerability whitelist.</p>
     * 
     * @param request DeleteVulWhitelistRequest
     * @return DeleteVulWhitelistResponse
     */
    public DeleteVulWhitelistResponse deleteVulWhitelist(DeleteVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.deleteVulWhitelistWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of AccessKey pair leaks.</p>
     * 
     * @param request DescribeAccessKeyLeakDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAccessKeyLeakDetailResponse
     */
    public DescribeAccessKeyLeakDetailResponse describeAccessKeyLeakDetailWithOptions(DescribeAccessKeyLeakDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAccessKeyLeakDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAccessKeyLeakDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAccessKeyLeakDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of AccessKey pair leaks.</p>
     * 
     * @param request DescribeAccessKeyLeakDetailRequest
     * @return DescribeAccessKeyLeakDetailResponse
     */
    public DescribeAccessKeyLeakDetailResponse describeAccessKeyLeakDetail(DescribeAccessKeyLeakDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAccessKeyLeakDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the AccessKey pair leaks that are detected on your assets.</p>
     * 
     * @param request DescribeAccesskeyLeakListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAccesskeyLeakListResponse
     */
    public DescribeAccesskeyLeakListResponse describeAccesskeyLeakListWithOptions(DescribeAccesskeyLeakListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.query)) {
            query.put("Query", request.query);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTs)) {
            query.put("StartTs", request.startTs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAccesskeyLeakList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAccesskeyLeakListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAccesskeyLeakListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the AccessKey pair leaks that are detected on your assets.</p>
     * 
     * @param request DescribeAccesskeyLeakListRequest
     * @return DescribeAccesskeyLeakListResponse
     */
    public DescribeAccesskeyLeakListResponse describeAccesskeyLeakList(DescribeAccesskeyLeakListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAccesskeyLeakListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the affected servers in the result of a virus scan task.</p>
     * 
     * @param request DescribeAffectedAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAffectedAssetsResponse
     */
    public DescribeAffectedAssetsResponse describeAffectedAssetsWithOptions(DescribeAffectedAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.current)) {
            query.put("Current", request.current);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAffectedAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAffectedAssetsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAffectedAssetsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the affected servers in the result of a virus scan task.</p>
     * 
     * @param request DescribeAffectedAssetsRequest
     * @return DescribeAffectedAssetsResponse
     */
    public DescribeAffectedAssetsResponse describeAffectedAssets(DescribeAffectedAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAffectedAssetsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of malicious image samples.</p>
     * 
     * @param request DescribeAffectedMaliciousFileImagesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAffectedMaliciousFileImagesResponse
     */
    public DescribeAffectedMaliciousFileImagesResponse describeAffectedMaliciousFileImagesWithOptions(DescribeAffectedMaliciousFileImagesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageLayer)) {
            query.put("ImageLayer", request.imageLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousMd5)) {
            query.put("MaliciousMd5", request.maliciousMd5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAffectedMaliciousFileImages"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAffectedMaliciousFileImagesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAffectedMaliciousFileImagesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of malicious image samples.</p>
     * 
     * @param request DescribeAffectedMaliciousFileImagesRequest
     * @return DescribeAffectedMaliciousFileImagesResponse
     */
    public DescribeAffectedMaliciousFileImagesResponse describeAffectedMaliciousFileImages(DescribeAffectedMaliciousFileImagesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAffectedMaliciousFileImagesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.</p>
     * 
     * @param request DescribeAgentInstallStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAgentInstallStatusResponse
     */
    public DescribeAgentInstallStatusResponse describeAgentInstallStatusWithOptions(DescribeAgentInstallStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAgentInstallStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAgentInstallStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAgentInstallStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.</p>
     * 
     * @param request DescribeAgentInstallStatusRequest
     * @return DescribeAgentInstallStatusResponse
     */
    public DescribeAgentInstallStatusResponse describeAgentInstallStatus(DescribeAgentInstallStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAgentInstallStatusWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.</p>
     * 
     * @param tmpReq DescribeAgentlessSensitiveFileByKeyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAgentlessSensitiveFileByKeyResponse
     */
    public DescribeAgentlessSensitiveFileByKeyResponse describeAgentlessSensitiveFileByKeyWithOptions(DescribeAgentlessSensitiveFileByKeyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeAgentlessSensitiveFileByKeyShrinkRequest request = new DescribeAgentlessSensitiveFileByKeyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAgentlessSensitiveFileByKey"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAgentlessSensitiveFileByKeyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAgentlessSensitiveFileByKeyResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.</p>
     * 
     * @param request DescribeAgentlessSensitiveFileByKeyRequest
     * @return DescribeAgentlessSensitiveFileByKeyResponse
     */
    public DescribeAgentlessSensitiveFileByKeyResponse describeAgentlessSensitiveFileByKey(DescribeAgentlessSensitiveFileByKeyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAgentlessSensitiveFileByKeyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.</p>
     * 
     * @param request DescribeAlarmEventDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAlarmEventDetailResponse
     */
    public DescribeAlarmEventDetailResponse describeAlarmEventDetailWithOptions(DescribeAlarmEventDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmUniqueInfo)) {
            query.put("AlarmUniqueInfo", request.alarmUniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAlarmEventDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAlarmEventDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAlarmEventDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.</p>
     * 
     * @param request DescribeAlarmEventDetailRequest
     * @return DescribeAlarmEventDetailResponse
     */
    public DescribeAlarmEventDetailResponse describeAlarmEventDetail(DescribeAlarmEventDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAlarmEventDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the stack information about an alert event.</p>
     * 
     * @param request DescribeAlarmEventStackInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAlarmEventStackInfoResponse
     */
    public DescribeAlarmEventStackInfoResponse describeAlarmEventStackInfoWithOptions(DescribeAlarmEventStackInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniqueInfo)) {
            query.put("UniqueInfo", request.uniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAlarmEventStackInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAlarmEventStackInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAlarmEventStackInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the stack information about an alert event.</p>
     * 
     * @param request DescribeAlarmEventStackInfoRequest
     * @return DescribeAlarmEventStackInfoResponse
     */
    public DescribeAlarmEventStackInfoResponse describeAlarmEventStackInfo(DescribeAlarmEventStackInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAlarmEventStackInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about all server assets, including the asset group IDs and asset names.</p>
     * 
     * @param request DescribeAllEntityRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAllEntityResponse
     */
    public DescribeAllEntityResponse describeAllEntityWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAllEntity"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAllEntityResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAllEntityResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about all server assets, including the asset group IDs and asset names.</p>
     * @return DescribeAllEntityResponse
     */
    public DescribeAllEntityResponse describeAllEntity() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAllEntityWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about all server groups.</p>
     * 
     * @param request DescribeAllGroupsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAllGroupsResponse
     */
    public DescribeAllGroupsResponse describeAllGroupsWithOptions(DescribeAllGroupsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAllGroups"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAllGroupsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAllGroupsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about all server groups.</p>
     * 
     * @param request DescribeAllGroupsRequest
     * @return DescribeAllGroupsResponse
     */
    public DescribeAllGroupsResponse describeAllGroups(DescribeAllGroupsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAllGroupsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries baselines that are used in image baseline checks.</p>
     * 
     * @param request DescribeAllImageBaselineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAllImageBaselineResponse
     */
    public DescribeAllImageBaselineResponse describeAllImageBaselineWithOptions(DescribeAllImageBaselineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAllImageBaseline"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAllImageBaselineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAllImageBaselineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries baselines that are used in image baseline checks.</p>
     * 
     * @param request DescribeAllImageBaselineRequest
     * @return DescribeAllImageBaselineResponse
     */
    public DescribeAllImageBaselineResponse describeAllImageBaseline(DescribeAllImageBaselineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAllImageBaselineWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.</p>
     * 
     * @param request DescribeAllRegionsStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAllRegionsStatisticsResponse
     */
    public DescribeAllRegionsStatisticsResponse describeAllRegionsStatisticsWithOptions(DescribeAllRegionsStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAllRegionsStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAllRegionsStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAllRegionsStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.</p>
     * 
     * @param request DescribeAllRegionsStatisticsRequest
     * @return DescribeAllRegionsStatisticsResponse
     */
    public DescribeAllRegionsStatisticsResponse describeAllRegionsStatistics(DescribeAllRegionsStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAllRegionsStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries created defense rules against brute-force attacks.</p>
     * 
     * @param request DescribeAntiBruteForceRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAntiBruteForceRulesResponse
     */
    public DescribeAntiBruteForceRulesResponse describeAntiBruteForceRulesWithOptions(DescribeAntiBruteForceRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAntiBruteForceRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAntiBruteForceRulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAntiBruteForceRulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries created defense rules against brute-force attacks.</p>
     * 
     * @param request DescribeAntiBruteForceRulesRequest
     * @return DescribeAntiBruteForceRulesResponse
     */
    public DescribeAntiBruteForceRulesResponse describeAntiBruteForceRules(DescribeAntiBruteForceRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAntiBruteForceRulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the scan cycle for application vulnerabilities.</p>
     * 
     * @param request DescribeAppVulScanCycleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAppVulScanCycleResponse
     */
    public DescribeAppVulScanCycleResponse describeAppVulScanCycleWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAppVulScanCycle"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAppVulScanCycleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAppVulScanCycleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the scan cycle for application vulnerabilities.</p>
     * @return DescribeAppVulScanCycleResponse
     */
    public DescribeAppVulScanCycleResponse describeAppVulScanCycle() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAppVulScanCycleWithOptions(runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation will be discontinued soon. You must call the <a href="~~GetAssetDetailByUuid~~">GetAssetDetailByUuid</a> operation to query the details of the server.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the details of a server and the extended information about the server by using the UUID of the server.</p>
     * 
     * @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
     * 
     * @param request DescribeAssetDetailByUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetDetailByUuidResponse
     */
    @Deprecated
    // Deprecated
    public DescribeAssetDetailByUuidResponse describeAssetDetailByUuidWithOptions(DescribeAssetDetailByUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetDetailByUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetDetailByUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAssetDetailByUuidResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation will be discontinued soon. You must call the <a href="~~GetAssetDetailByUuid~~">GetAssetDetailByUuid</a> operation to query the details of the server.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the details of a server and the extended information about the server by using the UUID of the server.</p>
     * 
     * @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
     * 
     * @param request DescribeAssetDetailByUuidRequest
     * @return DescribeAssetDetailByUuidResponse
     */
    @Deprecated
    // Deprecated
    public DescribeAssetDetailByUuidResponse describeAssetDetailByUuid(DescribeAssetDetailByUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetDetailByUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of Elastic Compute Service (ECS) instances.</p>
     * 
     * @param request DescribeAssetDetailByUuidsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetDetailByUuidsResponse
     */
    public DescribeAssetDetailByUuidsResponse describeAssetDetailByUuidsWithOptions(DescribeAssetDetailByUuidsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetDetailByUuids"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetDetailByUuidsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAssetDetailByUuidsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of Elastic Compute Service (ECS) instances.</p>
     * 
     * @param request DescribeAssetDetailByUuidsRequest
     * @return DescribeAssetDetailByUuidsResponse
     */
    public DescribeAssetDetailByUuidsResponse describeAssetDetailByUuids(DescribeAssetDetailByUuidsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetDetailByUuidsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>The ID of the request, which is used to locate and troubleshoot issues.</p>
     * 
     * @param request DescribeAssetSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetSummaryResponse
     */
    public DescribeAssetSummaryResponse describeAssetSummaryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAssetSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>The ID of the request, which is used to locate and troubleshoot issues.</p>
     * @return DescribeAssetSummaryResponse
     */
    public DescribeAssetSummaryResponse describeAssetSummary() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetSummaryWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.</p>
     * 
     * @param request DescribeAssetsScaProcessNumRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetsScaProcessNumResponse
     */
    public DescribeAssetsScaProcessNumResponse describeAssetsScaProcessNumWithOptions(DescribeAssetsScaProcessNumRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bizType)) {
            query.put("BizType", request.bizType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetsScaProcessNum"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetsScaProcessNumResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAssetsScaProcessNumResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.</p>
     * 
     * @param request DescribeAssetsScaProcessNumRequest
     * @return DescribeAssetsScaProcessNumResponse
     */
    public DescribeAssetsScaProcessNumResponse describeAssetsScaProcessNum(DescribeAssetsScaProcessNumRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetsScaProcessNumWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk information about containers.</p>
     * 
     * @param request DescribeAssetsSecurityEventSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAssetsSecurityEventSummaryResponse
     */
    public DescribeAssetsSecurityEventSummaryResponse describeAssetsSecurityEventSummaryWithOptions(DescribeAssetsSecurityEventSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAssetsSecurityEventSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAssetsSecurityEventSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAssetsSecurityEventSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk information about containers.</p>
     * 
     * @param request DescribeAssetsSecurityEventSummaryRequest
     * @return DescribeAssetsSecurityEventSummaryResponse
     */
    public DescribeAssetsSecurityEventSummaryResponse describeAssetsSecurityEventSummary(DescribeAssetsSecurityEventSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAssetsSecurityEventSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of attack analysis.</p>
     * 
     * @param request DescribeAttackAnalysisDataRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAttackAnalysisDataResponse
     */
    public DescribeAttackAnalysisDataResponse describeAttackAnalysisDataWithOptions(DescribeAttackAnalysisDataRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.base64)) {
            query.put("Base64", request.base64);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("Data", request.data);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAttackAnalysisData"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAttackAnalysisDataResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAttackAnalysisDataResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of attack analysis.</p>
     * 
     * @param request DescribeAttackAnalysisDataRequest
     * @return DescribeAttackAnalysisDataResponse
     */
    public DescribeAttackAnalysisDataResponse describeAttackAnalysisData(DescribeAttackAnalysisDataRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAttackAnalysisDataWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of witnesses.</p>
     * 
     * @param request DescribeAttestorsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAttestorsResponse
     */
    public DescribeAttestorsResponse describeAttestorsWithOptions(DescribeAttestorsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAttestors"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAttestorsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAttestorsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of witnesses.</p>
     * 
     * @param request DescribeAttestorsRequest
     * @return DescribeAttestorsResponse
     */
    public DescribeAttestorsResponse describeAttestors(DescribeAttestorsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAttestorsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.</p>
     * 
     * @param request DescribeAutoDelConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeAutoDelConfigResponse
     */
    public DescribeAutoDelConfigResponse describeAutoDelConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeAutoDelConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeAutoDelConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeAutoDelConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.</p>
     * @return DescribeAutoDelConfigResponse
     */
    public DescribeAutoDelConfigResponse describeAutoDelConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeAutoDelConfigWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a file to which archived alert events are exported.</p>
     * 
     * @param request DescribeBackUpExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackUpExportInfoResponse
     */
    public DescribeBackUpExportInfoResponse describeBackUpExportInfoWithOptions(DescribeBackUpExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exportType)) {
            query.put("ExportType", request.exportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackUpExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackUpExportInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBackUpExportInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a file to which archived alert events are exported.</p>
     * 
     * @param request DescribeBackUpExportInfoRequest
     * @return DescribeBackUpExportInfoResponse
     */
    public DescribeBackUpExportInfoResponse describeBackUpExportInfo(DescribeBackUpExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackUpExportInfoWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the servers on which the anti-ransomware agent is installed in a specified region.</p>
     * 
     * @param request DescribeBackupClientsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupClientsResponse
     */
    public DescribeBackupClientsResponse describeBackupClientsWithOptions(DescribeBackupClientsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.supportRegionId)) {
            query.put("SupportRegionId", request.supportRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupClients"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupClientsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBackupClientsResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the servers on which the anti-ransomware agent is installed in a specified region.</p>
     * 
     * @param request DescribeBackupClientsRequest
     * @return DescribeBackupClientsResponse
     */
    public DescribeBackupClientsResponse describeBackupClients(DescribeBackupClientsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupClientsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries backup files.</p>
     * 
     * @param request DescribeBackupFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupFilesResponse
     */
    public DescribeBackupFilesResponse describeBackupFilesWithOptions(DescribeBackupFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.path)) {
            query.put("Path", request.path);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotHash)) {
            query.put("SnapshotHash", request.snapshotHash);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupFilesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBackupFilesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries backup files.</p>
     * 
     * @param request DescribeBackupFilesRequest
     * @return DescribeBackupFilesResponse
     */
    public DescribeBackupFilesResponse describeBackupFiles(DescribeBackupFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupFilesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the backup status of a sever to which an anti-ransomware policy is applied.</p>
     * 
     * @param request DescribeBackupMachineStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupMachineStatusResponse
     */
    public DescribeBackupMachineStatusResponse describeBackupMachineStatusWithOptions(DescribeBackupMachineStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupMachineStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupMachineStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBackupMachineStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the backup status of a sever to which an anti-ransomware policy is applied.</p>
     * 
     * @param request DescribeBackupMachineStatusRequest
     * @return DescribeBackupMachineStatusResponse
     */
    public DescribeBackupMachineStatusResponse describeBackupMachineStatus(DescribeBackupMachineStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupMachineStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries anti-ransomware policies.</p>
     * 
     * @param request DescribeBackupPoliciesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupPoliciesResponse
     */
    public DescribeBackupPoliciesResponse describeBackupPoliciesWithOptions(DescribeBackupPoliciesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupPolicies"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupPoliciesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBackupPoliciesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries anti-ransomware policies.</p>
     * 
     * @param request DescribeBackupPoliciesRequest
     * @return DescribeBackupPoliciesResponse
     */
    public DescribeBackupPoliciesResponse describeBackupPolicies(DescribeBackupPoliciesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupPoliciesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an anti-ransomware policy for servers.</p>
     * 
     * @param request DescribeBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupPolicyResponse
     */
    public DescribeBackupPolicyResponse describeBackupPolicyWithOptions(DescribeBackupPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBackupPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an anti-ransomware policy for servers.</p>
     * 
     * @param request DescribeBackupPolicyRequest
     * @return DescribeBackupPolicyResponse
     */
    public DescribeBackupPolicyResponse describeBackupPolicy(DescribeBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupPolicyWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the <strong>restored</strong> or <strong>being restored</strong> state.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the statistics of restoration tasks.</p>
     * 
     * @param request DescribeBackupRestoreCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBackupRestoreCountResponse
     */
    public DescribeBackupRestoreCountResponse describeBackupRestoreCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBackupRestoreCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBackupRestoreCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBackupRestoreCountResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the <strong>restored</strong> or <strong>being restored</strong> state.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the statistics of restoration tasks.</p>
     * @return DescribeBackupRestoreCountResponse
     */
    public DescribeBackupRestoreCountResponse describeBackupRestoreCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBackupRestoreCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries binary security policies.</p>
     * 
     * @param request DescribeBinarySecurityPoliciesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBinarySecurityPoliciesResponse
     */
    public DescribeBinarySecurityPoliciesResponse describeBinarySecurityPoliciesWithOptions(DescribeBinarySecurityPoliciesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBinarySecurityPolicies"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBinarySecurityPoliciesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBinarySecurityPoliciesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries binary security policies.</p>
     * 
     * @param request DescribeBinarySecurityPoliciesRequest
     * @return DescribeBinarySecurityPoliciesResponse
     */
    public DescribeBinarySecurityPoliciesResponse describeBinarySecurityPolicies(DescribeBinarySecurityPoliciesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBinarySecurityPoliciesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the IP addresses that are blocked by a defense rule against brute-force attacks.</p>
     * 
     * @param request DescribeBruteForceRecordsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBruteForceRecordsResponse
     */
    public DescribeBruteForceRecordsResponse describeBruteForceRecordsWithOptions(DescribeBruteForceRecordsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBruteForceRecords"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBruteForceRecordsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBruteForceRecordsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the IP addresses that are blocked by a defense rule against brute-force attacks.</p>
     * 
     * @param request DescribeBruteForceRecordsRequest
     * @return DescribeBruteForceRecordsResponse
     */
    public DescribeBruteForceRecordsResponse describeBruteForceRecords(DescribeBruteForceRecordsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBruteForceRecordsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>The source IP address of the request.</p>
     * 
     * @param request DescribeBruteForceSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeBruteForceSummaryResponse
     */
    public DescribeBruteForceSummaryResponse describeBruteForceSummaryWithOptions(DescribeBruteForceSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeBruteForceSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeBruteForceSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeBruteForceSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>The source IP address of the request.</p>
     * 
     * @param request DescribeBruteForceSummaryRequest
     * @return DescribeBruteForceSummaryResponse
     */
    public DescribeBruteForceSummaryResponse describeBruteForceSummary(DescribeBruteForceSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeBruteForceSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Check if the asset can be sold by VPC</p>
     * 
     * @param request DescribeCanAccessVpcSaleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCanAccessVpcSaleResponse
     */
    public DescribeCanAccessVpcSaleResponse describeCanAccessVpcSaleWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCanAccessVpcSale"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCanAccessVpcSaleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCanAccessVpcSaleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Check if the asset can be sold by VPC</p>
     * @return DescribeCanAccessVpcSaleResponse
     */
    public DescribeCanAccessVpcSaleResponse describeCanAccessVpcSale() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCanAccessVpcSaleWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of fixable vulnerabilities.</p>
     * 
     * @param request DescribeCanFixVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCanFixVulListResponse
     */
    public DescribeCanFixVulListResponse describeCanFixVulListWithOptions(DescribeCanFixVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.digest)) {
            query.put("Digest", request.digest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCanFixVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCanFixVulListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCanFixVulListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of fixable vulnerabilities.</p>
     * 
     * @param request DescribeCanFixVulListRequest
     * @return DescribeCanFixVulListResponse
     */
    public DescribeCanFixVulListResponse describeCanFixVulList(DescribeCanFixVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCanFixVulListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks the permissions on the trial use of Security Center.</p>
     * 
     * @param request DescribeCanTrySasRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCanTrySasResponse
     */
    public DescribeCanTrySasResponse describeCanTrySasWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCanTrySas"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCanTrySasResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCanTrySasResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks the permissions on the trial use of Security Center.</p>
     * @return DescribeCanTrySasResponse
     */
    public DescribeCanTrySasResponse describeCanTrySas() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCanTrySasWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the chart data of a security report.</p>
     * 
     * @param request DescribeChartDataRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeChartDataResponse
     */
    public DescribeChartDataResponse describeChartDataWithOptions(DescribeChartDataRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.charId)) {
            query.put("CharId", request.charId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.chartId)) {
            query.put("ChartId", request.chartId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeChartData"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeChartDataResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeChartDataResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the chart data of a security report.</p>
     * 
     * @param request DescribeChartDataRequest
     * @return DescribeChartDataResponse
     */
    public DescribeChartDataResponse describeChartData(DescribeChartDataRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeChartDataWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the charts that are supported by using the security report feature of Security Center.</p>
     * 
     * @param request DescribeChartListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeChartListResponse
     */
    public DescribeChartListResponse describeChartListWithOptions(DescribeChartListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.projectCode)) {
            query.put("ProjectCode", request.projectCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeChartList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeChartListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeChartListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the charts that are supported by using the security report feature of Security Center.</p>
     * 
     * @param request DescribeChartListRequest
     * @return DescribeChartListResponse
     */
    public DescribeChartListResponse describeChartList(DescribeChartListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeChartListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of weak passwords that can cause high risks to your assets.</p>
     * 
     * @param request DescribeCheckEcsWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckEcsWarningsResponse
     */
    public DescribeCheckEcsWarningsResponse describeCheckEcsWarningsWithOptions(DescribeCheckEcsWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckEcsWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckEcsWarningsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckEcsWarningsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of weak passwords that can cause high risks to your assets.</p>
     * 
     * @param request DescribeCheckEcsWarningsRequest
     * @return DescribeCheckEcsWarningsResponse
     */
    public DescribeCheckEcsWarningsResponse describeCheckEcsWarnings(DescribeCheckEcsWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckEcsWarningsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the parameters that you can configure to fix specified risk items.</p>
     * 
     * @param request DescribeCheckFixDetailsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckFixDetailsResponse
     */
    public DescribeCheckFixDetailsResponse describeCheckFixDetailsWithOptions(DescribeCheckFixDetailsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckFixDetails"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckFixDetailsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckFixDetailsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the parameters that you can configure to fix specified risk items.</p>
     * 
     * @param request DescribeCheckFixDetailsRequest
     * @return DescribeCheckFixDetailsResponse
     */
    public DescribeCheckFixDetailsResponse describeCheckFixDetails(DescribeCheckFixDetailsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckFixDetailsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the result of the ISO 27001 compliance check.</p>
     * 
     * @param request DescribeCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckResultResponse
     */
    public DescribeCheckResultResponse describeCheckResultWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckResultResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the result of the ISO 27001 compliance check.</p>
     * @return DescribeCheckResultResponse
     */
    public DescribeCheckResultResponse describeCheckResult() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckResultWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of alerts that are triggered by a check item.</p>
     * 
     * @param request DescribeCheckWarningCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningCountResponse
     */
    public DescribeCheckWarningCountResponse describeCheckWarningCountWithOptions(DescribeCheckWarningCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliUid)) {
            query.put("AliUid", request.aliUid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarningCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckWarningCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of alerts that are triggered by a check item.</p>
     * 
     * @param request DescribeCheckWarningCountRequest
     * @return DescribeCheckWarningCountResponse
     */
    public DescribeCheckWarningCountResponse describeCheckWarningCount(DescribeCheckWarningCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a specified check item.</p>
     * 
     * @param request DescribeCheckWarningDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningDetailResponse
     */
    public DescribeCheckWarningDetailResponse describeCheckWarningDetailWithOptions(DescribeCheckWarningDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkWarningId)) {
            query.put("CheckWarningId", request.checkWarningId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarningDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckWarningDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a specified check item.</p>
     * 
     * @param request DescribeCheckWarningDetailRequest
     * @return DescribeCheckWarningDetailResponse
     */
    public DescribeCheckWarningDetailResponse describeCheckWarningDetail(DescribeCheckWarningDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers on which the same risk item is detected by specifying a baseline and a check item.</p>
     * 
     * @param request DescribeCheckWarningMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningMachinesResponse
     */
    public DescribeCheckWarningMachinesResponse describeCheckWarningMachinesWithOptions(DescribeCheckWarningMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filterUuid)) {
            query.put("FilterUuid", request.filterUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarningMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningMachinesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckWarningMachinesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers on which the same risk item is detected by specifying a baseline and a check item.</p>
     * 
     * @param request DescribeCheckWarningMachinesRequest
     * @return DescribeCheckWarningMachinesResponse
     */
    public DescribeCheckWarningMachinesResponse describeCheckWarningMachines(DescribeCheckWarningMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningMachinesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.</p>
     * 
     * @param request DescribeCheckWarningSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningSummaryResponse
     */
    public DescribeCheckWarningSummaryResponse describeCheckWarningSummaryWithOptions(DescribeCheckWarningSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskName)) {
            query.put("RiskName", request.riskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskStatus)) {
            query.put("RiskStatus", request.riskStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeName)) {
            query.put("TypeName", request.typeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarningSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckWarningSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.</p>
     * 
     * @param request DescribeCheckWarningSummaryRequest
     * @return DescribeCheckWarningSummaryResponse
     */
    public DescribeCheckWarningSummaryResponse describeCheckWarningSummary(DescribeCheckWarningSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about specified risk items and the check items of a specified server.</p>
     * 
     * @param request DescribeCheckWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCheckWarningsResponse
     */
    public DescribeCheckWarningsResponse describeCheckWarningsWithOptions(DescribeCheckWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkType)) {
            query.put("CheckType", request.checkType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerName)) {
            query.put("ContainerName", request.containerName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskStatus)) {
            query.put("RiskStatus", request.riskStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCheckWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCheckWarningsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCheckWarningsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about specified risk items and the check items of a specified server.</p>
     * 
     * @param request DescribeCheckWarningsRequest
     * @return DescribeCheckWarningsResponse
     */
    public DescribeCheckWarningsResponse describeCheckWarnings(DescribeCheckWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCheckWarningsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the Security Center agent.</p>
     * 
     * @param request DescribeClientConfSetupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClientConfSetupResponse
     */
    public DescribeClientConfSetupResponse describeClientConfSetupWithOptions(DescribeClientConfSetupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyTag)) {
            query.put("StrategyTag", request.strategyTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTagValue)) {
            query.put("StrategyTagValue", request.strategyTagValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClientConfSetup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClientConfSetupResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClientConfSetupResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the Security Center agent.</p>
     * 
     * @param request DescribeClientConfSetupRequest
     * @return DescribeClientConfSetupResponse
     */
    public DescribeClientConfSetupResponse describeClientConfSetup(DescribeClientConfSetupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClientConfSetupWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of servers to which different tags are added.</p>
     * 
     * @param request DescribeClientConfStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClientConfStrategyResponse
     */
    public DescribeClientConfStrategyResponse describeClientConfStrategyWithOptions(DescribeClientConfStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagValue)) {
            query.put("TagValue", request.tagValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClientConfStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClientConfStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClientConfStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of servers to which different tags are added.</p>
     * 
     * @param request DescribeClientConfStrategyRequest
     * @return DescribeClientConfStrategyResponse
     */
    public DescribeClientConfStrategyResponse describeClientConfStrategy(DescribeClientConfStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClientConfStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of agent issue types.</p>
     * 
     * @param request DescribeClientProblemTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClientProblemTypeResponse
     */
    public DescribeClientProblemTypeResponse describeClientProblemTypeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClientProblemType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClientProblemTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClientProblemTypeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of agent issue types.</p>
     * @return DescribeClientProblemTypeResponse
     */
    public DescribeClientProblemTypeResponse describeClientProblemType() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClientProblemTypeWithOptions(runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.</p>
     * 
     * @param request DescribeCloudCenterInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCloudCenterInstancesResponse
     */
    public DescribeCloudCenterInstancesResponse describeCloudCenterInstancesWithOptions(DescribeCloudCenterInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.flags)) {
            query.put("Flags", request.flags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.importance)) {
            query.put("Importance", request.importance);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noGroupTrace)) {
            query.put("NoGroupTrace", request.noGroupTrace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.useNextToken)) {
            query.put("UseNextToken", request.useNextToken);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCloudCenterInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCloudCenterInstancesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCloudCenterInstancesResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.</p>
     * 
     * @param request DescribeCloudCenterInstancesRequest
     * @return DescribeCloudCenterInstancesResponse
     */
    public DescribeCloudCenterInstancesResponse describeCloudCenterInstances(DescribeCloudCenterInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCloudCenterInstancesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of cloud services.</p>
     * 
     * @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
     * 
     * @param request DescribeCloudProductFieldStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCloudProductFieldStatisticsResponse
     */
    @Deprecated
    // Deprecated
    public DescribeCloudProductFieldStatisticsResponse describeCloudProductFieldStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCloudProductFieldStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCloudProductFieldStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCloudProductFieldStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of cloud services.</p>
     * 
     * @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
     * @return DescribeCloudProductFieldStatisticsResponse
     */
    @Deprecated
    // Deprecated
    public DescribeCloudProductFieldStatisticsResponse describeCloudProductFieldStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCloudProductFieldStatisticsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the multi-cloud assets added to Security Center.</p>
     * 
     * @param request DescribeCloudVendorAccountAKListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCloudVendorAccountAKListResponse
     */
    public DescribeCloudVendorAccountAKListResponse describeCloudVendorAccountAKListWithOptions(DescribeCloudVendorAccountAKListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.authIds)) {
            query.put("AuthIds", request.authIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subAccountName)) {
            query.put("SubAccountName", request.subAccountName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendorAuthAlias)) {
            query.put("VendorAuthAlias", request.vendorAuthAlias);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCloudVendorAccountAKList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCloudVendorAccountAKListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCloudVendorAccountAKListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the multi-cloud assets added to Security Center.</p>
     * 
     * @param request DescribeCloudVendorAccountAKListRequest
     * @return DescribeCloudVendorAccountAKListResponse
     */
    public DescribeCloudVendorAccountAKListResponse describeCloudVendorAccountAKList(DescribeCloudVendorAccountAKListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCloudVendorAccountAKListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query the trail configuration attributes of the corresponding AK configuration</p>
     * 
     * @param request DescribeCloudVendorTrialConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCloudVendorTrialConfigResponse
     */
    public DescribeCloudVendorTrialConfigResponse describeCloudVendorTrialConfigWithOptions(DescribeCloudVendorTrialConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCloudVendorTrialConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCloudVendorTrialConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCloudVendorTrialConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query the trail configuration attributes of the corresponding AK configuration</p>
     * 
     * @param request DescribeCloudVendorTrialConfigRequest
     * @return DescribeCloudVendorTrialConfigResponse
     */
    public DescribeCloudVendorTrialConfigResponse describeCloudVendorTrialConfig(DescribeCloudVendorTrialConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCloudVendorTrialConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an cluster based on the cluster ID.</p>
     * 
     * @param request DescribeClusterBasicInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterBasicInfoResponse
     */
    public DescribeClusterBasicInfoResponse describeClusterBasicInfoWithOptions(DescribeClusterBasicInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterBasicInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterBasicInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClusterBasicInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an cluster based on the cluster ID.</p>
     * 
     * @param request DescribeClusterBasicInfoRequest
     * @return DescribeClusterBasicInfoResponse
     */
    public DescribeClusterBasicInfoResponse describeClusterBasicInfo(DescribeClusterBasicInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterBasicInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about host security.</p>
     * 
     * @param request DescribeClusterHostSecuritySummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterHostSecuritySummaryResponse
     */
    public DescribeClusterHostSecuritySummaryResponse describeClusterHostSecuritySummaryWithOptions(DescribeClusterHostSecuritySummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterHostSecuritySummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterHostSecuritySummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClusterHostSecuritySummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about host security.</p>
     * 
     * @param request DescribeClusterHostSecuritySummaryRequest
     * @return DescribeClusterHostSecuritySummaryResponse
     */
    public DescribeClusterHostSecuritySummaryResponse describeClusterHostSecuritySummary(DescribeClusterHostSecuritySummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterHostSecuritySummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about image security.</p>
     * 
     * @param request DescribeClusterImageSecuritySummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterImageSecuritySummaryResponse
     */
    public DescribeClusterImageSecuritySummaryResponse describeClusterImageSecuritySummaryWithOptions(DescribeClusterImageSecuritySummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageRepoName)) {
            query.put("ImageRepoName", request.imageRepoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageRepoNamespace)) {
            query.put("ImageRepoNamespace", request.imageRepoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterImageSecuritySummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterImageSecuritySummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClusterImageSecuritySummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about image security.</p>
     * 
     * @param request DescribeClusterImageSecuritySummaryRequest
     * @return DescribeClusterImageSecuritySummaryResponse
     */
    public DescribeClusterImageSecuritySummaryResponse describeClusterImageSecuritySummary(DescribeClusterImageSecuritySummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterImageSecuritySummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a cluster.</p>
     * 
     * @param request DescribeClusterInfoListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterInfoListResponse
     */
    public DescribeClusterInfoListResponse describeClusterInfoListWithOptions(DescribeClusterInfoListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterInfoList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterInfoListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClusterInfoListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a cluster.</p>
     * 
     * @param request DescribeClusterInfoListRequest
     * @return DescribeClusterInfoListResponse
     */
    public DescribeClusterInfoListResponse describeClusterInfoList(DescribeClusterInfoListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterInfoListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the network topology edge by cluster.</p>
     * 
     * @param request DescribeClusterNetworkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterNetworkResponse
     */
    public DescribeClusterNetworkResponse describeClusterNetworkWithOptions(DescribeClusterNetworkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterNetwork"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterNetworkResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClusterNetworkResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the network topology edge by cluster.</p>
     * 
     * @param request DescribeClusterNetworkRequest
     * @return DescribeClusterNetworkResponse
     */
    public DescribeClusterNetworkResponse describeClusterNetwork(DescribeClusterNetworkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterNetworkWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerabilities that are detected on a cluster.</p>
     * 
     * @param request DescribeClusterVulStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeClusterVulStatisticsResponse
     */
    public DescribeClusterVulStatisticsResponse describeClusterVulStatisticsWithOptions(DescribeClusterVulStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeClusterVulStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeClusterVulStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeClusterVulStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerabilities that are detected on a cluster.</p>
     * 
     * @param request DescribeClusterVulStatisticsRequest
     * @return DescribeClusterVulStatisticsResponse
     */
    public DescribeClusterVulStatisticsResponse describeClusterVulStatistics(DescribeClusterVulStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeClusterVulStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a specified feature.</p>
     * 
     * @param request DescribeCommonOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonOverallConfigResponse
     */
    public DescribeCommonOverallConfigResponse describeCommonOverallConfigWithOptions(DescribeCommonOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonOverallConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCommonOverallConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a specified feature.</p>
     * 
     * @param request DescribeCommonOverallConfigRequest
     * @return DescribeCommonOverallConfigResponse
     */
    public DescribeCommonOverallConfigResponse describeCommonOverallConfig(DescribeCommonOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonOverallConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of features in proactive defense.</p>
     * 
     * @param request DescribeCommonOverallConfigListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonOverallConfigListResponse
     */
    public DescribeCommonOverallConfigListResponse describeCommonOverallConfigListWithOptions(DescribeCommonOverallConfigListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeList)) {
            query.put("TypeList", request.typeList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonOverallConfigList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonOverallConfigListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCommonOverallConfigListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of features in proactive defense.</p>
     * 
     * @param request DescribeCommonOverallConfigListRequest
     * @return DescribeCommonOverallConfigListResponse
     */
    public DescribeCommonOverallConfigListResponse describeCommonOverallConfigList(DescribeCommonOverallConfigListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonOverallConfigListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the proactive defense feature.</p>
     * 
     * @param request DescribeCommonTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonTargetConfigResponse
     */
    public DescribeCommonTargetConfigResponse describeCommonTargetConfigWithOptions(DescribeCommonTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonTargetConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCommonTargetConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the proactive defense feature.</p>
     * 
     * @param request DescribeCommonTargetConfigRequest
     * @return DescribeCommonTargetConfigResponse
     */
    public DescribeCommonTargetConfigResponse describeCommonTargetConfig(DescribeCommonTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonTargetConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers based on the specified configuration item.</p>
     * 
     * @param request DescribeCommonTargetResultListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCommonTargetResultListResponse
     */
    public DescribeCommonTargetResultListResponse describeCommonTargetResultListWithOptions(DescribeCommonTargetResultListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCommonTargetResultList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCommonTargetResultListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCommonTargetResultListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers based on the specified configuration item.</p>
     * 
     * @param request DescribeCommonTargetResultListRequest
     * @return DescribeCommonTargetResultListResponse
     */
    public DescribeCommonTargetResultListResponse describeCommonTargetResultList(DescribeCommonTargetResultListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCommonTargetResultListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the priorities to fix vulnerabilities.</p>
     * 
     * @param request DescribeConcernNecessityRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeConcernNecessityResponse
     */
    public DescribeConcernNecessityResponse describeConcernNecessityWithOptions(DescribeConcernNecessityRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeConcernNecessity"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeConcernNecessityResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeConcernNecessityResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the priorities to fix vulnerabilities.</p>
     * 
     * @param request DescribeConcernNecessityRequest
     * @return DescribeConcernNecessityResponse
     */
    public DescribeConcernNecessityResponse describeConcernNecessity(DescribeConcernNecessityRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeConcernNecessityWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a containerized application.</p>
     * 
     * @param request DescribeContainerAppsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerAppsResponse
     */
    public DescribeContainerAppsResponse describeContainerAppsWithOptions(DescribeContainerAppsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerApps"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerAppsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerAppsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a containerized application.</p>
     * 
     * @param request DescribeContainerAppsRequest
     * @return DescribeContainerAppsResponse
     */
    public DescribeContainerAppsResponse describeContainerApps(DescribeContainerAppsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerAppsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the filter conditions that you can use to filter the containers.</p>
     * 
     * @param request DescribeContainerCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerCriteriaResponse
     */
    public DescribeContainerCriteriaResponse describeContainerCriteriaWithOptions(DescribeContainerCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupField)) {
            query.put("GroupField", request.groupField);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the filter conditions that you can use to filter the containers.</p>
     * 
     * @param request DescribeContainerCriteriaRequest
     * @return DescribeContainerCriteriaResponse
     */
    public DescribeContainerCriteriaResponse describeContainerCriteria(DescribeContainerCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about containers.</p>
     * 
     * @param request DescribeContainerFieldStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerFieldStatisticsResponse
     */
    public DescribeContainerFieldStatisticsResponse describeContainerFieldStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerFieldStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerFieldStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerFieldStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about containers.</p>
     * @return DescribeContainerFieldStatisticsResponse
     */
    public DescribeContainerFieldStatisticsResponse describeContainerFieldStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerFieldStatisticsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the attribute details of containers.</p>
     * 
     * @param request DescribeContainerGroupedFieldDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerGroupedFieldDetailResponse
     */
    public DescribeContainerGroupedFieldDetailResponse describeContainerGroupedFieldDetailWithOptions(DescribeContainerGroupedFieldDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupField)) {
            query.put("GroupField", request.groupField);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerGroupedFieldDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerGroupedFieldDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerGroupedFieldDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the attribute details of containers.</p>
     * 
     * @param request DescribeContainerGroupedFieldDetailRequest
     * @return DescribeContainerGroupedFieldDetailResponse
     */
    public DescribeContainerGroupedFieldDetailResponse describeContainerGroupedFieldDetail(DescribeContainerGroupedFieldDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerGroupedFieldDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about containers.</p>
     * 
     * @param request DescribeContainerInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerInstancesResponse
     */
    public DescribeContainerInstancesResponse describeContainerInstancesWithOptions(DescribeContainerInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerInstancesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerInstancesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about containers.</p>
     * 
     * @param request DescribeContainerInstancesRequest
     * @return DescribeContainerInstancesResponse
     */
    public DescribeContainerInstancesResponse describeContainerInstances(DescribeContainerInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerInstancesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the vulnerability scan of one or more running container applications.</p>
     * 
     * @param request DescribeContainerScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerScanConfigResponse
     */
    public DescribeContainerScanConfigResponse describeContainerScanConfigWithOptions(DescribeContainerScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the vulnerability scan of one or more running container applications.</p>
     * 
     * @param request DescribeContainerScanConfigRequest
     * @return DescribeContainerScanConfigResponse
     */
    public DescribeContainerScanConfigResponse describeContainerScanConfig(DescribeContainerScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.</p>
     * 
     * @param request DescribeContainerServiceK8sClusterKritisStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerServiceK8sClusterKritisStatusResponse
     */
    public DescribeContainerServiceK8sClusterKritisStatusResponse describeContainerServiceK8sClusterKritisStatusWithOptions(DescribeContainerServiceK8sClusterKritisStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerServiceK8sClusterKritisStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerServiceK8sClusterKritisStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerServiceK8sClusterKritisStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.</p>
     * 
     * @param request DescribeContainerServiceK8sClusterKritisStatusRequest
     * @return DescribeContainerServiceK8sClusterKritisStatusResponse
     */
    public DescribeContainerServiceK8sClusterKritisStatusResponse describeContainerServiceK8sClusterKritisStatus(DescribeContainerServiceK8sClusterKritisStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerServiceK8sClusterKritisStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the namespace of a Container Service for Kubernetes (ACK) cluster.</p>
     * 
     * @param request DescribeContainerServiceK8sClusterNamespacesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerServiceK8sClusterNamespacesResponse
     */
    public DescribeContainerServiceK8sClusterNamespacesResponse describeContainerServiceK8sClusterNamespacesWithOptions(DescribeContainerServiceK8sClusterNamespacesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerServiceK8sClusterNamespaces"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerServiceK8sClusterNamespacesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerServiceK8sClusterNamespacesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the namespace of a Container Service for Kubernetes (ACK) cluster.</p>
     * 
     * @param request DescribeContainerServiceK8sClusterNamespacesRequest
     * @return DescribeContainerServiceK8sClusterNamespacesResponse
     */
    public DescribeContainerServiceK8sClusterNamespacesResponse describeContainerServiceK8sClusterNamespaces(DescribeContainerServiceK8sClusterNamespacesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerServiceK8sClusterNamespacesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of Container Service for Kubernetes (ACK) clusters.</p>
     * 
     * @param request DescribeContainerServiceK8sClustersRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerServiceK8sClustersResponse
     */
    public DescribeContainerServiceK8sClustersResponse describeContainerServiceK8sClustersWithOptions(DescribeContainerServiceK8sClustersRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerServiceK8sClusters"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerServiceK8sClustersResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerServiceK8sClustersResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of Container Service for Kubernetes (ACK) clusters.</p>
     * 
     * @param request DescribeContainerServiceK8sClustersRequest
     * @return DescribeContainerServiceK8sClustersResponse
     */
    public DescribeContainerServiceK8sClustersResponse describeContainerServiceK8sClusters(DescribeContainerServiceK8sClustersRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerServiceK8sClustersWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only users who created a Container Registry Enterprise Edition instance can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the alert statistics on container assets.</p>
     * 
     * @param request DescribeContainerStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerStatisticsResponse
     */
    public DescribeContainerStatisticsResponse describeContainerStatisticsWithOptions(DescribeContainerStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerStatisticsResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only users who created a Container Registry Enterprise Edition instance can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the alert statistics on container assets.</p>
     * 
     * @param request DescribeContainerStatisticsRequest
     * @return DescribeContainerStatisticsResponse
     */
    public DescribeContainerStatisticsResponse describeContainerStatistics(DescribeContainerStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of container assets by using an attribute.</p>
     * 
     * @param request DescribeContainerTagsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeContainerTagsResponse
     */
    public DescribeContainerTagsResponse describeContainerTagsWithOptions(DescribeContainerTagsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeContainerTags"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeContainerTagsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeContainerTagsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of container assets by using an attribute.</p>
     * 
     * @param request DescribeContainerTagsRequest
     * @return DescribeContainerTagsResponse
     */
    public DescribeContainerTagsResponse describeContainerTags(DescribeContainerTagsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeContainerTagsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of images that are not scanned.</p>
     * 
     * @param request DescribeCountNotScannedImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCountNotScannedImageResponse
     */
    public DescribeCountNotScannedImageResponse describeCountNotScannedImageWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCountNotScannedImage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCountNotScannedImageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCountNotScannedImageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of images that are not scanned.</p>
     * @return DescribeCountNotScannedImageResponse
     */
    public DescribeCountNotScannedImageResponse describeCountNotScannedImage() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCountNotScannedImageWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of images that are scanned.</p>
     * 
     * @param request DescribeCountScannedImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCountScannedImageResponse
     */
    public DescribeCountScannedImageResponse describeCountScannedImageWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCountScannedImage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCountScannedImageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCountScannedImageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of images that are scanned.</p>
     * @return DescribeCountScannedImageResponse
     */
    public DescribeCountScannedImageResponse describeCountScannedImage() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCountScannedImageWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the filter conditions that are used to search for assets in fuzzy match mode.</p>
     * 
     * @param request DescribeCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCriteriaResponse
     */
    public DescribeCriteriaResponse describeCriteriaWithOptions(DescribeCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.supportAutoTag)) {
            query.put("SupportAutoTag", request.supportAutoTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the filter conditions that are used to search for assets in fuzzy match mode.</p>
     * 
     * @param request DescribeCriteriaRequest
     * @return DescribeCriteriaResponse
     */
    public DescribeCriteriaResponse describeCriteria(DescribeCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.</p>
     * 
     * @param request DescribeCustomBlockInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomBlockInstancesResponse
     */
    public DescribeCustomBlockInstancesResponse describeCustomBlockInstancesWithOptions(DescribeCustomBlockInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomBlockInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomBlockInstancesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCustomBlockInstancesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.</p>
     * 
     * @param request DescribeCustomBlockInstancesRequest
     * @return DescribeCustomBlockInstancesResponse
     */
    public DescribeCustomBlockInstancesResponse describeCustomBlockInstances(DescribeCustomBlockInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomBlockInstancesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the defense rules against brute-force attacks that are applied to one or more servers.</p>
     * 
     * @param request DescribeCustomBlockRecordsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomBlockRecordsResponse
     */
    public DescribeCustomBlockRecordsResponse describeCustomBlockRecordsWithOptions(DescribeCustomBlockRecordsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomBlockRecords"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomBlockRecordsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCustomBlockRecordsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the defense rules against brute-force attacks that are applied to one or more servers.</p>
     * 
     * @param request DescribeCustomBlockRecordsRequest
     * @return DescribeCustomBlockRecordsResponse
     */
    public DescribeCustomBlockRecordsResponse describeCustomBlockRecords(DescribeCustomBlockRecordsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomBlockRecordsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the configurations of a security report.</p>
     * 
     * @param request DescribeCustomizeReportConfigDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomizeReportConfigDetailResponse
     */
    public DescribeCustomizeReportConfigDetailResponse describeCustomizeReportConfigDetailWithOptions(DescribeCustomizeReportConfigDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomizeReportConfigDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomizeReportConfigDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCustomizeReportConfigDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the configurations of a security report.</p>
     * 
     * @param request DescribeCustomizeReportConfigDetailRequest
     * @return DescribeCustomizeReportConfigDetailResponse
     */
    public DescribeCustomizeReportConfigDetailResponse describeCustomizeReportConfigDetail(DescribeCustomizeReportConfigDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomizeReportConfigDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries security reports.</p>
     * 
     * @param request DescribeCustomizeReportListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomizeReportListResponse
     */
    public DescribeCustomizeReportListResponse describeCustomizeReportListWithOptions(DescribeCustomizeReportListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pinned)) {
            query.put("Pinned", request.pinned);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportStatus)) {
            query.put("ReportStatus", request.reportStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportType)) {
            query.put("ReportType", request.reportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportVersion)) {
            query.put("ReportVersion", request.reportVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.title)) {
            query.put("Title", request.title);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomizeReportList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomizeReportListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCustomizeReportListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries security reports.</p>
     * 
     * @param request DescribeCustomizeReportListRequest
     * @return DescribeCustomizeReportListResponse
     */
    public DescribeCustomizeReportListResponse describeCustomizeReportList(DescribeCustomizeReportListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomizeReportListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.</p>
     * 
     * @param request DescribeCustomizedDictUploadInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomizedDictUploadInfoResponse
     */
    public DescribeCustomizedDictUploadInfoResponse describeCustomizedDictUploadInfoWithOptions(DescribeCustomizedDictUploadInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomizedDictUploadInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomizedDictUploadInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCustomizedDictUploadInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.</p>
     * 
     * @param request DescribeCustomizedDictUploadInfoRequest
     * @return DescribeCustomizedDictUploadInfoResponse
     */
    public DescribeCustomizedDictUploadInfoResponse describeCustomizedDictUploadInfo(DescribeCustomizedDictUploadInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomizedDictUploadInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers to which custom policies are applied.</p>
     * 
     * @param request DescribeCustomizedStrategyTargetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCustomizedStrategyTargetsResponse
     */
    public DescribeCustomizedStrategyTargetsResponse describeCustomizedStrategyTargetsWithOptions(DescribeCustomizedStrategyTargetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCustomizedStrategyTargets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCustomizedStrategyTargetsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCustomizedStrategyTargetsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers to which custom policies are applied.</p>
     * 
     * @param request DescribeCustomizedStrategyTargetsRequest
     * @return DescribeCustomizedStrategyTargetsResponse
     */
    public DescribeCustomizedStrategyTargetsResponse describeCustomizedStrategyTargets(DescribeCustomizedStrategyTargetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCustomizedStrategyTargetsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.</p>
     * 
     * @param request DescribeCycleTaskListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCycleTaskListResponse
     */
    public DescribeCycleTaskListResponse describeCycleTaskListWithOptions(DescribeCycleTaskListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeCycleTaskList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeCycleTaskListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeCycleTaskListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.</p>
     * 
     * @param request DescribeCycleTaskListRequest
     * @return DescribeCycleTaskListResponse
     */
    public DescribeCycleTaskListResponse describeCycleTaskList(DescribeCycleTaskListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeCycleTaskListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.</p>
     * 
     * @param request DescribeDataSourceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDataSourceResponse
     */
    public DescribeDataSourceResponse describeDataSourceWithOptions(DescribeDataSourceRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configType)) {
            query.put("ConfigType", request.configType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDataSource"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDataSourceResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDataSourceResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.</p>
     * 
     * @param request DescribeDataSourceRequest
     * @return DescribeDataSourceResponse
     */
    public DescribeDataSourceResponse describeDataSource(DescribeDataSourceRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDataSourceWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the keywords of a custom dictionary that is generated by using weak passwords.</p>
     * 
     * @param request DescribeDefaultKeyInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDefaultKeyInfoResponse
     */
    public DescribeDefaultKeyInfoResponse describeDefaultKeyInfoWithOptions(DescribeDefaultKeyInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDefaultKeyInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDefaultKeyInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDefaultKeyInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the keywords of a custom dictionary that is generated by using weak passwords.</p>
     * 
     * @param request DescribeDefaultKeyInfoRequest
     * @return DescribeDefaultKeyInfoResponse
     */
    public DescribeDefaultKeyInfoResponse describeDefaultKeyInfo(DescribeDefaultKeyInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDefaultKeyInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.</p>
     * 
     * @param request DescribeDefaultProxyInstallVersionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDefaultProxyInstallVersionResponse
     */
    public DescribeDefaultProxyInstallVersionResponse describeDefaultProxyInstallVersionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDefaultProxyInstallVersion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDefaultProxyInstallVersionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDefaultProxyInstallVersionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.</p>
     * @return DescribeDefaultProxyInstallVersionResponse
     */
    public DescribeDefaultProxyInstallVersionResponse describeDefaultProxyInstallVersion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDefaultProxyInstallVersionWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains DingTalk notifications.</p>
     * 
     * @param request DescribeDingTalkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDingTalkResponse
     */
    public DescribeDingTalkResponse describeDingTalkWithOptions(DescribeDingTalkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleActionName)) {
            query.put("RuleActionName", request.ruleActionName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDingTalk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDingTalkResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDingTalkResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains DingTalk notifications.</p>
     * 
     * @param request DescribeDingTalkRequest
     * @return DescribeDingTalkResponse
     */
    public DescribeDingTalkResponse describeDingTalk(DescribeDingTalkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDingTalkWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of domain assets within your Alibaba Cloud account.</p>
     * 
     * @param request DescribeDomainCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainCountResponse
     */
    public DescribeDomainCountResponse describeDomainCountWithOptions(DescribeDomainCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of domain assets within your Alibaba Cloud account.</p>
     * 
     * @param request DescribeDomainCountRequest
     * @return DescribeDomainCountResponse
     */
    public DescribeDomainCountResponse describeDomainCount(DescribeDomainCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of domain assets within your Alibaba Cloud account.</p>
     * 
     * @param request DescribeDomainDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainDetailResponse
     */
    public DescribeDomainDetailResponse describeDomainDetailWithOptions(DescribeDomainDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.domainName)) {
            query.put("DomainName", request.domainName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of domain assets within your Alibaba Cloud account.</p>
     * 
     * @param request DescribeDomainDetailRequest
     * @return DescribeDomainDetailResponse
     */
    public DescribeDomainDetailResponse describeDomainDetail(DescribeDomainDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the domain assets within your Alibaba Cloud account.</p>
     * 
     * @param request DescribeDomainListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainListResponse
     */
    public DescribeDomainListResponse describeDomainListWithOptions(DescribeDomainListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domainType)) {
            query.put("DomainType", request.domainType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzyDomain)) {
            query.put("FuzzyDomain", request.fuzzyDomain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the domain assets within your Alibaba Cloud account.</p>
     * 
     * @param request DescribeDomainListRequest
     * @return DescribeDomainListResponse
     */
    public DescribeDomainListResponse describeDomainList(DescribeDomainListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security alert data of a website security report.</p>
     * 
     * @param request DescribeDomainSecureAlarmListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainSecureAlarmListResponse
     */
    public DescribeDomainSecureAlarmListResponse describeDomainSecureAlarmListWithOptions(DescribeDomainSecureAlarmListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainSecureAlarmList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainSecureAlarmListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainSecureAlarmListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security alert data of a website security report.</p>
     * 
     * @param request DescribeDomainSecureAlarmListRequest
     * @return DescribeDomainSecureAlarmListResponse
     */
    public DescribeDomainSecureAlarmListResponse describeDomainSecureAlarmList(DescribeDomainSecureAlarmListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainSecureAlarmListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.</p>
     * 
     * @param request DescribeDomainSecureRiskListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainSecureRiskListResponse
     */
    public DescribeDomainSecureRiskListResponse describeDomainSecureRiskListWithOptions(DescribeDomainSecureRiskListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainSecureRiskList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainSecureRiskListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainSecureRiskListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.</p>
     * 
     * @param request DescribeDomainSecureRiskListRequest
     * @return DescribeDomainSecureRiskListResponse
     */
    public DescribeDomainSecureRiskListResponse describeDomainSecureRiskList(DescribeDomainSecureRiskListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainSecureRiskListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security score in your website security report. The full score is 100.</p>
     * 
     * @param request DescribeDomainSecureScoreRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainSecureScoreResponse
     */
    public DescribeDomainSecureScoreResponse describeDomainSecureScoreWithOptions(DescribeDomainSecureScoreRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainSecureScore"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainSecureScoreResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainSecureScoreResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security score in your website security report. The full score is 100.</p>
     * 
     * @param request DescribeDomainSecureScoreRequest
     * @return DescribeDomainSecureScoreResponse
     */
    public DescribeDomainSecureScoreResponse describeDomainSecureScore(DescribeDomainSecureScoreRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainSecureScoreWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics in your website security report, including the number of websites and the number of security events.</p>
     * 
     * @param request DescribeDomainSecureStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainSecureStatisticsResponse
     */
    public DescribeDomainSecureStatisticsResponse describeDomainSecureStatisticsWithOptions(DescribeDomainSecureStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainSecureStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainSecureStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainSecureStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics in your website security report, including the number of websites and the number of security events.</p>
     * 
     * @param request DescribeDomainSecureStatisticsRequest
     * @return DescribeDomainSecureStatisticsResponse
     */
    public DescribeDomainSecureStatisticsResponse describeDomainSecureStatistics(DescribeDomainSecureStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainSecureStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query Network Security Report - Security Suggestions</p>
     * 
     * @param request DescribeDomainSecureSuggestsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainSecureSuggestsResponse
     */
    public DescribeDomainSecureSuggestsResponse describeDomainSecureSuggestsWithOptions(DescribeDomainSecureSuggestsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainSecureSuggests"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainSecureSuggestsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainSecureSuggestsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query Network Security Report - Security Suggestions</p>
     * 
     * @param request DescribeDomainSecureSuggestsRequest
     * @return DescribeDomainSecureSuggestsResponse
     */
    public DescribeDomainSecureSuggestsResponse describeDomainSecureSuggests(DescribeDomainSecureSuggestsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainSecureSuggestsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of vulnerabilities in your website security report.</p>
     * 
     * @param request DescribeDomainSecureVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDomainSecureVulListResponse
     */
    public DescribeDomainSecureVulListResponse describeDomainSecureVulListWithOptions(DescribeDomainSecureVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDomainSecureVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDomainSecureVulListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDomainSecureVulListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of vulnerabilities in your website security report.</p>
     * 
     * @param request DescribeDomainSecureVulListRequest
     * @return DescribeDomainSecureVulListResponse
     */
    public DescribeDomainSecureVulListResponse describeDomainSecureVulList(DescribeDomainSecureVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDomainSecureVulListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries custom weak password rules for the baseline check feature.</p>
     * 
     * @param request DescribeDynamicDictRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDynamicDictResponse
     */
    public DescribeDynamicDictResponse describeDynamicDictWithOptions(DescribeDynamicDictRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDynamicDict"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDynamicDictResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDynamicDictResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries custom weak password rules for the baseline check feature.</p>
     * 
     * @param request DescribeDynamicDictRequest
     * @return DescribeDynamicDictResponse
     */
    public DescribeDynamicDictResponse describeDynamicDict(DescribeDynamicDictRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDynamicDictWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.</p>
     * 
     * @param request DescribeDynamicDictUploadInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeDynamicDictUploadInfoResponse
     */
    public DescribeDynamicDictUploadInfoResponse describeDynamicDictUploadInfoWithOptions(DescribeDynamicDictUploadInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeDynamicDictUploadInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeDynamicDictUploadInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeDynamicDictUploadInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.</p>
     * 
     * @param request DescribeDynamicDictUploadInfoRequest
     * @return DescribeDynamicDictUploadInfoResponse
     */
    public DescribeDynamicDictUploadInfoResponse describeDynamicDictUploadInfo(DescribeDynamicDictUploadInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeDynamicDictUploadInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether Security Center is authorized to scan for urgent vulnerabilities.</p>
     * 
     * @param request DescribeEmgUserAgreementRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEmgUserAgreementResponse
     */
    public DescribeEmgUserAgreementResponse describeEmgUserAgreementWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEmgUserAgreement"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEmgUserAgreementResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeEmgUserAgreementResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether Security Center is authorized to scan for urgent vulnerabilities.</p>
     * @return DescribeEmgUserAgreementResponse
     */
    public DescribeEmgUserAgreementResponse describeEmgUserAgreement() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEmgUserAgreementWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of urgent vulnerabilities.</p>
     * 
     * @param request DescribeEmgVulItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEmgVulItemResponse
     */
    public DescribeEmgVulItemResponse describeEmgVulItemWithOptions(DescribeEmgVulItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkType)) {
            query.put("CheckType", request.checkType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskStatus)) {
            query.put("RiskStatus", request.riskStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanType)) {
            query.put("ScanType", request.scanType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulName)) {
            query.put("VulName", request.vulName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEmgVulItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEmgVulItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeEmgVulItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of urgent vulnerabilities.</p>
     * 
     * @param request DescribeEmgVulItemRequest
     * @return DescribeEmgVulItemResponse
     */
    public DescribeEmgVulItemResponse describeEmgVulItem(DescribeEmgVulItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEmgVulItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of alert events by risk level.</p>
     * 
     * @param request DescribeEventLevelCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEventLevelCountResponse
     */
    public DescribeEventLevelCountResponse describeEventLevelCountWithOptions(DescribeEventLevelCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerIds)) {
            query.put("ContainerIds", request.containerIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.multiAccountActionType)) {
            query.put("MultiAccountActionType", request.multiAccountActionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEventLevelCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEventLevelCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeEventLevelCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of alert events by risk level.</p>
     * 
     * @param request DescribeEventLevelCountRequest
     * @return DescribeEventLevelCountResponse
     */
    public DescribeEventLevelCountResponse describeEventLevelCount(DescribeEventLevelCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEventLevelCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the platforms that are supported by the feature of container threat detection.</p>
     * 
     * @param request DescribeEventOnStageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeEventOnStageResponse
     */
    public DescribeEventOnStageResponse describeEventOnStageWithOptions(DescribeEventOnStageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeEventOnStage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeEventOnStageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeEventOnStageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the platforms that are supported by the feature of container threat detection.</p>
     * 
     * @param request DescribeEventOnStageRequest
     * @return DescribeEventOnStageResponse
     */
    public DescribeEventOnStageResponse describeEventOnStage(DescribeEventOnStageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeEventOnStageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the directories that are excluded from anti-ransomware.</p>
     * 
     * @param request DescribeExcludeSystemPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExcludeSystemPathResponse
     */
    public DescribeExcludeSystemPathResponse describeExcludeSystemPathWithOptions(DescribeExcludeSystemPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExcludeSystemPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExcludeSystemPathResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExcludeSystemPathResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the directories that are excluded from anti-ransomware.</p>
     * 
     * @param request DescribeExcludeSystemPathRequest
     * @return DescribeExcludeSystemPathResponse
     */
    public DescribeExcludeSystemPathResponse describeExcludeSystemPath(DescribeExcludeSystemPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExcludeSystemPathWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a task that exports your assets to an Excel file.</p>
     * 
     * @param request DescribeExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExportInfoResponse
     */
    public DescribeExportInfoResponse describeExportInfoWithOptions(DescribeExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExportInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExportInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a task that exports your assets to an Excel file.</p>
     * 
     * @param request DescribeExportInfoRequest
     * @return DescribeExportInfoResponse
     */
    public DescribeExportInfoResponse describeExportInfo(DescribeExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExportInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the weak password-related risks of a specified server that is exposed on the Internet.</p>
     * 
     * @param request DescribeExposedCheckWarningRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedCheckWarningResponse
     */
    public DescribeExposedCheckWarningResponse describeExposedCheckWarningWithOptions(DescribeExposedCheckWarningRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeName)) {
            query.put("TypeName", request.typeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedCheckWarning"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedCheckWarningResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExposedCheckWarningResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the weak password-related risks of a specified server that is exposed on the Internet.</p>
     * 
     * @param request DescribeExposedCheckWarningRequest
     * @return DescribeExposedCheckWarningResponse
     */
    public DescribeExposedCheckWarningResponse describeExposedCheckWarning(DescribeExposedCheckWarningRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedCheckWarningWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that are used to search for exposed assets.</p>
     * 
     * @param request DescribeExposedInstanceCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedInstanceCriteriaResponse
     */
    public DescribeExposedInstanceCriteriaResponse describeExposedInstanceCriteriaWithOptions(DescribeExposedInstanceCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedInstanceCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedInstanceCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExposedInstanceCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that are used to search for exposed assets.</p>
     * 
     * @param request DescribeExposedInstanceCriteriaRequest
     * @return DescribeExposedInstanceCriteriaResponse
     */
    public DescribeExposedInstanceCriteriaResponse describeExposedInstanceCriteria(DescribeExposedInstanceCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedInstanceCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a specified server that is exposed on the Internet.</p>
     * 
     * @param request DescribeExposedInstanceDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedInstanceDetailResponse
     */
    public DescribeExposedInstanceDetailResponse describeExposedInstanceDetailWithOptions(DescribeExposedInstanceDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedInstanceDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedInstanceDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExposedInstanceDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a specified server that is exposed on the Internet.</p>
     * 
     * @param request DescribeExposedInstanceDetailRequest
     * @return DescribeExposedInstanceDetailResponse
     */
    public DescribeExposedInstanceDetailResponse describeExposedInstanceDetail(DescribeExposedInstanceDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedInstanceDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the assets that are exposed on the Internet.</p>
     * 
     * @param request DescribeExposedInstanceListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedInstanceListResponse
     */
    public DescribeExposedInstanceListResponse describeExposedInstanceListWithOptions(DescribeExposedInstanceListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cspmStatus)) {
            query.put("CspmStatus", request.cspmStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exposureComponent)) {
            query.put("ExposureComponent", request.exposureComponent);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exposureIp)) {
            query.put("ExposureIp", request.exposureIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exposurePort)) {
            query.put("ExposurePort", request.exposurePort);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.healthStatus)) {
            query.put("HealthStatus", request.healthStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulStatus)) {
            query.put("VulStatus", request.vulStatus);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedInstanceList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedInstanceListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExposedInstanceListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the assets that are exposed on the Internet.</p>
     * 
     * @param request DescribeExposedInstanceListRequest
     * @return DescribeExposedInstanceListResponse
     */
    public DescribeExposedInstanceListResponse describeExposedInstanceList(DescribeExposedInstanceListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedInstanceListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the exposure statistics of the assets on the Internet.</p>
     * 
     * @param request DescribeExposedStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedStatisticsResponse
     */
    public DescribeExposedStatisticsResponse describeExposedStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExposedStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the exposure statistics of the assets on the Internet.</p>
     * @return DescribeExposedStatisticsResponse
     */
    public DescribeExposedStatisticsResponse describeExposedStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedStatisticsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.</p>
     * 
     * @param request DescribeExposedStatisticsDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeExposedStatisticsDetailResponse
     */
    public DescribeExposedStatisticsDetailResponse describeExposedStatisticsDetailWithOptions(DescribeExposedStatisticsDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsType)) {
            query.put("StatisticsType", request.statisticsType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsTypeGatewayType)) {
            query.put("StatisticsTypeGatewayType", request.statisticsTypeGatewayType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsTypeInstanceValue)) {
            query.put("StatisticsTypeInstanceValue", request.statisticsTypeInstanceValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeExposedStatisticsDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeExposedStatisticsDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeExposedStatisticsDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.</p>
     * 
     * @param request DescribeExposedStatisticsDetailRequest
     * @return DescribeExposedStatisticsDetailResponse
     */
    public DescribeExposedStatisticsDetailResponse describeExposedStatisticsDetail(DescribeExposedStatisticsDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeExposedStatisticsDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of servers.</p>
     * 
     * @param request DescribeFieldStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeFieldStatisticsResponse
     */
    public DescribeFieldStatisticsResponse describeFieldStatisticsWithOptions(DescribeFieldStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeFieldStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeFieldStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeFieldStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of servers.</p>
     * 
     * @param request DescribeFieldStatisticsRequest
     * @return DescribeFieldStatisticsResponse
     */
    public DescribeFieldStatisticsResponse describeFieldStatistics(DescribeFieldStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeFieldStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.</p>
     * 
     * @param request DescribeFixUsedCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeFixUsedCountResponse
     */
    public DescribeFixUsedCountResponse describeFixUsedCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeFixUsedCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeFixUsedCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeFixUsedCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.</p>
     * @return DescribeFixUsedCountResponse
     */
    public DescribeFixUsedCountResponse describeFixUsedCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeFixUsedCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the pre-patches that are required to fix a specified Windows system vulnerability.</p>
     * 
     * @param request DescribeFrontVulPatchListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeFrontVulPatchListResponse
     */
    public DescribeFrontVulPatchListResponse describeFrontVulPatchListWithOptions(DescribeFrontVulPatchListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.info)) {
            query.put("Info", request.info);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeFrontVulPatchList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeFrontVulPatchListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeFrontVulPatchListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the pre-patches that are required to fix a specified Windows system vulnerability.</p>
     * 
     * @param request DescribeFrontVulPatchListRequest
     * @return DescribeFrontVulPatchListResponse
     */
    public DescribeFrontVulPatchListResponse describeFrontVulPatchList(DescribeFrontVulPatchListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeFrontVulPatchListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Alert Event Investigation</p>
     * 
     * @param request DescribeGraph4InvestigationOnlineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGraph4InvestigationOnlineResponse
     */
    public DescribeGraph4InvestigationOnlineResponse describeGraph4InvestigationOnlineWithOptions(DescribeGraph4InvestigationOnlineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.anomalyId)) {
            query.put("AnomalyId", request.anomalyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.anomalyUuid)) {
            query.put("AnomalyUuid", request.anomalyUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            query.put("VertexId", request.vertexId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGraph4InvestigationOnline"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGraph4InvestigationOnlineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeGraph4InvestigationOnlineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Alert Event Investigation</p>
     * 
     * @param request DescribeGraph4InvestigationOnlineRequest
     * @return DescribeGraph4InvestigationOnlineResponse
     */
    public DescribeGraph4InvestigationOnlineResponse describeGraph4InvestigationOnline(DescribeGraph4InvestigationOnlineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGraph4InvestigationOnlineWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the structure of a group.</p>
     * 
     * @param request DescribeGroupStructRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupStructResponse
     */
    public DescribeGroupStructResponse describeGroupStructWithOptions(DescribeGroupStructRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupStruct"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupStructResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeGroupStructResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the structure of a group.</p>
     * 
     * @param request DescribeGroupStructRequest
     * @return DescribeGroupStructResponse
     */
    public DescribeGroupStructResponse describeGroupStruct(DescribeGroupStructRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupStructWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries containers by group type.</p>
     * 
     * @param request DescribeGroupedContainerInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedContainerInstancesResponse
     */
    public DescribeGroupedContainerInstancesResponse describeGroupedContainerInstancesWithOptions(DescribeGroupedContainerInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupField)) {
            query.put("GroupField", request.groupField);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedContainerInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedContainerInstancesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeGroupedContainerInstancesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries containers by group type.</p>
     * 
     * @param request DescribeGroupedContainerInstancesRequest
     * @return DescribeGroupedContainerInstancesResponse
     */
    public DescribeGroupedContainerInstancesResponse describeGroupedContainerInstances(DescribeGroupedContainerInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedContainerInstancesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about assets based on a specified filter condition.</p>
     * 
     * @param request DescribeGroupedInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedInstancesResponse
     */
    public DescribeGroupedInstancesResponse describeGroupedInstancesWithOptions(DescribeGroupedInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupField)) {
            query.put("GroupField", request.groupField);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noPage)) {
            query.put("NoPage", request.noPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.saleVersionCheckCode)) {
            query.put("SaleVersionCheckCode", request.saleVersionCheckCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedInstancesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeGroupedInstancesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistical information about assets based on a specified filter condition.</p>
     * 
     * @param request DescribeGroupedInstancesRequest
     * @return DescribeGroupedInstancesResponse
     */
    public DescribeGroupedInstancesResponse describeGroupedInstances(DescribeGroupedInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedInstancesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of malicious image samples.</p>
     * 
     * @param request DescribeGroupedMaliciousFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedMaliciousFilesResponse
     */
    public DescribeGroupedMaliciousFilesResponse describeGroupedMaliciousFilesWithOptions(DescribeGroupedMaliciousFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzyMaliciousName)) {
            query.put("FuzzyMaliciousName", request.fuzzyMaliciousName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageLayer)) {
            query.put("ImageLayer", request.imageLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousMd5)) {
            query.put("MaliciousMd5", request.maliciousMd5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedMaliciousFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedMaliciousFilesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeGroupedMaliciousFilesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of malicious image samples.</p>
     * 
     * @param request DescribeGroupedMaliciousFilesRequest
     * @return DescribeGroupedMaliciousFilesResponse
     */
    public DescribeGroupedMaliciousFilesResponse describeGroupedMaliciousFiles(DescribeGroupedMaliciousFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedMaliciousFilesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of asset tags.</p>
     * 
     * @param request DescribeGroupedTagsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedTagsResponse
     */
    public DescribeGroupedTagsResponse describeGroupedTagsWithOptions(DescribeGroupedTagsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedTags"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedTagsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeGroupedTagsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of asset tags.</p>
     * 
     * @param request DescribeGroupedTagsRequest
     * @return DescribeGroupedTagsResponse
     */
    public DescribeGroupedTagsResponse describeGroupedTags(DescribeGroupedTagsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedTagsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries vulnerabilities by group.</p>
     * 
     * @param request DescribeGroupedVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeGroupedVulResponse
     */
    public DescribeGroupedVulResponse describeGroupedVulWithOptions(DescribeGroupedVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attachTypes)) {
            query.put("AttachTypes", request.attachTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchTags)) {
            query.put("SearchTags", request.searchTags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeGroupedVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeGroupedVulResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeGroupedVulResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries vulnerabilities by group.</p>
     * 
     * @param request DescribeGroupedVulRequest
     * @return DescribeGroupedVulResponse
     */
    public DescribeGroupedVulResponse describeGroupedVul(DescribeGroupedVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeGroupedVulWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.</p>
     * 
     * @param request DescribeHcExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHcExportInfoResponse
     */
    public DescribeHcExportInfoResponse describeHcExportInfoWithOptions(DescribeHcExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHcExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHcExportInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeHcExportInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.</p>
     * 
     * @param request DescribeHcExportInfoRequest
     * @return DescribeHcExportInfoResponse
     */
    public DescribeHcExportInfoResponse describeHcExportInfo(DescribeHcExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHcExportInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries statistics on the quota of honeypots.</p>
     * 
     * @param request DescribeHoneyPotAuthRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHoneyPotAuthResponse
     */
    public DescribeHoneyPotAuthResponse describeHoneyPotAuthWithOptions(DescribeHoneyPotAuthRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHoneyPotAuth"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHoneyPotAuthResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeHoneyPotAuthResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries statistics on the quota of honeypots.</p>
     * 
     * @param request DescribeHoneyPotAuthRequest
     * @return DescribeHoneyPotAuthResponse
     */
    public DescribeHoneyPotAuthResponse describeHoneyPotAuth(DescribeHoneyPotAuthRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHoneyPotAuthWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.</p>
     * 
     * @param request DescribeHoneyPotSuspStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHoneyPotSuspStatisticsResponse
     */
    public DescribeHoneyPotSuspStatisticsResponse describeHoneyPotSuspStatisticsWithOptions(DescribeHoneyPotSuspStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsDays)) {
            query.put("StatisticsDays", request.statisticsDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsKeyType)) {
            query.put("StatisticsKeyType", request.statisticsKeyType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHoneyPotSuspStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHoneyPotSuspStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeHoneyPotSuspStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.</p>
     * 
     * @param request DescribeHoneyPotSuspStatisticsRequest
     * @return DescribeHoneyPotSuspStatisticsResponse
     */
    public DescribeHoneyPotSuspStatisticsResponse describeHoneyPotSuspStatistics(DescribeHoneyPotSuspStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHoneyPotSuspStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries proxy clusters by page.</p>
     * 
     * @param request DescribeHybridProxyClusterListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHybridProxyClusterListResponse
     */
    public DescribeHybridProxyClusterListResponse describeHybridProxyClusterListWithOptions(DescribeHybridProxyClusterListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHybridProxyClusterList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHybridProxyClusterListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeHybridProxyClusterListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries proxy clusters by page.</p>
     * 
     * @param request DescribeHybridProxyClusterListRequest
     * @return DescribeHybridProxyClusterListResponse
     */
    public DescribeHybridProxyClusterListResponse describeHybridProxyClusterList(DescribeHybridProxyClusterListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHybridProxyClusterListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers that are connected to a proxy in a hybrid cloud by page.</p>
     * 
     * @param request DescribeHybridProxyLinkedClientListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHybridProxyLinkedClientListResponse
     */
    public DescribeHybridProxyLinkedClientListResponse describeHybridProxyLinkedClientListWithOptions(DescribeHybridProxyLinkedClientListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.proxyUuid)) {
            query.put("ProxyUuid", request.proxyUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHybridProxyLinkedClientList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHybridProxyLinkedClientListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeHybridProxyLinkedClientListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers that are connected to a proxy in a hybrid cloud by page.</p>
     * 
     * @param request DescribeHybridProxyLinkedClientListRequest
     * @return DescribeHybridProxyLinkedClientListResponse
     */
    public DescribeHybridProxyLinkedClientListResponse describeHybridProxyLinkedClientList(DescribeHybridProxyLinkedClientListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHybridProxyLinkedClientListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the proxy nodes that are deployed in a proxy cluster by page.</p>
     * 
     * @param request DescribeHybridProxyListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHybridProxyListResponse
     */
    public DescribeHybridProxyListResponse describeHybridProxyListWithOptions(DescribeHybridProxyListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHybridProxyList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHybridProxyListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeHybridProxyListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the proxy nodes that are deployed in a proxy cluster by page.</p>
     * 
     * @param request DescribeHybridProxyListRequest
     * @return DescribeHybridProxyListResponse
     */
    public DescribeHybridProxyListResponse describeHybridProxyList(DescribeHybridProxyListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHybridProxyListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the data collection configurations of a proxy cluster.</p>
     * 
     * @param request DescribeHybridProxyPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeHybridProxyPolicyResponse
     */
    public DescribeHybridProxyPolicyResponse describeHybridProxyPolicyWithOptions(DescribeHybridProxyPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeHybridProxyPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeHybridProxyPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeHybridProxyPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the data collection configurations of a proxy cluster.</p>
     * 
     * @param request DescribeHybridProxyPolicyRequest
     * @return DescribeHybridProxyPolicyResponse
     */
    public DescribeHybridProxyPolicyResponse describeHybridProxyPolicy(DescribeHybridProxyPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeHybridProxyPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.</p>
     * 
     * @param request DescribeIdcAssetCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeIdcAssetCriteriaResponse
     */
    public DescribeIdcAssetCriteriaResponse describeIdcAssetCriteriaWithOptions(DescribeIdcAssetCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeIdcAssetCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeIdcAssetCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeIdcAssetCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.</p>
     * 
     * @param request DescribeIdcAssetCriteriaRequest
     * @return DescribeIdcAssetCriteriaResponse
     */
    public DescribeIdcAssetCriteriaResponse describeIdcAssetCriteria(DescribeIdcAssetCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeIdcAssetCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query IDC probe list</p>
     * 
     * @param request DescribeIdcProbeListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeIdcProbeListResponse
     */
    public DescribeIdcProbeListResponse describeIdcProbeListWithOptions(DescribeIdcProbeListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.idcName)) {
            query.put("IdcName", request.idcName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeIdcProbeList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeIdcProbeListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeIdcProbeListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query IDC probe list</p>
     * 
     * @param request DescribeIdcProbeListRequest
     * @return DescribeIdcProbeListResponse
     */
    public DescribeIdcProbeListResponse describeIdcProbeList(DescribeIdcProbeListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeIdcProbeListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries assets that are identified by Internet Data Center (IDC) probes.</p>
     * 
     * @param request DescribeIdcProbeScanResultListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeIdcProbeScanResultListResponse
     */
    public DescribeIdcProbeScanResultListResponse describeIdcProbeScanResultListWithOptions(DescribeIdcProbeScanResultListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.foundEndTime)) {
            query.put("FoundEndTime", request.foundEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.foundStartTime)) {
            query.put("FoundStartTime", request.foundStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeIdcProbeScanResultList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeIdcProbeScanResultListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeIdcProbeScanResultListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries assets that are identified by Internet Data Center (IDC) probes.</p>
     * 
     * @param request DescribeIdcProbeScanResultListRequest
     * @return DescribeIdcProbeScanResultListResponse
     */
    public DescribeIdcProbeScanResultListResponse describeIdcProbeScanResultList(DescribeIdcProbeScanResultListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeIdcProbeScanResultListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries an image digest.</p>
     * 
     * @param request DescribeImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageResponse
     */
    public DescribeImageResponse describeImageWithOptions(DescribeImageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.imageInstanceId)) {
            query.put("ImageInstanceId", request.imageInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageRegionId)) {
            query.put("ImageRegionId", request.imageRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageRepoId)) {
            query.put("ImageRepoId", request.imageRepoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries an image digest.</p>
     * 
     * @param request DescribeImageRequest
     * @return DescribeImageResponse
     */
    public DescribeImageResponse describeImage(DescribeImageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security scan results of images.</p>
     * 
     * @param request DescribeImageBaselineCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineCheckResultResponse
     */
    public DescribeImageBaselineCheckResultResponse describeImageBaselineCheckResultWithOptions(DescribeImageBaselineCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineCheckResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageBaselineCheckResultResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security scan results of images.</p>
     * 
     * @param request DescribeImageBaselineCheckResultRequest
     * @return DescribeImageBaselineCheckResultResponse
     */
    public DescribeImageBaselineCheckResultResponse describeImageBaselineCheckResult(DescribeImageBaselineCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineCheckResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the check results of image baselines that are included in an image scan task.</p>
     * 
     * @param request DescribeImageBaselineCheckSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineCheckSummaryResponse
     */
    public DescribeImageBaselineCheckSummaryResponse describeImageBaselineCheckSummaryWithOptions(DescribeImageBaselineCheckSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineCheckSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineCheckSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageBaselineCheckSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the check results of image baselines that are included in an image scan task.</p>
     * 
     * @param request DescribeImageBaselineCheckSummaryRequest
     * @return DescribeImageBaselineCheckSummaryResponse
     */
    public DescribeImageBaselineCheckSummaryResponse describeImageBaselineCheckSummary(DescribeImageBaselineCheckSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineCheckSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the baseline check result for an image.</p>
     * 
     * @param request DescribeImageBaselineDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineDetailResponse
     */
    public DescribeImageBaselineDetailResponse describeImageBaselineDetailWithOptions(DescribeImageBaselineDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineItemKey)) {
            query.put("BaselineItemKey", request.baselineItemKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageBaselineDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the baseline check result for an image.</p>
     * 
     * @param request DescribeImageBaselineDetailRequest
     * @return DescribeImageBaselineDetailResponse
     */
    public DescribeImageBaselineDetailResponse describeImageBaselineDetail(DescribeImageBaselineDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries baseline check results based on images.</p>
     * 
     * @param request DescribeImageBaselineItemListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineItemListResponse
     */
    public DescribeImageBaselineItemListResponse describeImageBaselineItemListWithOptions(DescribeImageBaselineItemListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineClassKey)) {
            query.put("BaselineClassKey", request.baselineClassKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.baselineNameKey)) {
            query.put("BaselineNameKey", request.baselineNameKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineItemList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineItemListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageBaselineItemListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries baseline check results based on images.</p>
     * 
     * @param request DescribeImageBaselineItemListRequest
     * @return DescribeImageBaselineItemListResponse
     */
    public DescribeImageBaselineItemListResponse describeImageBaselineItemList(DescribeImageBaselineItemListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineItemListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a baseline check policy for images.</p>
     * 
     * @param request DescribeImageBaselineStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBaselineStrategyResponse
     */
    public DescribeImageBaselineStrategyResponse describeImageBaselineStrategyWithOptions(DescribeImageBaselineStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBaselineStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBaselineStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageBaselineStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a baseline check policy for images.</p>
     * 
     * @param request DescribeImageBaselineStrategyRequest
     * @return DescribeImageBaselineStrategyResponse
     */
    public DescribeImageBaselineStrategyResponse describeImageBaselineStrategy(DescribeImageBaselineStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBaselineStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries image build command risks by page.</p>
     * 
     * @param request DescribeImageBuildRiskByKeyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBuildRiskByKeyResponse
     */
    public DescribeImageBuildRiskByKeyResponse describeImageBuildRiskByKeyWithOptions(DescribeImageBuildRiskByKeyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskKey)) {
            query.put("RiskKey", request.riskKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBuildRiskByKey"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBuildRiskByKeyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageBuildRiskByKeyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries image build command risks by page.</p>
     * 
     * @param request DescribeImageBuildRiskByKeyRequest
     * @return DescribeImageBuildRiskByKeyResponse
     */
    public DescribeImageBuildRiskByKeyResponse describeImageBuildRiskByKey(DescribeImageBuildRiskByKeyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBuildRiskByKeyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of image build command risks by page.</p>
     * 
     * @param request DescribeImageBuildRiskListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageBuildRiskListResponse
     */
    public DescribeImageBuildRiskListResponse describeImageBuildRiskListWithOptions(DescribeImageBuildRiskListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageBuildRiskList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageBuildRiskListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageBuildRiskListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of image build command risks by page.</p>
     * 
     * @param request DescribeImageBuildRiskListRequest
     * @return DescribeImageBuildRiskListResponse
     */
    public DescribeImageBuildRiskListResponse describeImageBuildRiskList(DescribeImageBuildRiskListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageBuildRiskListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that are used to query images.</p>
     * 
     * @param request DescribeImageCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageCriteriaResponse
     */
    public DescribeImageCriteriaResponse describeImageCriteriaWithOptions(DescribeImageCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that are used to query images.</p>
     * 
     * @param request DescribeImageCriteriaRequest
     * @return DescribeImageCriteriaResponse
     */
    public DescribeImageCriteriaResponse describeImageCriteria(DescribeImageCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the conditions for handling alert events in an image.</p>
     * 
     * @param request DescribeImageEventOperationConditionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageEventOperationConditionResponse
     */
    public DescribeImageEventOperationConditionResponse describeImageEventOperationConditionWithOptions(DescribeImageEventOperationConditionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageEventOperationCondition"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageEventOperationConditionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageEventOperationConditionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the conditions for handling alert events in an image.</p>
     * 
     * @param request DescribeImageEventOperationConditionRequest
     * @return DescribeImageEventOperationConditionResponse
     */
    public DescribeImageEventOperationConditionResponse describeImageEventOperationCondition(DescribeImageEventOperationConditionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageEventOperationConditionWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries alert handling rules by page.</p>
     * 
     * @param request DescribeImageEventOperationPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageEventOperationPageResponse
     */
    public DescribeImageEventOperationPageResponse describeImageEventOperationPageWithOptions(DescribeImageEventOperationPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventKey)) {
            query.put("EventKey", request.eventKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventType)) {
            query.put("EventType", request.eventType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageEventOperationPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageEventOperationPageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageEventOperationPageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries alert handling rules by page.</p>
     * 
     * @param request DescribeImageEventOperationPageRequest
     * @return DescribeImageEventOperationPageResponse
     */
    public DescribeImageEventOperationPageResponse describeImageEventOperationPage(DescribeImageEventOperationPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageEventOperationPageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the scheduled fix of image risks.</p>
     * 
     * @param request DescribeImageFixCycleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageFixCycleConfigResponse
     */
    public DescribeImageFixCycleConfigResponse describeImageFixCycleConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageFixCycleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageFixCycleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageFixCycleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the scheduled fix of image risks.</p>
     * @return DescribeImageFixCycleConfigResponse
     */
    public DescribeImageFixCycleConfigResponse describeImageFixCycleConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageFixCycleConfigWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the tasks that you create to fix image risks.</p>
     * 
     * @param request DescribeImageFixTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageFixTaskResponse
     */
    public DescribeImageFixTaskResponse describeImageFixTaskWithOptions(DescribeImageFixTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageFixTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageFixTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageFixTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the tasks that you create to fix image risks.</p>
     * 
     * @param request DescribeImageFixTaskRequest
     * @return DescribeImageFixTaskResponse
     */
    public DescribeImageFixTaskResponse describeImageFixTask(DescribeImageFixTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageFixTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries image vulnerabilities.</p>
     * 
     * @param request DescribeImageGroupedVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageGroupedVulListResponse
     */
    public DescribeImageGroupedVulListResponse describeImageGroupedVulListWithOptions(DescribeImageGroupedVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cveId)) {
            query.put("CveId", request.cveId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageLayer)) {
            query.put("ImageLayer", request.imageLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isLatest)) {
            query.put("IsLatest", request.isLatest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.patchId)) {
            query.put("PatchId", request.patchId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageGroupedVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageGroupedVulListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageGroupedVulListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries image vulnerabilities.</p>
     * 
     * @param request DescribeImageGroupedVulListRequest
     * @return DescribeImageGroupedVulListResponse
     */
    public DescribeImageGroupedVulListResponse describeImageGroupedVulList(DescribeImageGroupedVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageGroupedVulListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries images.</p>
     * 
     * @param request DescribeImageInfoListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageInfoListResponse
     */
    public DescribeImageInfoListResponse describeImageInfoListWithOptions(DescribeImageInfoListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageInfoList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageInfoListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageInfoListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries images.</p>
     * 
     * @param request DescribeImageInfoListRequest
     * @return DescribeImageInfoListResponse
     */
    public DescribeImageInfoListResponse describeImageInfoList(DescribeImageInfoListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageInfoListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about images.</p>
     * 
     * @param request DescribeImageInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageInstancesResponse
     */
    public DescribeImageInstancesResponse describeImageInstancesWithOptions(DescribeImageInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanned)) {
            query.put("Scanned", request.scanned);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageInstancesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageInstancesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about images.</p>
     * 
     * @param request DescribeImageInstancesRequest
     * @return DescribeImageInstancesResponse
     */
    public DescribeImageInstancesResponse describeImageInstances(DescribeImageInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageInstancesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the most recent scan task that is created for an image.</p>
     * 
     * @param request DescribeImageLatestScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageLatestScanTaskResponse
     */
    public DescribeImageLatestScanTaskResponse describeImageLatestScanTaskWithOptions(DescribeImageLatestScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.digest)) {
            query.put("Digest", request.digest);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageLatestScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageLatestScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageLatestScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the most recent scan task that is created for an image.</p>
     * 
     * @param request DescribeImageLatestScanTaskRequest
     * @return DescribeImageLatestScanTaskResponse
     */
    public DescribeImageLatestScanTaskResponse describeImageLatestScanTask(DescribeImageLatestScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageLatestScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of images that are affected by image build command risks by page.</p>
     * 
     * @param request DescribeImageListByBuildRiskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageListByBuildRiskResponse
     */
    public DescribeImageListByBuildRiskResponse describeImageListByBuildRiskWithOptions(DescribeImageListByBuildRiskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskKey)) {
            query.put("RiskKey", request.riskKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageListByBuildRisk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageListByBuildRiskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageListByBuildRiskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of images that are affected by image build command risks by page.</p>
     * 
     * @param request DescribeImageListByBuildRiskRequest
     * @return DescribeImageListByBuildRiskResponse
     */
    public DescribeImageListByBuildRiskResponse describeImageListByBuildRisk(DescribeImageListByBuildRiskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageListByBuildRiskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about images that are affected by sensitive files.</p>
     * 
     * @param tmpReq DescribeImageListBySensitiveFileRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageListBySensitiveFileResponse
     */
    public DescribeImageListBySensitiveFileResponse describeImageListBySensitiveFileWithOptions(DescribeImageListBySensitiveFileRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeImageListBySensitiveFileShrinkRequest request = new DescribeImageListBySensitiveFileShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRangeShrink)) {
            query.put("ScanRange", request.scanRangeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sensitiveFileKey)) {
            query.put("SensitiveFileKey", request.sensitiveFileKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageListBySensitiveFile"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageListBySensitiveFileResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageListBySensitiveFileResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about images that are affected by sensitive files.</p>
     * 
     * @param request DescribeImageListBySensitiveFileRequest
     * @return DescribeImageListBySensitiveFileResponse
     */
    public DescribeImageListBySensitiveFileResponse describeImageListBySensitiveFile(DescribeImageListBySensitiveFileRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageListBySensitiveFileWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about images in the results of image baseline checks.</p>
     * 
     * @param request DescribeImageListWithBaselineNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageListWithBaselineNameResponse
     */
    public DescribeImageListWithBaselineNameResponse describeImageListWithBaselineNameWithOptions(DescribeImageListWithBaselineNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineNameKey)) {
            query.put("BaselineNameKey", request.baselineNameKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageListWithBaselineName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageListWithBaselineNameResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageListWithBaselineNameResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about images in the results of image baseline checks.</p>
     * 
     * @param request DescribeImageListWithBaselineNameRequest
     * @return DescribeImageListWithBaselineNameResponse
     */
    public DescribeImageListWithBaselineNameResponse describeImageListWithBaselineName(DescribeImageListWithBaselineNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageListWithBaselineNameWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the filter conditions that are supported by the image repository.</p>
     * 
     * @param request DescribeImageRepoCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageRepoCriteriaResponse
     */
    public DescribeImageRepoCriteriaResponse describeImageRepoCriteriaWithOptions(DescribeImageRepoCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageRepoCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageRepoCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageRepoCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the filter conditions that are supported by the image repository.</p>
     * 
     * @param request DescribeImageRepoCriteriaRequest
     * @return DescribeImageRepoCriteriaResponse
     */
    public DescribeImageRepoCriteriaResponse describeImageRepoCriteria(DescribeImageRepoCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageRepoCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about image repositories.</p>
     * 
     * @param request DescribeImageRepoDetailListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageRepoDetailListResponse
     */
    public DescribeImageRepoDetailListResponse describeImageRepoDetailListWithOptions(DescribeImageRepoDetailListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageRepoDetailList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageRepoDetailListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageRepoDetailListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about image repositories.</p>
     * 
     * @param request DescribeImageRepoDetailListRequest
     * @return DescribeImageRepoDetailListResponse
     */
    public DescribeImageRepoDetailListResponse describeImageRepoDetailList(DescribeImageRepoDetailListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageRepoDetailListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics and configurations of the feature that protects images.</p>
     * 
     * @param request DescribeImageRepoListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageRepoListResponse
     */
    public DescribeImageRepoListResponse describeImageRepoListWithOptions(DescribeImageRepoListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageRepoList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageRepoListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageRepoListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics and configurations of the feature that protects images.</p>
     * 
     * @param request DescribeImageRepoListRequest
     * @return DescribeImageRepoListResponse
     */
    public DescribeImageRepoListResponse describeImageRepoList(DescribeImageRepoListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageRepoListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query the distribution of image risk levels.</p>
     * 
     * @param request DescribeImageRiskLevelStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageRiskLevelStatisticResponse
     */
    public DescribeImageRiskLevelStatisticResponse describeImageRiskLevelStatisticWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageRiskLevelStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageRiskLevelStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageRiskLevelStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query the distribution of image risk levels.</p>
     * @return DescribeImageRiskLevelStatisticResponse
     */
    public DescribeImageRiskLevelStatisticResponse describeImageRiskLevelStatistic() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageRiskLevelStatisticWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the quota for container image scan.</p>
     * 
     * @param request DescribeImageScanAuthCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageScanAuthCountResponse
     */
    public DescribeImageScanAuthCountResponse describeImageScanAuthCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageScanAuthCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageScanAuthCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageScanAuthCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the quota for container image scan.</p>
     * @return DescribeImageScanAuthCountResponse
     */
    public DescribeImageScanAuthCountResponse describeImageScanAuthCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageScanAuthCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get Image Security Event Count.</p>
     * 
     * @param request DescribeImageSecurityScanCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageSecurityScanCountResponse
     */
    public DescribeImageSecurityScanCountResponse describeImageSecurityScanCountWithOptions(DescribeImageSecurityScanCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageDigest)) {
            query.put("ImageDigest", request.imageDigest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTag)) {
            query.put("ImageTag", request.imageTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageSecurityScanCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageSecurityScanCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageSecurityScanCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get Image Security Event Count.</p>
     * 
     * @param request DescribeImageSecurityScanCountRequest
     * @return DescribeImageSecurityScanCountResponse
     */
    public DescribeImageSecurityScanCountResponse describeImageSecurityScanCount(DescribeImageSecurityScanCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageSecurityScanCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the sensitive files in an image.</p>
     * 
     * @param tmpReq DescribeImageSensitiveFileByKeyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageSensitiveFileByKeyResponse
     */
    public DescribeImageSensitiveFileByKeyResponse describeImageSensitiveFileByKeyWithOptions(DescribeImageSensitiveFileByKeyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeImageSensitiveFileByKeyShrinkRequest request = new DescribeImageSensitiveFileByKeyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRangeShrink)) {
            query.put("ScanRange", request.scanRangeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sensitiveFileKey)) {
            query.put("SensitiveFileKey", request.sensitiveFileKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageSensitiveFileByKey"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageSensitiveFileByKeyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageSensitiveFileByKeyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the sensitive files in an image.</p>
     * 
     * @param request DescribeImageSensitiveFileByKeyRequest
     * @return DescribeImageSensitiveFileByKeyResponse
     */
    public DescribeImageSensitiveFileByKeyResponse describeImageSensitiveFileByKey(DescribeImageSensitiveFileByKeyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageSensitiveFileByKeyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about sensitive files.</p>
     * 
     * @param tmpReq DescribeImageSensitiveFileListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageSensitiveFileListResponse
     */
    public DescribeImageSensitiveFileListResponse describeImageSensitiveFileListWithOptions(DescribeImageSensitiveFileListRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeImageSensitiveFileListShrinkRequest request = new DescribeImageSensitiveFileListShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRangeShrink)) {
            query.put("ScanRange", request.scanRangeShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageSensitiveFileList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageSensitiveFileListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageSensitiveFileListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about sensitive files.</p>
     * 
     * @param request DescribeImageSensitiveFileListRequest
     * @return DescribeImageSensitiveFileListResponse
     */
    public DescribeImageSensitiveFileListResponse describeImageSensitiveFileList(DescribeImageSensitiveFileListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageSensitiveFileListWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Security Center can scan for security risks and collect statistics only for <strong>Container Registry Enterprise Edition instances</strong>.</p>
     * <blockquote>
     * <p> Security Center cannot scan for security risks or collect statistics for <strong>default</strong> Container Registry instances.</p>
     * </blockquote>
     * 
     * <b>summary</b> : 
     * <p>Queries the risk statistics on container images.</p>
     * 
     * @param request DescribeImageStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageStatisticsResponse
     */
    public DescribeImageStatisticsResponse describeImageStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageStatisticsResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Security Center can scan for security risks and collect statistics only for <strong>Container Registry Enterprise Edition instances</strong>.</p>
     * <blockquote>
     * <p> Security Center cannot scan for security risks or collect statistics for <strong>default</strong> Container Registry instances.</p>
     * </blockquote>
     * 
     * <b>summary</b> : 
     * <p>Queries the risk statistics on container images.</p>
     * @return DescribeImageStatisticsResponse
     */
    public DescribeImageStatisticsResponse describeImageStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageStatisticsWithOptions(runtime);
    }

    /**
     * <b>description</b> :
     * <p>To query the information about the recently detected image vulnerabilities, call the <a href="~~PublicCreateImageScanTask~~">PublicCreateImageScanTask</a> operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries information about the vulnerabilities that are detected by using container image scan and the affected images.</p>
     * 
     * @param request DescribeImageVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageVulListResponse
     */
    public DescribeImageVulListResponse describeImageVulListWithOptions(DescribeImageVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerId)) {
            query.put("ContainerId", request.containerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.digest)) {
            query.put("Digest", request.digest);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.image)) {
            query.put("Image", request.image);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pod)) {
            query.put("Pod", request.pod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoId)) {
            query.put("RepoId", request.repoId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoInstanceId)) {
            query.put("RepoInstanceId", request.repoInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoName)) {
            query.put("RepoName", request.repoName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespace)) {
            query.put("RepoNamespace", request.repoNamespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoRegionId)) {
            query.put("RepoRegionId", request.repoRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageVulListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageVulListResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>To query the information about the recently detected image vulnerabilities, call the <a href="~~PublicCreateImageScanTask~~">PublicCreateImageScanTask</a> operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries information about the vulnerabilities that are detected by using container image scan and the affected images.</p>
     * 
     * @param request DescribeImageVulListRequest
     * @return DescribeImageVulListResponse
     */
    public DescribeImageVulListResponse describeImageVulList(DescribeImageVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageVulListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the whitelist of image vulnerabilities.</p>
     * 
     * @param request DescribeImageVulWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeImageVulWhiteListResponse
     */
    public DescribeImageVulWhiteListResponse describeImageVulWhiteListWithOptions(DescribeImageVulWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeImageVulWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeImageVulWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeImageVulWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the whitelist of image vulnerabilities.</p>
     * 
     * @param request DescribeImageVulWhiteListRequest
     * @return DescribeImageVulWhiteListResponse
     */
    public DescribeImageVulWhiteListResponse describeImageVulWhiteList(DescribeImageVulWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeImageVulWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the verification codes that are used to manually install the Security Center agent.</p>
     * 
     * @param request DescribeInstallCaptchaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstallCaptchaResponse
     */
    public DescribeInstallCaptchaResponse describeInstallCaptchaWithOptions(DescribeInstallCaptchaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.deadline)) {
            query.put("Deadline", request.deadline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstallCaptcha"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstallCaptchaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeInstallCaptchaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the verification codes that are used to manually install the Security Center agent.</p>
     * 
     * @param request DescribeInstallCaptchaRequest
     * @return DescribeInstallCaptchaResponse
     */
    public DescribeInstallCaptchaResponse describeInstallCaptcha(DescribeInstallCaptchaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstallCaptchaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation verification code that is used to run the installation command of the Security Center agent.</p>
     * 
     * @param request DescribeInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstallCodeResponse
     */
    public DescribeInstallCodeResponse describeInstallCodeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstallCodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeInstallCodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation verification code that is used to run the installation command of the Security Center agent.</p>
     * @return DescribeInstallCodeResponse
     */
    public DescribeInstallCodeResponse describeInstallCode() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstallCodeWithOptions(runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.</p>
     * <h3>QPS limit</h3>
     * <p>You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the commands that are used to manually install the Security Center Agent.</p>
     * 
     * @param request DescribeInstallCodesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstallCodesResponse
     */
    public DescribeInstallCodesResponse describeInstallCodesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstallCodes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstallCodesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeInstallCodesResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.</p>
     * <h3>QPS limit</h3>
     * <p>You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the commands that are used to manually install the Security Center Agent.</p>
     * @return DescribeInstallCodesResponse
     */
    public DescribeInstallCodesResponse describeInstallCodes() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstallCodesWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about servers to which a defense rule against brute-force attacks is applied.</p>
     * 
     * @param request DescribeInstanceAntiBruteForceRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstanceAntiBruteForceRulesResponse
     */
    public DescribeInstanceAntiBruteForceRulesResponse describeInstanceAntiBruteForceRulesWithOptions(DescribeInstanceAntiBruteForceRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstanceAntiBruteForceRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstanceAntiBruteForceRulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeInstanceAntiBruteForceRulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about servers to which a defense rule against brute-force attacks is applied.</p>
     * 
     * @param request DescribeInstanceAntiBruteForceRulesRequest
     * @return DescribeInstanceAntiBruteForceRulesResponse
     */
    public DescribeInstanceAntiBruteForceRulesResponse describeInstanceAntiBruteForceRules(DescribeInstanceAntiBruteForceRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstanceAntiBruteForceRulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of the instance that you restart.</p>
     * 
     * @param request DescribeInstanceRebootStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstanceRebootStatusResponse
     */
    public DescribeInstanceRebootStatusResponse describeInstanceRebootStatusWithOptions(DescribeInstanceRebootStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstanceRebootStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstanceRebootStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeInstanceRebootStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of the instance that you restart.</p>
     * 
     * @param request DescribeInstanceRebootStatusRequest
     * @return DescribeInstanceRebootStatusResponse
     */
    public DescribeInstanceRebootStatusResponse describeInstanceRebootStatus(DescribeInstanceRebootStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstanceRebootStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of assets that are protected by Security Center.</p>
     * 
     * @param request DescribeInstanceStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstanceStatisticsResponse
     */
    public DescribeInstanceStatisticsResponse describeInstanceStatisticsWithOptions(DescribeInstanceStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstanceStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstanceStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeInstanceStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of assets that are protected by Security Center.</p>
     * 
     * @param request DescribeInstanceStatisticsRequest
     * @return DescribeInstanceStatisticsResponse
     */
    public DescribeInstanceStatisticsResponse describeInstanceStatistics(DescribeInstanceStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstanceStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on the vulnerabilities that are detected on a serverless instance.</p>
     * 
     * @param request DescribeInstanceVulStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeInstanceVulStatisticsResponse
     */
    public DescribeInstanceVulStatisticsResponse describeInstanceVulStatisticsWithOptions(DescribeInstanceVulStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeInstanceVulStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeInstanceVulStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeInstanceVulStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on the vulnerabilities that are detected on a serverless instance.</p>
     * 
     * @param request DescribeInstanceVulStatisticsRequest
     * @return DescribeInstanceVulStatisticsResponse
     */
    public DescribeInstanceVulStatisticsResponse describeInstanceVulStatistics(DescribeInstanceVulStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeInstanceVulStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of the last virus scan task.</p>
     * 
     * @param request DescribeLatestScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLatestScanTaskResponse
     */
    public DescribeLatestScanTaskResponse describeLatestScanTaskWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLatestScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLatestScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeLatestScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of the last virus scan task.</p>
     * @return DescribeLatestScanTaskResponse
     */
    public DescribeLatestScanTaskResponse describeLatestScanTask() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLatestScanTaskWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the log analysis feature provided by Security Center.</p>
     * 
     * @param request DescribeLogMetaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLogMetaResponse
     */
    public DescribeLogMetaResponse describeLogMetaWithOptions(DescribeLogMetaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLogMeta"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLogMetaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeLogMetaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the log analysis feature provided by Security Center.</p>
     * 
     * @param request DescribeLogMetaRequest
     * @return DescribeLogMetaResponse
     */
    public DescribeLogMetaResponse describeLogMeta(DescribeLogMetaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLogMetaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status information about the log analysis feature.</p>
     * 
     * @param request DescribeLogShipperStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLogShipperStatusResponse
     */
    public DescribeLogShipperStatusResponse describeLogShipperStatusWithOptions(DescribeLogShipperStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLogShipperStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLogShipperStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeLogShipperStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status information about the log analysis feature.</p>
     * 
     * @param request DescribeLogShipperStatusRequest
     * @return DescribeLogShipperStatusResponse
     */
    public DescribeLogShipperStatusResponse describeLogShipperStatus(DescribeLogShipperStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLogShipperStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the configurations that are used to detect unusual logons to your servers.</p>
     * 
     * @param request DescribeLoginBaseConfigsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLoginBaseConfigsResponse
     */
    public DescribeLoginBaseConfigsResponse describeLoginBaseConfigsWithOptions(DescribeLoginBaseConfigsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLoginBaseConfigs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLoginBaseConfigsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeLoginBaseConfigsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the configurations that are used to detect unusual logons to your servers.</p>
     * 
     * @param request DescribeLoginBaseConfigsRequest
     * @return DescribeLoginBaseConfigsResponse
     */
    public DescribeLoginBaseConfigsResponse describeLoginBaseConfigs(DescribeLoginBaseConfigsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLoginBaseConfigsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.</p>
     * 
     * @param request DescribeLoginSwitchConfigsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLoginSwitchConfigsResponse
     */
    public DescribeLoginSwitchConfigsResponse describeLoginSwitchConfigsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLoginSwitchConfigs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLoginSwitchConfigsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeLoginSwitchConfigsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.</p>
     * @return DescribeLoginSwitchConfigsResponse
     */
    public DescribeLoginSwitchConfigsResponse describeLoginSwitchConfigs() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLoginSwitchConfigsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the purchased log storage capacity.</p>
     * 
     * @param request DescribeLogstoreStorageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeLogstoreStorageResponse
     */
    public DescribeLogstoreStorageResponse describeLogstoreStorageWithOptions(DescribeLogstoreStorageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeLogstoreStorage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeLogstoreStorageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeLogstoreStorageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the purchased log storage capacity.</p>
     * 
     * @param request DescribeLogstoreStorageRequest
     * @return DescribeLogstoreStorageResponse
     */
    public DescribeLogstoreStorageResponse describeLogstoreStorage(DescribeLogstoreStorageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeLogstoreStorageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.</p>
     * 
     * @param request DescribeMachineCanRebootRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeMachineCanRebootResponse
     */
    public DescribeMachineCanRebootResponse describeMachineCanRebootWithOptions(DescribeMachineCanRebootRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeMachineCanReboot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeMachineCanRebootResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeMachineCanRebootResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.</p>
     * 
     * @param request DescribeMachineCanRebootRequest
     * @return DescribeMachineCanRebootResponse
     */
    public DescribeMachineCanRebootResponse describeMachineCanReboot(DescribeMachineCanRebootRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeMachineCanRebootWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of malicious image sample types.</p>
     * 
     * @param request DescribeMatchedMaliciousNamesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeMatchedMaliciousNamesResponse
     */
    public DescribeMatchedMaliciousNamesResponse describeMatchedMaliciousNamesWithOptions(DescribeMatchedMaliciousNamesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeMatchedMaliciousNames"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeMatchedMaliciousNamesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeMatchedMaliciousNamesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of malicious image sample types.</p>
     * 
     * @param request DescribeMatchedMaliciousNamesRequest
     * @return DescribeMatchedMaliciousNamesResponse
     */
    public DescribeMatchedMaliciousNamesResponse describeMatchedMaliciousNames(DescribeMatchedMaliciousNamesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeMatchedMaliciousNamesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the asset fingerprint module.</p>
     * 
     * @param request DescribeModuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeModuleConfigResponse
     */
    public DescribeModuleConfigResponse describeModuleConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeModuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeModuleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeModuleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the asset fingerprint module.</p>
     * @return DescribeModuleConfigResponse
     */
    public DescribeModuleConfigResponse describeModuleConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeModuleConfigWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of accounts that are added to the multi-account management feature as members.</p>
     * 
     * @param request DescribeMonitorAccountsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeMonitorAccountsResponse
     */
    public DescribeMonitorAccountsResponse describeMonitorAccountsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeMonitorAccounts"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeMonitorAccountsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeMonitorAccountsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of accounts that are added to the multi-account management feature as members.</p>
     * @return DescribeMonitorAccountsResponse
     */
    public DescribeMonitorAccountsResponse describeMonitorAccounts() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeMonitorAccountsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether slow queries need to be optimized.</p>
     * 
     * @param request DescribeNeedAsyncQueryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeNeedAsyncQueryResponse
     */
    public DescribeNeedAsyncQueryResponse describeNeedAsyncQueryWithOptions(DescribeNeedAsyncQueryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeNeedAsyncQuery"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeNeedAsyncQueryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeNeedAsyncQueryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether slow queries need to be optimized.</p>
     * 
     * @param request DescribeNeedAsyncQueryRequest
     * @return DescribeNeedAsyncQueryResponse
     */
    public DescribeNeedAsyncQueryResponse describeNeedAsyncQuery(DescribeNeedAsyncQueryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeNeedAsyncQueryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries notification settings.</p>
     * 
     * @param request DescribeNoticeConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeNoticeConfigResponse
     */
    public DescribeNoticeConfigResponse describeNoticeConfigWithOptions(DescribeNoticeConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeNoticeConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeNoticeConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeNoticeConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries notification settings.</p>
     * 
     * @param request DescribeNoticeConfigRequest
     * @return DescribeNoticeConfigResponse
     */
    public DescribeNoticeConfigResponse describeNoticeConfig(DescribeNoticeConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeNoticeConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an alert type.</p>
     * 
     * @param request DescribeNsasSuspEventTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeNsasSuspEventTypeResponse
     */
    public DescribeNsasSuspEventTypeResponse describeNsasSuspEventTypeWithOptions(DescribeNsasSuspEventTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.multiAccountActionType)) {
            query.put("MultiAccountActionType", request.multiAccountActionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeNsasSuspEventType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeNsasSuspEventTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeNsasSuspEventTypeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an alert type.</p>
     * 
     * @param request DescribeNsasSuspEventTypeRequest
     * @return DescribeNsasSuspEventTypeResponse
     */
    public DescribeNsasSuspEventTypeResponse describeNsasSuspEventType(DescribeNsasSuspEventTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeNsasSuspEventTypeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers whose Security Center agent status is Offline.</p>
     * 
     * @param request DescribeOfflineMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeOfflineMachinesResponse
     */
    public DescribeOfflineMachinesResponse describeOfflineMachinesWithOptions(DescribeOfflineMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIdStr)) {
            query.put("RegionIdStr", request.regionIdStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionNo)) {
            query.put("RegionNo", request.regionNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeOfflineMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeOfflineMachinesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeOfflineMachinesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers whose Security Center agent status is Offline.</p>
     * 
     * @param request DescribeOfflineMachinesRequest
     * @return DescribeOfflineMachinesResponse
     */
    public DescribeOfflineMachinesResponse describeOfflineMachines(DescribeOfflineMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeOfflineMachinesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries agent tasks.</p>
     * 
     * @param request DescribeOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeOnceTaskResponse
     */
    public DescribeOnceTaskResponse describeOnceTaskWithOptions(DescribeOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeQuery)) {
            query.put("EndTimeQuery", request.endTimeQuery);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTaskId)) {
            query.put("RootTaskId", request.rootTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeQuery)) {
            query.put("StartTimeQuery", request.startTimeQuery);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeOnceTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeOnceTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries agent tasks.</p>
     * 
     * @param request DescribeOnceTaskRequest
     * @return DescribeOnceTaskResponse
     */
    public DescribeOnceTaskResponse describeOnceTask(DescribeOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeOnceTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.</p>
     * 
     * @param request DescribeOnceTaskLeafRecordPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeOnceTaskLeafRecordPageResponse
     */
    public DescribeOnceTaskLeafRecordPageResponse describeOnceTaskLeafRecordPageWithOptions(DescribeOnceTaskLeafRecordPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.relateInfo)) {
            query.put("RelateInfo", request.relateInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeOnceTaskLeafRecordPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeOnceTaskLeafRecordPageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeOnceTaskLeafRecordPageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.</p>
     * 
     * @param request DescribeOnceTaskLeafRecordPageRequest
     * @return DescribeOnceTaskLeafRecordPageResponse
     */
    public DescribeOnceTaskLeafRecordPageResponse describeOnceTaskLeafRecordPage(DescribeOnceTaskLeafRecordPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeOnceTaskLeafRecordPageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.</p>
     * 
     * @param request DescribePropertyCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyCountResponse
     */
    public DescribePropertyCountResponse describePropertyCountWithOptions(DescribePropertyCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.</p>
     * 
     * @param request DescribePropertyCountRequest
     * @return DescribePropertyCountResponse
     */
    public DescribePropertyCountResponse describePropertyCount(DescribePropertyCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of scheduled tasks on the Host page.</p>
     * 
     * @param request DescribePropertyCronDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyCronDetailResponse
     */
    public DescribePropertyCronDetailResponse describePropertyCronDetailWithOptions(DescribePropertyCronDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyCronDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyCronDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyCronDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of scheduled tasks on the Host page.</p>
     * 
     * @param request DescribePropertyCronDetailRequest
     * @return DescribePropertyCronDetailResponse
     */
    public DescribePropertyCronDetailResponse describePropertyCronDetail(DescribePropertyCronDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyCronDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the scheduled tasks of your assets.</p>
     * 
     * @param request DescribePropertyCronItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyCronItemResponse
     */
    public DescribePropertyCronItemResponse describePropertyCronItemWithOptions(DescribePropertyCronItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyCronItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyCronItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyCronItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the scheduled tasks of your assets.</p>
     * 
     * @param request DescribePropertyCronItemRequest
     * @return DescribePropertyCronItemResponse
     */
    public DescribePropertyCronItemResponse describePropertyCronItem(DescribePropertyCronItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyCronItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the fingerprints of ports on a specified server.</p>
     * 
     * @param request DescribePropertyPortDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyPortDetailResponse
     */
    public DescribePropertyPortDetailResponse describePropertyPortDetailWithOptions(DescribePropertyPortDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindIp)) {
            query.put("BindIp", request.bindIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procName)) {
            query.put("ProcName", request.procName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyPortDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyPortDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyPortDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the fingerprints of ports on a specified server.</p>
     * 
     * @param request DescribePropertyPortDetailRequest
     * @return DescribePropertyPortDetailResponse
     */
    public DescribePropertyPortDetailResponse describePropertyPortDetail(DescribePropertyPortDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyPortDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about all ports.</p>
     * 
     * @param request DescribePropertyPortItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyPortItemResponse
     */
    public DescribePropertyPortItemResponse describePropertyPortItemWithOptions(DescribePropertyPortItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyPortItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyPortItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyPortItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about all ports.</p>
     * 
     * @param request DescribePropertyPortItemRequest
     * @return DescribePropertyPortItemResponse
     */
    public DescribePropertyPortItemResponse describePropertyPortItem(DescribePropertyPortItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyPortItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the fingerprints of processes on a specified server.</p>
     * 
     * @param request DescribePropertyProcDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyProcDetailResponse
     */
    public DescribePropertyProcDetailResponse describePropertyProcDetailWithOptions(DescribePropertyProcDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cmdline)) {
            query.put("Cmdline", request.cmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procTimeEnd)) {
            query.put("ProcTimeEnd", request.procTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procTimeStart)) {
            query.put("ProcTimeStart", request.procTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyProcDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyProcDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyProcDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the fingerprints of processes on a specified server.</p>
     * 
     * @param request DescribePropertyProcDetailRequest
     * @return DescribePropertyProcDetailResponse
     */
    public DescribePropertyProcDetailResponse describePropertyProcDetail(DescribePropertyProcDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyProcDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about all processes.</p>
     * 
     * @param request DescribePropertyProcItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyProcItemResponse
     */
    public DescribePropertyProcItemResponse describePropertyProcItemWithOptions(DescribePropertyProcItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyProcItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyProcItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyProcItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about all processes.</p>
     * 
     * @param request DescribePropertyProcItemRequest
     * @return DescribePropertyProcItemResponse
     */
    public DescribePropertyProcItemResponse describePropertyProcItem(DescribePropertyProcItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyProcItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries middleware fingerprints.</p>
     * 
     * @param request DescribePropertyScaDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyScaDetailResponse
     */
    public DescribePropertyScaDetailResponse describePropertyScaDetailWithOptions(DescribePropertyScaDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bizType)) {
            query.put("BizType", request.bizType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pid)) {
            query.put("Pid", request.pid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processStartedEnd)) {
            query.put("ProcessStartedEnd", request.processStartedEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processStartedStart)) {
            query.put("ProcessStartedStart", request.processStartedStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scaName)) {
            query.put("ScaName", request.scaName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scaNamePattern)) {
            query.put("ScaNamePattern", request.scaNamePattern);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scaVersion)) {
            query.put("ScaVersion", request.scaVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfo)) {
            query.put("SearchInfo", request.searchInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfoSub)) {
            query.put("SearchInfoSub", request.searchInfoSub);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItem)) {
            query.put("SearchItem", request.searchItem);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItemSub)) {
            query.put("SearchItemSub", request.searchItemSub);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyScaDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyScaDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyScaDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries middleware fingerprints.</p>
     * 
     * @param request DescribePropertyScaDetailRequest
     * @return DescribePropertyScaDetailResponse
     */
    public DescribePropertyScaDetailResponse describePropertyScaDetail(DescribePropertyScaDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyScaDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries middleware fingerprints.</p>
     * 
     * @param request DescribePropertyScaItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyScaItemResponse
     */
    public DescribePropertyScaItemResponse describePropertyScaItemWithOptions(DescribePropertyScaItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfo)) {
            query.put("SearchInfo", request.searchInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItem)) {
            query.put("SearchItem", request.searchItem);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyScaItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyScaItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyScaItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries middleware fingerprints.</p>
     * 
     * @param request DescribePropertyScaItemRequest
     * @return DescribePropertyScaItemResponse
     */
    public DescribePropertyScaItemResponse describePropertyScaItem(DescribePropertyScaItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyScaItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.</p>
     * 
     * @param request DescribePropertyScaProcessDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyScaProcessDetailResponse
     */
    public DescribePropertyScaProcessDetailResponse describePropertyScaProcessDetailWithOptions(DescribePropertyScaProcessDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bizType)) {
            query.put("BizType", request.bizType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cmdline)) {
            query.put("Cmdline", request.cmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pid)) {
            query.put("Pid", request.pid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyScaProcessDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyScaProcessDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyScaProcessDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.</p>
     * 
     * @param request DescribePropertyScaProcessDetailRequest
     * @return DescribePropertyScaProcessDetailResponse
     */
    public DescribePropertyScaProcessDetailResponse describePropertyScaProcessDetail(DescribePropertyScaProcessDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyScaProcessDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of scheduled tasks of asset fingerprint collection.</p>
     * 
     * @param request DescribePropertyScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyScheduleConfigResponse
     */
    public DescribePropertyScheduleConfigResponse describePropertyScheduleConfigWithOptions(DescribePropertyScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyScheduleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyScheduleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of scheduled tasks of asset fingerprint collection.</p>
     * 
     * @param request DescribePropertyScheduleConfigRequest
     * @return DescribePropertyScheduleConfigResponse
     */
    public DescribePropertyScheduleConfigResponse describePropertyScheduleConfig(DescribePropertyScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyScheduleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a software asset.</p>
     * 
     * @param request DescribePropertySoftwareDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertySoftwareDetailResponse
     */
    public DescribePropertySoftwareDetailResponse describePropertySoftwareDetailWithOptions(DescribePropertySoftwareDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.installTimeEnd)) {
            query.put("InstallTimeEnd", request.installTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.installTimeStart)) {
            query.put("InstallTimeStart", request.installTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.path)) {
            query.put("Path", request.path);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.softwareVersion)) {
            query.put("SoftwareVersion", request.softwareVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertySoftwareDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertySoftwareDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertySoftwareDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a software asset.</p>
     * 
     * @param request DescribePropertySoftwareDetailRequest
     * @return DescribePropertySoftwareDetailResponse
     */
    public DescribePropertySoftwareDetailResponse describePropertySoftwareDetail(DescribePropertySoftwareDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertySoftwareDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about all software assets.</p>
     * 
     * @param request DescribePropertySoftwareItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertySoftwareItemResponse
     */
    public DescribePropertySoftwareItemResponse describePropertySoftwareItemWithOptions(DescribePropertySoftwareItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertySoftwareItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertySoftwareItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertySoftwareItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about all software assets.</p>
     * 
     * @param request DescribePropertySoftwareItemRequest
     * @return DescribePropertySoftwareItemResponse
     */
    public DescribePropertySoftwareItemResponse describePropertySoftwareItem(DescribePropertySoftwareItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertySoftwareItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries middleware types.</p>
     * 
     * @param request DescribePropertyTypeScaItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyTypeScaItemResponse
     */
    public DescribePropertyTypeScaItemResponse describePropertyTypeScaItemWithOptions(DescribePropertyTypeScaItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyTypeScaItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyTypeScaItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyTypeScaItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries middleware types.</p>
     * 
     * @param request DescribePropertyTypeScaItemRequest
     * @return DescribePropertyTypeScaItemResponse
     */
    public DescribePropertyTypeScaItemResponse describePropertyTypeScaItem(DescribePropertyTypeScaItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyTypeScaItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>查询资产指纹用户创建时间统计</p>
     * 
     * @deprecated OpenAPI DescribePropertyUsageNewest is deprecated, please use Sas::2018-12-03::DescribeOnceTask instead.
     * 
     * @param request DescribePropertyUsageNewestRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyUsageNewestResponse
     */
    @Deprecated
    // Deprecated
    public DescribePropertyUsageNewestResponse describePropertyUsageNewestWithOptions(DescribePropertyUsageNewestRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyUsageNewest"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyUsageNewestResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyUsageNewestResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>查询资产指纹用户创建时间统计</p>
     * 
     * @deprecated OpenAPI DescribePropertyUsageNewest is deprecated, please use Sas::2018-12-03::DescribeOnceTask instead.
     * 
     * @param request DescribePropertyUsageNewestRequest
     * @return DescribePropertyUsageNewestResponse
     */
    @Deprecated
    // Deprecated
    public DescribePropertyUsageNewestResponse describePropertyUsageNewest(DescribePropertyUsageNewestRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyUsageNewestWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.</p>
     * 
     * @param request DescribePropertyUsageTopRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyUsageTopResponse
     */
    public DescribePropertyUsageTopResponse describePropertyUsageTopWithOptions(DescribePropertyUsageTopRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyUsageTop"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyUsageTopResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyUsageTopResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.</p>
     * 
     * @param request DescribePropertyUsageTopRequest
     * @return DescribePropertyUsageTopResponse
     */
    public DescribePropertyUsageTopResponse describePropertyUsageTop(DescribePropertyUsageTopRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyUsageTopWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the asset fingerprints for an account to which a server belongs.</p>
     * 
     * @param request DescribePropertyUserDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyUserDetailResponse
     */
    public DescribePropertyUserDetailResponse describePropertyUserDetailWithOptions(DescribePropertyUserDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.extend)) {
            query.put("Extend", request.extend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isRoot)) {
            query.put("IsRoot", request.isRoot);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastLoginTimeEnd)) {
            query.put("LastLoginTimeEnd", request.lastLoginTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastLoginTimeStart)) {
            query.put("LastLoginTimeStart", request.lastLoginTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyUserDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyUserDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyUserDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the asset fingerprints for an account to which a server belongs.</p>
     * 
     * @param request DescribePropertyUserDetailRequest
     * @return DescribePropertyUserDetailResponse
     */
    public DescribePropertyUserDetailResponse describePropertyUserDetail(DescribePropertyUserDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyUserDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about an account.</p>
     * 
     * @param request DescribePropertyUserItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribePropertyUserItemResponse
     */
    public DescribePropertyUserItemResponse describePropertyUserItemWithOptions(DescribePropertyUserItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.user)) {
            query.put("User", request.user);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribePropertyUserItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribePropertyUserItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribePropertyUserItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about an account.</p>
     * 
     * @param request DescribePropertyUserItemRequest
     * @return DescribePropertyUserItemResponse
     */
    public DescribePropertyUserItemResponse describePropertyUserItem(DescribePropertyUserItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describePropertyUserItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the download information about a quarantined file.</p>
     * 
     * @param request DescribeQuaraFileDownloadInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeQuaraFileDownloadInfoResponse
     */
    public DescribeQuaraFileDownloadInfoResponse describeQuaraFileDownloadInfoWithOptions(DescribeQuaraFileDownloadInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.quaraFileId)) {
            query.put("QuaraFileId", request.quaraFileId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeQuaraFileDownloadInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeQuaraFileDownloadInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeQuaraFileDownloadInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the download information about a quarantined file.</p>
     * 
     * @param request DescribeQuaraFileDownloadInfoRequest
     * @return DescribeQuaraFileDownloadInfoResponse
     */
    public DescribeQuaraFileDownloadInfoResponse describeQuaraFileDownloadInfo(DescribeQuaraFileDownloadInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeQuaraFileDownloadInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a report export task.</p>
     * 
     * @param request DescribeReportExportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeReportExportResponse
     */
    public DescribeReportExportResponse describeReportExportWithOptions(DescribeReportExportRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeReportExport"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeReportExportResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeReportExportResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a report export task.</p>
     * 
     * @param request DescribeReportExportRequest
     * @return DescribeReportExportResponse
     */
    public DescribeReportExportResponse describeReportExport(DescribeReportExportRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeReportExportWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.</p>
     * 
     * @param request DescribeReportRecipientStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeReportRecipientStatusResponse
     */
    public DescribeReportRecipientStatusResponse describeReportRecipientStatusWithOptions(DescribeReportRecipientStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.recipients)) {
            query.put("Recipients", request.recipients);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeReportRecipientStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeReportRecipientStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeReportRecipientStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.</p>
     * 
     * @param request DescribeReportRecipientStatusRequest
     * @return DescribeReportRecipientStatusResponse
     */
    public DescribeReportRecipientStatusResponse describeReportRecipientStatus(DescribeReportRecipientStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeReportRecipientStatusWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.</p>
     * <blockquote>
     * <p> After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see <a href="https://help.aliyun.com/document_detail/164781.html">Manage protection policies</a>.</p>
     * </blockquote>
     * 
     * <b>summary</b> : 
     * <p>Queries the details about restoration tasks.</p>
     * 
     * @param request DescribeRestoreJobsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRestoreJobsResponse
     */
    public DescribeRestoreJobsResponse describeRestoreJobsWithOptions(DescribeRestoreJobsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRestoreJobs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRestoreJobsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRestoreJobsResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.</p>
     * <blockquote>
     * <p> After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see <a href="https://help.aliyun.com/document_detail/164781.html">Manage protection policies</a>.</p>
     * </blockquote>
     * 
     * <b>summary</b> : 
     * <p>Queries the details about restoration tasks.</p>
     * 
     * @param request DescribeRestoreJobsRequest
     * @return DescribeRestoreJobsResponse
     */
    public DescribeRestoreJobsResponse describeRestoreJobs(DescribeRestoreJobsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRestoreJobsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries restoration tasks.</p>
     * 
     * @param request DescribeRestorePlansRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRestorePlansResponse
     */
    public DescribeRestorePlansResponse describeRestorePlansWithOptions(DescribeRestorePlansRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRestorePlans"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRestorePlansResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRestorePlansResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries restoration tasks.</p>
     * 
     * @param request DescribeRestorePlansRequest
     * @return DescribeRestorePlansResponse
     */
    public DescribeRestorePlansResponse describeRestorePlans(DescribeRestorePlansRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRestorePlansWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ListCheckInstanceResult operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.</p>
     * 
     * @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
     * 
     * @param request DescribeRiskCheckItemResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskCheckItemResultResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskCheckItemResultResponse describeRiskCheckItemResultWithOptions(DescribeRiskCheckItemResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.itemId)) {
            query.put("ItemId", request.itemId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskCheckItemResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskCheckItemResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRiskCheckItemResultResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ListCheckInstanceResult operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.</p>
     * 
     * @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
     * 
     * @param request DescribeRiskCheckItemResultRequest
     * @return DescribeRiskCheckItemResultResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskCheckItemResultResponse describeRiskCheckItemResult(DescribeRiskCheckItemResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskCheckItemResultWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the <a href="~~ListCheckResult~~">ListCheckResult</a> operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the check results of cloud service configurations by check item type or name.</p>
     * 
     * @deprecated OpenAPI DescribeRiskCheckResult is deprecated
     * 
     * @param request DescribeRiskCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskCheckResultResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskCheckResultResponse describeRiskCheckResultWithOptions(DescribeRiskCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.itemIds)) {
            query.put("ItemIds", request.itemIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.queryFlag)) {
            query.put("QueryFlag", request.queryFlag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskCheckResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRiskCheckResultResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the <a href="~~ListCheckResult~~">ListCheckResult</a> operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the check results of cloud service configurations by check item type or name.</p>
     * 
     * @deprecated OpenAPI DescribeRiskCheckResult is deprecated
     * 
     * @param request DescribeRiskCheckResultRequest
     * @return DescribeRiskCheckResultResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskCheckResultResponse describeRiskCheckResult(DescribeRiskCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskCheckResultWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the GetCheckSummary operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.</p>
     * 
     * @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
     * 
     * @param request DescribeRiskCheckSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskCheckSummaryResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskCheckSummaryResponse describeRiskCheckSummaryWithOptions(DescribeRiskCheckSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskCheckSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskCheckSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRiskCheckSummaryResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the GetCheckSummary operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.</p>
     * 
     * @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
     * 
     * @param request DescribeRiskCheckSummaryRequest
     * @return DescribeRiskCheckSummaryResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskCheckSummaryResponse describeRiskCheckSummary(DescribeRiskCheckSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskCheckSummaryWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ListCheckStandard operation instead.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the types of check items in configuration assessment.</p>
     * 
     * @deprecated OpenAPI DescribeRiskItemType is deprecated
     * 
     * @param request DescribeRiskItemTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskItemTypeResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskItemTypeResponse describeRiskItemTypeWithOptions(DescribeRiskItemTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskItemType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskItemTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRiskItemTypeResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ListCheckStandard operation instead.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the types of check items in configuration assessment.</p>
     * 
     * @deprecated OpenAPI DescribeRiskItemType is deprecated
     * 
     * @param request DescribeRiskItemTypeRequest
     * @return DescribeRiskItemTypeResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskItemTypeResponse describeRiskItemType(DescribeRiskItemTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskItemTypeWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.</p>
     * 
     * @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
     * 
     * @param request DescribeRiskListCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskListCheckResultResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskListCheckResultResponse describeRiskListCheckResultWithOptions(DescribeRiskListCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskListCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskListCheckResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRiskListCheckResultResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.</p>
     * 
     * @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
     * 
     * @param request DescribeRiskListCheckResultRequest
     * @return DescribeRiskListCheckResultResponse
     */
    @Deprecated
    // Deprecated
    public DescribeRiskListCheckResultResponse describeRiskListCheckResult(DescribeRiskListCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskListCheckResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries baseline types.</p>
     * 
     * @param request DescribeRiskTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRiskTypeResponse
     */
    public DescribeRiskTypeResponse describeRiskTypeWithOptions(DescribeRiskTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRiskType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRiskTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRiskTypeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries baseline types.</p>
     * 
     * @param request DescribeRiskTypeRequest
     * @return DescribeRiskTypeResponse
     */
    public DescribeRiskTypeResponse describeRiskType(DescribeRiskTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRiskTypeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about baselines based on baseline IDs or names.</p>
     * 
     * @param request DescribeRisksRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRisksResponse
     */
    public DescribeRisksResponse describeRisksWithOptions(DescribeRisksRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.limit)) {
            query.put("Limit", request.limit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskName)) {
            query.put("RiskName", request.riskName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeRisks"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeRisksResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeRisksResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about baselines based on baseline IDs or names.</p>
     * 
     * @param request DescribeRisksRequest
     * @return DescribeRisksResponse
     */
    public DescribeRisksResponse describeRisks(DescribeRisksRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeRisksWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.</p>
     * 
     * @param request DescribeSasPmAgentListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSasPmAgentListResponse
     */
    public DescribeSasPmAgentListResponse describeSasPmAgentListWithOptions(DescribeSasPmAgentListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSasPmAgentList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSasPmAgentListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSasPmAgentListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.</p>
     * 
     * @param request DescribeSasPmAgentListRequest
     * @return DescribeSasPmAgentListResponse
     */
    public DescribeSasPmAgentListResponse describeSasPmAgentList(DescribeSasPmAgentListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSasPmAgentListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a virus scan task.</p>
     * 
     * @param request DescribeScanTaskProgressRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeScanTaskProgressResponse
     */
    public DescribeScanTaskProgressResponse describeScanTaskProgressWithOptions(DescribeScanTaskProgressRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeScanTaskProgress"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeScanTaskProgressResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeScanTaskProgressResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a virus scan task.</p>
     * 
     * @param request DescribeScanTaskProgressRequest
     * @return DescribeScanTaskProgressResponse
     */
    public DescribeScanTaskProgressResponse describeScanTaskProgress(DescribeScanTaskProgressRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeScanTaskProgressWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of virus detection tasks.</p>
     * 
     * @param request DescribeScanTaskStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeScanTaskStatisticsResponse
     */
    public DescribeScanTaskStatisticsResponse describeScanTaskStatisticsWithOptions(DescribeScanTaskStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeScanTaskStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeScanTaskStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeScanTaskStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of virus detection tasks.</p>
     * 
     * @param request DescribeScanTaskStatisticsRequest
     * @return DescribeScanTaskStatisticsResponse
     */
    public DescribeScanTaskStatisticsResponse describeScanTaskStatistics(DescribeScanTaskStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeScanTaskStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the trends of the scores on the security dashboard.</p>
     * 
     * @param request DescribeScreenScoreThreadRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeScreenScoreThreadResponse
     */
    public DescribeScreenScoreThreadResponse describeScreenScoreThreadWithOptions(DescribeScreenScoreThreadRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeScreenScoreThread"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeScreenScoreThreadResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeScreenScoreThreadResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the trends of the scores on the security dashboard.</p>
     * 
     * @param request DescribeScreenScoreThreadRequest
     * @return DescribeScreenScoreThreadResponse
     */
    public DescribeScreenScoreThreadResponse describeScreenScoreThread(DescribeScreenScoreThreadRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeScreenScoreThreadWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the filter conditions that are used to search for assets.</p>
     * 
     * @param request DescribeSearchConditionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSearchConditionResponse
     */
    public DescribeSearchConditionResponse describeSearchConditionWithOptions(DescribeSearchConditionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSearchCondition"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSearchConditionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSearchConditionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the filter conditions that are used to search for assets.</p>
     * 
     * @param request DescribeSearchConditionRequest
     * @return DescribeSearchConditionResponse
     */
    public DescribeSearchConditionResponse describeSearchCondition(DescribeSearchConditionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSearchConditionWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries suggestions on how to handle the risks that affect the security score.</p>
     * 
     * @param request DescribeSecureSuggestionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecureSuggestionResponse
     */
    public DescribeSecureSuggestionResponse describeSecureSuggestionWithOptions(DescribeSecureSuggestionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecureSuggestion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecureSuggestionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSecureSuggestionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries suggestions on how to handle the risks that affect the security score.</p>
     * 
     * @param request DescribeSecureSuggestionRequest
     * @return DescribeSecureSuggestionResponse
     */
    public DescribeSecureSuggestionResponse describeSecureSuggestion(DescribeSecureSuggestionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecureSuggestionWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the GetCheckConfig operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.</p>
     * 
     * @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
     * 
     * @param request DescribeSecurityCheckScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityCheckScheduleConfigResponse
     */
    @Deprecated
    // Deprecated
    public DescribeSecurityCheckScheduleConfigResponse describeSecurityCheckScheduleConfigWithOptions(DescribeSecurityCheckScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityCheckScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityCheckScheduleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSecurityCheckScheduleConfigResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the GetCheckConfig operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.</p>
     * 
     * @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
     * 
     * @param request DescribeSecurityCheckScheduleConfigRequest
     * @return DescribeSecurityCheckScheduleConfigResponse
     */
    @Deprecated
    // Deprecated
    public DescribeSecurityCheckScheduleConfigResponse describeSecurityCheckScheduleConfig(DescribeSecurityCheckScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityCheckScheduleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of whitelist rules.</p>
     * 
     * @param request DescribeSecurityEventMarkMissListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityEventMarkMissListResponse
     */
    public DescribeSecurityEventMarkMissListResponse describeSecurityEventMarkMissListWithOptions(DescribeSecurityEventMarkMissListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityEventMarkMissList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityEventMarkMissListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSecurityEventMarkMissListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of whitelist rules.</p>
     * 
     * @param request DescribeSecurityEventMarkMissListRequest
     * @return DescribeSecurityEventMarkMissListResponse
     */
    public DescribeSecurityEventMarkMissListResponse describeSecurityEventMarkMissList(DescribeSecurityEventMarkMissListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityEventMarkMissListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.</p>
     * 
     * @param request DescribeSecurityEventOperationStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityEventOperationStatusResponse
     */
    public DescribeSecurityEventOperationStatusResponse describeSecurityEventOperationStatusWithOptions(DescribeSecurityEventOperationStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityEventOperationStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityEventOperationStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSecurityEventOperationStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.</p>
     * 
     * @param request DescribeSecurityEventOperationStatusRequest
     * @return DescribeSecurityEventOperationStatusResponse
     */
    public DescribeSecurityEventOperationStatusResponse describeSecurityEventOperationStatus(DescribeSecurityEventOperationStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityEventOperationStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the operations that you can perform to handle an alert.</p>
     * 
     * @param request DescribeSecurityEventOperationsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityEventOperationsResponse
     */
    public DescribeSecurityEventOperationsResponse describeSecurityEventOperationsWithOptions(DescribeSecurityEventOperationsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityEventOperations"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityEventOperationsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSecurityEventOperationsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the operations that you can perform to handle an alert.</p>
     * 
     * @param request DescribeSecurityEventOperationsRequest
     * @return DescribeSecurityEventOperationsResponse
     */
    public DescribeSecurityEventOperationsResponse describeSecurityEventOperations(DescribeSecurityEventOperationsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityEventOperationsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.</p>
     * 
     * @param request DescribeSecurityStatInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSecurityStatInfoResponse
     */
    public DescribeSecurityStatInfoResponse describeSecurityStatInfoWithOptions(DescribeSecurityStatInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSecurityStatInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSecurityStatInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSecurityStatInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.</p>
     * 
     * @param request DescribeSecurityStatInfoRequest
     * @return DescribeSecurityStatInfoResponse
     */
    public DescribeSecurityStatInfoResponse describeSecurityStatInfo(DescribeSecurityStatInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSecurityStatInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether a service-linked role is created for Security Center.</p>
     * 
     * @param request DescribeServiceLinkedRoleStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeServiceLinkedRoleStatusResponse
     */
    public DescribeServiceLinkedRoleStatusResponse describeServiceLinkedRoleStatusWithOptions(DescribeServiceLinkedRoleStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.serviceLinkedRole)) {
            query.put("ServiceLinkedRole", request.serviceLinkedRole);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeServiceLinkedRoleStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeServiceLinkedRoleStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeServiceLinkedRoleStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether a service-linked role is created for Security Center.</p>
     * 
     * @param request DescribeServiceLinkedRoleStatusRequest
     * @return DescribeServiceLinkedRoleStatusResponse
     */
    public DescribeServiceLinkedRoleStatusResponse describeServiceLinkedRoleStatus(DescribeServiceLinkedRoleStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeServiceLinkedRoleStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.</p>
     * 
     * @param request DescribeSimilarEventScenariosRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSimilarEventScenariosResponse
     */
    public DescribeSimilarEventScenariosResponse describeSimilarEventScenariosWithOptions(DescribeSimilarEventScenariosRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSimilarEventScenarios"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSimilarEventScenariosResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSimilarEventScenariosResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.</p>
     * 
     * @param request DescribeSimilarEventScenariosRequest
     * @return DescribeSimilarEventScenariosResponse
     */
    public DescribeSimilarEventScenariosResponse describeSimilarEventScenarios(DescribeSimilarEventScenariosRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSimilarEventScenariosWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries alert events that are triggered by the same rule or of the same alert type.</p>
     * 
     * @param request DescribeSimilarSecurityEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSimilarSecurityEventsResponse
     */
    public DescribeSimilarSecurityEventsResponse describeSimilarSecurityEventsWithOptions(DescribeSimilarSecurityEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSimilarSecurityEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSimilarSecurityEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSimilarSecurityEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries alert events that are triggered by the same rule or of the same alert type.</p>
     * 
     * @param request DescribeSimilarSecurityEventsRequest
     * @return DescribeSimilarSecurityEventsResponse
     */
    public DescribeSimilarSecurityEventsResponse describeSimilarSecurityEvents(DescribeSimilarSecurityEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSimilarSecurityEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the backup snapshots that are created for anti-ransomware.</p>
     * 
     * @param request DescribeSnapshotsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSnapshotsResponse
     */
    public DescribeSnapshotsResponse describeSnapshotsWithOptions(DescribeSnapshotsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.apiVersion)) {
            query.put("ApiVersion", request.apiVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isAliYunEcs)) {
            query.put("IsAliYunEcs", request.isAliYunEcs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRegion)) {
            query.put("MachineRegion", request.machineRegion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSnapshots"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSnapshotsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSnapshotsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the backup snapshots that are created for anti-ransomware.</p>
     * 
     * @param request DescribeSnapshotsRequest
     * @return DescribeSnapshotsResponse
     */
    public DescribeSnapshotsResponse describeSnapshots(DescribeSnapshotsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSnapshotsWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Query the execution details of a remediation task playbook</p>
     * 
     * @param request DescribeSoarPlaybookTaskDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarPlaybookTaskDetailResponse
     */
    public DescribeSoarPlaybookTaskDetailResponse describeSoarPlaybookTaskDetailWithOptions(DescribeSoarPlaybookTaskDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.playbookId)) {
            query.put("PlaybookId", request.playbookId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.recordId)) {
            query.put("RecordId", request.recordId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestUuid)) {
            query.put("RequestUuid", request.requestUuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarPlaybookTaskDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarPlaybookTaskDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarPlaybookTaskDetailResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Query the execution details of a remediation task playbook</p>
     * 
     * @param request DescribeSoarPlaybookTaskDetailRequest
     * @return DescribeSoarPlaybookTaskDetailResponse
     */
    public DescribeSoarPlaybookTaskDetailResponse describeSoarPlaybookTaskDetail(DescribeSoarPlaybookTaskDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarPlaybookTaskDetailWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the policy templates on the Playbook page.</p>
     * 
     * @param request DescribeSoarStrategiesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarStrategiesResponse
     */
    public DescribeSoarStrategiesResponse describeSoarStrategiesWithOptions(DescribeSoarStrategiesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarStrategies"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarStrategiesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarStrategiesResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the policy templates on the Playbook page.</p>
     * 
     * @param request DescribeSoarStrategiesRequest
     * @return DescribeSoarStrategiesResponse
     */
    public DescribeSoarStrategiesResponse describeSoarStrategies(DescribeSoarStrategiesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarStrategiesWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the parameters of a policy on the Playbook page.</p>
     * 
     * @param request DescribeSoarStrategyParamRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarStrategyParamResponse
     */
    public DescribeSoarStrategyParamResponse describeSoarStrategyParamWithOptions(DescribeSoarStrategyParamRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarStrategyParam"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarStrategyParamResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarStrategyParamResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the parameters of a policy on the Playbook page.</p>
     * 
     * @param request DescribeSoarStrategyParamRequest
     * @return DescribeSoarStrategyParamResponse
     */
    public DescribeSoarStrategyParamResponse describeSoarStrategyParam(DescribeSoarStrategyParamRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarStrategyParamWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.</p>
     * 
     * @param request DescribeSoarStrategyTaskDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarStrategyTaskDetailResponse
     */
    public DescribeSoarStrategyTaskDetailResponse describeSoarStrategyTaskDetailWithOptions(DescribeSoarStrategyTaskDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTaskId)) {
            query.put("StrategyTaskId", request.strategyTaskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarStrategyTaskDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarStrategyTaskDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarStrategyTaskDetailResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.</p>
     * 
     * @param request DescribeSoarStrategyTaskDetailRequest
     * @return DescribeSoarStrategyTaskDetailResponse
     */
    public DescribeSoarStrategyTaskDetailResponse describeSoarStrategyTaskDetail(DescribeSoarStrategyTaskDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarStrategyTaskDetailWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Get the input parameters for a specific task</p>
     * 
     * @param request DescribeSoarStrategyTaskParamsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarStrategyTaskParamsResponse
     */
    public DescribeSoarStrategyTaskParamsResponse describeSoarStrategyTaskParamsWithOptions(DescribeSoarStrategyTaskParamsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarStrategyTaskParams"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarStrategyTaskParamsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarStrategyTaskParamsResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Get the input parameters for a specific task</p>
     * 
     * @param request DescribeSoarStrategyTaskParamsRequest
     * @return DescribeSoarStrategyTaskParamsResponse
     */
    public DescribeSoarStrategyTaskParamsResponse describeSoarStrategyTaskParams(DescribeSoarStrategyTaskParamsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarStrategyTaskParamsWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Get the list of task execution results</p>
     * 
     * @param request DescribeSoarStrategyTaskResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarStrategyTaskResultResponse
     */
    public DescribeSoarStrategyTaskResultResponse describeSoarStrategyTaskResultWithOptions(DescribeSoarStrategyTaskResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarStrategyTaskResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarStrategyTaskResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarStrategyTaskResultResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Get the list of task execution results</p>
     * 
     * @param request DescribeSoarStrategyTaskResultRequest
     * @return DescribeSoarStrategyTaskResultResponse
     */
    public DescribeSoarStrategyTaskResultResponse describeSoarStrategyTaskResult(DescribeSoarStrategyTaskResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarStrategyTaskResultWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of policy tasks on the Playbook page.</p>
     * 
     * @param request DescribeSoarStrategyTasksRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarStrategyTasksResponse
     */
    public DescribeSoarStrategyTasksResponse describeSoarStrategyTasksWithOptions(DescribeSoarStrategyTasksRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarStrategyTasks"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarStrategyTasksResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarStrategyTasksResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of policy tasks on the Playbook page.</p>
     * 
     * @param request DescribeSoarStrategyTasksRequest
     * @return DescribeSoarStrategyTasksResponse
     */
    public DescribeSoarStrategyTasksResponse describeSoarStrategyTasks(DescribeSoarStrategyTasksRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarStrategyTasksWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of policies created on the Playbook page of Security Center.</p>
     * 
     * @param request DescribeSoarSubscribedStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSoarSubscribedStrategyResponse
     */
    public DescribeSoarSubscribedStrategyResponse describeSoarSubscribedStrategyWithOptions(DescribeSoarSubscribedStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pageNumber)) {
            query.put("PageNumber", request.pageNumber);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSoarSubscribedStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSoarSubscribedStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSoarSubscribedStrategyResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of policies created on the Playbook page of Security Center.</p>
     * 
     * @param request DescribeSoarSubscribedStrategyRequest
     * @return DescribeSoarSubscribedStrategyResponse
     */
    public DescribeSoarSubscribedStrategyResponse describeSoarSubscribedStrategy(DescribeSoarSubscribedStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSoarSubscribedStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about baseline check policies.</p>
     * 
     * @param request DescribeStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyResponse
     */
    public DescribeStrategyResponse describeStrategyWithOptions(DescribeStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.customType)) {
            query.put("CustomType", request.customType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyIds)) {
            query.put("StrategyIds", request.strategyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about baseline check policies.</p>
     * 
     * @param request DescribeStrategyRequest
     * @return DescribeStrategyResponse
     */
    public DescribeStrategyResponse describeStrategy(DescribeStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a baseline check policy.</p>
     * 
     * @param request DescribeStrategyDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyDetailResponse
     */
    public DescribeStrategyDetailResponse describeStrategyDetailWithOptions(DescribeStrategyDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategyDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeStrategyDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a baseline check policy.</p>
     * 
     * @param request DescribeStrategyDetailRequest
     * @return DescribeStrategyDetailResponse
     */
    public DescribeStrategyDetailResponse describeStrategyDetail(DescribeStrategyDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the results of the last baseline check by using a specified baseline check policy.</p>
     * 
     * @param request DescribeStrategyExecDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyExecDetailResponse
     */
    public DescribeStrategyExecDetailResponse describeStrategyExecDetailWithOptions(DescribeStrategyExecDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategyExecDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyExecDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeStrategyExecDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the results of the last baseline check by using a specified baseline check policy.</p>
     * 
     * @param request DescribeStrategyExecDetailRequest
     * @return DescribeStrategyExecDetailResponse
     */
    public DescribeStrategyExecDetailResponse describeStrategyExecDetail(DescribeStrategyExecDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyExecDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the assets to which a baseline check policy is applied.</p>
     * 
     * @param request DescribeStrategyTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrategyTargetResponse
     */
    public DescribeStrategyTargetResponse describeStrategyTargetWithOptions(DescribeStrategyTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrategyTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrategyTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeStrategyTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the assets to which a baseline check policy is applied.</p>
     * 
     * @param request DescribeStrategyTargetRequest
     * @return DescribeStrategyTargetResponse
     */
    public DescribeStrategyTargetResponse describeStrategyTarget(DescribeStrategyTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrategyTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Strict mode supports alarm queries</p>
     * 
     * @param request DescribeStrictEventNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeStrictEventNameResponse
     */
    public DescribeStrictEventNameResponse describeStrictEventNameWithOptions(DescribeStrictEventNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeStrictEventName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeStrictEventNameResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeStrictEventNameResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Strict mode supports alarm queries</p>
     * 
     * @param request DescribeStrictEventNameRequest
     * @return DescribeStrictEventNameResponse
     */
    public DescribeStrictEventNameResponse describeStrictEventName(DescribeStrictEventNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeStrictEventNameWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.</p>
     * 
     * @param request DescribeSummaryInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSummaryInfoResponse
     */
    public DescribeSummaryInfoResponse describeSummaryInfoWithOptions(DescribeSummaryInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSummaryInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSummaryInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSummaryInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.</p>
     * 
     * @param request DescribeSummaryInfoRequest
     * @return DescribeSummaryInfoResponse
     */
    public DescribeSummaryInfoResponse describeSummaryInfo(DescribeSummaryInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSummaryInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the time when a system vulnerability was last detected.</p>
     * 
     * @param request DescribeSupervisonInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSupervisonInfoResponse
     */
    public DescribeSupervisonInfoResponse describeSupervisonInfoWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSupervisonInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSupervisonInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSupervisonInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the time when a system vulnerability was last detected.</p>
     * @return DescribeSupervisonInfoResponse
     */
    public DescribeSupervisonInfoResponse describeSupervisonInfo() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSupervisonInfoWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the regions in which the anti-ransomware feature is supported.</p>
     * 
     * @param request DescribeSupportRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSupportRegionResponse
     */
    public DescribeSupportRegionResponse describeSupportRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSupportRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSupportRegionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSupportRegionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the regions in which the anti-ransomware feature is supported.</p>
     * @return DescribeSupportRegionResponse
     */
    public DescribeSupportRegionResponse describeSupportRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSupportRegionWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.</p>
     * 
     * @param request DescribeSuspEventDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventDetailResponse
     */
    public DescribeSuspEventDetailResponse describeSuspEventDetailWithOptions(DescribeSuspEventDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.suspiciousEventId)) {
            query.put("SuspiciousEventId", request.suspiciousEventId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSuspEventDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.</p>
     * 
     * @param request DescribeSuspEventDetailRequest
     * @return DescribeSuspEventDetailResponse
     */
    public DescribeSuspEventDetailResponse describeSuspEventDetail(DescribeSuspEventDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an export task of exceptions.</p>
     * 
     * @param request DescribeSuspEventExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventExportInfoResponse
     */
    public DescribeSuspEventExportInfoResponse describeSuspEventExportInfoWithOptions(DescribeSuspEventExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventExportInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSuspEventExportInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an export task of exceptions.</p>
     * 
     * @param request DescribeSuspEventExportInfoRequest
     * @return DescribeSuspEventExportInfoResponse
     */
    public DescribeSuspEventExportInfoResponse describeSuspEventExportInfo(DescribeSuspEventExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventExportInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries quarantined files by page.</p>
     * 
     * @param request DescribeSuspEventQuaraFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventQuaraFilesResponse
     */
    public DescribeSuspEventQuaraFilesResponse describeSuspEventQuaraFilesWithOptions(DescribeSuspEventQuaraFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupingId)) {
            query.put("GroupingId", request.groupingId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.quaraTag)) {
            query.put("QuaraTag", request.quaraTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventQuaraFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventQuaraFilesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSuspEventQuaraFilesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries quarantined files by page.</p>
     * 
     * @param request DescribeSuspEventQuaraFilesRequest
     * @return DescribeSuspEventQuaraFilesResponse
     */
    public DescribeSuspEventQuaraFilesResponse describeSuspEventQuaraFiles(DescribeSuspEventQuaraFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventQuaraFilesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the user settings for exceptions.</p>
     * 
     * @param request DescribeSuspEventUserSettingRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventUserSettingResponse
     */
    public DescribeSuspEventUserSettingResponse describeSuspEventUserSettingWithOptions(DescribeSuspEventUserSettingRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEventUserSetting"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventUserSettingResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSuspEventUserSettingResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the user settings for exceptions.</p>
     * 
     * @param request DescribeSuspEventUserSettingRequest
     * @return DescribeSuspEventUserSettingResponse
     */
    public DescribeSuspEventUserSettingResponse describeSuspEventUserSetting(DescribeSuspEventUserSettingRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventUserSettingWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of alert events that are generated without aggregation.</p>
     * 
     * @param tmpReq DescribeSuspEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspEventsResponse
     */
    public DescribeSuspEventsResponse describeSuspEventsWithOptions(DescribeSuspEventsRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        DescribeSuspEventsShrinkRequest request = new DescribeSuspEventsShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.sourceAliUids)) {
            request.sourceAliUidsShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.sourceAliUids, "SourceAliUids", "simple");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmUniqueInfo)) {
            query.put("AlarmUniqueInfo", request.alarmUniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assetsTypeList)) {
            query.put("AssetsTypeList", request.assetsTypeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventNames)) {
            query.put("EventNames", request.eventNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.multiAccountActionType)) {
            query.put("MultiAccountActionType", request.multiAccountActionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateErrorCodeList)) {
            query.put("OperateErrorCodeList", request.operateErrorCodeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateTimeEnd)) {
            query.put("OperateTimeEnd", request.operateTimeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateTimeStart)) {
            query.put("OperateTimeStart", request.operateTimeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentEventTypes)) {
            query.put("ParentEventTypes", request.parentEventTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortColumn)) {
            query.put("SortColumn", request.sortColumn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortType)) {
            query.put("SortType", request.sortType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceAliUidsShrink)) {
            query.put("SourceAliUids", request.sourceAliUidsShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strictMode)) {
            query.put("StrictMode", request.strictMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniqueInfo)) {
            query.put("UniqueInfo", request.uniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tacticId)) {
            body.put("TacticId", request.tacticId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSuspEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of alert events that are generated without aggregation.</p>
     * 
     * @param request DescribeSuspEventsRequest
     * @return DescribeSuspEventsResponse
     */
    public DescribeSuspEventsResponse describeSuspEvents(DescribeSuspEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configuration of a specified feature.</p>
     * 
     * @param request DescribeSuspiciousOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspiciousOverallConfigResponse
     */
    public DescribeSuspiciousOverallConfigResponse describeSuspiciousOverallConfigWithOptions(DescribeSuspiciousOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspiciousOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspiciousOverallConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSuspiciousOverallConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configuration of a specified feature.</p>
     * 
     * @param request DescribeSuspiciousOverallConfigRequest
     * @return DescribeSuspiciousOverallConfigResponse
     */
    public DescribeSuspiciousOverallConfigResponse describeSuspiciousOverallConfig(DescribeSuspiciousOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspiciousOverallConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the UUIDs of servers on which proactive defense of a specified type takes effect.</p>
     * 
     * @param request DescribeSuspiciousUUIDConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSuspiciousUUIDConfigResponse
     */
    public DescribeSuspiciousUUIDConfigResponse describeSuspiciousUUIDConfigWithOptions(DescribeSuspiciousUUIDConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSuspiciousUUIDConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSuspiciousUUIDConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSuspiciousUUIDConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the UUIDs of servers on which proactive defense of a specified type takes effect.</p>
     * 
     * @param request DescribeSuspiciousUUIDConfigRequest
     * @return DescribeSuspiciousUUIDConfigResponse
     */
    public DescribeSuspiciousUUIDConfigResponse describeSuspiciousUUIDConfig(DescribeSuspiciousUUIDConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSuspiciousUUIDConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of IDC scan tasks.</p>
     * 
     * @param request DescribeSyncAssetTaskListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSyncAssetTaskListResponse
     */
    public DescribeSyncAssetTaskListResponse describeSyncAssetTaskListWithOptions(DescribeSyncAssetTaskListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSyncAssetTaskList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSyncAssetTaskListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSyncAssetTaskListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of IDC scan tasks.</p>
     * 
     * @param request DescribeSyncAssetTaskListRequest
     * @return DescribeSyncAssetTaskListResponse
     */
    public DescribeSyncAssetTaskListResponse describeSyncAssetTaskList(DescribeSyncAssetTaskListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSyncAssetTaskListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an IDC scan task.</p>
     * 
     * @param request DescribeSyncAssetTaskLogDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeSyncAssetTaskLogDetailResponse
     */
    public DescribeSyncAssetTaskLogDetailResponse describeSyncAssetTaskLogDetailWithOptions(DescribeSyncAssetTaskLogDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTaskId)) {
            query.put("RootTaskId", request.rootTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeSyncAssetTaskLogDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeSyncAssetTaskLogDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeSyncAssetTaskLogDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an IDC scan task.</p>
     * 
     * @param request DescribeSyncAssetTaskLogDetailRequest
     * @return DescribeSyncAssetTaskLogDetailResponse
     */
    public DescribeSyncAssetTaskLogDetailResponse describeSyncAssetTaskLogDetail(DescribeSyncAssetTaskLogDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeSyncAssetTaskLogDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers on which vulnerability scan is enabled.</p>
     * 
     * @param request DescribeTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTargetResponse
     */
    public DescribeTargetResponse describeTargetWithOptions(DescribeTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers on which vulnerability scan is enabled.</p>
     * 
     * @param request DescribeTargetRequest
     * @return DescribeTargetResponse
     */
    public DescribeTargetResponse describeTarget(DescribeTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the error logs on a task that failed to fix image vulnerabilities.</p>
     * 
     * @param request DescribeTaskErrorLogRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTaskErrorLogResponse
     */
    public DescribeTaskErrorLogResponse describeTaskErrorLogWithOptions(DescribeTaskErrorLogRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.buildTaskId)) {
            query.put("BuildTaskId", request.buildTaskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTaskErrorLog"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTaskErrorLogResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeTaskErrorLogResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the error logs on a task that failed to fix image vulnerabilities.</p>
     * 
     * @param request DescribeTaskErrorLogRequest
     * @return DescribeTaskErrorLogResponse
     */
    public DescribeTaskErrorLogResponse describeTaskErrorLog(DescribeTaskErrorLogRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTaskErrorLogWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries event statistics.</p>
     * 
     * @param request DescribeTotalStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTotalStatisticsResponse
     */
    public DescribeTotalStatisticsResponse describeTotalStatisticsWithOptions(DescribeTotalStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTotalStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTotalStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeTotalStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries event statistics.</p>
     * 
     * @param request DescribeTotalStatisticsRequest
     * @return DescribeTotalStatisticsResponse
     */
    public DescribeTotalStatisticsResponse describeTotalStatistics(DescribeTotalStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTotalStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the trace information about alerts.</p>
     * 
     * @param request DescribeTraceInfoDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTraceInfoDetailResponse
     */
    public DescribeTraceInfoDetailResponse describeTraceInfoDetailWithOptions(DescribeTraceInfoDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incidentTime)) {
            query.put("IncidentTime", request.incidentTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            query.put("VertexId", request.vertexId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTraceInfoDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTraceInfoDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeTraceInfoDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the trace information about alerts.</p>
     * 
     * @param request DescribeTraceInfoDetailRequest
     * @return DescribeTraceInfoDetailResponse
     */
    public DescribeTraceInfoDetailResponse describeTraceInfoDetail(DescribeTraceInfoDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTraceInfoDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a trace node.</p>
     * 
     * @param request DescribeTraceInfoNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeTraceInfoNodeResponse
     */
    public DescribeTraceInfoNodeResponse describeTraceInfoNodeWithOptions(DescribeTraceInfoNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incidentTime)) {
            query.put("IncidentTime", request.incidentTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            query.put("VertexId", request.vertexId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeTraceInfoNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeTraceInfoNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeTraceInfoNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a trace node.</p>
     * 
     * @param request DescribeTraceInfoNodeRequest
     * @return DescribeTraceInfoNodeResponse
     */
    public DescribeTraceInfoNodeResponse describeTraceInfoNode(DescribeTraceInfoNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeTraceInfoNodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about databases for which anti-ransomware policies are created.</p>
     * 
     * @param request DescribeUniBackupDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniBackupDatabaseResponse
     */
    public DescribeUniBackupDatabaseResponse describeUniBackupDatabaseWithOptions(DescribeUniBackupDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.databaseType)) {
            query.put("DatabaseType", request.databaseType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.queryType)) {
            query.put("QueryType", request.queryType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniBackupDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniBackupDatabaseResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUniBackupDatabaseResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about databases for which anti-ransomware policies are created.</p>
     * 
     * @param request DescribeUniBackupDatabaseRequest
     * @return DescribeUniBackupDatabaseResponse
     */
    public DescribeUniBackupDatabaseResponse describeUniBackupDatabase(DescribeUniBackupDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniBackupDatabaseWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the anti-ransomware policies that are created for databases.</p>
     * 
     * @param request DescribeUniBackupPoliciesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniBackupPoliciesResponse
     */
    public DescribeUniBackupPoliciesResponse describeUniBackupPoliciesWithOptions(DescribeUniBackupPoliciesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyName)) {
            query.put("PolicyName", request.policyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniBackupPolicies"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniBackupPoliciesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUniBackupPoliciesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the anti-ransomware policies that are created for databases.</p>
     * 
     * @param request DescribeUniBackupPoliciesRequest
     * @return DescribeUniBackupPoliciesResponse
     */
    public DescribeUniBackupPoliciesResponse describeUniBackupPolicies(DescribeUniBackupPoliciesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniBackupPoliciesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an anti-ransomware policy for databases.</p>
     * 
     * @param request DescribeUniBackupPolicyDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniBackupPolicyDetailResponse
     */
    public DescribeUniBackupPolicyDetailResponse describeUniBackupPolicyDetailWithOptions(DescribeUniBackupPolicyDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniBackupPolicyDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniBackupPolicyDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUniBackupPolicyDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an anti-ransomware policy for databases.</p>
     * 
     * @param request DescribeUniBackupPolicyDetailRequest
     * @return DescribeUniBackupPolicyDetailResponse
     */
    public DescribeUniBackupPolicyDetailResponse describeUniBackupPolicyDetail(DescribeUniBackupPolicyDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniBackupPolicyDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on backups based on anti-ransomware policies.</p>
     * 
     * @param request DescribeUniBackupStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniBackupStatisticsResponse
     */
    public DescribeUniBackupStatisticsResponse describeUniBackupStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniBackupStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniBackupStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUniBackupStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on backups based on anti-ransomware policies.</p>
     * @return DescribeUniBackupStatisticsResponse
     */
    public DescribeUniBackupStatisticsResponse describeUniBackupStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniBackupStatisticsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the backup snapshots from which the data of a database can be restored.</p>
     * 
     * @param request DescribeUniRecoverableListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniRecoverableListResponse
     */
    public DescribeUniRecoverableListResponse describeUniRecoverableListWithOptions(DescribeUniRecoverableListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.database)) {
            query.put("Database", request.database);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniRecoverableList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniRecoverableListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUniRecoverableListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the backup snapshots from which the data of a database can be restored.</p>
     * 
     * @param request DescribeUniRecoverableListRequest
     * @return DescribeUniRecoverableListResponse
     */
    public DescribeUniRecoverableListResponse describeUniRecoverableList(DescribeUniRecoverableListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniRecoverableListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the region that is supported by anti-ransomware for databases.</p>
     * 
     * @param request DescribeUniSupportRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUniSupportRegionResponse
     */
    public DescribeUniSupportRegionResponse describeUniSupportRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUniSupportRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUniSupportRegionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUniSupportRegionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the region that is supported by anti-ransomware for databases.</p>
     * @return DescribeUniSupportRegionResponse
     */
    public DescribeUniSupportRegionResponse describeUniSupportRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUniSupportRegionWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers to which an anti-ransomware policy is applied.</p>
     * 
     * @param request DescribeUserBackupMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUserBackupMachinesResponse
     */
    public DescribeUserBackupMachinesResponse describeUserBackupMachinesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUserBackupMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUserBackupMachinesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUserBackupMachinesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers to which an anti-ransomware policy is applied.</p>
     * @return DescribeUserBackupMachinesResponse
     */
    public DescribeUserBackupMachinesResponse describeUserBackupMachines() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUserBackupMachinesWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>The source IP address of the request.</p>
     * 
     * @param request DescribeUserBaselineAuthorizationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUserBaselineAuthorizationResponse
     */
    public DescribeUserBaselineAuthorizationResponse describeUserBaselineAuthorizationWithOptions(DescribeUserBaselineAuthorizationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUserBaselineAuthorization"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUserBaselineAuthorizationResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUserBaselineAuthorizationResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>The source IP address of the request.</p>
     * 
     * @param request DescribeUserBaselineAuthorizationRequest
     * @return DescribeUserBaselineAuthorizationResponse
     */
    public DescribeUserBaselineAuthorizationResponse describeUserBaselineAuthorization(DescribeUserBaselineAuthorizationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUserBaselineAuthorizationWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the settings of a custom baseline check policy.</p>
     * 
     * @param request DescribeUserSettingRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUserSettingResponse
     */
    public DescribeUserSettingResponse describeUserSettingWithOptions(DescribeUserSettingRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUserSetting"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUserSettingResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUserSettingResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the settings of a custom baseline check policy.</p>
     * 
     * @param request DescribeUserSettingRequest
     * @return DescribeUserSettingResponse
     */
    public DescribeUserSettingResponse describeUserSetting(DescribeUserSettingRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUserSettingWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of assets that support fixing based on vulnerability names.</p>
     * 
     * @param request DescribeUuidsByVulNamesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeUuidsByVulNamesResponse
     */
    public DescribeUuidsByVulNamesResponse describeUuidsByVulNamesWithOptions(DescribeUuidsByVulNamesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.level)) {
            query.put("Level", request.level);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchTags)) {
            query.put("SearchTags", request.searchTags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcInstanceIds)) {
            query.put("VpcInstanceIds", request.vpcInstanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulNames)) {
            query.put("VulNames", request.vulNames);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeUuidsByVulNames"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeUuidsByVulNamesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeUuidsByVulNamesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of assets that support fixing based on vulnerability names.</p>
     * 
     * @param request DescribeUuidsByVulNamesRequest
     * @return DescribeUuidsByVulNamesResponse
     */
    public DescribeUuidsByVulNamesResponse describeUuidsByVulNames(DescribeUuidsByVulNamesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeUuidsByVulNamesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the service providers whose assets can be added to Security Center.</p>
     * 
     * @param request DescribeVendorListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVendorListResponse
     */
    public DescribeVendorListResponse describeVendorListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVendorList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVendorListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVendorListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the service providers whose assets can be added to Security Center.</p>
     * @return DescribeVendorListResponse
     */
    public DescribeVendorListResponse describeVendorList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVendorListWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the edition of purchased Security Center.</p>
     * 
     * @param request DescribeVersionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVersionConfigResponse
     */
    public DescribeVersionConfigResponse describeVersionConfigWithOptions(DescribeVersionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVersionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVersionConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVersionConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the edition of purchased Security Center.</p>
     * 
     * @param request DescribeVersionConfigRequest
     * @return DescribeVersionConfigResponse
     */
    public DescribeVersionConfigResponse describeVersionConfig(DescribeVersionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVersionConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the QR code address of a DingTalk group.</p>
     * 
     * @param request DescribeVolDingdingMessageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVolDingdingMessageResponse
     */
    public DescribeVolDingdingMessageResponse describeVolDingdingMessageWithOptions(DescribeVolDingdingMessageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVolDingdingMessage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVolDingdingMessageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVolDingdingMessageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the QR code address of a DingTalk group.</p>
     * 
     * @param request DescribeVolDingdingMessageRequest
     * @return DescribeVolDingdingMessageResponse
     */
    public DescribeVolDingdingMessageResponse describeVolDingdingMessage(DescribeVolDingdingMessageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVolDingdingMessageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that can be used to query honeypots.</p>
     * 
     * @param request DescribeVpcHoneyPotCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVpcHoneyPotCriteriaResponse
     */
    public DescribeVpcHoneyPotCriteriaResponse describeVpcHoneyPotCriteriaWithOptions(DescribeVpcHoneyPotCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVpcHoneyPotCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVpcHoneyPotCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVpcHoneyPotCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the search conditions that can be used to query honeypots.</p>
     * 
     * @param request DescribeVpcHoneyPotCriteriaRequest
     * @return DescribeVpcHoneyPotCriteriaResponse
     */
    public DescribeVpcHoneyPotCriteriaResponse describeVpcHoneyPotCriteria(DescribeVpcHoneyPotCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVpcHoneyPotCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries virtual private clouds (VPCs) on which honeypots are deployed.</p>
     * 
     * @param request DescribeVpcHoneyPotListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVpcHoneyPotListResponse
     */
    public DescribeVpcHoneyPotListResponse describeVpcHoneyPotListWithOptions(DescribeVpcHoneyPotListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeyPotExistence)) {
            query.put("HoneyPotExistence", request.honeyPotExistence);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcName)) {
            query.put("VpcName", request.vpcName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcRegionId)) {
            query.put("VpcRegionId", request.vpcRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVpcHoneyPotList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVpcHoneyPotListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVpcHoneyPotListResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries virtual private clouds (VPCs) on which honeypots are deployed.</p>
     * 
     * @param request DescribeVpcHoneyPotListRequest
     * @return DescribeVpcHoneyPotListResponse
     */
    public DescribeVpcHoneyPotListResponse describeVpcHoneyPotList(DescribeVpcHoneyPotListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVpcHoneyPotListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about virtual private clouds (VPCs).</p>
     * 
     * @param request DescribeVpcListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVpcListResponse
     */
    public DescribeVpcListResponse describeVpcListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVpcList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVpcListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVpcListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about virtual private clouds (VPCs).</p>
     * @return DescribeVpcListResponse
     */
    public DescribeVpcListResponse describeVpcList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVpcListWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status information about vulnerability scan tasks on a server.</p>
     * 
     * @param request DescribeVulCheckTaskStatusDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulCheckTaskStatusDetailResponse
     */
    public DescribeVulCheckTaskStatusDetailResponse describeVulCheckTaskStatusDetailWithOptions(DescribeVulCheckTaskStatusDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskIds)) {
            query.put("TaskIds", request.taskIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulCheckTaskStatusDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulCheckTaskStatusDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulCheckTaskStatusDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status information about vulnerability scan tasks on a server.</p>
     * 
     * @param request DescribeVulCheckTaskStatusDetailRequest
     * @return DescribeVulCheckTaskStatusDetailResponse
     */
    public DescribeVulCheckTaskStatusDetailResponse describeVulCheckTaskStatusDetail(DescribeVulCheckTaskStatusDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulCheckTaskStatusDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of vulnerability management.</p>
     * 
     * @param request DescribeVulConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulConfigResponse
     */
    public DescribeVulConfigResponse describeVulConfigWithOptions(DescribeVulConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of vulnerability management.</p>
     * 
     * @param request DescribeVulConfigRequest
     * @return DescribeVulConfigResponse
     */
    public DescribeVulConfigResponse describeVulConfig(DescribeVulConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the vulnerability defense statistics in Security Center.</p>
     * 
     * @param request DescribeVulDefendCountStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulDefendCountStatisticsResponse
     */
    public DescribeVulDefendCountStatisticsResponse describeVulDefendCountStatisticsWithOptions(DescribeVulDefendCountStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vulType)) {
            query.put("VulType", request.vulType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulDefendCountStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulDefendCountStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulDefendCountStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the vulnerability defense statistics in Security Center.</p>
     * 
     * @param request DescribeVulDefendCountStatisticsRequest
     * @return DescribeVulDefendCountStatisticsResponse
     */
    public DescribeVulDefendCountStatisticsResponse describeVulDefendCountStatistics(DescribeVulDefendCountStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulDefendCountStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a vulnerability.</p>
     * 
     * @param request DescribeVulDetailsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulDetailsResponse
     */
    public DescribeVulDetailsResponse describeVulDetailsWithOptions(DescribeVulDetailsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulDetails"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulDetailsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulDetailsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a vulnerability.</p>
     * 
     * @param request DescribeVulDetailsRequest
     * @return DescribeVulDetailsResponse
     */
    public DescribeVulDetailsResponse describeVulDetails(DescribeVulDetailsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulDetailsWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the progress of a task that exports vulnerabilities.</p>
     * 
     * @param request DescribeVulExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulExportInfoResponse
     */
    public DescribeVulExportInfoResponse describeVulExportInfoWithOptions(DescribeVulExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulExportInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulExportInfoResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the progress of a task that exports vulnerabilities.</p>
     * 
     * @param request DescribeVulExportInfoRequest
     * @return DescribeVulExportInfoResponse
     */
    public DescribeVulExportInfoResponse describeVulExportInfo(DescribeVulExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulExportInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerability fixes.</p>
     * 
     * @param request DescribeVulFixStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulFixStatisticsResponse
     */
    public DescribeVulFixStatisticsResponse describeVulFixStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulFixStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulFixStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulFixStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerability fixes.</p>
     * @return DescribeVulFixStatisticsResponse
     */
    public DescribeVulFixStatisticsResponse describeVulFixStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulFixStatisticsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries vulnerabilities by type.</p>
     * 
     * @param request DescribeVulListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulListResponse
     */
    public DescribeVulListResponse describeVulListWithOptions(DescribeVulListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attachTypes)) {
            query.put("AttachTypes", request.attachTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.useNextToken)) {
            query.put("UseNextToken", request.useNextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcInstanceIds)) {
            query.put("VpcInstanceIds", request.vpcInstanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries vulnerabilities by type.</p>
     * 
     * @param request DescribeVulListRequest
     * @return DescribeVulListResponse
     */
    public DescribeVulListResponse describeVulList(DescribeVulListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the vulnerabilities that can be detected.</p>
     * 
     * @param request DescribeVulListPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulListPageResponse
     */
    public DescribeVulListPageResponse describeVulListPageWithOptions(DescribeVulListPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cveId)) {
            query.put("CveId", request.cveId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.raspDefend)) {
            query.put("RaspDefend", request.raspDefend);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulNameLike)) {
            query.put("VulNameLike", request.vulNameLike);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulType)) {
            query.put("VulType", request.vulType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulListPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulListPageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulListPageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the vulnerabilities that can be detected.</p>
     * 
     * @param request DescribeVulListPageRequest
     * @return DescribeVulListPageResponse
     */
    public DescribeVulListPageResponse describeVulListPage(DescribeVulListPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulListPageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerabilities in Security Center.</p>
     * 
     * @param request DescribeVulMetaCountStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulMetaCountStatisticsResponse
     */
    public DescribeVulMetaCountStatisticsResponse describeVulMetaCountStatisticsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulMetaCountStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulMetaCountStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulMetaCountStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerabilities in Security Center.</p>
     * @return DescribeVulMetaCountStatisticsResponse
     */
    public DescribeVulMetaCountStatisticsResponse describeVulMetaCountStatistics() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulMetaCountStatisticsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerabilities.</p>
     * 
     * @param request DescribeVulNumStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulNumStatisticsResponse
     */
    public DescribeVulNumStatisticsResponse describeVulNumStatisticsWithOptions(DescribeVulNumStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulNumStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulNumStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulNumStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of vulnerabilities.</p>
     * 
     * @param request DescribeVulNumStatisticsRequest
     * @return DescribeVulNumStatisticsResponse
     */
    public DescribeVulNumStatisticsResponse describeVulNumStatistics(DescribeVulNumStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulNumStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the vulnerability scan feature for a server.</p>
     * 
     * @param request DescribeVulTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulTargetConfigResponse
     */
    public DescribeVulTargetConfigResponse describeVulTargetConfigWithOptions(DescribeVulTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulTargetConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulTargetConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the vulnerability scan feature for a server.</p>
     * 
     * @param request DescribeVulTargetConfigRequest
     * @return DescribeVulTargetConfigResponse
     */
    public DescribeVulTargetConfigResponse describeVulTargetConfig(DescribeVulTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulTargetConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the vulnerability scan feature.</p>
     * 
     * @param request DescribeVulTargetStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulTargetStatisticsResponse
     */
    public DescribeVulTargetStatisticsResponse describeVulTargetStatisticsWithOptions(DescribeVulTargetStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulTargetStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulTargetStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulTargetStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of the vulnerability scan feature.</p>
     * 
     * @param request DescribeVulTargetStatisticsRequest
     * @return DescribeVulTargetStatisticsResponse
     */
    public DescribeVulTargetStatisticsResponse describeVulTargetStatistics(DescribeVulTargetStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulTargetStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the whitelist of vulnerabilities by page.</p>
     * 
     * @param request DescribeVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeVulWhitelistResponse
     */
    public DescribeVulWhitelistResponse describeVulWhitelistWithOptions(DescribeVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeVulWhitelistResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeVulWhitelistResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the whitelist of vulnerabilities by page.</p>
     * 
     * @param request DescribeVulWhitelistRequest
     * @return DescribeVulWhitelistResponse
     */
    public DescribeVulWhitelistResponse describeVulWhitelist(DescribeVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeVulWhitelistWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a export task for a baseline check result.</p>
     * 
     * @param request DescribeWarningExportInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWarningExportInfoResponse
     */
    public DescribeWarningExportInfoResponse describeWarningExportInfoWithOptions(DescribeWarningExportInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportId)) {
            query.put("ExportId", request.exportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWarningExportInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWarningExportInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWarningExportInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a export task for a baseline check result.</p>
     * 
     * @param request DescribeWarningExportInfoRequest
     * @return DescribeWarningExportInfoResponse
     */
    public DescribeWarningExportInfoResponse describeWarningExportInfo(DescribeWarningExportInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWarningExportInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.</p>
     * 
     * @param request DescribeWarningMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWarningMachinesResponse
     */
    public DescribeWarningMachinesResponse describeWarningMachinesWithOptions(DescribeWarningMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.haveRisk)) {
            query.put("HaveRisk", request.haveRisk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWarningMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWarningMachinesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWarningMachinesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.</p>
     * 
     * @param request DescribeWarningMachinesRequest
     * @return DescribeWarningMachinesResponse
     */
    public DescribeWarningMachinesResponse describeWarningMachines(DescribeWarningMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWarningMachinesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers that have web tamper proofing enabled.</p>
     * 
     * @param request DescribeWebLockBindListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockBindListResponse
     */
    public DescribeWebLockBindListResponse describeWebLockBindListWithOptions(DescribeWebLockBindListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockBindList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockBindListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockBindListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers that have web tamper proofing enabled.</p>
     * 
     * @param request DescribeWebLockBindListRequest
     * @return DescribeWebLockBindListResponse
     */
    public DescribeWebLockBindListResponse describeWebLockBindList(DescribeWebLockBindListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockBindListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of web tamper proofing for a specified server.</p>
     * 
     * @param request DescribeWebLockConfigListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockConfigListResponse
     */
    public DescribeWebLockConfigListResponse describeWebLockConfigListWithOptions(DescribeWebLockConfigListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockConfigList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockConfigListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockConfigListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of web tamper proofing for a specified server.</p>
     * 
     * @param request DescribeWebLockConfigListRequest
     * @return DescribeWebLockConfigListResponse
     */
    public DescribeWebLockConfigListResponse describeWebLockConfigList(DescribeWebLockConfigListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockConfigListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of files that are excluded from web tamper proofing.</p>
     * 
     * @param request DescribeWebLockExclusiveFileTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockExclusiveFileTypeResponse
     */
    public DescribeWebLockExclusiveFileTypeResponse describeWebLockExclusiveFileTypeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockExclusiveFileType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockExclusiveFileTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockExclusiveFileTypeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of files that are excluded from web tamper proofing.</p>
     * @return DescribeWebLockExclusiveFileTypeResponse
     */
    public DescribeWebLockExclusiveFileTypeResponse describeWebLockExclusiveFileType() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockExclusiveFileTypeWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on changes to the files that are protected by web tamper proofing.</p>
     * 
     * @param request DescribeWebLockFileChangeStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockFileChangeStatisticsResponse
     */
    public DescribeWebLockFileChangeStatisticsResponse describeWebLockFileChangeStatisticsWithOptions(DescribeWebLockFileChangeStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockFileChangeStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockFileChangeStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockFileChangeStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on changes to the files that are protected by web tamper proofing.</p>
     * 
     * @param request DescribeWebLockFileChangeStatisticsRequest
     * @return DescribeWebLockFileChangeStatisticsResponse
     */
    public DescribeWebLockFileChangeStatisticsResponse describeWebLockFileChangeStatistics(DescribeWebLockFileChangeStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockFileChangeStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries events on web tamper proofing.</p>
     * 
     * @param request DescribeWebLockFileEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockFileEventsResponse
     */
    public DescribeWebLockFileEventsResponse describeWebLockFileEventsWithOptions(DescribeWebLockFileEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processName)) {
            query.put("ProcessName", request.processName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tsBegin)) {
            query.put("TsBegin", request.tsBegin);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tsEnd)) {
            query.put("TsEnd", request.tsEnd);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockFileEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockFileEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockFileEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries events on web tamper proofing.</p>
     * 
     * @param request DescribeWebLockFileEventsRequest
     * @return DescribeWebLockFileEventsResponse
     */
    public DescribeWebLockFileEventsResponse describeWebLockFileEvents(DescribeWebLockFileEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockFileEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>The number of attempts.</p>
     * 
     * @param request DescribeWebLockFileTypeSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockFileTypeSummaryResponse
     */
    public DescribeWebLockFileTypeSummaryResponse describeWebLockFileTypeSummaryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockFileTypeSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockFileTypeSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockFileTypeSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>The number of attempts.</p>
     * @return DescribeWebLockFileTypeSummaryResponse
     */
    public DescribeWebLockFileTypeSummaryResponse describeWebLockFileTypeSummary() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockFileTypeSummaryWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of files that can be protected by web tamper proofing.</p>
     * 
     * @param request DescribeWebLockInclusiveFileTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockInclusiveFileTypeResponse
     */
    public DescribeWebLockInclusiveFileTypeResponse describeWebLockInclusiveFileTypeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockInclusiveFileType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockInclusiveFileTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockInclusiveFileTypeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of files that can be protected by web tamper proofing.</p>
     * @return DescribeWebLockInclusiveFileTypeResponse
     */
    public DescribeWebLockInclusiveFileTypeResponse describeWebLockInclusiveFileType() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockInclusiveFileTypeWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on processes for web tamper proofing.</p>
     * 
     * @param request DescribeWebLockProcessBlockStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockProcessBlockStatisticsResponse
     */
    public DescribeWebLockProcessBlockStatisticsResponse describeWebLockProcessBlockStatisticsWithOptions(DescribeWebLockProcessBlockStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockProcessBlockStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockProcessBlockStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockProcessBlockStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on processes for web tamper proofing.</p>
     * 
     * @param request DescribeWebLockProcessBlockStatisticsRequest
     * @return DescribeWebLockProcessBlockStatisticsResponse
     */
    public DescribeWebLockProcessBlockStatisticsResponse describeWebLockProcessBlockStatistics(DescribeWebLockProcessBlockStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockProcessBlockStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the processes for web tamper proofing.</p>
     * 
     * @param request DescribeWebLockProcessListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockProcessListResponse
     */
    public DescribeWebLockProcessListResponse describeWebLockProcessListWithOptions(DescribeWebLockProcessListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processName)) {
            query.put("ProcessName", request.processName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockProcessList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockProcessListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockProcessListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the processes for web tamper proofing.</p>
     * 
     * @param request DescribeWebLockProcessListRequest
     * @return DescribeWebLockProcessListResponse
     */
    public DescribeWebLockProcessListResponse describeWebLockProcessList(DescribeWebLockProcessListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockProcessListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of web tamper proofing.</p>
     * 
     * @param request DescribeWebLockStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockStatusResponse
     */
    public DescribeWebLockStatusResponse describeWebLockStatusWithOptions(DescribeWebLockStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of web tamper proofing.</p>
     * 
     * @param request DescribeWebLockStatusRequest
     * @return DescribeWebLockStatusResponse
     */
    public DescribeWebLockStatusResponse describeWebLockStatus(DescribeWebLockStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of times that the files protected by web tamper proofing are changed.</p>
     * 
     * @param request DescribeWebLockTotalFileChangeCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebLockTotalFileChangeCountResponse
     */
    public DescribeWebLockTotalFileChangeCountResponse describeWebLockTotalFileChangeCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebLockTotalFileChangeCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebLockTotalFileChangeCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebLockTotalFileChangeCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of times that the files protected by web tamper proofing are changed.</p>
     * @return DescribeWebLockTotalFileChangeCountResponse
     */
    public DescribeWebLockTotalFileChangeCountResponse describeWebLockTotalFileChangeCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebLockTotalFileChangeCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the custom web directories that are scanned based on the alerting feature.</p>
     * 
     * @param request DescribeWebPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWebPathResponse
     */
    public DescribeWebPathResponse describeWebPathWithOptions(DescribeWebPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWebPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWebPathResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWebPathResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the custom web directories that are scanned based on the alerting feature.</p>
     * 
     * @param request DescribeWebPathRequest
     * @return DescribeWebPathResponse
     */
    public DescribeWebPathResponse describeWebPath(DescribeWebPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWebPathWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about servers that can be added or are added to application whitelist policies.</p>
     * 
     * @param request DescribeWhiteListAssetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWhiteListAssetResponse
     */
    public DescribeWhiteListAssetResponse describeWhiteListAssetWithOptions(DescribeWhiteListAssetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastMaxId)) {
            query.put("LastMaxId", request.lastMaxId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWhiteListAsset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWhiteListAssetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWhiteListAssetResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about servers that can be added or are added to application whitelist policies.</p>
     * 
     * @param request DescribeWhiteListAssetRequest
     * @return DescribeWhiteListAssetResponse
     */
    public DescribeWhiteListAssetResponse describeWhiteListAsset(DescribeWhiteListAssetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWhiteListAssetWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the available quota for the application whitelist feature.</p>
     * 
     * @param request DescribeWhiteListAuthorizeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWhiteListAuthorizeResponse
     */
    public DescribeWhiteListAuthorizeResponse describeWhiteListAuthorizeWithOptions(DescribeWhiteListAuthorizeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWhiteListAuthorize"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWhiteListAuthorizeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWhiteListAuthorizeResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the available quota for the application whitelist feature.</p>
     * 
     * @param request DescribeWhiteListAuthorizeRequest
     * @return DescribeWhiteListAuthorizeResponse
     */
    public DescribeWhiteListAuthorizeResponse describeWhiteListAuthorize(DescribeWhiteListAuthorizeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWhiteListAuthorizeWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the servers on which an application whitelist policy takes effect.</p>
     * 
     * @param request DescribeWhiteListEffectiveAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWhiteListEffectiveAssetsResponse
     */
    public DescribeWhiteListEffectiveAssetsResponse describeWhiteListEffectiveAssetsWithOptions(DescribeWhiteListEffectiveAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.needStatistics)) {
            query.put("NeedStatistics", request.needStatistics);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWhiteListEffectiveAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWhiteListEffectiveAssetsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWhiteListEffectiveAssetsResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the servers on which an application whitelist policy takes effect.</p>
     * 
     * @param request DescribeWhiteListEffectiveAssetsRequest
     * @return DescribeWhiteListEffectiveAssetsResponse
     */
    public DescribeWhiteListEffectiveAssetsResponse describeWhiteListEffectiveAssets(DescribeWhiteListEffectiveAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWhiteListEffectiveAssetsWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about the processes that are detected in an application whitelist policy.</p>
     * 
     * @param request DescribeWhiteListProcessRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWhiteListProcessResponse
     */
    public DescribeWhiteListProcessResponse describeWhiteListProcessWithOptions(DescribeWhiteListProcessRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.desc)) {
            query.put("Desc", request.desc);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderBy)) {
            query.put("OrderBy", request.orderBy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processName)) {
            query.put("ProcessName", request.processName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processType)) {
            query.put("ProcessType", request.processType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWhiteListProcess"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWhiteListProcessResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWhiteListProcessResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about the processes that are detected in an application whitelist policy.</p>
     * 
     * @param request DescribeWhiteListProcessRequest
     * @return DescribeWhiteListProcessResponse
     */
    public DescribeWhiteListProcessResponse describeWhiteListProcess(DescribeWhiteListProcessRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWhiteListProcessWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of application whitelist policies.</p>
     * 
     * @param request DescribeWhiteListStrategyListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWhiteListStrategyListResponse
     */
    public DescribeWhiteListStrategyListResponse describeWhiteListStrategyListWithOptions(DescribeWhiteListStrategyListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyIds)) {
            query.put("StrategyIds", request.strategyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWhiteListStrategyList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWhiteListStrategyListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWhiteListStrategyListResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of application whitelist policies.</p>
     * 
     * @param request DescribeWhiteListStrategyListRequest
     * @return DescribeWhiteListStrategyListResponse
     */
    public DescribeWhiteListStrategyListResponse describeWhiteListStrategyList(DescribeWhiteListStrategyListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWhiteListStrategyListWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the statistics of application whitelist policies.</p>
     * 
     * @param request DescribeWhiteListStrategyStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWhiteListStrategyStatisticsResponse
     */
    public DescribeWhiteListStrategyStatisticsResponse describeWhiteListStrategyStatisticsWithOptions(DescribeWhiteListStrategyStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyIds)) {
            query.put("StrategyIds", request.strategyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWhiteListStrategyStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWhiteListStrategyStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWhiteListStrategyStatisticsResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the statistics of application whitelist policies.</p>
     * 
     * @param request DescribeWhiteListStrategyStatisticsRequest
     * @return DescribeWhiteListStrategyStatisticsResponse
     */
    public DescribeWhiteListStrategyStatisticsResponse describeWhiteListStrategyStatistics(DescribeWhiteListStrategyStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWhiteListStrategyStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the number of the servers on which an application whitelist policy takes effect.</p>
     * 
     * @param request DescribeWhiteListStrategyUuidCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeWhiteListStrategyUuidCountResponse
     */
    public DescribeWhiteListStrategyUuidCountResponse describeWhiteListStrategyUuidCountWithOptions(DescribeWhiteListStrategyUuidCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DescribeWhiteListStrategyUuidCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DescribeWhiteListStrategyUuidCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DescribeWhiteListStrategyUuidCountResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the number of the servers on which an application whitelist policy takes effect.</p>
     * 
     * @param request DescribeWhiteListStrategyUuidCountRequest
     * @return DescribeWhiteListStrategyUuidCountResponse
     */
    public DescribeWhiteListStrategyUuidCountResponse describeWhiteListStrategyUuidCount(DescribeWhiteListStrategyUuidCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.describeWhiteListStrategyUuidCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Tests whether DingTalk notification configurations are valid.</p>
     * 
     * @param request DingTalkOnlineTestRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DingTalkOnlineTestResponse
     */
    public DingTalkOnlineTestResponse dingTalkOnlineTestWithOptions(DingTalkOnlineTestRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DingTalkOnlineTest"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DingTalkOnlineTestResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DingTalkOnlineTestResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Tests whether DingTalk notification configurations are valid.</p>
     * 
     * @param request DingTalkOnlineTestRequest
     * @return DingTalkOnlineTestResponse
     */
    public DingTalkOnlineTestResponse dingTalkOnlineTest(DingTalkOnlineTestRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.dingTalkOnlineTestWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Disables an IP address blocking policy that is in effect.</p>
     * 
     * @param request DisableBruteForceRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DisableBruteForceRecordResponse
     */
    public DisableBruteForceRecordResponse disableBruteForceRecordWithOptions(DisableBruteForceRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableBruteForceRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DisableBruteForceRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DisableBruteForceRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Disables an IP address blocking policy that is in effect.</p>
     * 
     * @param request DisableBruteForceRecordRequest
     * @return DisableBruteForceRecordResponse
     */
    public DisableBruteForceRecordResponse disableBruteForceRecord(DisableBruteForceRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.disableBruteForceRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Disables a custom IP address blocking policy for servers.</p>
     * 
     * @param request DisableCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DisableCustomBlockRecordResponse
     */
    public DisableCustomBlockRecordResponse disableCustomBlockRecordWithOptions(DisableCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "DisableCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new DisableCustomBlockRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new DisableCustomBlockRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Disables a custom IP address blocking policy for servers.</p>
     * 
     * @param request DisableCustomBlockRecordRequest
     * @return DisableCustomBlockRecordResponse
     */
    public DisableCustomBlockRecordResponse disableCustomBlockRecord(DisableCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.disableCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables an IP address blocking policy for a specified server.</p>
     * 
     * @param request EnableBruteForceRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return EnableBruteForceRecordResponse
     */
    public EnableBruteForceRecordResponse enableBruteForceRecordWithOptions(EnableBruteForceRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableBruteForceRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new EnableBruteForceRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new EnableBruteForceRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables an IP address blocking policy for a specified server.</p>
     * 
     * @param request EnableBruteForceRecordRequest
     * @return EnableBruteForceRecordResponse
     */
    public EnableBruteForceRecordResponse enableBruteForceRecord(EnableBruteForceRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.enableBruteForceRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables a custom IP address blocking policy.</p>
     * 
     * @param request EnableCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return EnableCustomBlockRecordResponse
     */
    public EnableCustomBlockRecordResponse enableCustomBlockRecordWithOptions(EnableCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new EnableCustomBlockRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new EnableCustomBlockRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables a custom IP address blocking policy.</p>
     * 
     * @param request EnableCustomBlockRecordRequest
     * @return EnableCustomBlockRecordResponse
     */
    public EnableCustomBlockRecordResponse enableCustomBlockRecord(EnableCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.enableCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables a custom rule for an instance.</p>
     * 
     * @param request EnableCustomInstanceBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return EnableCustomInstanceBlockRecordResponse
     */
    public EnableCustomInstanceBlockRecordResponse enableCustomInstanceBlockRecordWithOptions(EnableCustomInstanceBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableCustomInstanceBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new EnableCustomInstanceBlockRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new EnableCustomInstanceBlockRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables a custom rule for an instance.</p>
     * 
     * @param request EnableCustomInstanceBlockRecordRequest
     * @return EnableCustomInstanceBlockRecordResponse
     */
    public EnableCustomInstanceBlockRecordResponse enableCustomInstanceBlockRecord(EnableCustomInstanceBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.enableCustomInstanceBlockRecordWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Enable the multi-account management feature of Security Center.</p>
     * 
     * @param request EnableServiceAccessResourceDirectoryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return EnableServiceAccessResourceDirectoryResponse
     */
    public EnableServiceAccessResourceDirectoryResponse enableServiceAccessResourceDirectoryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "EnableServiceAccessResourceDirectory"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new EnableServiceAccessResourceDirectoryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new EnableServiceAccessResourceDirectoryResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Enable the multi-account management feature of Security Center.</p>
     * @return EnableServiceAccessResourceDirectoryResponse
     */
    public EnableServiceAccessResourceDirectoryResponse enableServiceAccessResourceDirectory() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.enableServiceAccessResourceDirectoryWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Performs a baseline check on servers to which a specified baseline check policy is applied.</p>
     * 
     * @param request ExecStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExecStrategyResponse
     */
    public ExecStrategyResponse execStrategyWithOptions(ExecStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExecStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ExecStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ExecStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Performs a baseline check on servers to which a specified baseline check policy is applied.</p>
     * 
     * @param request ExecStrategyRequest
     * @return ExecStrategyResponse
     */
    public ExecStrategyResponse execStrategy(ExecStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.execStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Exports a security report.</p>
     * 
     * @param request ExportCustomizeReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportCustomizeReportResponse
     */
    public ExportCustomizeReportResponse exportCustomizeReportWithOptions(ExportCustomizeReportRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportType)) {
            query.put("ExportType", request.exportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportCustomizeReport"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ExportCustomizeReportResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ExportCustomizeReportResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Exports a security report.</p>
     * 
     * @param request ExportCustomizeReportRequest
     * @return ExportCustomizeReportResponse
     */
    public ExportCustomizeReportResponse exportCustomizeReport(ExportCustomizeReportRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportCustomizeReportWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call the operation to export the following check result lists:</p>
     * <ul>
     * <li>The list of servers on the Host page.</li>
     * <li>The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.</li>
     * <li>The list of attack analysis data on the Attack Awareness page.</li>
     * <li>The list of check results for AccessKey pair leaks on the AK leak detection page.</li>
     * </ul>
     * 
     * <b>summary</b> : 
     * <p>Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.</p>
     * 
     * @param request ExportRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportRecordResponse
     */
    public ExportRecordResponse exportRecordWithOptions(ExportRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.exportFileType)) {
            query.put("ExportFileType", request.exportFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exportType)) {
            query.put("ExportType", request.exportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.params)) {
            query.put("Params", request.params);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ExportRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ExportRecordResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call the operation to export the following check result lists:</p>
     * <ul>
     * <li>The list of servers on the Host page.</li>
     * <li>The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.</li>
     * <li>The list of attack analysis data on the Attack Awareness page.</li>
     * <li>The list of check results for AccessKey pair leaks on the AK leak detection page.</li>
     * </ul>
     * 
     * <b>summary</b> : 
     * <p>Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.</p>
     * 
     * @param request ExportRecordRequest
     * @return ExportRecordResponse
     */
    public ExportRecordResponse exportRecord(ExportRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Exports the information about exceptions to a file.</p>
     * 
     * @param request ExportSuspEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportSuspEventsResponse
     */
    public ExportSuspEventsResponse exportSuspEventsWithOptions(ExportSuspEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetsTypeList)) {
            query.put("AssetsTypeList", request.assetsTypeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateErrorCodeList)) {
            query.put("OperateErrorCodeList", request.operateErrorCodeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentEventTypes)) {
            query.put("ParentEventTypes", request.parentEventTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniqueInfo)) {
            query.put("UniqueInfo", request.uniqueInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportSuspEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ExportSuspEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ExportSuspEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Exports the information about exceptions to a file.</p>
     * 
     * @param request ExportSuspEventsRequest
     * @return ExportSuspEventsResponse
     */
    public ExportSuspEventsResponse exportSuspEvents(ExportSuspEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportSuspEventsWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
     * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.</p>
     * <h3>Limits</h3>
     * <p>You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Exports vulnerabilities.</p>
     * 
     * @param request ExportVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportVulResponse
     */
    public ExportVulResponse exportVulWithOptions(ExportVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.attachTypes)) {
            query.put("AttachTypes", request.attachTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerName)) {
            query.put("ContainerName", request.containerName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.createTsEnd)) {
            query.put("CreateTsEnd", request.createTsEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.createTsStart)) {
            query.put("CreateTsStart", request.createTsStart);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cveId)) {
            query.put("CveId", request.cveId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.necessity)) {
            query.put("Necessity", request.necessity);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.path)) {
            query.put("Path", request.path);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchTags)) {
            query.put("SearchTags", request.searchTags);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcInstanceIds)) {
            query.put("VpcInstanceIds", request.vpcInstanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ExportVulResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ExportVulResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
     * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.</p>
     * <h3>Limits</h3>
     * <p>You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Exports vulnerabilities.</p>
     * 
     * @param request ExportVulRequest
     * @return ExportVulResponse
     */
    public ExportVulResponse exportVul(ExportVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportVulWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Exports baseline check results.</p>
     * 
     * @param request ExportWarningRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExportWarningResponse
     */
    public ExportWarningResponse exportWarningWithOptions(ExportWarningRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exportType)) {
            query.put("ExportType", request.exportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isCleartextPwd)) {
            query.put("IsCleartextPwd", request.isCleartextPwd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isSummaryExport)) {
            query.put("IsSummaryExport", request.isSummaryExport);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskIds)) {
            query.put("RiskIds", request.riskIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevels)) {
            query.put("RiskLevels", request.riskLevels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskName)) {
            query.put("RiskName", request.riskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subTypeNames)) {
            query.put("SubTypeNames", request.subTypeNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeName)) {
            query.put("TypeName", request.typeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeNames)) {
            query.put("TypeNames", request.typeNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ExportWarning"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ExportWarningResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ExportWarningResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Exports baseline check results.</p>
     * 
     * @param request ExportWarningRequest
     * @return ExportWarningResponse
     */
    public ExportWarningResponse exportWarning(ExportWarningRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.exportWarningWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>容器网络连接</p>
     * 
     * @param tmpReq FindContainerNetworkConnectRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return FindContainerNetworkConnectResponse
     */
    public FindContainerNetworkConnectResponse findContainerNetworkConnectWithOptions(FindContainerNetworkConnectRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        FindContainerNetworkConnectShrinkRequest request = new FindContainerNetworkConnectShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.dstNode)) {
            request.dstNodeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.dstNode, "DstNode", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.srcNode)) {
            request.srcNodeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.srcNode, "SrcNode", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dstNodeShrink)) {
            query.put("DstNode", request.dstNodeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcNodeShrink)) {
            query.put("SrcNode", request.srcNodeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "FindContainerNetworkConnect"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new FindContainerNetworkConnectResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new FindContainerNetworkConnectResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>容器网络连接</p>
     * 
     * @param request FindContainerNetworkConnectRequest
     * @return FindContainerNetworkConnectResponse
     */
    public FindContainerNetworkConnectResponse findContainerNetworkConnect(FindContainerNetworkConnectRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.findContainerNetworkConnectWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Completes guidance tasks for beginners to earn rewards.</p>
     * 
     * @param request FinishGuidTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return FinishGuidTaskResponse
     */
    public FinishGuidTaskResponse finishGuidTaskWithOptions(FinishGuidTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskTypeName)) {
            query.put("TaskTypeName", request.taskTypeName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "FinishGuidTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new FinishGuidTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new FinishGuidTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Completes guidance tasks for beginners to earn rewards.</p>
     * 
     * @param request FinishGuidTaskRequest
     * @return FinishGuidTaskResponse
     */
    public FinishGuidTaskResponse finishGuidTask(FinishGuidTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.finishGuidTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Fixes a baseline risk item.</p>
     * 
     * @param request FixCheckWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return FixCheckWarningsResponse
     */
    public FixCheckWarningsResponse fixCheckWarningsWithOptions(FixCheckWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkParams)) {
            query.put("CheckParams", request.checkParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.retentionDays)) {
            query.put("RetentionDays", request.retentionDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.snapshotName)) {
            query.put("SnapshotName", request.snapshotName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "FixCheckWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new FixCheckWarningsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new FixCheckWarningsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Fixes a baseline risk item.</p>
     * 
     * @param request FixCheckWarningsRequest
     * @return FixCheckWarningsResponse
     */
    public FixCheckWarningsResponse fixCheckWarnings(FixCheckWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.fixCheckWarningsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Generates a custom dictionary of weak passwords for the baseline check feature.</p>
     * 
     * @param request GenerateDynamicDictRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GenerateDynamicDictResponse
     */
    public GenerateDynamicDictResponse generateDynamicDictWithOptions(GenerateDynamicDictRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.argKeywords)) {
            query.put("ArgKeywords", request.argKeywords);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domains)) {
            query.put("Domains", request.domains);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.names)) {
            query.put("Names", request.names);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GenerateDynamicDict"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GenerateDynamicDictResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GenerateDynamicDictResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Generates a custom dictionary of weak passwords for the baseline check feature.</p>
     * 
     * @param request GenerateDynamicDictRequest
     * @return GenerateDynamicDictResponse
     */
    public GenerateDynamicDictResponse generateDynamicDict(GenerateDynamicDictRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.generateDynamicDictWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Generates a command that is used to add a self-managed Kubernetes cluster.</p>
     * 
     * @param request GenerateK8sAccessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GenerateK8sAccessInfoResponse
     */
    public GenerateK8sAccessInfoResponse generateK8sAccessInfoWithOptions(GenerateK8sAccessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayApiName)) {
            query.put("AliyunYundunGatewayApiName", request.aliyunYundunGatewayApiName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayPopName)) {
            query.put("AliyunYundunGatewayPopName", request.aliyunYundunGatewayPopName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayProjectName)) {
            query.put("AliyunYundunGatewayProjectName", request.aliyunYundunGatewayProjectName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.auditLogStore)) {
            query.put("AuditLogStore", request.auditLogStore);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.auditProject)) {
            query.put("AuditProject", request.auditProject);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.auditRegionId)) {
            query.put("AuditRegionId", request.auditRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.expireDate)) {
            query.put("ExpireDate", request.expireDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GenerateK8sAccessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GenerateK8sAccessInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GenerateK8sAccessInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Generates a command that is used to add a self-managed Kubernetes cluster.</p>
     * 
     * @param request GenerateK8sAccessInfoRequest
     * @return GenerateK8sAccessInfoResponse
     */
    public GenerateK8sAccessInfoResponse generateK8sAccessInfo(GenerateK8sAccessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.generateK8sAccessInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Creates a one-time scan task.</p>
     * 
     * @param request GenerateOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GenerateOnceTaskResponse
     */
    public GenerateOnceTaskResponse generateOnceTaskWithOptions(GenerateOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.param)) {
            query.put("Param", request.param);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GenerateOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GenerateOnceTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GenerateOnceTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Creates a one-time scan task.</p>
     * 
     * @param request GenerateOnceTaskRequest
     * @return GenerateOnceTaskResponse
     */
    public GenerateOnceTaskResponse generateOnceTask(GenerateOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.generateOnceTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains account tags.</p>
     * 
     * @param request GetAccountLabelRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAccountLabelResponse
     */
    public GetAccountLabelResponse getAccountLabelWithOptions(GetAccountLabelRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.labelList)) {
            query.put("LabelList", request.labelList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAccountLabel"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAccountLabelResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAccountLabelResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains account tags.</p>
     * 
     * @param request GetAccountLabelRequest
     * @return GetAccountLabelResponse
     */
    public GetAccountLabelResponse getAccountLabel(GetAccountLabelRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAccountLabelWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Ultimate edition of Security Center supports this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the details of a defense rule against container escapes.</p>
     * 
     * @param request GetAegisContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAegisContainerPluginRuleResponse
     */
    public GetAegisContainerPluginRuleResponse getAegisContainerPluginRuleWithOptions(GetAegisContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAegisContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAegisContainerPluginRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAegisContainerPluginRuleResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Ultimate edition of Security Center supports this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the details of a defense rule against container escapes.</p>
     * 
     * @param request GetAegisContainerPluginRuleRequest
     * @return GetAegisContainerPluginRuleResponse
     */
    public GetAegisContainerPluginRuleResponse getAegisContainerPluginRule(GetAegisContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAegisContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries search conditions that can be used to search for container file protection rules.</p>
     * 
     * @param request GetAegisContainerPluginRuleCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAegisContainerPluginRuleCriteriaResponse
     */
    public GetAegisContainerPluginRuleCriteriaResponse getAegisContainerPluginRuleCriteriaWithOptions(GetAegisContainerPluginRuleCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAegisContainerPluginRuleCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAegisContainerPluginRuleCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAegisContainerPluginRuleCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries search conditions that can be used to search for container file protection rules.</p>
     * 
     * @param request GetAegisContainerPluginRuleCriteriaRequest
     * @return GetAegisContainerPluginRuleCriteriaResponse
     */
    public GetAegisContainerPluginRuleCriteriaResponse getAegisContainerPluginRuleCriteria(GetAegisContainerPluginRuleCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAegisContainerPluginRuleCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of agentless detection tasks.</p>
     * 
     * @param request GetAgentlessTaskCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAgentlessTaskCountResponse
     */
    public GetAgentlessTaskCountResponse getAgentlessTaskCountWithOptions(GetAgentlessTaskCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAgentlessTaskCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAgentlessTaskCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAgentlessTaskCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of agentless detection tasks.</p>
     * 
     * @param request GetAgentlessTaskCountRequest
     * @return GetAgentlessTaskCountResponse
     */
    public GetAgentlessTaskCountResponse getAgentlessTaskCount(GetAgentlessTaskCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAgentlessTaskCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of servers on which alerts are generated.</p>
     * 
     * @param request GetAlarmMachineCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAlarmMachineCountResponse
     */
    public GetAlarmMachineCountResponse getAlarmMachineCountWithOptions(GetAlarmMachineCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAlarmMachineCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAlarmMachineCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAlarmMachineCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of servers on which alerts are generated.</p>
     * 
     * @param request GetAlarmMachineCountRequest
     * @return GetAlarmMachineCountResponse
     */
    public GetAlarmMachineCountResponse getAlarmMachineCount(GetAlarmMachineCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAlarmMachineCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the network topology between containerized applications.</p>
     * 
     * @param request GetAppNetworkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAppNetworkResponse
     */
    public GetAppNetworkResponse getAppNetworkWithOptions(GetAppNetworkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAppNetwork"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAppNetworkResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAppNetworkResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the network topology between containerized applications.</p>
     * 
     * @param request GetAppNetworkRequest
     * @return GetAppNetworkResponse
     */
    public GetAppNetworkResponse getAppNetwork(GetAppNetworkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAppNetworkWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a server and the extended information about the server by using the UUID of the server.</p>
     * 
     * @param request GetAssetDetailByUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetDetailByUuidResponse
     */
    public GetAssetDetailByUuidResponse getAssetDetailByUuidWithOptions(GetAssetDetailByUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetDetailByUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetDetailByUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAssetDetailByUuidResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a server and the extended information about the server by using the UUID of the server.</p>
     * 
     * @param request GetAssetDetailByUuidRequest
     * @return GetAssetDetailByUuidResponse
     */
    public GetAssetDetailByUuidResponse getAssetDetailByUuid(GetAssetDetailByUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetDetailByUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries asset selection configurations.</p>
     * 
     * @param request GetAssetSelectionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetSelectionConfigResponse
     */
    public GetAssetSelectionConfigResponse getAssetSelectionConfigWithOptions(GetAssetSelectionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.businessType)) {
            query.put("BusinessType", request.businessType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetSelectionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetSelectionConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAssetSelectionConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries asset selection configurations.</p>
     * 
     * @param request GetAssetSelectionConfigRequest
     * @return GetAssetSelectionConfigResponse
     */
    public GetAssetSelectionConfigResponse getAssetSelectionConfig(GetAssetSelectionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetSelectionConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the asset fingerprints of the startup item, kernel module, or website type.</p>
     * 
     * @param request GetAssetsPropertyDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetsPropertyDetailResponse
     */
    public GetAssetsPropertyDetailResponse getAssetsPropertyDetailWithOptions(GetAssetsPropertyDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.itemName)) {
            query.put("ItemName", request.itemName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchCriteriaList)) {
            query.put("SearchCriteriaList", request.searchCriteriaList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetsPropertyDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetsPropertyDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAssetsPropertyDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the asset fingerprints of the startup item, kernel module, or website type.</p>
     * 
     * @param request GetAssetsPropertyDetailRequest
     * @return GetAssetsPropertyDetailResponse
     */
    public GetAssetsPropertyDetailResponse getAssetsPropertyDetail(GetAssetsPropertyDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetsPropertyDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.</p>
     * 
     * @param request GetAssetsPropertyItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAssetsPropertyItemResponse
     */
    public GetAssetsPropertyItemResponse getAssetsPropertyItemWithOptions(GetAssetsPropertyItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.biz)) {
            query.put("Biz", request.biz);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forceFlush)) {
            query.put("ForceFlush", request.forceFlush);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchInfo)) {
            query.put("SearchInfo", request.searchInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.searchItem)) {
            query.put("SearchItem", request.searchItem);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAssetsPropertyItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAssetsPropertyItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAssetsPropertyItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.</p>
     * 
     * @param request GetAssetsPropertyItemRequest
     * @return GetAssetsPropertyItemResponse
     */
    public GetAssetsPropertyItemResponse getAssetsPropertyItem(GetAssetsPropertyItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAssetsPropertyItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of attack types on the Attack Analysis page.</p>
     * 
     * @param request GetAttackTypeListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAttackTypeListResponse
     */
    public GetAttackTypeListResponse getAttackTypeListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAttackTypeList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAttackTypeListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAttackTypeListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of attack types on the Attack Analysis page.</p>
     * @return GetAttackTypeListResponse
     */
    public GetAttackTypeListResponse getAttackTypeList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAttackTypeListWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of asset protection quota.</p>
     * 
     * @param request GetAuthSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAuthSummaryResponse
     */
    public GetAuthSummaryResponse getAuthSummaryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAuthSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAuthSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAuthSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of asset protection quota.</p>
     * @return GetAuthSummaryResponse
     */
    public GetAuthSummaryResponse getAuthSummary() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAuthSummaryWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics about the numbers of assets protected by each edition of Security Center.</p>
     * 
     * @param request GetAuthVersionStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAuthVersionStatisticResponse
     */
    public GetAuthVersionStatisticResponse getAuthVersionStatisticWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetAuthVersionStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetAuthVersionStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetAuthVersionStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics about the numbers of assets protected by each edition of Security Center.</p>
     * @return GetAuthVersionStatisticResponse
     */
    public GetAuthVersionStatisticResponse getAuthVersionStatistic() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getAuthVersionStatisticWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.</p>
     * 
     * @param request GetBackupAutoConfigStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBackupAutoConfigStatusResponse
     */
    public GetBackupAutoConfigStatusResponse getBackupAutoConfigStatusWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetBackupAutoConfigStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetBackupAutoConfigStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetBackupAutoConfigStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.</p>
     * @return GetBackupAutoConfigStatusResponse
     */
    public GetBackupAutoConfigStatusResponse getBackupAutoConfigStatus() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getBackupAutoConfigStatusWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the anti-ransomware capacity that is used.</p>
     * 
     * @param request GetBackupStorageCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBackupStorageCountResponse
     */
    public GetBackupStorageCountResponse getBackupStorageCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetBackupStorageCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetBackupStorageCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetBackupStorageCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the anti-ransomware capacity that is used.</p>
     * @return GetBackupStorageCountResponse
     */
    public GetBackupStorageCountResponse getBackupStorageCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getBackupStorageCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries configurations for scanning image build command risks.</p>
     * 
     * @param request GetBuildRiskDefineRuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBuildRiskDefineRuleConfigResponse
     */
    public GetBuildRiskDefineRuleConfigResponse getBuildRiskDefineRuleConfigWithOptions(GetBuildRiskDefineRuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetBuildRiskDefineRuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetBuildRiskDefineRuleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetBuildRiskDefineRuleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries configurations for scanning image build command risks.</p>
     * 
     * @param request GetBuildRiskDefineRuleConfigRequest
     * @return GetBuildRiskDefineRuleConfigResponse
     */
    public GetBuildRiskDefineRuleConfigResponse getBuildRiskDefineRuleConfig(GetBuildRiskDefineRuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getBuildRiskDefineRuleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the current user is qualified for the trial use of Security Center.</p>
     * 
     * @param request GetCanTrySasRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCanTrySasResponse
     */
    public GetCanTrySasResponse getCanTrySasWithOptions(GetCanTrySasRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.fromEcs)) {
            body.put("FromEcs", request.fromEcs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCanTrySas"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCanTrySasResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCanTrySasResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the current user is qualified for the trial use of Security Center.</p>
     * 
     * @param request GetCanTrySasRequest
     * @return GetCanTrySasResponse
     */
    public GetCanTrySasResponse getCanTrySas(GetCanTrySasRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCanTrySasWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an automatic configuration check on cloud services.</p>
     * 
     * @param request GetCheckConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckConfigResponse
     */
    public GetCheckConfigResponse getCheckConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about an automatic configuration check on cloud services.</p>
     * @return GetCheckConfigResponse
     */
    public GetCheckConfigResponse getCheckConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckConfigWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get the statistics of risk item counts</p>
     * 
     * @param request GetCheckCountStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckCountStatisticResponse
     */
    public GetCheckCountStatisticResponse getCheckCountStatisticWithOptions(GetCheckCountStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.statisticType)) {
            query.put("StatisticType", request.statisticType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckCountStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckCountStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckCountStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get the statistics of risk item counts</p>
     * 
     * @param request GetCheckCountStatisticRequest
     * @return GetCheckCountStatisticResponse
     */
    public GetCheckCountStatisticResponse getCheckCountStatistic(GetCheckCountStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckCountStatisticWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a check item that is used for configuration assessment.</p>
     * 
     * @param request GetCheckDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckDetailResponse
     */
    public GetCheckDetailResponse getCheckDetailWithOptions(GetCheckDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a check item that is used for configuration assessment.</p>
     * 
     * @param request GetCheckDetailRequest
     * @return GetCheckDetailResponse
     */
    public GetCheckDetailResponse getCheckDetail(GetCheckDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a configuration check task on cloud services.</p>
     * 
     * @param request GetCheckProcessRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckProcessResponse
     */
    public GetCheckProcessResponse getCheckProcessWithOptions(GetCheckProcessRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckProcess"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckProcessResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckProcessResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a configuration check task on cloud services.</p>
     * 
     * @param request GetCheckProcessRequest
     * @return GetCheckProcessResponse
     */
    public GetCheckProcessResponse getCheckProcess(GetCheckProcessRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckProcessWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.</p>
     * 
     * @param request GetCheckRiskStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckRiskStatisticsResponse
     */
    public GetCheckRiskStatisticsResponse getCheckRiskStatisticsWithOptions(GetCheckRiskStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckRiskStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckRiskStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckRiskStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.</p>
     * 
     * @param request GetCheckRiskStatisticsRequest
     * @return GetCheckRiskStatisticsResponse
     */
    public GetCheckRiskStatisticsResponse getCheckRiskStatistics(GetCheckRiskStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckRiskStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.</p>
     * 
     * @param request GetCheckSaleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckSaleResponse
     */
    public GetCheckSaleResponse getCheckSaleWithOptions(GetCheckSaleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckSale"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckSaleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckSaleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.</p>
     * 
     * @param request GetCheckSaleRequest
     * @return GetCheckSaleResponse
     */
    public GetCheckSaleResponse getCheckSale(GetCheckSaleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckSaleWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You must purchase the configuration assessment feature before you can use the feature.</p>
     * 
     * <b>summary</b> : 
     * <p>Obtains the structure information about check items provided by the configuration assessment feature.</p>
     * 
     * @param request GetCheckStructureRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckStructureResponse
     */
    public GetCheckStructureResponse getCheckStructureWithOptions(GetCheckStructureRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckStructure"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckStructureResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckStructureResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You must purchase the configuration assessment feature before you can use the feature.</p>
     * 
     * <b>summary</b> : 
     * <p>Obtains the structure information about check items provided by the configuration assessment feature.</p>
     * 
     * @param request GetCheckStructureRequest
     * @return GetCheckStructureResponse
     */
    public GetCheckStructureResponse getCheckStructure(GetCheckStructureRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckStructureWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the summary information about the configuration checks on cloud services.</p>
     * 
     * @param request GetCheckSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckSummaryResponse
     */
    public GetCheckSummaryResponse getCheckSummaryWithOptions(GetCheckSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.isItemStatistic)) {
            query.put("IsItemStatistic", request.isItemStatistic);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the summary information about the configuration checks on cloud services.</p>
     * 
     * @param request GetCheckSummaryRequest
     * @return GetCheckSummaryResponse
     */
    public GetCheckSummaryResponse getCheckSummary(GetCheckSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get time trend statistics data</p>
     * 
     * @param request GetCheckTimeDimensionStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckTimeDimensionStatisticResponse
     */
    public GetCheckTimeDimensionStatisticResponse getCheckTimeDimensionStatisticWithOptions(GetCheckTimeDimensionStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticType)) {
            query.put("StatisticType", request.statisticType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCheckTimeDimensionStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCheckTimeDimensionStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCheckTimeDimensionStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get time trend statistics data</p>
     * 
     * @param request GetCheckTimeDimensionStatisticRequest
     * @return GetCheckTimeDimensionStatisticResponse
     */
    public GetCheckTimeDimensionStatisticResponse getCheckTimeDimensionStatistic(GetCheckTimeDimensionStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCheckTimeDimensionStatisticWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation rate and online rate of the agent.</p>
     * 
     * @param request GetClientRatioStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClientRatioStatisticResponse
     */
    public GetClientRatioStatisticResponse getClientRatioStatisticWithOptions(GetClientRatioStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticTypes)) {
            query.put("StatisticTypes", request.statisticTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClientRatioStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetClientRatioStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetClientRatioStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation rate and online rate of the agent.</p>
     * 
     * @param request GetClientRatioStatisticRequest
     * @return GetClientRatioStatisticResponse
     */
    public GetClientRatioStatisticResponse getClientRatioStatistic(GetClientRatioStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClientRatioStatisticWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a custom defense rule.</p>
     * 
     * @param request GetClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClientUserDefineRuleResponse
     */
    public GetClientUserDefineRuleResponse getClientUserDefineRuleWithOptions(GetClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetClientUserDefineRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetClientUserDefineRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a custom defense rule.</p>
     * 
     * @param request GetClientUserDefineRuleRequest
     * @return GetClientUserDefineRuleResponse
     */
    public GetClientUserDefineRuleResponse getClientUserDefineRule(GetClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the filter conditions that are used to search for cloud assets.</p>
     * 
     * @param request GetCloudAssetCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCloudAssetCriteriaResponse
     */
    public GetCloudAssetCriteriaResponse getCloudAssetCriteriaWithOptions(GetCloudAssetCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetTypes)) {
            query.put("CloudAssetTypes", request.cloudAssetTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCloudAssetCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCloudAssetCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCloudAssetCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the filter conditions that are used to search for cloud assets.</p>
     * 
     * @param request GetCloudAssetCriteriaRequest
     * @return GetCloudAssetCriteriaResponse
     */
    public GetCloudAssetCriteriaResponse getCloudAssetCriteria(GetCloudAssetCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCloudAssetCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the details of cloud assets.</p>
     * 
     * @param request GetCloudAssetDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCloudAssetDetailResponse
     */
    public GetCloudAssetDetailResponse getCloudAssetDetailWithOptions(GetCloudAssetDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetSubType)) {
            query.put("AssetSubType", request.assetSubType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetInstances)) {
            query.put("CloudAssetInstances", request.cloudAssetInstances);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCloudAssetDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCloudAssetDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCloudAssetDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the details of cloud assets.</p>
     * 
     * @param request GetCloudAssetDetailRequest
     * @return GetCloudAssetDetailResponse
     */
    public GetCloudAssetDetailResponse getCloudAssetDetail(GetCloudAssetDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCloudAssetDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>The total number of instances that are at risk.</p>
     * 
     * @param request GetCloudAssetSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCloudAssetSummaryResponse
     */
    public GetCloudAssetSummaryResponse getCloudAssetSummaryWithOptions(GetCloudAssetSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCloudAssetSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCloudAssetSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCloudAssetSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>The total number of instances that are at risk.</p>
     * 
     * @param request GetCloudAssetSummaryRequest
     * @return GetCloudAssetSummaryResponse
     */
    public GetCloudAssetSummaryResponse getCloudAssetSummary(GetCloudAssetSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCloudAssetSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on baseline risk items of container clusters.</p>
     * 
     * @param request GetClusterCheckItemWarningStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterCheckItemWarningStatisticsResponse
     */
    public GetClusterCheckItemWarningStatisticsResponse getClusterCheckItemWarningStatisticsWithOptions(GetClusterCheckItemWarningStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterCheckItemWarningStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterCheckItemWarningStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetClusterCheckItemWarningStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on baseline risk items of container clusters.</p>
     * 
     * @param request GetClusterCheckItemWarningStatisticsRequest
     * @return GetClusterCheckItemWarningStatisticsResponse
     */
    public GetClusterCheckItemWarningStatisticsResponse getClusterCheckItemWarningStatistics(GetClusterCheckItemWarningStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterCheckItemWarningStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the overall information about cluster defense rules that are configured for the container firewall feature.</p>
     * 
     * @param request GetClusterRuleSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterRuleSummaryResponse
     */
    public GetClusterRuleSummaryResponse getClusterRuleSummaryWithOptions(GetClusterRuleSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterRuleSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterRuleSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetClusterRuleSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the overall information about cluster defense rules that are configured for the container firewall feature.</p>
     * 
     * @param request GetClusterRuleSummaryRequest
     * @return GetClusterRuleSummaryResponse
     */
    public GetClusterRuleSummaryResponse getClusterRuleSummary(GetClusterRuleSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterRuleSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of policies in each cluster.</p>
     * 
     * @param request GetClusterStrategyCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterStrategyCountResponse
     */
    public GetClusterStrategyCountResponse getClusterStrategyCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterStrategyCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterStrategyCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetClusterStrategyCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of policies in each cluster.</p>
     * @return GetClusterStrategyCountResponse
     */
    public GetClusterStrategyCountResponse getClusterStrategyCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterStrategyCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on alert events that are generated for containers.</p>
     * 
     * @param request GetClusterSuspEventStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClusterSuspEventStatisticsResponse
     */
    public GetClusterSuspEventStatisticsResponse getClusterSuspEventStatisticsWithOptions(GetClusterSuspEventStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetClusterSuspEventStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetClusterSuspEventStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetClusterSuspEventStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on alert events that are generated for containers.</p>
     * 
     * @param request GetClusterSuspEventStatisticsRequest
     * @return GetClusterSuspEventStatisticsResponse
     */
    public GetClusterSuspEventStatisticsResponse getClusterSuspEventStatistics(GetClusterSuspEventStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getClusterSuspEventStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configuration of a common switch.</p>
     * 
     * @param request GetCommonSwitchConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCommonSwitchConfigResponse
     */
    public GetCommonSwitchConfigResponse getCommonSwitchConfigWithOptions(GetCommonSwitchConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCommonSwitchConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCommonSwitchConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCommonSwitchConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configuration of a common switch.</p>
     * 
     * @param request GetCommonSwitchConfigRequest
     * @return GetCommonSwitchConfigResponse
     */
    public GetCommonSwitchConfigResponse getCommonSwitchConfig(GetCommonSwitchConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCommonSwitchConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query whether the core function\&quot;s gray switch is hit</p>
     * 
     * @param request GetConsoleFuncGrayStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetConsoleFuncGrayStatusResponse
     */
    public GetConsoleFuncGrayStatusResponse getConsoleFuncGrayStatusWithOptions(GetConsoleFuncGrayStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.condition)) {
            query.put("Condition", request.condition);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetConsoleFuncGrayStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetConsoleFuncGrayStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetConsoleFuncGrayStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query whether the core function\&quot;s gray switch is hit</p>
     * 
     * @param request GetConsoleFuncGrayStatusRequest
     * @return GetConsoleFuncGrayStatusResponse
     */
    public GetConsoleFuncGrayStatusResponse getConsoleFuncGrayStatus(GetConsoleFuncGrayStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getConsoleFuncGrayStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a rule for non-image program defense.</p>
     * 
     * @param request GetContainerDefenseRuleDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetContainerDefenseRuleDetailResponse
     */
    public GetContainerDefenseRuleDetailResponse getContainerDefenseRuleDetailWithOptions(GetContainerDefenseRuleDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetContainerDefenseRuleDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetContainerDefenseRuleDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetContainerDefenseRuleDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a rule for non-image program defense.</p>
     * 
     * @param request GetContainerDefenseRuleDetailRequest
     * @return GetContainerDefenseRuleDetailResponse
     */
    public GetContainerDefenseRuleDetailResponse getContainerDefenseRuleDetail(GetContainerDefenseRuleDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getContainerDefenseRuleDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the publish details of the Security Center agent.</p>
     * 
     * @param request GetCurrentVersionPublishRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCurrentVersionPublishResponse
     */
    public GetCurrentVersionPublishResponse getCurrentVersionPublishWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetCurrentVersionPublish"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetCurrentVersionPublishResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetCurrentVersionPublishResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the publish details of the Security Center agent.</p>
     * @return GetCurrentVersionPublishResponse
     */
    public GetCurrentVersionPublishResponse getCurrentVersionPublish() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getCurrentVersionPublishWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.</p>
     * 
     * @param request GetDataTrendRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDataTrendResponse
     */
    public GetDataTrendResponse getDataTrendWithOptions(GetDataTrendRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bizTypes)) {
            query.put("BizTypes", request.bizTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimestamp)) {
            query.put("EndTimestamp", request.endTimestamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interval)) {
            query.put("Interval", request.interval);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimestamp)) {
            query.put("StartTimestamp", request.startTimestamp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetDataTrend"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetDataTrendResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetDataTrendResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.</p>
     * 
     * @param request GetDataTrendRequest
     * @return GetDataTrendResponse
     */
    public GetDataTrendResponse getDataTrend(GetDataTrendRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getDataTrendWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.</p>
     * 
     * @param request GetDefenceCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDefenceCountResponse
     */
    public GetDefenceCountResponse getDefenceCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetDefenceCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetDefenceCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetDefenceCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.</p>
     * @return GetDefenceCountResponse
     */
    public GetDefenceCountResponse getDefenceCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getDefenceCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query Image Ranking Across Dimensions.</p>
     * 
     * @param request GetDockerhubImageRiskRankInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDockerhubImageRiskRankInfoResponse
     */
    public GetDockerhubImageRiskRankInfoResponse getDockerhubImageRiskRankInfoWithOptions(GetDockerhubImageRiskRankInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetDockerhubImageRiskRankInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetDockerhubImageRiskRankInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetDockerhubImageRiskRankInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query Image Ranking Across Dimensions.</p>
     * 
     * @param request GetDockerhubImageRiskRankInfoRequest
     * @return GetDockerhubImageRiskRankInfoResponse
     */
    public GetDockerhubImageRiskRankInfoResponse getDockerhubImageRiskRankInfo(GetDockerhubImageRiskRankInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getDockerhubImageRiskRankInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query the statistical counts of images across various dimensions.</p>
     * 
     * @param request GetDockerhubImageRiskStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDockerhubImageRiskStatisticResponse
     */
    public GetDockerhubImageRiskStatisticResponse getDockerhubImageRiskStatisticWithOptions(GetDockerhubImageRiskStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetDockerhubImageRiskStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetDockerhubImageRiskStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetDockerhubImageRiskStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query the statistical counts of images across various dimensions.</p>
     * 
     * @param request GetDockerhubImageRiskStatisticRequest
     * @return GetDockerhubImageRiskStatisticResponse
     */
    public GetDockerhubImageRiskStatisticResponse getDockerhubImageRiskStatistic(GetDockerhubImageRiskStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getDockerhubImageRiskStatisticWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the usage information of the malicious file detection SDK.</p>
     * 
     * @param request GetFileDetectApiInvokeInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileDetectApiInvokeInfoResponse
     */
    public GetFileDetectApiInvokeInfoResponse getFileDetectApiInvokeInfoWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileDetectApiInvokeInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileDetectApiInvokeInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileDetectApiInvokeInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the usage information of the malicious file detection SDK.</p>
     * @return GetFileDetectApiInvokeInfoResponse
     */
    public GetFileDetectApiInvokeInfoResponse getFileDetectApiInvokeInfo() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileDetectApiInvokeInfoWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the cloud sandbox check results of malicious files.</p>
     * 
     * @param request GetFileDetectReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileDetectReportResponse
     */
    public GetFileDetectReportResponse getFileDetectReportWithOptions(GetFileDetectReportRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.field)) {
            query.put("Field", request.field);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileHash)) {
            query.put("FileHash", request.fileHash);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceType)) {
            query.put("SourceType", request.sourceType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileDetectReport"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileDetectReportResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileDetectReportResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the cloud sandbox check results of malicious files.</p>
     * 
     * @param request GetFileDetectReportRequest
     * @return GetFileDetectReportResponse
     */
    public GetFileDetectReportResponse getFileDetectReport(GetFileDetectReportRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileDetectReportWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.</p>
     * 
     * <b>summary</b> : 
     * <p>Obtains file detection results.</p>
     * 
     * @param request GetFileDetectResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileDetectResultResponse
     */
    public GetFileDetectResultResponse getFileDetectResultWithOptions(GetFileDetectResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.hashKeyList)) {
            query.put("HashKeyList", request.hashKeyList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileDetectResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileDetectResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileDetectResultResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.</p>
     * 
     * <b>summary</b> : 
     * <p>Obtains file detection results.</p>
     * 
     * @param request GetFileDetectResultRequest
     * @return GetFileDetectResultResponse
     */
    public GetFileDetectResultResponse getFileDetectResult(GetFileDetectResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileDetectResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.</p>
     * 
     * @param request GetFileProtectDashboardRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectDashboardResponse
     */
    public GetFileProtectDashboardResponse getFileProtectDashboardWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectDashboard"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectDashboardResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileProtectDashboardResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.</p>
     * @return GetFileProtectDashboardResponse
     */
    public GetFileProtectDashboardResponse getFileProtectDashboard() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectDashboardWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about core file monitoring events.</p>
     * 
     * @param request GetFileProtectEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectEventResponse
     */
    public GetFileProtectEventResponse getFileProtectEventWithOptions(GetFileProtectEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectEventResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileProtectEventResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about core file monitoring events.</p>
     * 
     * @param request GetFileProtectEventRequest
     * @return GetFileProtectEventResponse
     */
    public GetFileProtectEventResponse getFileProtectEvent(GetFileProtectEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectEventWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the total number of core file monitoring events by filter condition.</p>
     * 
     * @param request GetFileProtectEventCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectEventCountResponse
     */
    public GetFileProtectEventCountResponse getFileProtectEventCountWithOptions(GetFileProtectEventCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectEventCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectEventCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileProtectEventCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the total number of core file monitoring events by filter condition.</p>
     * 
     * @param request GetFileProtectEventCountRequest
     * @return GetFileProtectEventCountResponse
     */
    public GetFileProtectEventCountResponse getFileProtectEventCount(GetFileProtectEventCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectEventCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a core file monitoring rule based on the ID of the rule.</p>
     * 
     * @param request GetFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileProtectRuleResponse
     */
    public GetFileProtectRuleResponse getFileProtectRuleWithOptions(GetFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileProtectRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileProtectRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a core file monitoring rule based on the ID of the rule.</p>
     * 
     * @param request GetFileProtectRuleRequest
     * @return GetFileProtectRuleResponse
     */
    public GetFileProtectRuleResponse getFileProtectRule(GetFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the queries per second (QPS) limit on the files uploaded from the client.</p>
     * 
     * @param request GetFileUploadLimitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileUploadLimitResponse
     */
    public GetFileUploadLimitResponse getFileUploadLimitWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFileUploadLimit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFileUploadLimitResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFileUploadLimitResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the queries per second (QPS) limit on the files uploaded from the client.</p>
     * @return GetFileUploadLimitResponse
     */
    public GetFileUploadLimitResponse getFileUploadLimit() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFileUploadLimitWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get Trial Status</p>
     * 
     * @param request GetFunctionTrialStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFunctionTrialStatusResponse
     */
    public GetFunctionTrialStatusResponse getFunctionTrialStatusWithOptions(GetFunctionTrialStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.functionName)) {
            query.put("FunctionName", request.functionName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetFunctionTrialStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetFunctionTrialStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetFunctionTrialStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get Trial Status</p>
     * 
     * @param request GetFunctionTrialStatusRequest
     * @return GetFunctionTrialStatusResponse
     */
    public GetFunctionTrialStatusResponse getFunctionTrialStatus(GetFunctionTrialStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getFunctionTrialStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the URL that is used to upload a file to a honeypot.</p>
     * 
     * @param request GetHoneyPotUploadPolicyInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneyPotUploadPolicyInfoResponse
     */
    public GetHoneyPotUploadPolicyInfoResponse getHoneyPotUploadPolicyInfoWithOptions(GetHoneyPotUploadPolicyInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneyPotUploadPolicyInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneyPotUploadPolicyInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneyPotUploadPolicyInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the URL that is used to upload a file to a honeypot.</p>
     * 
     * @param request GetHoneyPotUploadPolicyInfoRequest
     * @return GetHoneyPotUploadPolicyInfoResponse
     */
    public GetHoneyPotUploadPolicyInfoResponse getHoneyPotUploadPolicyInfo(GetHoneyPotUploadPolicyInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneyPotUploadPolicyInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>获取蜜罐攻击统计数据</p>
     * 
     * @param request GetHoneypotAttackStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotAttackStatisticsResponse
     */
    public GetHoneypotAttackStatisticsResponse getHoneypotAttackStatisticsWithOptions(GetHoneypotAttackStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevelList)) {
            query.put("RiskLevelList", request.riskLevelList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statisticsType)) {
            query.put("StatisticsType", request.statisticsType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotAttackStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotAttackStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneypotAttackStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>获取蜜罐攻击统计数据</p>
     * 
     * @param request GetHoneypotAttackStatisticsRequest
     * @return GetHoneypotAttackStatisticsResponse
     */
    public GetHoneypotAttackStatisticsResponse getHoneypotAttackStatistics(GetHoneypotAttackStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotAttackStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtain attack trend statistics for a single attack source.</p>
     * 
     * @param request GetHoneypotEventTrendRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotEventTrendResponse
     */
    public GetHoneypotEventTrendResponse getHoneypotEventTrendWithOptions(GetHoneypotEventTrendRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevelList)) {
            query.put("RiskLevelList", request.riskLevelList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotEventTrend"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotEventTrendResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneypotEventTrendResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtain attack trend statistics for a single attack source.</p>
     * 
     * @param request GetHoneypotEventTrendRequest
     * @return GetHoneypotEventTrendResponse
     */
    public GetHoneypotEventTrendResponse getHoneypotEventTrend(GetHoneypotEventTrendRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotEventTrendWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a specified management node.</p>
     * 
     * @param request GetHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotNodeResponse
     */
    public GetHoneypotNodeResponse getHoneypotNodeWithOptions(GetHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneypotNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a specified management node.</p>
     * 
     * @param request GetHoneypotNodeRequest
     * @return GetHoneypotNodeResponse
     */
    public GetHoneypotNodeResponse getHoneypotNode(GetHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the monitoring data of management nodes to which the cloud honeypot belongs.</p>
     * 
     * @param request GetHoneypotNodeMetricListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotNodeMetricListResponse
     */
    public GetHoneypotNodeMetricListResponse getHoneypotNodeMetricListWithOptions(GetHoneypotNodeMetricListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.express)) {
            query.put("Express", request.express);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.length)) {
            query.put("Length", request.length);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.metricName)) {
            query.put("MetricName", request.metricName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.period)) {
            query.put("Period", request.period);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotNodeMetricList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotNodeMetricListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneypotNodeMetricListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the monitoring data of management nodes to which the cloud honeypot belongs.</p>
     * 
     * @param request GetHoneypotNodeMetricListRequest
     * @return GetHoneypotNodeMetricListResponse
     */
    public GetHoneypotNodeMetricListResponse getHoneypotNodeMetricList(GetHoneypotNodeMetricListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotNodeMetricListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of a specified honeypot template.</p>
     * 
     * @param request GetHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotPresetResponse
     */
    public GetHoneypotPresetResponse getHoneypotPresetWithOptions(GetHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotPresetId)) {
            query.put("HoneypotPresetId", request.honeypotPresetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotPresetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneypotPresetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of a specified honeypot template.</p>
     * 
     * @param request GetHoneypotPresetRequest
     * @return GetHoneypotPresetResponse
     */
    public GetHoneypotPresetResponse getHoneypotPreset(GetHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a specified probe.</p>
     * 
     * @param request GetHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotProbeResponse
     */
    public GetHoneypotProbeResponse getHoneypotProbeWithOptions(GetHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneypotProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about a specified probe.</p>
     * 
     * @param request GetHoneypotProbeRequest
     * @return GetHoneypotProbeResponse
     */
    public GetHoneypotProbeResponse getHoneypotProbe(GetHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>获取蜜罐使用量的统计数据</p>
     * 
     * @param request GetHoneypotStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHoneypotStatisticsResponse
     */
    public GetHoneypotStatisticsResponse getHoneypotStatisticsWithOptions(GetHoneypotStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetHoneypotStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetHoneypotStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetHoneypotStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>获取蜜罐使用量的统计数据</p>
     * 
     * @param request GetHoneypotStatisticsRequest
     * @return GetHoneypotStatisticsResponse
     */
    public GetHoneypotStatisticsResponse getHoneypotStatistics(GetHoneypotStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getHoneypotStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries alert handling rules.</p>
     * 
     * @param request GetImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageEventOperationResponse
     */
    public GetImageEventOperationResponse getImageEventOperationWithOptions(GetImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetImageEventOperationResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetImageEventOperationResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries alert handling rules.</p>
     * 
     * @param request GetImageEventOperationRequest
     * @return GetImageEventOperationResponse
     */
    public GetImageEventOperationResponse getImageEventOperation(GetImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getImageEventOperationWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of image scans that are performed within the last several days.</p>
     * 
     * @param request GetImageScanNumInPeriodRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageScanNumInPeriodResponse
     */
    public GetImageScanNumInPeriodResponse getImageScanNumInPeriodWithOptions(GetImageScanNumInPeriodRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pastDay)) {
            query.put("PastDay", request.pastDay);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetImageScanNumInPeriod"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetImageScanNumInPeriodResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetImageScanNumInPeriodResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of image scans that are performed within the last several days.</p>
     * 
     * @param request GetImageScanNumInPeriodRequest
     * @return GetImageScanNumInPeriodResponse
     */
    public GetImageScanNumInPeriodResponse getImageScanNumInPeriod(GetImageScanNumInPeriodRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getImageScanNumInPeriodWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query Asset Installation Code</p>
     * 
     * @param request GetInstallCodeForUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInstallCodeForUuidResponse
     */
    public GetInstallCodeForUuidResponse getInstallCodeForUuidWithOptions(GetInstallCodeForUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInstallCodeForUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetInstallCodeForUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetInstallCodeForUuidResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query Asset Installation Code</p>
     * 
     * @param request GetInstallCodeForUuidRequest
     * @return GetInstallCodeForUuidResponse
     */
    public GetInstallCodeForUuidResponse getInstallCodeForUuid(GetInstallCodeForUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInstallCodeForUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Count the number of security events for a single instance</p>
     * 
     * @param request GetInstanceAlarmStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInstanceAlarmStatisticsResponse
     */
    public GetInstanceAlarmStatisticsResponse getInstanceAlarmStatisticsWithOptions(GetInstanceAlarmStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInstanceAlarmStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetInstanceAlarmStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetInstanceAlarmStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Count the number of security events for a single instance</p>
     * 
     * @param request GetInstanceAlarmStatisticsRequest
     * @return GetInstanceAlarmStatisticsResponse
     */
    public GetInstanceAlarmStatisticsResponse getInstanceAlarmStatistics(GetInstanceAlarmStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInstanceAlarmStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a microsegmentation defense rule.</p>
     * 
     * @param request GetInterceptionRuleDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInterceptionRuleDetailResponse
     */
    public GetInterceptionRuleDetailResponse getInterceptionRuleDetailWithOptions(GetInterceptionRuleDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInterceptionRuleDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetInterceptionRuleDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetInterceptionRuleDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a microsegmentation defense rule.</p>
     * 
     * @param request GetInterceptionRuleDetailRequest
     * @return GetInterceptionRuleDetailResponse
     */
    public GetInterceptionRuleDetailResponse getInterceptionRuleDetail(GetInterceptionRuleDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInterceptionRuleDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of the container firewall feature.</p>
     * 
     * @param request GetInterceptionSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInterceptionSummaryResponse
     */
    public GetInterceptionSummaryResponse getInterceptionSummaryWithOptions(GetInterceptionSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInterceptionSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetInterceptionSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetInterceptionSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics of the container firewall feature.</p>
     * 
     * @param request GetInterceptionSummaryRequest
     * @return GetInterceptionSummaryResponse
     */
    public GetInterceptionSummaryResponse getInterceptionSummary(GetInterceptionSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInterceptionSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a specified network object that is protected by the container firewall feature.</p>
     * 
     * @param request GetInterceptionTargetDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInterceptionTargetDetailResponse
     */
    public GetInterceptionTargetDetailResponse getInterceptionTargetDetailWithOptions(GetInterceptionTargetDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetId)) {
            query.put("TargetId", request.targetId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetInterceptionTargetDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetInterceptionTargetDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetInterceptionTargetDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about a specified network object that is protected by the container firewall feature.</p>
     * 
     * @param request GetInterceptionTargetDetailRequest
     * @return GetInterceptionTargetDetailResponse
     */
    public GetInterceptionTargetDetailResponse getInterceptionTargetDetail(GetInterceptionTargetDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getInterceptionTargetDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the latest scan task to determine whether the task is complete.</p>
     * 
     * @param request GetLastOnceTaskInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLastOnceTaskInfoResponse
     */
    public GetLastOnceTaskInfoResponse getLastOnceTaskInfoWithOptions(GetLastOnceTaskInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetLastOnceTaskInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetLastOnceTaskInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetLastOnceTaskInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the latest scan task to determine whether the task is complete.</p>
     * 
     * @param request GetLastOnceTaskInfoRequest
     * @return GetLastOnceTaskInfoResponse
     */
    public GetLastOnceTaskInfoResponse getLastOnceTaskInfo(GetLastOnceTaskInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getLastOnceTaskInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the default region for synchronizing assets outside Alibaba Cloud.</p>
     * 
     * @param request GetLocalDefaultRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLocalDefaultRegionResponse
     */
    public GetLocalDefaultRegionResponse getLocalDefaultRegionWithOptions(GetLocalDefaultRegionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetLocalDefaultRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetLocalDefaultRegionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetLocalDefaultRegionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the default region for synchronizing assets outside Alibaba Cloud.</p>
     * 
     * @param request GetLocalDefaultRegionRequest
     * @return GetLocalDefaultRegionResponse
     */
    public GetLocalDefaultRegionResponse getLocalDefaultRegion(GetLocalDefaultRegionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getLocalDefaultRegionWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of a data shipping task of a log.</p>
     * 
     * @param request GetLogMetaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLogMetaResponse
     */
    public GetLogMetaResponse getLogMetaWithOptions(GetLogMetaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.logStore)) {
            query.put("LogStore", request.logStore);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetLogMeta"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetLogMetaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetLogMetaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of a data shipping task of a log.</p>
     * 
     * @param request GetLogMetaRequest
     * @return GetLogMetaResponse
     */
    public GetLogMetaResponse getLogMeta(GetLogMetaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getLogMetaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request GetMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMaliciousFileWhitelistConfigResponse
     */
    public GetMaliciousFileWhitelistConfigResponse getMaliciousFileWhitelistConfigWithOptions(GetMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetMaliciousFileWhitelistConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetMaliciousFileWhitelistConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request GetMaliciousFileWhitelistConfigRequest
     * @return GetMaliciousFileWhitelistConfigResponse
     */
    public GetMaliciousFileWhitelistConfigResponse getMaliciousFileWhitelistConfig(GetMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of a module.</p>
     * 
     * @param request GetModuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetModuleConfigResponse
     */
    public GetModuleConfigResponse getModuleConfigWithOptions(GetModuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetModuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetModuleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetModuleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of a module.</p>
     * 
     * @param request GetModuleConfigRequest
     * @return GetModuleConfigResponse
     */
    public GetModuleConfigResponse getModuleConfig(GetModuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getModuleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the purchased Security Center features are enabled and whether related configurations take effect.</p>
     * 
     * @param tmpReq GetModuleConfigStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetModuleConfigStatusResponse
     */
    public GetModuleConfigStatusResponse getModuleConfigStatusWithOptions(GetModuleConfigStatusRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        GetModuleConfigStatusShrinkRequest request = new GetModuleConfigStatusShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.moduleNames)) {
            request.moduleNamesShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.moduleNames, "ModuleNames", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.moduleNamesShrink)) {
            query.put("ModuleNames", request.moduleNamesShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetModuleConfigStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetModuleConfigStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetModuleConfigStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether the purchased Security Center features are enabled and whether related configurations take effect.</p>
     * 
     * @param request GetModuleConfigStatusRequest
     * @return GetModuleConfigStatusResponse
     */
    public GetModuleConfigStatusResponse getModuleConfigStatus(GetModuleConfigStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getModuleConfigStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.</p>
     * 
     * @param request GetModuleTrialAuthInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetModuleTrialAuthInfoResponse
     */
    public GetModuleTrialAuthInfoResponse getModuleTrialAuthInfoWithOptions(GetModuleTrialAuthInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.moduleCode)) {
            query.put("ModuleCode", request.moduleCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetModuleTrialAuthInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetModuleTrialAuthInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetModuleTrialAuthInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.</p>
     * 
     * @param request GetModuleTrialAuthInfoRequest
     * @return GetModuleTrialAuthInfoResponse
     */
    public GetModuleTrialAuthInfoResponse getModuleTrialAuthInfo(GetModuleTrialAuthInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getModuleTrialAuthInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an alert event that is generated for a malicious object.</p>
     * 
     * @param request GetObjectScanEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetObjectScanEventResponse
     */
    public GetObjectScanEventResponse getObjectScanEventWithOptions(GetObjectScanEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetObjectScanEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetObjectScanEventResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetObjectScanEventResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an alert event that is generated for a malicious object.</p>
     * 
     * @param request GetObjectScanEventRequest
     * @return GetObjectScanEventResponse
     */
    public GetObjectScanEventResponse getObjectScanEvent(GetObjectScanEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getObjectScanEventWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.</p>
     * 
     * @param request GetOnceTaskResultInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOnceTaskResultInfoResponse
     */
    public GetOnceTaskResultInfoResponse getOnceTaskResultInfoWithOptions(GetOnceTaskResultInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOnceTaskResultInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOnceTaskResultInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOnceTaskResultInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.</p>
     * 
     * @param request GetOnceTaskResultInfoRequest
     * @return GetOnceTaskResultInfoResponse
     */
    public GetOnceTaskResultInfoResponse getOnceTaskResultInfo(GetOnceTaskResultInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOnceTaskResultInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the baselines that are supported by at-risk image blocking.</p>
     * 
     * @param request GetOpaClusterBaseLineListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterBaseLineListResponse
     */
    public GetOpaClusterBaseLineListResponse getOpaClusterBaseLineListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterBaseLineList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterBaseLineListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOpaClusterBaseLineListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the baselines that are supported by at-risk image blocking.</p>
     * @return GetOpaClusterBaseLineListResponse
     */
    public GetOpaClusterBaseLineListResponse getOpaClusterBaseLineList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterBaseLineListWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>查询集群镜像</p>
     * 
     * @param request GetOpaClusterImageListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterImageListResponse
     */
    public GetOpaClusterImageListResponse getOpaClusterImageListWithOptions(GetOpaClusterImageListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterImageList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterImageListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOpaClusterImageListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>查询集群镜像</p>
     * 
     * @param request GetOpaClusterImageListRequest
     * @return GetOpaClusterImageListResponse
     */
    public GetOpaClusterImageListResponse getOpaClusterImageList(GetOpaClusterImageListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterImageListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the tags that are added to containers based on the feature of proactive defense for containers.</p>
     * 
     * @param request GetOpaClusterLabelListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterLabelListResponse
     */
    public GetOpaClusterLabelListResponse getOpaClusterLabelListWithOptions(GetOpaClusterLabelListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagName)) {
            query.put("TagName", request.tagName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterLabelList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterLabelListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOpaClusterLabelListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the tags that are added to containers based on the feature of proactive defense for containers.</p>
     * 
     * @param request GetOpaClusterLabelListRequest
     * @return GetOpaClusterLabelListResponse
     */
    public GetOpaClusterLabelListResponse getOpaClusterLabelList(GetOpaClusterLabelListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterLabelListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.</p>
     * 
     * @param request GetOpaClusterNamespaceListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaClusterNamespaceListResponse
     */
    public GetOpaClusterNamespaceListResponse getOpaClusterNamespaceListWithOptions(GetOpaClusterNamespaceListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nameSpaceName)) {
            query.put("NameSpaceName", request.nameSpaceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaClusterNamespaceList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaClusterNamespaceListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOpaClusterNamespaceListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.</p>
     * 
     * @param request GetOpaClusterNamespaceListRequest
     * @return GetOpaClusterNamespaceListResponse
     */
    public GetOpaClusterNamespaceListResponse getOpaClusterNamespaceList(GetOpaClusterNamespaceListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaClusterNamespaceListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation status of the components that are required for clusters protected by proactive defense for containers.</p>
     * 
     * @param request GetOpaPluginStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaPluginStatusResponse
     */
    public GetOpaPluginStatusResponse getOpaPluginStatusWithOptions(GetOpaPluginStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaPluginStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaPluginStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOpaPluginStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation status of the components that are required for clusters protected by proactive defense for containers.</p>
     * 
     * @param request GetOpaPluginStatusRequest
     * @return GetOpaPluginStatusResponse
     */
    public GetOpaPluginStatusResponse getOpaPluginStatus(GetOpaPluginStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaPluginStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the rule that is used to block at-risk images.</p>
     * 
     * @param request GetOpaStrategyDetailNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaStrategyDetailNewResponse
     */
    public GetOpaStrategyDetailNewResponse getOpaStrategyDetailNewWithOptions(GetOpaStrategyDetailNewRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaStrategyDetailNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaStrategyDetailNewResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOpaStrategyDetailNewResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the rule that is used to block at-risk images.</p>
     * 
     * @param request GetOpaStrategyDetailNewRequest
     * @return GetOpaStrategyDetailNewResponse
     */
    public GetOpaStrategyDetailNewResponse getOpaStrategyDetailNew(GetOpaStrategyDetailNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaStrategyDetailNewWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.</p>
     * 
     * @param request GetOpaStrategyTemplateSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpaStrategyTemplateSummaryResponse
     */
    public GetOpaStrategyTemplateSummaryResponse getOpaStrategyTemplateSummaryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOpaStrategyTemplateSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOpaStrategyTemplateSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOpaStrategyTemplateSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.</p>
     * @return GetOpaStrategyTemplateSummaryResponse
     */
    public GetOpaStrategyTemplateSummaryResponse getOpaStrategyTemplateSummary() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOpaStrategyTemplateSummaryWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics about an Object Storage Service (OSS) bucket check.</p>
     * 
     * @param request GetOssBucketScanStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOssBucketScanStatisticResponse
     */
    public GetOssBucketScanStatisticResponse getOssBucketScanStatisticWithOptions(GetOssBucketScanStatisticRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOssBucketScanStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOssBucketScanStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOssBucketScanStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics about an Object Storage Service (OSS) bucket check.</p>
     * 
     * @param request GetOssBucketScanStatisticRequest
     * @return GetOssBucketScanStatisticResponse
     */
    public GetOssBucketScanStatisticResponse getOssBucketScanStatistic(GetOssBucketScanStatisticRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOssBucketScanStatisticWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of an Object Storage Service (OSS) bucket check policy.</p>
     * 
     * @param request GetOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOssScanConfigResponse
     */
    public GetOssScanConfigResponse getOssScanConfigWithOptions(GetOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetOssScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetOssScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of an Object Storage Service (OSS) bucket check policy.</p>
     * 
     * @param request GetOssScanConfigRequest
     * @return GetOssScanConfigResponse
     */
    public GetOssScanConfigResponse getOssScanConfig(GetOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getOssScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations for the collection frequency of asset fingerprints.</p>
     * 
     * @param request GetPropertyScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPropertyScheduleConfigResponse
     */
    public GetPropertyScheduleConfigResponse getPropertyScheduleConfigWithOptions(GetPropertyScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetPropertyScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetPropertyScheduleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetPropertyScheduleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations for the collection frequency of asset fingerprints.</p>
     * 
     * @param request GetPropertyScheduleConfigRequest
     * @return GetPropertyScheduleConfigResponse
     */
    public GetPropertyScheduleConfigResponse getPropertyScheduleConfig(GetPropertyScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getPropertyScheduleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get Publish Time Configuration</p>
     * 
     * @param request GetPublishCronRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPublishCronResponse
     */
    public GetPublishCronResponse getPublishCronWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetPublishCron"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetPublishCronResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetPublishCronResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get Publish Time Configuration</p>
     * @return GetPublishCronResponse
     */
    public GetPublishCronResponse getPublishCron() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getPublishCronWithOptions(runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the organizational structure of a resource directory by using the multi-account management feature.</p>
     * 
     * @param request GetRdTreeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRdTreeResponse
     */
    public GetRdTreeResponse getRdTreeWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetRdTree"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetRdTreeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetRdTreeResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the organizational structure of a resource directory by using the multi-account management feature.</p>
     * @return GetRdTreeResponse
     */
    public GetRdTreeResponse getRdTree() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getRdTreeWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query Image Scan Period.</p>
     * 
     * @param request GetRegistryScanDayNumRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRegistryScanDayNumResponse
     */
    public GetRegistryScanDayNumResponse getRegistryScanDayNumWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetRegistryScanDayNum"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetRegistryScanDayNumResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetRegistryScanDayNumResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query Image Scan Period.</p>
     * @return GetRegistryScanDayNumResponse
     */
    public GetRegistryScanDayNumResponse getRegistryScanDayNum() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getRegistryScanDayNumWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the numbers of system defense rules and custom defense rules.</p>
     * 
     * @param request GetRulesCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRulesCountResponse
     */
    public GetRulesCountResponse getRulesCountWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetRulesCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetRulesCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetRulesCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the numbers of system defense rules and custom defense rules.</p>
     * @return GetRulesCountResponse
     */
    public GetRulesCountResponse getRulesCount() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getRulesCountWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get Container File Defense Rule Details.</p>
     * 
     * @param request GetSasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSasContainerWebDefenseRuleResponse
     */
    public GetSasContainerWebDefenseRuleResponse getSasContainerWebDefenseRuleWithOptions(GetSasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSasContainerWebDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSasContainerWebDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get Container File Defense Rule Details.</p>
     * 
     * @param request GetSasContainerWebDefenseRuleRequest
     * @return GetSasContainerWebDefenseRuleResponse
     */
    public GetSasContainerWebDefenseRuleResponse getSasContainerWebDefenseRule(GetSasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the applications that are specified in a rule for container tamper-proofing.</p>
     * 
     * @param request GetSasContainerWebDefenseRuleApplicationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSasContainerWebDefenseRuleApplicationResponse
     */
    public GetSasContainerWebDefenseRuleApplicationResponse getSasContainerWebDefenseRuleApplicationWithOptions(GetSasContainerWebDefenseRuleApplicationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSasContainerWebDefenseRuleApplication"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSasContainerWebDefenseRuleApplicationResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSasContainerWebDefenseRuleApplicationResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the applications that are specified in a rule for container tamper-proofing.</p>
     * 
     * @param request GetSasContainerWebDefenseRuleApplicationRequest
     * @return GetSasContainerWebDefenseRuleApplicationResponse
     */
    public GetSasContainerWebDefenseRuleApplicationResponse getSasContainerWebDefenseRuleApplication(GetSasContainerWebDefenseRuleApplicationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSasContainerWebDefenseRuleApplicationWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries search conditions that can be used to search for container file protection rules.</p>
     * 
     * @param request GetSasContainerWebDefenseRuleCriteriaRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSasContainerWebDefenseRuleCriteriaResponse
     */
    public GetSasContainerWebDefenseRuleCriteriaResponse getSasContainerWebDefenseRuleCriteriaWithOptions(GetSasContainerWebDefenseRuleCriteriaRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSasContainerWebDefenseRuleCriteria"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSasContainerWebDefenseRuleCriteriaResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSasContainerWebDefenseRuleCriteriaResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries search conditions that can be used to search for container file protection rules.</p>
     * 
     * @param request GetSasContainerWebDefenseRuleCriteriaRequest
     * @return GetSasContainerWebDefenseRuleCriteriaResponse
     */
    public GetSasContainerWebDefenseRuleCriteriaResponse getSasContainerWebDefenseRuleCriteria(GetSasContainerWebDefenseRuleCriteriaRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSasContainerWebDefenseRuleCriteriaWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the deduction modules of the security score feature, including custom settings.</p>
     * 
     * @param request GetSecurityScoreRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSecurityScoreRuleResponse
     */
    public GetSecurityScoreRuleResponse getSecurityScoreRuleWithOptions(GetSecurityScoreRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSecurityScoreRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSecurityScoreRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSecurityScoreRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the deduction modules of the security score feature, including custom settings.</p>
     * 
     * @param request GetSecurityScoreRuleRequest
     * @return GetSecurityScoreRuleResponse
     */
    public GetSecurityScoreRuleResponse getSecurityScoreRule(GetSecurityScoreRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSecurityScoreRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the check rules of sensitive files.</p>
     * 
     * @param request GetSensitiveDefineRuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSensitiveDefineRuleConfigResponse
     */
    public GetSensitiveDefineRuleConfigResponse getSensitiveDefineRuleConfigWithOptions(GetSensitiveDefineRuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSensitiveDefineRuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSensitiveDefineRuleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSensitiveDefineRuleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the check rules of sensitive files.</p>
     * 
     * @param request GetSensitiveDefineRuleConfigRequest
     * @return GetSensitiveDefineRuleConfigResponse
     */
    public GetSensitiveDefineRuleConfigResponse getSensitiveDefineRuleConfig(GetSensitiveDefineRuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSensitiveDefineRuleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get Serverless Application Authorization Details</p>
     * 
     * @param request GetServerlessAppAuthDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetServerlessAppAuthDetailResponse
     */
    public GetServerlessAppAuthDetailResponse getServerlessAppAuthDetailWithOptions(GetServerlessAppAuthDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appId)) {
            query.put("AppId", request.appId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appRegionId)) {
            query.put("AppRegionId", request.appRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineType)) {
            query.put("MachineType", request.machineType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendorType)) {
            query.put("VendorType", request.vendorType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetServerlessAppAuthDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetServerlessAppAuthDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetServerlessAppAuthDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get Serverless Application Authorization Details</p>
     * 
     * @param request GetServerlessAppAuthDetailRequest
     * @return GetServerlessAppAuthDetailResponse
     */
    public GetServerlessAppAuthDetailResponse getServerlessAppAuthDetail(GetServerlessAppAuthDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getServerlessAppAuthDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get Serverless Authorization Overview</p>
     * 
     * @param request GetServerlessAuthSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetServerlessAuthSummaryResponse
     */
    public GetServerlessAuthSummaryResponse getServerlessAuthSummaryWithOptions(GetServerlessAuthSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appRegionId)) {
            query.put("AppRegionId", request.appRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineType)) {
            query.put("MachineType", request.machineType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendorType)) {
            query.put("VendorType", request.vendorType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetServerlessAuthSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetServerlessAuthSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetServerlessAuthSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get Serverless Authorization Overview</p>
     * 
     * @param request GetServerlessAuthSummaryRequest
     * @return GetServerlessAuthSummaryResponse
     */
    public GetServerlessAuthSummaryResponse getServerlessAuthSummary(GetServerlessAuthSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getServerlessAuthSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the service trail that was delivered to ActionTrail.</p>
     * 
     * @param request GetServiceTrailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetServiceTrailResponse
     */
    public GetServiceTrailResponse getServiceTrailWithOptions(GetServiceTrailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetServiceTrail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetServiceTrailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetServiceTrailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the service trail that was delivered to ActionTrail.</p>
     * 
     * @param request GetServiceTrailRequest
     * @return GetServiceTrailResponse
     */
    public GetServiceTrailResponse getServiceTrail(GetServiceTrailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getServiceTrailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the usage details of templates provided in the feature of proactive defense for containers for rules.</p>
     * 
     * @param request GetStrategyTemplateDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetStrategyTemplateDetailResponse
     */
    public GetStrategyTemplateDetailResponse getStrategyTemplateDetailWithOptions(GetStrategyTemplateDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetStrategyTemplateDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetStrategyTemplateDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetStrategyTemplateDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the usage details of templates provided in the feature of proactive defense for containers for rules.</p>
     * 
     * @param request GetStrategyTemplateDetailRequest
     * @return GetStrategyTemplateDetailResponse
     */
    public GetStrategyTemplateDetailResponse getStrategyTemplateDetail(GetStrategyTemplateDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getStrategyTemplateDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>获取授权支持的模块列表</p>
     * 
     * @param request GetSupportedModulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSupportedModulesResponse
     */
    public GetSupportedModulesResponse getSupportedModulesWithOptions(GetSupportedModulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSupportedModules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSupportedModulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSupportedModulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>获取授权支持的模块列表</p>
     * 
     * @param request GetSupportedModulesRequest
     * @return GetSupportedModulesResponse
     */
    public GetSupportedModulesResponse getSupportedModules(GetSupportedModulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSupportedModulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on alerts in one or more asset groups.</p>
     * 
     * @param request GetSuspiciousStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSuspiciousStatisticsResponse
     */
    public GetSuspiciousStatisticsResponse getSuspiciousStatisticsWithOptions(GetSuspiciousStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupIdList)) {
            query.put("GroupIdList", request.groupIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSuspiciousStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSuspiciousStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSuspiciousStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on alerts in one or more asset groups.</p>
     * 
     * @param request GetSuspiciousStatisticsRequest
     * @return GetSuspiciousStatisticsResponse
     */
    public GetSuspiciousStatisticsResponse getSuspiciousStatistics(GetSuspiciousStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSuspiciousStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.</p>
     * 
     * @param request GetSwitchRegionDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSwitchRegionDetailResponse
     */
    public GetSwitchRegionDetailResponse getSwitchRegionDetailWithOptions(GetSwitchRegionDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetSwitchRegionDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetSwitchRegionDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetSwitchRegionDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.</p>
     * 
     * @param request GetSwitchRegionDetailRequest
     * @return GetSwitchRegionDetailResponse
     */
    public GetSwitchRegionDetailResponse getSwitchRegionDetail(GetSwitchRegionDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getSwitchRegionDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).</p>
     * 
     * @param request GetTenantCheckAvailableRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTenantCheckAvailableResponse
     */
    public GetTenantCheckAvailableResponse getTenantCheckAvailableWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetTenantCheckAvailable"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetTenantCheckAvailableResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetTenantCheckAvailableResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).</p>
     * @return GetTenantCheckAvailableResponse
     */
    public GetTenantCheckAvailableResponse getTenantCheckAvailable() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getTenantCheckAvailableWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the language settings of log analysis.</p>
     * 
     * @param request GetUserLangRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserLangResponse
     */
    public GetUserLangResponse getUserLangWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetUserLang"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetUserLangResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetUserLangResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the language settings of log analysis.</p>
     * @return GetUserLangResponse
     */
    public GetUserLangResponse getUserLang() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getUserLangWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of a periodic virus scan task.</p>
     * 
     * @param request GetVirusScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVirusScanConfigResponse
     */
    public GetVirusScanConfigResponse getVirusScanConfigWithOptions(GetVirusScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVirusScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetVirusScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetVirusScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of a periodic virus scan task.</p>
     * 
     * @param request GetVirusScanConfigRequest
     * @return GetVirusScanConfigResponse
     */
    public GetVirusScanConfigResponse getVirusScanConfig(GetVirusScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVirusScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the latest virus scan task.</p>
     * 
     * @param request GetVirusScanLatestTaskStatisticRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVirusScanLatestTaskStatisticResponse
     */
    public GetVirusScanLatestTaskStatisticResponse getVirusScanLatestTaskStatisticWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVirusScanLatestTaskStatistic"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetVirusScanLatestTaskStatisticResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetVirusScanLatestTaskStatisticResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the latest virus scan task.</p>
     * @return GetVirusScanLatestTaskStatisticResponse
     */
    public GetVirusScanLatestTaskStatisticResponse getVirusScanLatestTaskStatistic() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVirusScanLatestTaskStatisticWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on vulnerabilities in asset groups.</p>
     * 
     * @param request GetVulStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVulStatisticsResponse
     */
    public GetVulStatisticsResponse getVulStatisticsWithOptions(GetVulStatisticsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupIdList)) {
            query.put("GroupIdList", request.groupIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.typeList)) {
            query.put("TypeList", request.typeList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVulStatistics"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetVulStatisticsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetVulStatisticsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics on vulnerabilities in asset groups.</p>
     * 
     * @param request GetVulStatisticsRequest
     * @return GetVulStatisticsResponse
     */
    public GetVulStatisticsResponse getVulStatistics(GetVulStatisticsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVulStatisticsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about a vulnerability whitelist.</p>
     * 
     * @param request GetVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetVulWhitelistResponse
     */
    public GetVulWhitelistResponse getVulWhitelistWithOptions(GetVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.vulWhitelistId)) {
            query.put("VulWhitelistId", request.vulWhitelistId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GetVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GetVulWhitelistResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GetVulWhitelistResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about a vulnerability whitelist.</p>
     * 
     * @param request GetVulWhitelistRequest
     * @return GetVulWhitelistResponse
     */
    public GetVulWhitelistResponse getVulWhitelist(GetVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.getVulWhitelistWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Authorization for Switching Migration</p>
     * 
     * @param request GrantSwitchAgreementRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GrantSwitchAgreementResponse
     */
    public GrantSwitchAgreementResponse grantSwitchAgreementWithOptions(GrantSwitchAgreementRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.isAgree)) {
            query.put("IsAgree", request.isAgree);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "GrantSwitchAgreement"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new GrantSwitchAgreementResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new GrantSwitchAgreementResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Authorization for Switching Migration</p>
     * 
     * @param request GrantSwitchAgreementRequest
     * @return GrantSwitchAgreementResponse
     */
    public GrantSwitchAgreementResponse grantSwitchAgreement(GrantSwitchAgreementRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.grantSwitchAgreementWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handle Malicious Files</p>
     * 
     * @param request HandleMaliciousFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return HandleMaliciousFilesResponse
     */
    public HandleMaliciousFilesResponse handleMaliciousFilesWithOptions(HandleMaliciousFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.fileIdList)) {
            query.put("FileIdList", request.fileIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operation)) {
            query.put("Operation", request.operation);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "HandleMaliciousFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new HandleMaliciousFilesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new HandleMaliciousFilesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handle Malicious Files</p>
     * 
     * @param request HandleMaliciousFilesRequest
     * @return HandleMaliciousFilesResponse
     */
    public HandleMaliciousFilesResponse handleMaliciousFiles(HandleMaliciousFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.handleMaliciousFilesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles alert events.</p>
     * 
     * @param request HandleSecurityEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return HandleSecurityEventsResponse
     */
    public HandleSecurityEventsResponse handleSecurityEventsWithOptions(HandleSecurityEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.markBatch)) {
            query.put("MarkBatch", request.markBatch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.markMissParam)) {
            query.put("MarkMissParam", request.markMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationParams)) {
            query.put("OperationParams", request.operationParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "HandleSecurityEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new HandleSecurityEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new HandleSecurityEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles alert events.</p>
     * 
     * @param request HandleSecurityEventsRequest
     * @return HandleSecurityEventsResponse
     */
    public HandleSecurityEventsResponse handleSecurityEvents(HandleSecurityEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.handleSecurityEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.</p>
     * 
     * @param request HandleSimilarSecurityEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return HandleSimilarSecurityEventsResponse
     */
    public HandleSimilarSecurityEventsResponse handleSimilarSecurityEventsWithOptions(HandleSimilarSecurityEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.markMissParam)) {
            query.put("MarkMissParam", request.markMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationParams)) {
            query.put("OperationParams", request.operationParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "HandleSimilarSecurityEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new HandleSimilarSecurityEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new HandleSimilarSecurityEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.</p>
     * 
     * @param request HandleSimilarSecurityEventsRequest
     * @return HandleSimilarSecurityEventsResponse
     */
    public HandleSimilarSecurityEventsResponse handleSimilarSecurityEvents(HandleSimilarSecurityEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.handleSimilarSecurityEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.</p>
     * 
     * @param request IgnoreCheckItemsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return IgnoreCheckItemsResponse
     */
    public IgnoreCheckItemsResponse ignoreCheckItemsWithOptions(IgnoreCheckItemsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkAndRiskTypeList)) {
            query.put("CheckAndRiskTypeList", request.checkAndRiskTypeList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "IgnoreCheckItems"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new IgnoreCheckItemsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new IgnoreCheckItemsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.</p>
     * 
     * @param request IgnoreCheckItemsRequest
     * @return IgnoreCheckItemsResponse
     */
    public IgnoreCheckItemsResponse ignoreCheckItems(IgnoreCheckItemsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.ignoreCheckItemsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.</p>
     * 
     * @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
     * 
     * @param request IgnoreHcCheckWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return IgnoreHcCheckWarningsResponse
     */
    @Deprecated
    // Deprecated
    public IgnoreHcCheckWarningsResponse ignoreHcCheckWarningsWithOptions(IgnoreHcCheckWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkWarningIds)) {
            query.put("CheckWarningIds", request.checkWarningIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "IgnoreHcCheckWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new IgnoreHcCheckWarningsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new IgnoreHcCheckWarningsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.</p>
     * 
     * @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
     * 
     * @param request IgnoreHcCheckWarningsRequest
     * @return IgnoreHcCheckWarningsResponse
     */
    @Deprecated
    // Deprecated
    public IgnoreHcCheckWarningsResponse ignoreHcCheckWarnings(IgnoreHcCheckWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.ignoreHcCheckWarningsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.</p>
     * 
     * @param request IgnoreIdcProbeScanResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return IgnoreIdcProbeScanResultResponse
     */
    public IgnoreIdcProbeScanResultResponse ignoreIdcProbeScanResultWithOptions(IgnoreIdcProbeScanResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ignoreAction)) {
            query.put("IgnoreAction", request.ignoreAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanResultIds)) {
            query.put("ScanResultIds", request.scanResultIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "IgnoreIdcProbeScanResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new IgnoreIdcProbeScanResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new IgnoreIdcProbeScanResultResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.</p>
     * 
     * @param request IgnoreIdcProbeScanResultRequest
     * @return IgnoreIdcProbeScanResultResponse
     */
    public IgnoreIdcProbeScanResultResponse ignoreIdcProbeScanResult(IgnoreIdcProbeScanResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.ignoreIdcProbeScanResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Installs the anti-ransomware agent.</p>
     * 
     * @param request InstallBackupClientRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallBackupClientResponse
     */
    public InstallBackupClientResponse installBackupClientWithOptions(InstallBackupClientRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallBackupClient"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new InstallBackupClientResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new InstallBackupClientResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Installs the anti-ransomware agent.</p>
     * 
     * @param request InstallBackupClientRequest
     * @return InstallBackupClientResponse
     */
    public InstallBackupClientResponse installBackupClient(InstallBackupClientRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installBackupClientWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <blockquote>
     * <p>Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.</p>
     * </blockquote>
     * 
     * <b>summary</b> : 
     * <p>Installs the CloudMonitor agent on specified servers.</p>
     * 
     * @param request InstallCloudMonitorRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallCloudMonitorResponse
     */
    public InstallCloudMonitorResponse installCloudMonitorWithOptions(InstallCloudMonitorRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.agentAccessKey)) {
            query.put("AgentAccessKey", request.agentAccessKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.agentSecretKey)) {
            query.put("AgentSecretKey", request.agentSecretKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.argusVersion)) {
            query.put("ArgusVersion", request.argusVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdList)) {
            query.put("InstanceIdList", request.instanceIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallCloudMonitor"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new InstallCloudMonitorResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new InstallCloudMonitorResponse());
        }

    }

    /**
     * <b>description</b> :
     * <blockquote>
     * <p>Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.</p>
     * </blockquote>
     * 
     * <b>summary</b> : 
     * <p>Installs the CloudMonitor agent on specified servers.</p>
     * 
     * @param request InstallCloudMonitorRequest
     * @return InstallCloudMonitorResponse
     */
    public InstallCloudMonitorResponse installCloudMonitor(InstallCloudMonitorRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installCloudMonitorWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Installs the Security Center agent on a proxy server in a hybrid cloud.</p>
     * 
     * @param request InstallHybridProxyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallHybridProxyResponse
     */
    public InstallHybridProxyResponse installHybridProxyWithOptions(InstallHybridProxyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.installCode)) {
            query.put("InstallCode", request.installCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.yundunUuids)) {
            query.put("YundunUuids", request.yundunUuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallHybridProxy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new InstallHybridProxyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new InstallHybridProxyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Installs the Security Center agent on a proxy server in a hybrid cloud.</p>
     * 
     * @param request InstallHybridProxyRequest
     * @return InstallHybridProxyResponse
     */
    public InstallHybridProxyResponse installHybridProxy(InstallHybridProxyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installHybridProxyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.</p>
     * 
     * @param request InstallPmAgentRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallPmAgentResponse
     */
    public InstallPmAgentResponse installPmAgentWithOptions(InstallPmAgentRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallPmAgent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new InstallPmAgentResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new InstallPmAgentResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.</p>
     * 
     * @param request InstallPmAgentRequest
     * @return InstallPmAgentResponse
     */
    public InstallPmAgentResponse installPmAgent(InstallPmAgentRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installPmAgentWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Installs the anti-ransomware agent for databases.</p>
     * 
     * @param request InstallUniBackupAgentRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallUniBackupAgentResponse
     */
    public InstallUniBackupAgentResponse installUniBackupAgentWithOptions(InstallUniBackupAgentRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "InstallUniBackupAgent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new InstallUniBackupAgentResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new InstallUniBackupAgentResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Installs the anti-ransomware agent for databases.</p>
     * 
     * @param request InstallUniBackupAgentRequest
     * @return InstallUniBackupAgentResponse
     */
    public InstallUniBackupAgentResponse installUniBackupAgent(InstallUniBackupAgentRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.installUniBackupAgentWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds processes to the process whitelist of web tamper proofing.</p>
     * 
     * @param request JoinWebLockProcessWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return JoinWebLockProcessWhiteListResponse
     */
    public JoinWebLockProcessWhiteListResponse joinWebLockProcessWhiteListWithOptions(JoinWebLockProcessWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.processPaths)) {
            query.put("ProcessPaths", request.processPaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "JoinWebLockProcessWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new JoinWebLockProcessWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new JoinWebLockProcessWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds processes to the process whitelist of web tamper proofing.</p>
     * 
     * @param request JoinWebLockProcessWhiteListRequest
     * @return JoinWebLockProcessWhiteListResponse
     */
    public JoinWebLockProcessWhiteListResponse joinWebLockProcessWhiteList(JoinWebLockProcessWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.joinWebLockProcessWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries members in the resource directory that is involved when the multi-account management feature is enabled.</p>
     * 
     * @param request ListAccountsInResourceDirectoryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAccountsInResourceDirectoryResponse
     */
    public ListAccountsInResourceDirectoryResponse listAccountsInResourceDirectoryWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAccountsInResourceDirectory"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAccountsInResourceDirectoryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAccountsInResourceDirectoryResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries members in the resource directory that is involved when the multi-account management feature is enabled.</p>
     * @return ListAccountsInResourceDirectoryResponse
     */
    public ListAccountsInResourceDirectoryResponse listAccountsInResourceDirectory() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAccountsInResourceDirectoryWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries defense rules against container escapes.</p>
     * 
     * @param request ListAegisContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAegisContainerPluginRuleResponse
     */
    public ListAegisContainerPluginRuleResponse listAegisContainerPluginRuleWithOptions(ListAegisContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAegisContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAegisContainerPluginRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAegisContainerPluginRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries defense rules against container escapes.</p>
     * 
     * @param request ListAegisContainerPluginRuleRequest
     * @return ListAegisContainerPluginRuleResponse
     */
    public ListAegisContainerPluginRuleResponse listAegisContainerPluginRule(ListAegisContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAegisContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query agentless detection assets.</p>
     * 
     * @param request ListAgentlessAssetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessAssetResponse
     */
    public ListAgentlessAssetResponse listAgentlessAssetWithOptions(ListAgentlessAssetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.diskType)) {
            query.put("DiskType", request.diskType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRegionId)) {
            query.put("ScanRegionId", request.scanRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessAsset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessAssetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAgentlessAssetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query agentless detection assets.</p>
     * 
     * @param request ListAgentlessAssetRequest
     * @return ListAgentlessAssetResponse
     */
    public ListAgentlessAssetResponse listAgentlessAsset(ListAgentlessAssetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessAssetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries malicious files that are detected by agentless detection tasks.</p>
     * 
     * @param request ListAgentlessMaliciousFilesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessMaliciousFilesResponse
     */
    public ListAgentlessMaliciousFilesResponse listAgentlessMaliciousFilesWithOptions(ListAgentlessMaliciousFilesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzyMaliciousName)) {
            query.put("FuzzyMaliciousName", request.fuzzyMaliciousName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levels)) {
            query.put("Levels", request.levels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousMd5)) {
            query.put("MaliciousMd5", request.maliciousMd5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousType)) {
            query.put("MaliciousType", request.maliciousType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessMaliciousFiles"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessMaliciousFilesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAgentlessMaliciousFilesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries malicious files that are detected by agentless detection tasks.</p>
     * 
     * @param request ListAgentlessMaliciousFilesRequest
     * @return ListAgentlessMaliciousFilesResponse
     */
    public ListAgentlessMaliciousFilesResponse listAgentlessMaliciousFiles(ListAgentlessMaliciousFilesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessMaliciousFilesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the regions that are supported by the agentless detection feature.</p>
     * 
     * @param request ListAgentlessRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessRegionResponse
     */
    public ListAgentlessRegionResponse listAgentlessRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessRegionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAgentlessRegionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the regions that are supported by the agentless detection feature.</p>
     * @return ListAgentlessRegionResponse
     */
    public ListAgentlessRegionResponse listAgentlessRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessRegionWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the risks associated with an agentless detection event.</p>
     * 
     * @param request ListAgentlessRelateMaliciousRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessRelateMaliciousResponse
     */
    public ListAgentlessRelateMaliciousResponse listAgentlessRelateMaliciousWithOptions(ListAgentlessRelateMaliciousRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventId)) {
            query.put("EventId", request.eventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenario)) {
            query.put("Scenario", request.scenario);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessRelateMalicious"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessRelateMaliciousResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAgentlessRelateMaliciousResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Obtains the risks associated with an agentless detection event.</p>
     * 
     * @param request ListAgentlessRelateMaliciousRequest
     * @return ListAgentlessRelateMaliciousResponse
     */
    public ListAgentlessRelateMaliciousResponse listAgentlessRelateMalicious(ListAgentlessRelateMaliciousRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessRelateMaliciousWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries at-risk hosts that are detected by the agentless detection feature.</p>
     * 
     * @param request ListAgentlessRiskUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessRiskUuidResponse
     */
    public ListAgentlessRiskUuidResponse listAgentlessRiskUuidWithOptions(ListAgentlessRiskUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.risk)) {
            query.put("Risk", request.risk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessRiskUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessRiskUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAgentlessRiskUuidResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries at-risk hosts that are detected by the agentless detection feature.</p>
     * 
     * @param request ListAgentlessRiskUuidRequest
     * @return ListAgentlessRiskUuidResponse
     */
    public ListAgentlessRiskUuidResponse listAgentlessRiskUuid(ListAgentlessRiskUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessRiskUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries agentless detection tasks.</p>
     * 
     * @param request ListAgentlessTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAgentlessTaskResponse
     */
    public ListAgentlessTaskResponse listAgentlessTaskWithOptions(ListAgentlessTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTask)) {
            query.put("RootTask", request.rootTask);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTaskId)) {
            query.put("RootTaskId", request.rootTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAgentlessTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAgentlessTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAgentlessTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries agentless detection tasks.</p>
     * 
     * @param request ListAgentlessTaskRequest
     * @return ListAgentlessTaskResponse
     */
    public ListAgentlessTaskResponse listAgentlessTask(ListAgentlessTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAgentlessTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations for cleaning offline hosts whose provider cannot be identified.</p>
     * 
     * @param request ListAssetCleanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetCleanConfigResponse
     */
    public ListAssetCleanConfigResponse listAssetCleanConfigWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetCleanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetCleanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAssetCleanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations for cleaning offline hosts whose provider cannot be identified.</p>
     * @return ListAssetCleanConfigResponse
     */
    public ListAssetCleanConfigResponse listAssetCleanConfig() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetCleanConfigWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the custom upgrade information about assets.</p>
     * 
     * @param request ListAssetInfoPublishRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetInfoPublishResponse
     */
    public ListAssetInfoPublishResponse listAssetInfoPublishWithOptions(ListAssetInfoPublishRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetInfoPublish"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetInfoPublishResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAssetInfoPublishResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the custom upgrade information about assets.</p>
     * 
     * @param request ListAssetInfoPublishRequest
     * @return ListAssetInfoPublishResponse
     */
    public ListAssetInfoPublishResponse listAssetInfoPublish(ListAssetInfoPublishRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetInfoPublishWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of asset synchronization.</p>
     * 
     * @param request ListAssetRefreshTaskConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetRefreshTaskConfigResponse
     */
    public ListAssetRefreshTaskConfigResponse listAssetRefreshTaskConfigWithOptions(ListAssetRefreshTaskConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.refreshConfigType)) {
            query.put("RefreshConfigType", request.refreshConfigType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetId)) {
            query.put("TargetId", request.targetId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetRefreshTaskConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetRefreshTaskConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAssetRefreshTaskConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configurations of asset synchronization.</p>
     * 
     * @param request ListAssetRefreshTaskConfigRequest
     * @return ListAssetRefreshTaskConfigResponse
     */
    public ListAssetRefreshTaskConfigResponse listAssetRefreshTaskConfig(ListAssetRefreshTaskConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetRefreshTaskConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the selected assets.</p>
     * 
     * @param request ListAssetSelectionSelectedTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetSelectionSelectedTargetResponse
     */
    public ListAssetSelectionSelectedTargetResponse listAssetSelectionSelectedTargetWithOptions(ListAssetSelectionSelectedTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetList)) {
            query.put("TargetList", request.targetList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetSelectionSelectedTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetSelectionSelectedTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAssetSelectionSelectedTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the selected assets.</p>
     * 
     * @param request ListAssetSelectionSelectedTargetRequest
     * @return ListAssetSelectionSelectedTargetResponse
     */
    public ListAssetSelectionSelectedTargetResponse listAssetSelectionSelectedTarget(ListAssetSelectionSelectedTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetSelectionSelectedTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the required asset.</p>
     * 
     * @param request ListAssetSelectionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAssetSelectionTargetResponse
     */
    public ListAssetSelectionTargetResponse listAssetSelectionTargetWithOptions(ListAssetSelectionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAssetSelectionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAssetSelectionTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAssetSelectionTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the required asset.</p>
     * 
     * @param request ListAssetSelectionTargetRequest
     * @return ListAssetSelectionTargetResponse
     */
    public ListAssetSelectionTargetResponse listAssetSelectionTarget(ListAssetSelectionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAssetSelectionTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration &gt; Feature Settings &gt; Multi-cloud Configuration Management &gt; Asset Management Rule page in the Security Center console.</p>
     * 
     * @param request ListAutoTagRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAutoTagRulesResponse
     */
    public ListAutoTagRulesResponse listAutoTagRulesWithOptions(ListAutoTagRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAutoTagRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAutoTagRulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAutoTagRulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration &gt; Feature Settings &gt; Multi-cloud Configuration Management &gt; Asset Management Rule page in the Security Center console.</p>
     * 
     * @param request ListAutoTagRulesRequest
     * @return ListAutoTagRulesResponse
     */
    public ListAutoTagRulesResponse listAutoTagRules(ListAutoTagRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAutoTagRulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about available honeypot templates.</p>
     * 
     * @param request ListAvailableHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAvailableHoneypotResponse
     */
    public ListAvailableHoneypotResponse listAvailableHoneypotWithOptions(ListAvailableHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListAvailableHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListAvailableHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListAvailableHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about available honeypot templates.</p>
     * 
     * @param request ListAvailableHoneypotRequest
     * @return ListAvailableHoneypotResponse
     */
    public ListAvailableHoneypotResponse listAvailableHoneypot(ListAvailableHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listAvailableHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries backup records.</p>
     * 
     * @param request ListBackupRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListBackupRecordResponse
     */
    public ListBackupRecordResponse listBackupRecordWithOptions(ListBackupRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.backupEndTime)) {
            query.put("BackupEndTime", request.backupEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.backupStartTime)) {
            query.put("BackupStartTime", request.backupStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineRemark)) {
            query.put("MachineRemark", request.machineRemark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListBackupRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListBackupRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListBackupRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries backup records.</p>
     * 
     * @param request ListBackupRecordRequest
     * @return ListBackupRecordResponse
     */
    public ListBackupRecordResponse listBackupRecord(ListBackupRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listBackupRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the whitelist rules for a baseline check item.</p>
     * 
     * @param tmpReq ListBaselineCheckWhiteRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListBaselineCheckWhiteRecordResponse
     */
    public ListBaselineCheckWhiteRecordResponse listBaselineCheckWhiteRecordWithOptions(ListBaselineCheckWhiteRecordRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ListBaselineCheckWhiteRecordShrinkRequest request = new ListBaselineCheckWhiteRecordShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.checkIds)) {
            request.checkIdsShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.checkIds, "CheckIds", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.recordIds)) {
            request.recordIdsShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.recordIds, "RecordIds", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIdsShrink)) {
            query.put("CheckIds", request.checkIdsShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkItemFuzzy)) {
            query.put("CheckItemFuzzy", request.checkItemFuzzy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.recordIdsShrink)) {
            query.put("RecordIds", request.recordIdsShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListBaselineCheckWhiteRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListBaselineCheckWhiteRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListBaselineCheckWhiteRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the whitelist rules for a baseline check item.</p>
     * 
     * @param request ListBaselineCheckWhiteRecordRequest
     * @return ListBaselineCheckWhiteRecordResponse
     */
    public ListBaselineCheckWhiteRecordResponse listBaselineCheckWhiteRecord(ListBaselineCheckWhiteRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listBaselineCheckWhiteRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the instances that failed a specified check item of configuration assessment.</p>
     * 
     * @param request ListCheckInstanceResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckInstanceResultResponse
     */
    public ListCheckInstanceResultResponse listCheckInstanceResultWithOptions(ListCheckInstanceResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIdKey)) {
            query.put("InstanceIdKey", request.instanceIdKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceNameKey)) {
            query.put("InstanceNameKey", request.instanceNameKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIdKey)) {
            query.put("RegionIdKey", request.regionIdKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortTypes)) {
            query.put("SortTypes", request.sortTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statuses)) {
            query.put("Statuses", request.statuses);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckInstanceResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckInstanceResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckInstanceResultResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the instances that failed a specified check item of configuration assessment.</p>
     * 
     * @param request ListCheckInstanceResultRequest
     * @return ListCheckInstanceResultResponse
     */
    public ListCheckInstanceResultResponse listCheckInstanceResult(ListCheckInstanceResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckInstanceResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the check items that can be customized.</p>
     * 
     * @param request ListCheckItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckItemResponse
     */
    public ListCheckItemResponse listCheckItemWithOptions(ListCheckItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the check items that can be customized.</p>
     * 
     * @param request ListCheckItemRequest
     * @return ListCheckItemResponse
     */
    public ListCheckItemResponse listCheckItem(ListCheckItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers that are affected by baseline risks.</p>
     * 
     * @param request ListCheckItemWarningMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckItemWarningMachineResponse
     */
    public ListCheckItemWarningMachineResponse listCheckItemWarningMachineWithOptions(ListCheckItemWarningMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskType)) {
            query.put("RiskType", request.riskType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckItemWarningMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckItemWarningMachineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckItemWarningMachineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the servers that are affected by baseline risks.</p>
     * 
     * @param request ListCheckItemWarningMachineRequest
     * @return ListCheckItemWarningMachineResponse
     */
    public ListCheckItemWarningMachineResponse listCheckItemWarningMachine(ListCheckItemWarningMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckItemWarningMachineWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk statistics of check items by page.</p>
     * 
     * @param request ListCheckItemWarningSummaryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckItemWarningSummaryResponse
     */
    public ListCheckItemWarningSummaryResponse listCheckItemWarningSummaryWithOptions(ListCheckItemWarningSummaryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkItemFuzzy)) {
            query.put("CheckItemFuzzy", request.checkItemFuzzy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkLevel)) {
            query.put("CheckLevel", request.checkLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkType)) {
            query.put("CheckType", request.checkType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkWarningStatus)) {
            query.put("CheckWarningStatus", request.checkWarningStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkWarningStatusList)) {
            query.put("CheckWarningStatusList", request.checkWarningStatusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldName)) {
            query.put("ContainerFieldName", request.containerFieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.containerFieldValue)) {
            query.put("ContainerFieldValue", request.containerFieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskType)) {
            query.put("RiskType", request.riskType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckItemWarningSummary"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckItemWarningSummaryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckItemWarningSummaryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk statistics of check items by page.</p>
     * 
     * @param request ListCheckItemWarningSummaryRequest
     * @return ListCheckItemWarningSummaryResponse
     */
    public ListCheckItemWarningSummaryResponse listCheckItemWarningSummary(ListCheckItemWarningSummaryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckItemWarningSummaryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the risk items that are detected in the configuration checks on cloud services.</p>
     * 
     * @param request ListCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckResultResponse
     */
    public ListCheckResultResponse listCheckResultWithOptions(ListCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkKey)) {
            query.put("CheckKey", request.checkKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.customParam)) {
            query.put("CustomParam", request.customParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceTypes)) {
            query.put("InstanceTypes", request.instanceTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationTypes)) {
            query.put("OperationTypes", request.operationTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requirementIds)) {
            query.put("RequirementIds", request.requirementIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevels)) {
            query.put("RiskLevels", request.riskLevels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sortTypes)) {
            query.put("SortTypes", request.sortTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.standardIds)) {
            query.put("StandardIds", request.standardIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statuses)) {
            query.put("Statuses", request.statuses);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckResultResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of the risk items that are detected in the configuration checks on cloud services.</p>
     * 
     * @param request ListCheckResultRequest
     * @return ListCheckResultResponse
     */
    public ListCheckResultResponse listCheckResult(ListCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Display cloud product configuration check rules</p>
     * 
     * @param request ListCheckRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckRuleResponse
     */
    public ListCheckRuleResponse listCheckRuleWithOptions(ListCheckRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Display cloud product configuration check rules</p>
     * 
     * @param request ListCheckRuleRequest
     * @return ListCheckRuleResponse
     */
    public ListCheckRuleResponse listCheckRule(ListCheckRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>List all effective machines under the rule</p>
     * 
     * @param request ListCheckRuleInstanceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckRuleInstanceResponse
     */
    public ListCheckRuleInstanceResponse listCheckRuleInstanceWithOptions(ListCheckRuleInstanceRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckRuleInstance"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckRuleInstanceResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckRuleInstanceResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>List all effective machines under the rule</p>
     * 
     * @param request ListCheckRuleInstanceRequest
     * @return ListCheckRuleInstanceResponse
     */
    public ListCheckRuleInstanceResponse listCheckRuleInstance(ListCheckRuleInstanceRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckRuleInstanceWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the standards of configuration checks.</p>
     * 
     * @param request ListCheckStandardRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckStandardResponse
     */
    public ListCheckStandardResponse listCheckStandardWithOptions(ListCheckStandardRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceSubTypes)) {
            query.put("InstanceSubTypes", request.instanceSubTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceTypes)) {
            query.put("InstanceTypes", request.instanceTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendors)) {
            query.put("Vendors", request.vendors);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckStandard"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckStandardResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckStandardResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the standards of configuration checks.</p>
     * 
     * @param request ListCheckStandardRequest
     * @return ListCheckStandardResponse
     */
    public ListCheckStandardResponse listCheckStandard(ListCheckStandardRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckStandardWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of check items that meet the specified conditions based on the ID of a baseline.</p>
     * 
     * @param request ListCheckTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCheckTypesResponse
     */
    public ListCheckTypesResponse listCheckTypesWithOptions(ListCheckTypesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskId)) {
            query.put("RiskId", request.riskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.showChecks)) {
            query.put("ShowChecks", request.showChecks);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCheckTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCheckTypesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCheckTypesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of check items that meet the specified conditions based on the ID of a baseline.</p>
     * 
     * @param request ListCheckTypesRequest
     * @return ListCheckTypesResponse
     */
    public ListCheckTypesResponse listCheckTypes(ListCheckTypesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCheckTypesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.</p>
     * 
     * @param request ListClientAlertModeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClientAlertModeResponse
     */
    public ListClientAlertModeResponse listClientAlertModeWithOptions(ListClientAlertModeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClientAlertMode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListClientAlertModeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListClientAlertModeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.</p>
     * 
     * @param request ListClientAlertModeRequest
     * @return ListClientAlertModeResponse
     */
    public ListClientAlertModeResponse listClientAlertMode(ListClientAlertModeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClientAlertModeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the supported types of custom defense rules.</p>
     * 
     * @param request ListClientUserDefineRuleTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClientUserDefineRuleTypesResponse
     */
    public ListClientUserDefineRuleTypesResponse listClientUserDefineRuleTypesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClientUserDefineRuleTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListClientUserDefineRuleTypesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListClientUserDefineRuleTypesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the supported types of custom defense rules.</p>
     * @return ListClientUserDefineRuleTypesResponse
     */
    public ListClientUserDefineRuleTypesResponse listClientUserDefineRuleTypes() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClientUserDefineRuleTypesWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries custom defense rules.</p>
     * 
     * @param request ListClientUserDefineRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClientUserDefineRulesResponse
     */
    public ListClientUserDefineRulesResponse listClientUserDefineRulesWithOptions(ListClientUserDefineRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClientUserDefineRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListClientUserDefineRulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListClientUserDefineRulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries custom defense rules.</p>
     * 
     * @param request ListClientUserDefineRulesRequest
     * @return ListClientUserDefineRulesResponse
     */
    public ListClientUserDefineRulesResponse listClientUserDefineRules(ListClientUserDefineRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClientUserDefineRulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries cloud service assets.</p>
     * 
     * @param request ListCloudAssetInstancesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCloudAssetInstancesResponse
     */
    public ListCloudAssetInstancesResponse listCloudAssetInstancesWithOptions(ListCloudAssetInstancesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetTypes)) {
            query.put("CloudAssetTypes", request.cloudAssetTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCloudAssetInstances"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCloudAssetInstancesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCloudAssetInstancesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries cloud service assets.</p>
     * 
     * @param request ListCloudAssetInstancesRequest
     * @return ListCloudAssetInstancesResponse
     */
    public ListCloudAssetInstancesResponse listCloudAssetInstances(ListCloudAssetInstancesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCloudAssetInstancesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the synchronization region configurations of other clouds on a site.</p>
     * 
     * @param request ListCloudVendorRegionsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCloudVendorRegionsResponse
     */
    public ListCloudVendorRegionsResponse listCloudVendorRegionsWithOptions(ListCloudVendorRegionsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCloudVendorRegions"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCloudVendorRegionsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCloudVendorRegionsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the synchronization region configurations of other clouds on a site.</p>
     * 
     * @param request ListCloudVendorRegionsRequest
     * @return ListCloudVendorRegionsResponse
     */
    public ListCloudVendorRegionsResponse listCloudVendorRegions(ListCloudVendorRegionsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCloudVendorRegionsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the protection status of the container firewall.</p>
     * 
     * @param request ListClusterCnnfStatusDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClusterCnnfStatusDetailResponse
     */
    public ListClusterCnnfStatusDetailResponse listClusterCnnfStatusDetailWithOptions(ListClusterCnnfStatusDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClusterCnnfStatusDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListClusterCnnfStatusDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListClusterCnnfStatusDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the protection status of the container firewall.</p>
     * 
     * @param request ListClusterCnnfStatusDetailRequest
     * @return ListClusterCnnfStatusDetailResponse
     */
    public ListClusterCnnfStatusDetailResponse listClusterCnnfStatusDetail(ListClusterCnnfStatusDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClusterCnnfStatusDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the defense rules that are created for a cluster.</p>
     * 
     * @param request ListClusterInterceptionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClusterInterceptionConfigResponse
     */
    public ListClusterInterceptionConfigResponse listClusterInterceptionConfigWithOptions(ListClusterInterceptionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterCNNFStatus)) {
            query.put("ClusterCNNFStatus", request.clusterCNNFStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClusterInterceptionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListClusterInterceptionConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListClusterInterceptionConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the defense rules that are created for a cluster.</p>
     * 
     * @param request ListClusterInterceptionConfigRequest
     * @return ListClusterInterceptionConfigResponse
     */
    public ListClusterInterceptionConfigResponse listClusterInterceptionConfig(ListClusterInterceptionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClusterInterceptionConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of plug-ins on clusters.</p>
     * 
     * @param request ListClusterPluginInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClusterPluginInfoResponse
     */
    public ListClusterPluginInfoResponse listClusterPluginInfoWithOptions(ListClusterPluginInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pluginName)) {
            query.put("PluginName", request.pluginName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListClusterPluginInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListClusterPluginInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListClusterPluginInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the status of plug-ins on clusters.</p>
     * 
     * @param request ListClusterPluginInfoRequest
     * @return ListClusterPluginInfoResponse
     */
    public ListClusterPluginInfoResponse listClusterPluginInfo(ListClusterPluginInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listClusterPluginInfoWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
     * To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
     * 1\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
     * 2\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the detection results of the files extracted from a package.</p>
     * 
     * @param request ListCompressFileDetectResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCompressFileDetectResultResponse
     */
    public ListCompressFileDetectResultResponse listCompressFileDetectResultWithOptions(ListCompressFileDetectResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hashKey)) {
            query.put("HashKey", request.hashKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCompressFileDetectResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCompressFileDetectResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCompressFileDetectResultResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
     * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
     * To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
     * 1\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
     * 2\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the detection results of the files extracted from a package.</p>
     * 
     * @param request ListCompressFileDetectResultRequest
     * @return ListCompressFileDetectResultResponse
     */
    public ListCompressFileDetectResultResponse listCompressFileDetectResult(ListCompressFileDetectResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCompressFileDetectResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of rules for non-image program defense.</p>
     * 
     * @param request ListContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListContainerDefenseRuleResponse
     */
    public ListContainerDefenseRuleResponse listContainerDefenseRuleWithOptions(ListContainerDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.conditions)) {
            query.put("Conditions", request.conditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isDefaultRule)) {
            query.put("IsDefaultRule", request.isDefaultRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListContainerDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListContainerDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of rules for non-image program defense.</p>
     * 
     * @param request ListContainerDefenseRuleRequest
     * @return ListContainerDefenseRuleResponse
     */
    public ListContainerDefenseRuleResponse listContainerDefenseRule(ListContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of clusters that are included in a rule for non-image program defense.</p>
     * 
     * @param request ListContainerDefenseRuleClustersRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListContainerDefenseRuleClustersResponse
     */
    public ListContainerDefenseRuleClustersResponse listContainerDefenseRuleClustersWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListContainerDefenseRuleClusters"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListContainerDefenseRuleClustersResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListContainerDefenseRuleClustersResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries a list of clusters that are included in a rule for non-image program defense.</p>
     * @return ListContainerDefenseRuleClustersResponse
     */
    public ListContainerDefenseRuleClustersResponse listContainerDefenseRuleClusters() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listContainerDefenseRuleClustersWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the IDs and names of rules configured for proactive defense for containers.</p>
     * 
     * @param request ListCriteriaStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCriteriaStrategyResponse
     */
    public ListCriteriaStrategyResponse listCriteriaStrategyWithOptions(ListCriteriaStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListCriteriaStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListCriteriaStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListCriteriaStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the IDs and names of rules configured for proactive defense for containers.</p>
     * 
     * @param request ListCriteriaStrategyRequest
     * @return ListCriteriaStrategyResponse
     */
    public ListCriteriaStrategyResponse listCriteriaStrategy(ListCriteriaStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listCriteriaStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query Dockerhub Image.</p>
     * 
     * @param request ListDockerhubImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListDockerhubImageResponse
     */
    public ListDockerhubImageResponse listDockerhubImageWithOptions(ListDockerhubImageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.query)) {
            query.put("Query", request.query);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListDockerhubImage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListDockerhubImageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListDockerhubImageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query Dockerhub Image.</p>
     * 
     * @param request ListDockerhubImageRequest
     * @return ListDockerhubImageResponse
     */
    public ListDockerhubImageResponse listDockerhubImage(ListDockerhubImageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listDockerhubImageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries core file monitoring rules that meet the specified filter condition.</p>
     * 
     * @param request ListFileProtectEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFileProtectEventResponse
     */
    public ListFileProtectEventResponse listFileProtectEventWithOptions(ListFileProtectEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevels)) {
            query.put("AlertLevels", request.alertLevels);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceName)) {
            query.put("InstanceName", request.instanceName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operation)) {
            query.put("Operation", request.operation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListFileProtectEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListFileProtectEventResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListFileProtectEventResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries core file monitoring rules that meet the specified filter condition.</p>
     * 
     * @param request ListFileProtectEventRequest
     * @return ListFileProtectEventResponse
     */
    public ListFileProtectEventResponse listFileProtectEvent(ListFileProtectEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listFileProtectEventWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.</p>
     * 
     * @param request ListFileProtectPluginStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFileProtectPluginStatusResponse
     */
    public ListFileProtectPluginStatusResponse listFileProtectPluginStatusWithOptions(ListFileProtectPluginStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchId)) {
            query.put("SwitchId", request.switchId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListFileProtectPluginStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListFileProtectPluginStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListFileProtectPluginStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.</p>
     * 
     * @param request ListFileProtectPluginStatusRequest
     * @return ListFileProtectPluginStatusResponse
     */
    public ListFileProtectPluginStatusResponse listFileProtectPluginStatus(ListFileProtectPluginStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listFileProtectPluginStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries core file monitoring rules.</p>
     * 
     * @param request ListFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFileProtectRuleResponse
     */
    public ListFileProtectRuleResponse listFileProtectRuleWithOptions(ListFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListFileProtectRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListFileProtectRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries core file monitoring rules.</p>
     * 
     * @param request ListFileProtectRuleRequest
     * @return ListFileProtectRuleResponse
     */
    public ListFileProtectRuleResponse listFileProtectRule(ListFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the server groups.</p>
     * 
     * @param request ListGroupsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListGroupsResponse
     */
    public ListGroupsResponse listGroupsWithOptions(ListGroupsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nextToken)) {
            query.put("NextToken", request.nextToken);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.useNextToken)) {
            query.put("UseNextToken", request.useNextToken);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListGroups"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListGroupsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListGroupsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the server groups.</p>
     * 
     * @param request ListGroupsRequest
     * @return ListGroupsResponse
     */
    public ListGroupsResponse listGroups(ListGroupsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listGroupsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about honeypots.</p>
     * 
     * @param request ListHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotResponse
     */
    public ListHoneypotResponse listHoneypotWithOptions(ListHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotIds)) {
            query.put("HoneypotIds", request.honeypotIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotName)) {
            query.put("HoneypotName", request.honeypotName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about honeypots.</p>
     * 
     * @param request ListHoneypotRequest
     * @return ListHoneypotResponse
     */
    public ListHoneypotResponse listHoneypot(ListHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about alert events that are generated.</p>
     * 
     * @param request ListHoneypotAlarmEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotAlarmEventsResponse
     */
    public ListHoneypotAlarmEventsResponse listHoneypotAlarmEventsWithOptions(ListHoneypotAlarmEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotAlarmEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotAlarmEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotAlarmEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about alert events that are generated.</p>
     * 
     * @param request ListHoneypotAlarmEventsRequest
     * @return ListHoneypotAlarmEventsResponse
     */
    public ListHoneypotAlarmEventsResponse listHoneypotAlarmEvents(ListHoneypotAlarmEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotAlarmEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the attacker profile based on the source IP address of the attack.</p>
     * 
     * @param request ListHoneypotAttackerPortraitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotAttackerPortraitResponse
     */
    public ListHoneypotAttackerPortraitResponse listHoneypotAttackerPortraitWithOptions(ListHoneypotAttackerPortraitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotAttackerPortrait"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotAttackerPortraitResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotAttackerPortraitResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the attacker profile based on the source IP address of the attack.</p>
     * 
     * @param request ListHoneypotAttackerPortraitRequest
     * @return ListHoneypotAttackerPortraitResponse
     */
    public ListHoneypotAttackerPortraitResponse listHoneypotAttackerPortrait(ListHoneypotAttackerPortraitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotAttackerPortraitWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the attack source IP addresses that are used to attack a honeypot.</p>
     * 
     * @param request ListHoneypotAttackerSourceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotAttackerSourceResponse
     */
    public ListHoneypotAttackerSourceResponse listHoneypotAttackerSourceWithOptions(ListHoneypotAttackerSourceRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTimeStamp)) {
            query.put("EndTimeStamp", request.endTimeStamp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevelList)) {
            query.put("RiskLevelList", request.riskLevelList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcIp)) {
            query.put("SrcIp", request.srcIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTimeStamp)) {
            query.put("StartTimeStamp", request.startTimeStamp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotAttackerSource"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotAttackerSourceResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotAttackerSourceResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the attack source IP addresses that are used to attack a honeypot.</p>
     * 
     * @param request ListHoneypotAttackerSourceRequest
     * @return ListHoneypotAttackerSourceResponse
     */
    public ListHoneypotAttackerSourceResponse listHoneypotAttackerSource(ListHoneypotAttackerSourceRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotAttackerSourceWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an intrusion event in a honeypot.</p>
     * 
     * @param request ListHoneypotEventFlowsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotEventFlowsResponse
     */
    public ListHoneypotEventFlowsResponse listHoneypotEventFlowsWithOptions(ListHoneypotEventFlowsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dealed)) {
            query.put("Dealed", request.dealed);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requestId)) {
            query.put("RequestId", request.requestId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventId)) {
            query.put("SecurityEventId", request.securityEventId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotEventFlows"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotEventFlowsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotEventFlowsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of an intrusion event in a honeypot.</p>
     * 
     * @param request ListHoneypotEventFlowsRequest
     * @return ListHoneypotEventFlowsResponse
     */
    public ListHoneypotEventFlowsResponse listHoneypotEventFlows(ListHoneypotEventFlowsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotEventFlowsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the intrusion events detected by honeypots.</p>
     * 
     * @param request ListHoneypotEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotEventsResponse
     */
    public ListHoneypotEventsResponse listHoneypotEventsWithOptions(ListHoneypotEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the intrusion events detected by honeypots.</p>
     * 
     * @param request ListHoneypotEventsRequest
     * @return ListHoneypotEventsResponse
     */
    public ListHoneypotEventsResponse listHoneypotEvents(ListHoneypotEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about management nodes.</p>
     * 
     * @param request ListHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotNodeResponse
     */
    public ListHoneypotNodeResponse listHoneypotNodeWithOptions(ListHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about management nodes.</p>
     * 
     * @param request ListHoneypotNodeRequest
     * @return ListHoneypotNodeResponse
     */
    public ListHoneypotNodeResponse listHoneypotNode(ListHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries honeypot templates.</p>
     * 
     * @param request ListHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotPresetResponse
     */
    public ListHoneypotPresetResponse listHoneypotPresetWithOptions(ListHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.presetName)) {
            query.put("PresetName", request.presetName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotPresetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotPresetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries honeypot templates.</p>
     * 
     * @param request ListHoneypotPresetRequest
     * @return ListHoneypotPresetResponse
     */
    public ListHoneypotPresetResponse listHoneypotPreset(ListHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries probes.</p>
     * 
     * @param request ListHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotProbeResponse
     */
    public ListHoneypotProbeResponse listHoneypotProbeWithOptions(ListHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.displayName)) {
            query.put("DisplayName", request.displayName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeStatus)) {
            query.put("ProbeStatus", request.probeStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeType)) {
            query.put("ProbeType", request.probeType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries probes.</p>
     * 
     * @param request ListHoneypotProbeRequest
     * @return ListHoneypotProbeResponse
     */
    public ListHoneypotProbeResponse listHoneypotProbe(ListHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>查询已安装的探针</p>
     * 
     * @param request ListHoneypotProbeUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHoneypotProbeUuidResponse
     */
    public ListHoneypotProbeUuidResponse listHoneypotProbeUuidWithOptions(ListHoneypotProbeUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.controlNodeId)) {
            query.put("ControlNodeId", request.controlNodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeType)) {
            query.put("ProbeType", request.probeType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListHoneypotProbeUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListHoneypotProbeUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListHoneypotProbeUuidResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>查询已安装的探针</p>
     * 
     * @param request ListHoneypotProbeUuidRequest
     * @return ListHoneypotProbeUuidResponse
     */
    public ListHoneypotProbeUuidResponse listHoneypotProbeUuid(ListHoneypotProbeUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listHoneypotProbeUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of risky image build commands.</p>
     * 
     * @param request ListImageBuildRiskItemRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListImageBuildRiskItemResponse
     */
    public ListImageBuildRiskItemResponse listImageBuildRiskItemWithOptions(ListImageBuildRiskItemRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListImageBuildRiskItem"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListImageBuildRiskItemResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListImageBuildRiskItemResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of risky image build commands.</p>
     * 
     * @param request ListImageBuildRiskItemRequest
     * @return ListImageBuildRiskItemResponse
     */
    public ListImageBuildRiskItemResponse listImageBuildRiskItem(ListImageBuildRiskItemRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listImageBuildRiskItemWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query Image Registry Extended Information.</p>
     * 
     * @param request ListImageRegistryExtraRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListImageRegistryExtraResponse
     */
    public ListImageRegistryExtraResponse listImageRegistryExtraWithOptions(ListImageRegistryExtraRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            query.put("RegistryId", request.registryId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListImageRegistryExtra"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListImageRegistryExtraResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListImageRegistryExtraResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query Image Registry Extended Information.</p>
     * 
     * @param request ListImageRegistryExtraRequest
     * @return ListImageRegistryExtraResponse
     */
    public ListImageRegistryExtraResponse listImageRegistryExtra(ListImageRegistryExtraRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listImageRegistryExtraWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>The region ID of the image.</p>
     * 
     * @param request ListImageRegistryRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListImageRegistryRegionResponse
     */
    public ListImageRegistryRegionResponse listImageRegistryRegionWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListImageRegistryRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListImageRegistryRegionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListImageRegistryRegionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>The region ID of the image.</p>
     * @return ListImageRegistryRegionResponse
     */
    public ListImageRegistryRegionResponse listImageRegistryRegion() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listImageRegistryRegionWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries security information about a container image.</p>
     * 
     * @param request ListImageRiskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListImageRiskResponse
     */
    public ListImageRiskResponse listImageRiskWithOptions(ListImageRiskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListImageRisk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListImageRiskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListImageRiskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries security information about a container image.</p>
     * 
     * @param request ListImageRiskRequest
     * @return ListImageRiskResponse
     */
    public ListImageRiskResponse listImageRisk(ListImageRiskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listImageRiskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the asset types and asset subtypes for configuration assessment.</p>
     * 
     * @param request ListInstanceCatalogRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInstanceCatalogResponse
     */
    public ListInstanceCatalogResponse listInstanceCatalogWithOptions(ListInstanceCatalogRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionId)) {
            query.put("RegionId", request.regionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.requirementIds)) {
            query.put("RequirementIds", request.requirementIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.standardIds)) {
            query.put("StandardIds", request.standardIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInstanceCatalog"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListInstanceCatalogResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListInstanceCatalogResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the asset types and asset subtypes for configuration assessment.</p>
     * 
     * @param request ListInstanceCatalogRequest
     * @return ListInstanceCatalogResponse
     */
    public ListInstanceCatalogResponse listInstanceCatalog(ListInstanceCatalogRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInstanceCatalogWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk levels of instances.</p>
     * 
     * @param request ListInstanceRiskLevelsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInstanceRiskLevelsResponse
     */
    public ListInstanceRiskLevelsResponse listInstanceRiskLevelsWithOptions(ListInstanceRiskLevelsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceList)) {
            query.put("InstanceList", request.instanceList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInstanceRiskLevels"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListInstanceRiskLevelsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListInstanceRiskLevelsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk levels of instances.</p>
     * 
     * @param request ListInstanceRiskLevelsRequest
     * @return ListInstanceRiskLevelsResponse
     */
    public ListInstanceRiskLevelsResponse listInstanceRiskLevels(ListInstanceRiskLevelsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInstanceRiskLevelsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics about risks in instances.</p>
     * 
     * @param request ListInstanceRiskNumRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInstanceRiskNumResponse
     */
    public ListInstanceRiskNumResponse listInstanceRiskNumWithOptions(ListInstanceRiskNumRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceList)) {
            query.put("InstanceList", request.instanceList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInstanceRiskNum"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListInstanceRiskNumResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListInstanceRiskNumResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the statistics about risks in instances.</p>
     * 
     * @param request ListInstanceRiskNumRequest
     * @return ListInstanceRiskNumResponse
     */
    public ListInstanceRiskNumResponse listInstanceRiskNum(ListInstanceRiskNumRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInstanceRiskNumWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alerts generated by defense rules.</p>
     * 
     * @param request ListInterceptionHistoryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInterceptionHistoryResponse
     */
    public ListInterceptionHistoryResponse listInterceptionHistoryWithOptions(ListInterceptionHistoryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.historyName)) {
            query.put("HistoryName", request.historyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interceptionTypes)) {
            query.put("InterceptionTypes", request.interceptionTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInterceptionHistory"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListInterceptionHistoryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListInterceptionHistoryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alerts generated by defense rules.</p>
     * 
     * @param request ListInterceptionHistoryRequest
     * @return ListInterceptionHistoryResponse
     */
    public ListInterceptionHistoryResponse listInterceptionHistory(ListInterceptionHistoryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInterceptionHistoryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries defense rules that are configured for the container firewall feature.</p>
     * 
     * @param request ListInterceptionRulePageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInterceptionRulePageResponse
     */
    public ListInterceptionRulePageResponse listInterceptionRulePageWithOptions(ListInterceptionRulePageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteriaType)) {
            query.put("CriteriaType", request.criteriaType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInterceptionRulePage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListInterceptionRulePageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListInterceptionRulePageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries defense rules that are configured for the container firewall feature.</p>
     * 
     * @param request ListInterceptionRulePageRequest
     * @return ListInterceptionRulePageResponse
     */
    public ListInterceptionRulePageResponse listInterceptionRulePage(ListInterceptionRulePageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInterceptionRulePageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the network objects that are protected by the container firewall feature.</p>
     * 
     * @param request ListInterceptionTargetPageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListInterceptionTargetPageResponse
     */
    public ListInterceptionTargetPageResponse listInterceptionTargetPageWithOptions(ListInterceptionTargetPageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageList)) {
            query.put("ImageList", request.imageList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListInterceptionTargetPage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListInterceptionTargetPageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListInterceptionTargetPageResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the network objects that are protected by the container firewall feature.</p>
     * 
     * @param request ListInterceptionTargetPageRequest
     * @return ListInterceptionTargetPageResponse
     */
    public ListInterceptionTargetPageResponse listInterceptionTargetPage(ListInterceptionTargetPageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listInterceptionTargetPageWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can use this operation to query the access information about Kubernetes clusters.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about Kubernetes clusters that are added to Security Center.</p>
     * 
     * @param request ListK8sAccessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListK8sAccessInfoResponse
     */
    public ListK8sAccessInfoResponse listK8sAccessInfoWithOptions(ListK8sAccessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayApiName)) {
            query.put("AliyunYundunGatewayApiName", request.aliyunYundunGatewayApiName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayPopName)) {
            query.put("AliyunYundunGatewayPopName", request.aliyunYundunGatewayPopName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.aliyunYundunGatewayProjectName)) {
            query.put("AliyunYundunGatewayProjectName", request.aliyunYundunGatewayProjectName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListK8sAccessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListK8sAccessInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListK8sAccessInfoResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can use this operation to query the access information about Kubernetes clusters.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the information about Kubernetes clusters that are added to Security Center.</p>
     * 
     * @param request ListK8sAccessInfoRequest
     * @return ListK8sAccessInfoResponse
     */
    public ListK8sAccessInfoResponse listK8sAccessInfo(ListK8sAccessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listK8sAccessInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.</p>
     * 
     * @param request ListLogShipperRegionsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListLogShipperRegionsResponse
     */
    public ListLogShipperRegionsResponse listLogShipperRegionsWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListLogShipperRegions"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListLogShipperRegionsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListLogShipperRegionsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.</p>
     * @return ListLogShipperRegionsResponse
     */
    public ListLogShipperRegionsResponse listLogShipperRegions() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listLogShipperRegionsWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Paginate to query the application list.</p>
     * 
     * @param request ListMachineAppsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListMachineAppsResponse
     */
    public ListMachineAppsResponse listMachineAppsWithOptions(ListMachineAppsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appId)) {
            query.put("AppId", request.appId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appRegionId)) {
            query.put("AppRegionId", request.appRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authVersion)) {
            query.put("AuthVersion", request.authVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryUid)) {
            query.put("ResourceDirectoryUid", request.resourceDirectoryUid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListMachineApps"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListMachineAppsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListMachineAppsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Paginate to query the application list.</p>
     * 
     * @param request ListMachineAppsRequest
     * @return ListMachineAppsResponse
     */
    public ListMachineAppsResponse listMachineApps(ListMachineAppsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listMachineAppsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request ListMaliciousFileWhitelistConfigsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListMaliciousFileWhitelistConfigsResponse
     */
    public ListMaliciousFileWhitelistConfigsResponse listMaliciousFileWhitelistConfigsWithOptions(ListMaliciousFileWhitelistConfigsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListMaliciousFileWhitelistConfigs"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListMaliciousFileWhitelistConfigsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListMaliciousFileWhitelistConfigsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request ListMaliciousFileWhitelistConfigsRequest
     * @return ListMaliciousFileWhitelistConfigsResponse
     */
    public ListMaliciousFileWhitelistConfigsResponse listMaliciousFileWhitelistConfigs(ListMaliciousFileWhitelistConfigsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listMaliciousFileWhitelistConfigsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries alerts that are generated for malicious files.</p>
     * 
     * @param request ListObjectScanEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListObjectScanEventResponse
     */
    public ListObjectScanEventResponse listObjectScanEventWithOptions(ListObjectScanEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.md5)) {
            query.put("Md5", request.md5);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ossKey)) {
            query.put("OssKey", request.ossKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentEventId)) {
            query.put("ParentEventId", request.parentEventId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskLevel)) {
            query.put("RiskLevel", request.riskLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeEnd)) {
            query.put("TimeEnd", request.timeEnd);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeStart)) {
            query.put("TimeStart", request.timeStart);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListObjectScanEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListObjectScanEventResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListObjectScanEventResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries alerts that are generated for malicious files.</p>
     * 
     * @param request ListObjectScanEventRequest
     * @return ListObjectScanEventResponse
     */
    public ListObjectScanEventResponse listObjectScanEvent(ListObjectScanEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listObjectScanEventWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries at-risk image blocking rules.</p>
     * 
     * @param request ListOpaClusterStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOpaClusterStrategyNewResponse
     */
    public ListOpaClusterStrategyNewResponse listOpaClusterStrategyNewWithOptions(ListOpaClusterStrategyNewRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOpaClusterStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOpaClusterStrategyNewResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOpaClusterStrategyNewResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries at-risk image blocking rules.</p>
     * 
     * @param request ListOpaClusterStrategyNewRequest
     * @return ListOpaClusterStrategyNewResponse
     */
    public ListOpaClusterStrategyNewResponse listOpaClusterStrategyNew(ListOpaClusterStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOpaClusterStrategyNewWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.</p>
     * 
     * <b>summary</b> : 
     * <p>Query the list of instance results under the operation check item</p>
     * 
     * @param request ListOperationCheckRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOperationCheckResponse
     */
    public ListOperationCheckResponse listOperationCheckWithOptions(ListOperationCheckRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOperationCheck"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOperationCheckResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOperationCheckResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.</p>
     * 
     * <b>summary</b> : 
     * <p>Query the list of instance results under the operation check item</p>
     * 
     * @param request ListOperationCheckRequest
     * @return ListOperationCheckResponse
     */
    public ListOperationCheckResponse listOperationCheck(ListOperationCheckRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOperationCheckWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can query only operation tasks.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of operation tasks.</p>
     * 
     * @param request ListOperationProcessRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOperationProcessResponse
     */
    public ListOperationProcessResponse listOperationProcessWithOptions(ListOperationProcessRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusCodes)) {
            query.put("StatusCodes", request.statusCodes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskIds)) {
            query.put("TaskIds", request.taskIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskTypes)) {
            query.put("TaskTypes", request.taskTypes);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOperationProcess"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOperationProcessResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOperationProcessResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can query only operation tasks.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries a list of operation tasks.</p>
     * 
     * @param request ListOperationProcessRequest
     * @return ListOperationProcessResponse
     */
    public ListOperationProcessResponse listOperationProcess(ListOperationProcessRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOperationProcessWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can query only operation subtasks.</p>
     * 
     * <b>summary</b> : 
     * <p>查询操作任务子任务列表</p>
     * 
     * @param request ListOperationProcessDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOperationProcessDetailResponse
     */
    public ListOperationProcessDetailResponse listOperationProcessDetailWithOptions(ListOperationProcessDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusCodes)) {
            query.put("StatusCodes", request.statusCodes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskIds)) {
            query.put("TaskIds", request.taskIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOperationProcessDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOperationProcessDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOperationProcessDetailResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can query only operation subtasks.</p>
     * 
     * <b>summary</b> : 
     * <p>查询操作任务子任务列表</p>
     * 
     * @param request ListOperationProcessDetailRequest
     * @return ListOperationProcessDetailResponse
     */
    public ListOperationProcessDetailResponse listOperationProcessDetail(ListOperationProcessDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOperationProcessDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Display the list of cloud product configuration check, repair, and rollback tasks</p>
     * 
     * @param request ListOperationTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOperationTaskResponse
     */
    public ListOperationTaskResponse listOperationTaskWithOptions(ListOperationTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOperationTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOperationTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOperationTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Display the list of cloud product configuration check, repair, and rollback tasks</p>
     * 
     * @param request ListOperationTaskRequest
     * @return ListOperationTaskResponse
     */
    public ListOperationTaskResponse listOperationTask(ListOperationTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOperationTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries Object Storage Service (OSS) buckets.</p>
     * 
     * @param request ListOssBucketRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOssBucketResponse
     */
    public ListOssBucketResponse listOssBucketWithOptions(ListOssBucketRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOssBucket"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOssBucketResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOssBucketResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries Object Storage Service (OSS) buckets.</p>
     * 
     * @param request ListOssBucketRequest
     * @return ListOssBucketResponse
     */
    public ListOssBucketResponse listOssBucket(ListOssBucketRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOssBucketWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk information of an Object Storage Service (OSS) bucket.</p>
     * 
     * @param request ListOssBucketScanInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOssBucketScanInfoResponse
     */
    public ListOssBucketScanInfoResponse listOssBucketScanInfoWithOptions(ListOssBucketScanInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fuzzBucketName)) {
            query.put("FuzzBucketName", request.fuzzBucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.hasRisk)) {
            query.put("HasRisk", request.hasRisk);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOssBucketScanInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOssBucketScanInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOssBucketScanInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the risk information of an Object Storage Service (OSS) bucket.</p>
     * 
     * @param request ListOssBucketScanInfoRequest
     * @return ListOssBucketScanInfoResponse
     */
    public ListOssBucketScanInfoResponse listOssBucketScanInfo(ListOssBucketScanInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOssBucketScanInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configuration of an Object Storage Service (OSS) file detection policy.</p>
     * 
     * @param request ListOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOssScanConfigResponse
     */
    public ListOssScanConfigResponse listOssScanConfigWithOptions(ListOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListOssScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListOssScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the configuration of an Object Storage Service (OSS) file detection policy.</p>
     * 
     * @param request ListOssScanConfigRequest
     * @return ListOssScanConfigResponse
     */
    public ListOssScanConfigResponse listOssScanConfig(ListOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listOssScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about plug-ins on a server.</p>
     * 
     * @param tmpReq ListPluginForUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPluginForUuidResponse
     */
    public ListPluginForUuidResponse listPluginForUuidWithOptions(ListPluginForUuidRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ListPluginForUuidShrinkRequest request = new ListPluginForUuidShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.types)) {
            request.typesShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.types, "Types", "simple");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.typesShrink)) {
            query.put("Types", request.typesShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPluginForUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListPluginForUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListPluginForUuidResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about plug-ins on a server.</p>
     * 
     * @param request ListPluginForUuidRequest
     * @return ListPluginForUuidResponse
     */
    public ListPluginForUuidResponse listPluginForUuid(ListPluginForUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPluginForUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security risks of a pod.</p>
     * 
     * @param request ListPodRiskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPodRiskResponse
     */
    public ListPodRiskResponse listPodRiskWithOptions(ListPodRiskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.podName)) {
            query.put("PodName", request.podName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPodRisk"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListPodRiskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListPodRiskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the security risks of a pod.</p>
     * 
     * @param request ListPodRiskRequest
     * @return ListPodRiskResponse
     */
    public ListPodRiskResponse listPodRisk(ListPodRiskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPodRiskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the self-managed Kubernetes clusters that are added to Security Center.</p>
     * 
     * @param request ListPrivateK8sRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPrivateK8sResponse
     */
    public ListPrivateK8sResponse listPrivateK8sWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPrivateK8s"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListPrivateK8sResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListPrivateK8sResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the self-managed Kubernetes clusters that are added to Security Center.</p>
     * @return ListPrivateK8sResponse
     */
    public ListPrivateK8sResponse listPrivateK8s() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPrivateK8sWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries image repositories.</p>
     * 
     * @param request ListPrivateRegistryListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPrivateRegistryListResponse
     */
    public ListPrivateRegistryListResponse listPrivateRegistryListWithOptions(ListPrivateRegistryListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryType)) {
            query.put("RegistryType", request.registryType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPrivateRegistryList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListPrivateRegistryListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListPrivateRegistryListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries image repositories.</p>
     * 
     * @param request ListPrivateRegistryListRequest
     * @return ListPrivateRegistryListResponse
     */
    public ListPrivateRegistryListResponse listPrivateRegistryList(ListPrivateRegistryListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPrivateRegistryListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of image repositories of each type.</p>
     * 
     * @param request ListPrivateRegistryTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPrivateRegistryTypeResponse
     */
    public ListPrivateRegistryTypeResponse listPrivateRegistryTypeWithOptions(ListPrivateRegistryTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPrivateRegistryType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListPrivateRegistryTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListPrivateRegistryTypeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of image repositories of each type.</p>
     * 
     * @param request ListPrivateRegistryTypeRequest
     * @return ListPrivateRegistryTypeResponse
     */
    public ListPrivateRegistryTypeResponse listPrivateRegistryType(ListPrivateRegistryTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPrivateRegistryTypeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query the details of a release batch for upgrade.</p>
     * 
     * @param request ListPublishBatchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPublishBatchResponse
     */
    public ListPublishBatchResponse listPublishBatchWithOptions(ListPublishBatchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.batchName)) {
            query.put("BatchName", request.batchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.upgradeVersion)) {
            query.put("UpgradeVersion", request.upgradeVersion);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListPublishBatch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListPublishBatchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListPublishBatchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query the details of a release batch for upgrade.</p>
     * 
     * @param request ListPublishBatchRequest
     * @return ListPublishBatchResponse
     */
    public ListPublishBatchResponse listPublishBatch(ListPublishBatchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listPublishBatchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation information of one or more Runtime Application Self-protection-enabled (RASP-enabled) applications.</p>
     * 
     * @param request ListQueryRaspAppInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListQueryRaspAppInfoResponse
     */
    public ListQueryRaspAppInfoResponse listQueryRaspAppInfoWithOptions(ListQueryRaspAppInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListQueryRaspAppInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListQueryRaspAppInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListQueryRaspAppInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation information of one or more Runtime Application Self-protection-enabled (RASP-enabled) applications.</p>
     * 
     * @param request ListQueryRaspAppInfoRequest
     * @return ListQueryRaspAppInfoResponse
     */
    public ListQueryRaspAppInfoResponse listQueryRaspAppInfo(ListQueryRaspAppInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listQueryRaspAppInfoWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.</p>
     * 
     * @param request ListRdDefaultSyncListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListRdDefaultSyncListResponse
     */
    public ListRdDefaultSyncListResponse listRdDefaultSyncListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListRdDefaultSyncList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListRdDefaultSyncListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListRdDefaultSyncListResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.</p>
     * @return ListRdDefaultSyncListResponse
     */
    public ListRdDefaultSyncListResponse listRdDefaultSyncList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listRdDefaultSyncListWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the network objects based on which a specified cluster is protected.</p>
     * 
     * @param request ListRuleTargetAllRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListRuleTargetAllResponse
     */
    public ListRuleTargetAllResponse listRuleTargetAllWithOptions(ListRuleTargetAllRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListRuleTargetAll"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListRuleTargetAllResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListRuleTargetAllResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the network objects based on which a specified cluster is protected.</p>
     * 
     * @param request ListRuleTargetAllRequest
     * @return ListRuleTargetAllResponse
     */
    public ListRuleTargetAllResponse listRuleTargetAll(ListRuleTargetAllRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listRuleTargetAllWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries rules for container tamper-proofing.</p>
     * 
     * @param request ListSasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSasContainerWebDefenseRuleResponse
     */
    public ListSasContainerWebDefenseRuleResponse listSasContainerWebDefenseRuleWithOptions(ListSasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListSasContainerWebDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListSasContainerWebDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries rules for container tamper-proofing.</p>
     * 
     * @param request ListSasContainerWebDefenseRuleRequest
     * @return ListSasContainerWebDefenseRuleResponse
     */
    public ListSasContainerWebDefenseRuleResponse listSasContainerWebDefenseRule(ListSasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries supported file suffixes.</p>
     * 
     * @param request ListSupportObjectSuffixRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSupportObjectSuffixResponse
     */
    public ListSupportObjectSuffixResponse listSupportObjectSuffixWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSupportObjectSuffix"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListSupportObjectSuffixResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListSupportObjectSuffixResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries supported file suffixes.</p>
     * @return ListSupportObjectSuffixResponse
     */
    public ListSupportObjectSuffixResponse listSupportObjectSuffix() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSupportObjectSuffixWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the aggregation types of system defense rules.</p>
     * 
     * @param request ListSystemAggregationRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemAggregationRulesResponse
     */
    public ListSystemAggregationRulesResponse listSystemAggregationRulesWithOptions(ListSystemAggregationRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemAggregationRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemAggregationRulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListSystemAggregationRulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details about the aggregation types of system defense rules.</p>
     * 
     * @param request ListSystemAggregationRulesRequest
     * @return ListSystemAggregationRulesResponse
     */
    public ListSystemAggregationRulesResponse listSystemAggregationRules(ListSystemAggregationRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemAggregationRulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of system rules.</p>
     * 
     * @param request ListSystemClientRuleTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemClientRuleTypesResponse
     */
    public ListSystemClientRuleTypesResponse listSystemClientRuleTypesWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemClientRuleTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemClientRuleTypesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListSystemClientRuleTypesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the types of system rules.</p>
     * @return ListSystemClientRuleTypesResponse
     */
    public ListSystemClientRuleTypesResponse listSystemClientRuleTypes() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemClientRuleTypesWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries system defense rules.</p>
     * 
     * @param request ListSystemClientRulesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemClientRulesResponse
     */
    public ListSystemClientRulesResponse listSystemClientRulesWithOptions(ListSystemClientRulesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aggregationIds)) {
            query.put("AggregationIds", request.aggregationIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.isContainer)) {
            query.put("IsContainer", request.isContainer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleTypes)) {
            query.put("RuleTypes", request.ruleTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.systemType)) {
            query.put("SystemType", request.systemType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemClientRules"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemClientRulesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListSystemClientRulesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries system defense rules.</p>
     * 
     * @param request ListSystemClientRulesRequest
     * @return ListSystemClientRulesResponse
     */
    public ListSystemClientRulesResponse listSystemClientRules(ListSystemClientRulesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemClientRulesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the aggregation types of system defense rules.</p>
     * 
     * @param request ListSystemRuleAggregationTypesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSystemRuleAggregationTypesResponse
     */
    public ListSystemRuleAggregationTypesResponse listSystemRuleAggregationTypesWithOptions(ListSystemRuleAggregationTypesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, String> query = com.aliyun.openapiutil.Client.query(com.aliyun.teautil.Common.toMap(request));
        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListSystemRuleAggregationTypes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "GET"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListSystemRuleAggregationTypesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListSystemRuleAggregationTypesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the aggregation types of system defense rules.</p>
     * 
     * @param request ListSystemRuleAggregationTypesRequest
     * @return ListSystemRuleAggregationTypesResponse
     */
    public ListSystemRuleAggregationTypesResponse listSystemRuleAggregationTypes(ListSystemRuleAggregationTypesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listSystemRuleAggregationTypesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query Targets by Batch</p>
     * 
     * @param request ListTargetByBatchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListTargetByBatchResponse
     */
    public ListTargetByBatchResponse listTargetByBatchWithOptions(ListTargetByBatchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.batchId)) {
            query.put("BatchId", request.batchId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationBase)) {
            query.put("OperationBase", request.operationBase);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListTargetByBatch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListTargetByBatchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListTargetByBatchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query Targets by Batch</p>
     * 
     * @param request ListTargetByBatchRequest
     * @return ListTargetByBatchResponse
     */
    public ListTargetByBatchResponse listTargetByBatch(ListTargetByBatchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listTargetByBatchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries tasks that are not complete by task type.</p>
     * 
     * @param request ListUnfinishedOnceTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUnfinishedOnceTaskResponse
     */
    public ListUnfinishedOnceTaskResponse listUnfinishedOnceTaskWithOptions(ListUnfinishedOnceTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUnfinishedOnceTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListUnfinishedOnceTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListUnfinishedOnceTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries tasks that are not complete by task type.</p>
     * 
     * @param request ListUnfinishedOnceTaskRequest
     * @return ListUnfinishedOnceTaskResponse
     */
    public ListUnfinishedOnceTaskResponse listUnfinishedOnceTask(ListUnfinishedOnceTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUnfinishedOnceTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers whose Security Center agent is not installed.</p>
     * 
     * @param request ListUninstallAegisMachinesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUninstallAegisMachinesResponse
     */
    public ListUninstallAegisMachinesResponse listUninstallAegisMachinesWithOptions(ListUninstallAegisMachinesRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIdStr)) {
            query.put("RegionIdStr", request.regionIdStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionNo)) {
            query.put("RegionNo", request.regionNo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUninstallAegisMachines"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListUninstallAegisMachinesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListUninstallAegisMachinesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the information about the servers whose Security Center agent is not installed.</p>
     * 
     * @param request ListUninstallAegisMachinesRequest
     * @return ListUninstallAegisMachinesResponse
     */
    public ListUninstallAegisMachinesResponse listUninstallAegisMachines(ListUninstallAegisMachinesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUninstallAegisMachinesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Get VPC Data</p>
     * 
     * @param request ListUserVpcRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUserVpcResponse
     */
    public ListUserVpcResponse listUserVpcWithOptions(ListUserVpcRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.k8sRegionId)) {
            query.put("K8sRegionId", request.k8sRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUserVpc"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListUserVpcResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListUserVpcResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Get VPC Data</p>
     * 
     * @param request ListUserVpcRequest
     * @return ListUserVpcResponse
     */
    public ListUserVpcResponse listUserVpc(ListUserVpcRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUserVpcWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Query the list of instance UUIDs based on the application ID.</p>
     * 
     * @param request ListUuidsByAppIdRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUuidsByAppIdResponse
     */
    public ListUuidsByAppIdResponse listUuidsByAppIdWithOptions(ListUuidsByAppIdRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appId)) {
            query.put("AppId", request.appId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.appRegionId)) {
            query.put("AppRegionId", request.appRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryUid)) {
            query.put("ResourceDirectoryUid", request.resourceDirectoryUid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUuidsByAppId"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListUuidsByAppIdResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListUuidsByAppIdResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Query the list of instance UUIDs based on the application ID.</p>
     * 
     * @param request ListUuidsByAppIdRequest
     * @return ListUuidsByAppIdResponse
     */
    public ListUuidsByAppIdResponse listUuidsByAppId(ListUuidsByAppIdRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUuidsByAppIdWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries protected assets by using the paths to specific web directories.</p>
     * 
     * @param request ListUuidsByWebPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUuidsByWebPathResponse
     */
    public ListUuidsByWebPathResponse listUuidsByWebPathWithOptions(ListUuidsByWebPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.webPath)) {
            query.put("WebPath", request.webPath);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListUuidsByWebPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListUuidsByWebPathResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListUuidsByWebPathResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries protected assets by using the paths to specific web directories.</p>
     * 
     * @param request ListUuidsByWebPathRequest
     * @return ListUuidsByWebPathResponse
     */
    public ListUuidsByWebPathResponse listUuidsByWebPath(ListUuidsByWebPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listUuidsByWebPathWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries servers on which virus detection and removal tasks are performed.</p>
     * 
     * @param request ListVirusScanMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVirusScanMachineResponse
     */
    public ListVirusScanMachineResponse listVirusScanMachineWithOptions(ListVirusScanMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVirusScanMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListVirusScanMachineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListVirusScanMachineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries servers on which virus detection and removal tasks are performed.</p>
     * 
     * @param request ListVirusScanMachineRequest
     * @return ListVirusScanMachineResponse
     */
    public ListVirusScanMachineResponse listVirusScanMachine(ListVirusScanMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVirusScanMachineWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert events that are generated for viruses detected on a server.</p>
     * 
     * @param request ListVirusScanMachineEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVirusScanMachineEventResponse
     */
    public ListVirusScanMachineEventResponse listVirusScanMachineEventWithOptions(ListVirusScanMachineEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateTaskId)) {
            query.put("OperateTaskId", request.operateTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVirusScanMachineEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListVirusScanMachineEventResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListVirusScanMachineEventResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the alert events that are generated for viruses detected on a server.</p>
     * 
     * @param request ListVirusScanMachineEventRequest
     * @return ListVirusScanMachineEventResponse
     */
    public ListVirusScanMachineEventResponse listVirusScanMachineEvent(ListVirusScanMachineEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVirusScanMachineEventWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries virus scan tasks based on conditions such as the task type, task status, and server information.</p>
     * 
     * @param request ListVirusScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVirusScanTaskResponse
     */
    public ListVirusScanTaskResponse listVirusScanTaskWithOptions(ListVirusScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.internetIp)) {
            query.put("InternetIp", request.internetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intranetIp)) {
            query.put("IntranetIp", request.intranetIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.machineName)) {
            query.put("MachineName", request.machineName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTask)) {
            query.put("RootTask", request.rootTask);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.rootTaskId)) {
            query.put("RootTaskId", request.rootTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanType)) {
            query.put("ScanType", request.scanType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.statusList)) {
            query.put("StatusList", request.statusList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVirusScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListVirusScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListVirusScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries virus scan tasks based on conditions such as the task type, task status, and server information.</p>
     * 
     * @param request ListVirusScanTaskRequest
     * @return ListVirusScanTaskResponse
     */
    public ListVirusScanTaskResponse listVirusScanTask(ListVirusScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVirusScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the existing configurations of vulnerabilities that can be automatically fixed.</p>
     * 
     * @param request ListVulAutoRepairConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVulAutoRepairConfigResponse
     */
    public ListVulAutoRepairConfigResponse listVulAutoRepairConfigWithOptions(ListVulAutoRepairConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.aliasName)) {
            query.put("AliasName", request.aliasName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVulAutoRepairConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListVulAutoRepairConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListVulAutoRepairConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the existing configurations of vulnerabilities that can be automatically fixed.</p>
     * 
     * @param request ListVulAutoRepairConfigRequest
     * @return ListVulAutoRepairConfigResponse
     */
    public ListVulAutoRepairConfigResponse listVulAutoRepairConfig(ListVulAutoRepairConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVulAutoRepairConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the global configurations of vulnerability detection.</p>
     * 
     * @param request ListVulGlobalConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListVulGlobalConfigResponse
     */
    public ListVulGlobalConfigResponse listVulGlobalConfigWithOptions(ListVulGlobalConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configKey)) {
            query.put("ConfigKey", request.configKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ListVulGlobalConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ListVulGlobalConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ListVulGlobalConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the global configurations of vulnerability detection.</p>
     * 
     * @param request ListVulGlobalConfigRequest
     * @return ListVulGlobalConfigResponse
     */
    public ListVulGlobalConfigResponse listVulGlobalConfig(ListVulGlobalConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.listVulGlobalConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.</p>
     * 
     * @param request MarkMonitorAccountsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return MarkMonitorAccountsResponse
     */
    public MarkMonitorAccountsResponse markMonitorAccountsWithOptions(MarkMonitorAccountsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountIds)) {
            query.put("AccountIds", request.accountIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "MarkMonitorAccounts"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new MarkMonitorAccountsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new MarkMonitorAccountsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.</p>
     * 
     * @param request MarkMonitorAccountsRequest
     * @return MarkMonitorAccountsResponse
     */
    public MarkMonitorAccountsResponse markMonitorAccounts(MarkMonitorAccountsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.markMonitorAccountsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles AccessKey pair leaks.</p>
     * 
     * @param request ModifyAccessKeyLeakDealRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAccessKeyLeakDealResponse
     */
    public ModifyAccessKeyLeakDealResponse modifyAccessKeyLeakDealWithOptions(ModifyAccessKeyLeakDealRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.idList)) {
            query.put("IdList", request.idList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAccessKeyLeakDeal"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAccessKeyLeakDealResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAccessKeyLeakDealResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles AccessKey pair leaks.</p>
     * 
     * @param request ModifyAccessKeyLeakDealRequest
     * @return ModifyAccessKeyLeakDealResponse
     */
    public ModifyAccessKeyLeakDealResponse modifyAccessKeyLeakDeal(ModifyAccessKeyLeakDealRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAccessKeyLeakDealWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a defense rule against brute-force attacks.</p>
     * 
     * @param tmpReq ModifyAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAntiBruteForceRuleResponse
     */
    public ModifyAntiBruteForceRuleResponse modifyAntiBruteForceRuleWithOptions(ModifyAntiBruteForceRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyAntiBruteForceRuleShrinkRequest request = new ModifyAntiBruteForceRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.protocolType)) {
            request.protocolTypeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.protocolType, "ProtocolType", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defaultRule)) {
            query.put("DefaultRule", request.defaultRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.failCount)) {
            query.put("FailCount", request.failCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.forbiddenTime)) {
            query.put("ForbiddenTime", request.forbiddenTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.protocolTypeShrink)) {
            query.put("ProtocolType", request.protocolTypeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.span)) {
            query.put("Span", request.span);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAntiBruteForceRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAntiBruteForceRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a defense rule against brute-force attacks.</p>
     * 
     * @param request ModifyAntiBruteForceRuleRequest
     * @return ModifyAntiBruteForceRuleResponse
     */
    public ModifyAntiBruteForceRuleResponse modifyAntiBruteForceRule(ModifyAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Configures a scan cycle for application vulnerabilities.</p>
     * 
     * @param request ModifyAppVulScanCycleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAppVulScanCycleResponse
     */
    public ModifyAppVulScanCycleResponse modifyAppVulScanCycleWithOptions(ModifyAppVulScanCycleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cycle)) {
            query.put("Cycle", request.cycle);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAppVulScanCycle"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAppVulScanCycleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAppVulScanCycleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Configures a scan cycle for application vulnerabilities.</p>
     * 
     * @param request ModifyAppVulScanCycleRequest
     * @return ModifyAppVulScanCycleResponse
     */
    public ModifyAppVulScanCycleResponse modifyAppVulScanCycle(ModifyAppVulScanCycleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAppVulScanCycleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations for cleaning offline hosts whose provider cannot be identified.</p>
     * 
     * @param request ModifyAssetCleanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAssetCleanConfigResponse
     */
    public ModifyAssetCleanConfigResponse modifyAssetCleanConfigWithOptions(ModifyAssetCleanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetCleanConfigs)) {
            query.put("AssetCleanConfigs", request.assetCleanConfigs);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAssetCleanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAssetCleanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAssetCleanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations for cleaning offline hosts whose provider cannot be identified.</p>
     * 
     * @param request ModifyAssetCleanConfigRequest
     * @return ModifyAssetCleanConfigResponse
     */
    public ModifyAssetCleanConfigResponse modifyAssetCleanConfig(ModifyAssetCleanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAssetCleanConfigWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the <a href="~~CreateOrUpdateAssetGroup~~">CreateOrUpdateAssetGroup</a> operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.</p>
     * <h3>Limits</h3>
     * <p>You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Changes the server group to which specified servers belong.</p>
     * 
     * @param request ModifyAssetGroupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAssetGroupResponse
     */
    public ModifyAssetGroupResponse modifyAssetGroupWithOptions(ModifyAssetGroupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupId)) {
            query.put("GroupId", request.groupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAssetGroup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAssetGroupResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAssetGroupResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the <a href="~~CreateOrUpdateAssetGroup~~">CreateOrUpdateAssetGroup</a> operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.</p>
     * <h3>Limits</h3>
     * <p>You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Changes the server group to which specified servers belong.</p>
     * 
     * @param request ModifyAssetGroupRequest
     * @return ModifyAssetGroupResponse
     */
    public ModifyAssetGroupResponse modifyAssetGroup(ModifyAssetGroupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAssetGroupWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the importance of an asset.</p>
     * 
     * @param request ModifyAssetImportantRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAssetImportantResponse
     */
    public ModifyAssetImportantResponse modifyAssetImportantWithOptions(ModifyAssetImportantRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.importantCode)) {
            query.put("ImportantCode", request.importantCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAssetImportant"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAssetImportantResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAssetImportantResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the importance of an asset.</p>
     * 
     * @param request ModifyAssetImportantRequest
     * @return ModifyAssetImportantResponse
     */
    public ModifyAssetImportantResponse modifyAssetImportant(ModifyAssetImportantRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAssetImportantWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the information about a witness that is created by using the container signature feature.</p>
     * 
     * @param request ModifyAttestorRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAttestorResponse
     */
    public ModifyAttestorResponse modifyAttestorWithOptions(ModifyAttestorRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.keyId)) {
            query.put("KeyId", request.keyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyRegionId)) {
            query.put("KeyRegionId", request.keyRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyVersionId)) {
            query.put("KeyVersionId", request.keyVersionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAttestor"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAttestorResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAttestorResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the information about a witness that is created by using the container signature feature.</p>
     * 
     * @param request ModifyAttestorRequest
     * @return ModifyAttestorResponse
     */
    public ModifyAttestorResponse modifyAttestor(ModifyAttestorRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAttestorWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Specifies the number of days after which a detected vulnerability is automatically deleted.</p>
     * 
     * @param request ModifyAutoDelConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyAutoDelConfigResponse
     */
    public ModifyAutoDelConfigResponse modifyAutoDelConfigWithOptions(ModifyAutoDelConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.days)) {
            query.put("Days", request.days);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyAutoDelConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyAutoDelConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyAutoDelConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Specifies the number of days after which a detected vulnerability is automatically deleted.</p>
     * 
     * @param request ModifyAutoDelConfigRequest
     * @return ModifyAutoDelConfigResponse
     */
    public ModifyAutoDelConfigResponse modifyAutoDelConfig(ModifyAutoDelConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyAutoDelConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an anti-ransomware policy.</p>
     * 
     * @param tmpReq ModifyBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyBackupPolicyResponse
     */
    public ModifyBackupPolicyResponse modifyBackupPolicyWithOptions(ModifyBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyBackupPolicyShrinkRequest request = new ModifyBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.policy)) {
            request.policyShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.policy, "Policy", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyShrink)) {
            query.put("Policy", request.policyShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyRegionId)) {
            query.put("PolicyRegionId", request.policyRegionId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyBackupPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyBackupPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an anti-ransomware policy.</p>
     * 
     * @param request ModifyBackupPolicyRequest
     * @return ModifyBackupPolicyResponse
     */
    public ModifyBackupPolicyResponse modifyBackupPolicy(ModifyBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyBackupPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables an anti-ransomware policy.</p>
     * 
     * @param request ModifyBackupPolicyStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyBackupPolicyStatusResponse
     */
    public ModifyBackupPolicyStatusResponse modifyBackupPolicyStatusWithOptions(ModifyBackupPolicyStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyBackupPolicyStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyBackupPolicyStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyBackupPolicyStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables an anti-ransomware policy.</p>
     * 
     * @param request ModifyBackupPolicyStatusRequest
     * @return ModifyBackupPolicyStatusResponse
     */
    public ModifyBackupPolicyStatusResponse modifyBackupPolicyStatus(ModifyBackupPolicyStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyBackupPolicyStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modify Policy</p>
     * 
     * @param request ModifyBinarySecurityPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyBinarySecurityPolicyResponse
     */
    public ModifyBinarySecurityPolicyResponse modifyBinarySecurityPolicyWithOptions(ModifyBinarySecurityPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusters)) {
            query.put("Clusters", request.clusters);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policy)) {
            query.put("Policy", request.policy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyBinarySecurityPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyBinarySecurityPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyBinarySecurityPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modify Policy</p>
     * 
     * @param request ModifyBinarySecurityPolicyRequest
     * @return ModifyBinarySecurityPolicyResponse
     */
    public ModifyBinarySecurityPolicyResponse modifyBinarySecurityPolicy(ModifyBinarySecurityPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyBinarySecurityPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modify the rule settings for cloud product configuration checks</p>
     * 
     * @param request ModifyCheckRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCheckRuleResponse
     */
    public ModifyCheckRuleResponse modifyCheckRuleWithOptions(ModifyCheckRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.addInstanceList)) {
            query.put("AddInstanceList", request.addInstanceList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.deleteInstanceList)) {
            query.put("DeleteInstanceList", request.deleteInstanceList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scopeType)) {
            query.put("ScopeType", request.scopeType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCheckRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCheckRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyCheckRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modify the rule settings for cloud product configuration checks</p>
     * 
     * @param request ModifyCheckRuleRequest
     * @return ModifyCheckRuleResponse
     */
    public ModifyCheckRuleResponse modifyCheckRule(ModifyCheckRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCheckRuleWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes all logs that occupy your log storage.</p>
     * 
     * @param request ModifyClearLogstoreStorageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClearLogstoreStorageResponse
     */
    public ModifyClearLogstoreStorageResponse modifyClearLogstoreStorageWithOptions(ModifyClearLogstoreStorageRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userLogStore)) {
            query.put("UserLogStore", request.userLogStore);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userProject)) {
            query.put("UserProject", request.userProject);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClearLogstoreStorage"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClearLogstoreStorageResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyClearLogstoreStorageResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes all logs that occupy your log storage.</p>
     * 
     * @param request ModifyClearLogstoreStorageRequest
     * @return ModifyClearLogstoreStorageResponse
     */
    public ModifyClearLogstoreStorageResponse modifyClearLogstoreStorage(ModifyClearLogstoreStorageRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClearLogstoreStorageWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the resource configurations of the Security Center agent.</p>
     * 
     * @param request ModifyClientConfSetupRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClientConfSetupResponse
     */
    public ModifyClientConfSetupResponse modifyClientConfSetupWithOptions(ModifyClientConfSetupRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyConfig)) {
            query.put("StrategyConfig", request.strategyConfig);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTag)) {
            query.put("StrategyTag", request.strategyTag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTagValue)) {
            query.put("StrategyTagValue", request.strategyTagValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClientConfSetup"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClientConfSetupResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyClientConfSetupResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the resource configurations of the Security Center agent.</p>
     * 
     * @param request ModifyClientConfSetupRequest
     * @return ModifyClientConfSetupResponse
     */
    public ModifyClientConfSetupResponse modifyClientConfSetup(ModifyClientConfSetupRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClientConfSetupWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an agent configuration policy.</p>
     * 
     * @param request ModifyClientConfStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClientConfStrategyResponse
     */
    public ModifyClientConfStrategyResponse modifyClientConfStrategyWithOptions(ModifyClientConfStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.tag)) {
            query.put("Tag", request.tag);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagExt)) {
            query.put("TagExt", request.tagExt);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagValue)) {
            query.put("TagValue", request.tagValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClientConfStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClientConfStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyClientConfStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an agent configuration policy.</p>
     * 
     * @param request ModifyClientConfStrategyRequest
     * @return ModifyClientConfStrategyResponse
     */
    public ModifyClientConfStrategyResponse modifyClientConfStrategy(ModifyClientConfStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClientConfStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a custom defense rule.</p>
     * 
     * @param request ModifyClientUserDefineRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClientUserDefineRuleResponse
     */
    public ModifyClientUserDefineRuleResponse modifyClientUserDefineRuleWithOptions(ModifyClientUserDefineRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.actionType)) {
            query.put("ActionType", request.actionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cmdline)) {
            query.put("Cmdline", request.cmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domain)) {
            query.put("Domain", request.domain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePath)) {
            query.put("FilePath", request.filePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.IP)) {
            query.put("IP", request.IP);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.md5List)) {
            query.put("Md5List", request.md5List);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.newFilePath)) {
            query.put("NewFilePath", request.newFilePath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentCmdline)) {
            query.put("ParentCmdline", request.parentCmdline);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.parentProcPath)) {
            query.put("ParentProcPath", request.parentProcPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.platform)) {
            query.put("Platform", request.platform);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.port)) {
            query.put("Port", request.port);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.portStr)) {
            query.put("PortStr", request.portStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPath)) {
            query.put("ProcPath", request.procPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryContent)) {
            query.put("RegistryContent", request.registryContent);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryKey)) {
            query.put("RegistryKey", request.registryKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClientUserDefineRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClientUserDefineRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyClientUserDefineRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a custom defense rule.</p>
     * 
     * @param request ModifyClientUserDefineRuleRequest
     * @return ModifyClientUserDefineRuleResponse
     */
    public ModifyClientUserDefineRuleResponse modifyClientUserDefineRule(ModifyClientUserDefineRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClientUserDefineRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of the AccessKey pair for a third-party account.</p>
     * 
     * @param request ModifyCloudVendorAccountAKRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCloudVendorAccountAKResponse
     */
    public ModifyCloudVendorAccountAKResponse modifyCloudVendorAccountAKWithOptions(ModifyCloudVendorAccountAKRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.authIds)) {
            query.put("AuthIds", request.authIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authModules)) {
            query.put("AuthModules", request.authModules);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.domain)) {
            query.put("Domain", request.domain);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regions)) {
            query.put("Regions", request.regions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.secretId)) {
            query.put("SecretId", request.secretId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.secretKey)) {
            query.put("SecretKey", request.secretKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subscriptionIds)) {
            query.put("SubscriptionIds", request.subscriptionIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tenantId)) {
            query.put("TenantId", request.tenantId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendorAuthAlias)) {
            query.put("VendorAuthAlias", request.vendorAuthAlias);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCloudVendorAccountAK"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCloudVendorAccountAKResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyCloudVendorAccountAKResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of the AccessKey pair for a third-party account.</p>
     * 
     * @param request ModifyCloudVendorAccountAKRequest
     * @return ModifyCloudVendorAccountAKResponse
     */
    public ModifyCloudVendorAccountAKResponse modifyCloudVendorAccountAK(ModifyCloudVendorAccountAKRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCloudVendorAccountAKWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modify the Trail configuration information for the AK</p>
     * 
     * @param request ModifyCloudVendorTrialConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCloudVendorTrialConfigResponse
     */
    public ModifyCloudVendorTrialConfigResponse modifyCloudVendorTrialConfigWithOptions(ModifyCloudVendorTrialConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.authId)) {
            query.put("AuthId", request.authId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authInfo)) {
            query.put("AuthInfo", request.authInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.deleteTrail)) {
            query.put("DeleteTrail", request.deleteTrail);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCloudVendorTrialConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCloudVendorTrialConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyCloudVendorTrialConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modify the Trail configuration information for the AK</p>
     * 
     * @param request ModifyCloudVendorTrialConfigRequest
     * @return ModifyCloudVendorTrialConfigResponse
     */
    public ModifyCloudVendorTrialConfigResponse modifyCloudVendorTrialConfig(ModifyCloudVendorTrialConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCloudVendorTrialConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Fixes the blocking status of clusters whose status is Normal to be confirmed.</p>
     * 
     * @param request ModifyClusterCnnfStatusUserConfirmRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyClusterCnnfStatusUserConfirmResponse
     */
    public ModifyClusterCnnfStatusUserConfirmResponse modifyClusterCnnfStatusUserConfirmWithOptions(ModifyClusterCnnfStatusUserConfirmRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userConfirm)) {
            query.put("UserConfirm", request.userConfirm);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyClusterCnnfStatusUserConfirm"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyClusterCnnfStatusUserConfirmResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyClusterCnnfStatusUserConfirmResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Fixes the blocking status of clusters whose status is Normal to be confirmed.</p>
     * 
     * @param request ModifyClusterCnnfStatusUserConfirmRequest
     * @return ModifyClusterCnnfStatusUserConfirmResponse
     */
    public ModifyClusterCnnfStatusUserConfirmResponse modifyClusterCnnfStatusUserConfirm(ModifyClusterCnnfStatusUserConfirmRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyClusterCnnfStatusUserConfirmWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the priority to fix vulnerabilities.</p>
     * 
     * @param request ModifyConcernNecessityRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyConcernNecessityResponse
     */
    public ModifyConcernNecessityResponse modifyConcernNecessityWithOptions(ModifyConcernNecessityRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.concernNecessity)) {
            query.put("ConcernNecessity", request.concernNecessity);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyConcernNecessity"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyConcernNecessityResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyConcernNecessityResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the priority to fix vulnerabilities.</p>
     * 
     * @param request ModifyConcernNecessityRequest
     * @return ModifyConcernNecessityResponse
     */
    public ModifyConcernNecessityResponse modifyConcernNecessity(ModifyConcernNecessityRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyConcernNecessityWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a rule for non-image program defense.</p>
     * 
     * @param tmpReq ModifyContainerDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerDefenseRuleResponse
     */
    public ModifyContainerDefenseRuleResponse modifyContainerDefenseRuleWithOptions(ModifyContainerDefenseRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyContainerDefenseRuleShrinkRequest request = new ModifyContainerDefenseRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.whitelist)) {
            request.whitelistShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.whitelist, "Whitelist", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scope)) {
            query.put("Scope", request.scope);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelistShrink)) {
            query.put("Whitelist", request.whitelistShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyContainerDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a rule for non-image program defense.</p>
     * 
     * @param request ModifyContainerDefenseRuleRequest
     * @return ModifyContainerDefenseRuleResponse
     */
    public ModifyContainerDefenseRuleResponse modifyContainerDefenseRule(ModifyContainerDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of non-image program defense rules.</p>
     * 
     * @param request ModifyContainerDefenseRuleSwitchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerDefenseRuleSwitchResponse
     */
    public ModifyContainerDefenseRuleSwitchResponse modifyContainerDefenseRuleSwitchWithOptions(ModifyContainerDefenseRuleSwitchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerDefenseRuleSwitch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerDefenseRuleSwitchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyContainerDefenseRuleSwitchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of non-image program defense rules.</p>
     * 
     * @param request ModifyContainerDefenseRuleSwitchRequest
     * @return ModifyContainerDefenseRuleSwitchResponse
     */
    public ModifyContainerDefenseRuleSwitchResponse modifyContainerDefenseRuleSwitch(ModifyContainerDefenseRuleSwitchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerDefenseRuleSwitchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the defense rule against container escapes.</p>
     * 
     * @param request ModifyContainerPluginRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerPluginRuleResponse
     */
    public ModifyContainerPluginRuleResponse modifyContainerPluginRuleWithOptions(ModifyContainerPluginRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleType)) {
            query.put("RuleType", request.ruleType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectedPolicy)) {
            query.put("SelectedPolicy", request.selectedPolicy);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteImages)) {
            query.put("WhiteImages", request.whiteImages);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerPluginRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerPluginRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyContainerPluginRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the defense rule against container escapes.</p>
     * 
     * @param request ModifyContainerPluginRuleRequest
     * @return ModifyContainerPluginRuleResponse
     */
    public ModifyContainerPluginRuleResponse modifyContainerPluginRule(ModifyContainerPluginRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerPluginRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of vulnerability scan for a running container.</p>
     * 
     * @param request ModifyContainerScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyContainerScanConfigResponse
     */
    public ModifyContainerScanConfigResponse modifyContainerScanConfigWithOptions(ModifyContainerScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appNames)) {
            query.put("AppNames", request.appNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyContainerScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyContainerScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyContainerScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of vulnerability scan for a running container.</p>
     * 
     * @param request ModifyContainerScanConfigRequest
     * @return ModifyContainerScanConfigResponse
     */
    public ModifyContainerScanConfigResponse modifyContainerScanConfig(ModifyContainerScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyContainerScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.</p>
     * 
     * @param request ModifyCreateVulWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCreateVulWhitelistResponse
     */
    public ModifyCreateVulWhitelistResponse modifyCreateVulWhitelistWithOptions(ModifyCreateVulWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetInfo)) {
            query.put("TargetInfo", request.targetInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whitelist)) {
            query.put("Whitelist", request.whitelist);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCreateVulWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCreateVulWhitelistResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyCreateVulWhitelistResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.</p>
     * 
     * @param request ModifyCreateVulWhitelistRequest
     * @return ModifyCreateVulWhitelistResponse
     */
    public ModifyCreateVulWhitelistResponse modifyCreateVulWhitelist(ModifyCreateVulWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCreateVulWhitelistWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a custom IP address blocking policy.</p>
     * 
     * @param request ModifyCustomBlockRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCustomBlockRecordResponse
     */
    public ModifyCustomBlockRecordResponse modifyCustomBlockRecordWithOptions(ModifyCustomBlockRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.blockIp)) {
            query.put("BlockIp", request.blockIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bound)) {
            query.put("Bound", request.bound);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.expireTime)) {
            query.put("ExpireTime", request.expireTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCustomBlockRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCustomBlockRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyCustomBlockRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a custom IP address blocking policy.</p>
     * 
     * @param request ModifyCustomBlockRecordRequest
     * @return ModifyCustomBlockRecordResponse
     */
    public ModifyCustomBlockRecordResponse modifyCustomBlockRecord(ModifyCustomBlockRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCustomBlockRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.</p>
     * 
     * @param request ModifyCycleTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyCycleTaskResponse
     */
    public ModifyCycleTaskResponse modifyCycleTaskWithOptions(ModifyCycleTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.firstDateStr)) {
            query.put("FirstDateStr", request.firstDateStr);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalPeriod)) {
            query.put("IntervalPeriod", request.intervalPeriod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.param)) {
            query.put("Param", request.param);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.periodUnit)) {
            query.put("PeriodUnit", request.periodUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetEndTime)) {
            query.put("TargetEndTime", request.targetEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetStartTime)) {
            query.put("TargetStartTime", request.targetStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskName)) {
            query.put("TaskName", request.taskName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskType)) {
            query.put("TaskType", request.taskType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyCycleTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyCycleTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyCycleTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.</p>
     * 
     * @param request ModifyCycleTaskRequest
     * @return ModifyCycleTaskResponse
     */
    public ModifyCycleTaskResponse modifyCycleTask(ModifyCycleTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyCycleTaskWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only if you use Security Center Enterprise.</p>
     * 
     * <b>summary</b> : 
     * <p>Changes the notification status of a DingTalk chatbot.</p>
     * 
     * @param request ModifyDingTalkStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyDingTalkStatusResponse
     */
    public ModifyDingTalkStatusResponse modifyDingTalkStatusWithOptions(ModifyDingTalkStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ids)) {
            query.put("Ids", request.ids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyDingTalkStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyDingTalkStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyDingTalkStatusResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call this operation only if you use Security Center Enterprise.</p>
     * 
     * <b>summary</b> : 
     * <p>Changes the notification status of a DingTalk chatbot.</p>
     * 
     * @param request ModifyDingTalkStatusRequest
     * @return ModifyDingTalkStatusResponse
     */
    public ModifyDingTalkStatusResponse modifyDingTalkStatus(ModifyDingTalkStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyDingTalkStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Runs a scan task for urgent vulnerabilities.</p>
     * 
     * @param request ModifyEmgVulSubmitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyEmgVulSubmitResponse
     */
    public ModifyEmgVulSubmitResponse modifyEmgVulSubmitWithOptions(ModifyEmgVulSubmitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userAgreement)) {
            query.put("UserAgreement", request.userAgreement);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyEmgVulSubmit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyEmgVulSubmitResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyEmgVulSubmitResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Runs a scan task for urgent vulnerabilities.</p>
     * 
     * @param request ModifyEmgVulSubmitRequest
     * @return ModifyEmgVulSubmitResponse
     */
    public ModifyEmgVulSubmitResponse modifyEmgVulSubmit(ModifyEmgVulSubmitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyEmgVulSubmitWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Changes the name of a server group.</p>
     * 
     * @param request ModifyGroupPropertyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyGroupPropertyResponse
     */
    public ModifyGroupPropertyResponse modifyGroupPropertyWithOptions(ModifyGroupPropertyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.data)) {
            query.put("Data", request.data);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyGroupProperty"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyGroupPropertyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyGroupPropertyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Changes the name of a server group.</p>
     * 
     * @param request ModifyGroupPropertyRequest
     * @return ModifyGroupPropertyResponse
     */
    public ModifyGroupPropertyResponse modifyGroupProperty(ModifyGroupPropertyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyGroupPropertyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>修改代理集群</p>
     * 
     * @param request ModifyHybridProxyClusterRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyHybridProxyClusterResponse
     */
    public ModifyHybridProxyClusterResponse modifyHybridProxyClusterWithOptions(ModifyHybridProxyClusterRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyHybridProxyCluster"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyHybridProxyClusterResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyHybridProxyClusterResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>修改代理集群</p>
     * 
     * @param request ModifyHybridProxyClusterRequest
     * @return ModifyHybridProxyClusterResponse
     */
    public ModifyHybridProxyClusterResponse modifyHybridProxyCluster(ModifyHybridProxyClusterRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyHybridProxyClusterWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>修改代理策略</p>
     * 
     * @param request ModifyHybridProxyPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyHybridProxyPolicyResponse
     */
    public ModifyHybridProxyPolicyResponse modifyHybridProxyPolicyWithOptions(ModifyHybridProxyPolicyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyInfo)) {
            query.put("PolicyInfo", request.policyInfo);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyHybridProxyPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyHybridProxyPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyHybridProxyPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>修改代理策略</p>
     * 
     * @param request ModifyHybridProxyPolicyRequest
     * @return ModifyHybridProxyPolicyResponse
     */
    public ModifyHybridProxyPolicyResponse modifyHybridProxyPolicy(ModifyHybridProxyPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyHybridProxyPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of an IDC probe.</p>
     * 
     * @param request ModifyIdcProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyIdcProbeResponse
     */
    public ModifyIdcProbeResponse modifyIdcProbeWithOptions(ModifyIdcProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.idcName)) {
            query.put("IdcName", request.idcName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.idcRegion)) {
            query.put("IdcRegion", request.idcRegion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.intervalPeriod)) {
            query.put("IntervalPeriod", request.intervalPeriod);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ipSegments)) {
            query.put("IpSegments", request.ipSegments);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.linuxPort)) {
            query.put("LinuxPort", request.linuxPort);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.periodUnit)) {
            query.put("PeriodUnit", request.periodUnit);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.winPort)) {
            query.put("WinPort", request.winPort);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyIdcProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyIdcProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyIdcProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of an IDC probe.</p>
     * 
     * @param request ModifyIdcProbeRequest
     * @return ModifyIdcProbeResponse
     */
    public ModifyIdcProbeResponse modifyIdcProbe(ModifyIdcProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyIdcProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of a scheduled image fix.</p>
     * 
     * @param request ModifyImageFixCycleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyImageFixCycleConfigResponse
     */
    public ModifyImageFixCycleConfigResponse modifyImageFixCycleConfigWithOptions(ModifyImageFixCycleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.imageFixCycle)) {
            body.put("ImageFixCycle", request.imageFixCycle);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageFixSwitch)) {
            body.put("ImageFixSwitch", request.imageFixSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageFixTarget)) {
            body.put("ImageFixTarget", request.imageFixTarget);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageTimeRange)) {
            body.put("ImageTimeRange", request.imageTimeRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyImageFixCycleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyImageFixCycleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyImageFixCycleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of a scheduled image fix.</p>
     * 
     * @param request ModifyImageFixCycleConfigRequest
     * @return ModifyImageFixCycleConfigResponse
     */
    public ModifyImageFixCycleConfigResponse modifyImageFixCycleConfig(ModifyImageFixCycleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyImageFixCycleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the transfer time of an image repository.</p>
     * 
     * @param request ModifyImageRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyImageRegistryResponse
     */
    public ModifyImageRegistryResponse modifyImageRegistryWithOptions(ModifyImageRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            body.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.password)) {
            body.put("Password", request.password);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.transPerHour)) {
            body.put("TransPerHour", request.transPerHour);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.userName)) {
            body.put("UserName", request.userName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyImageRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyImageRegistryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyImageRegistryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the transfer time of an image repository.</p>
     * 
     * @param request ModifyImageRegistryRequest
     * @return ModifyImageRegistryResponse
     */
    public ModifyImageRegistryResponse modifyImageRegistry(ModifyImageRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyImageRegistryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the defense rule against brute-force attacks that is applied to a specified server.</p>
     * 
     * @param request ModifyInstanceAntiBruteForceRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInstanceAntiBruteForceRuleResponse
     */
    public ModifyInstanceAntiBruteForceRuleResponse modifyInstanceAntiBruteForceRuleWithOptions(ModifyInstanceAntiBruteForceRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.newRuleId)) {
            query.put("NewRuleId", request.newRuleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInstanceAntiBruteForceRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInstanceAntiBruteForceRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyInstanceAntiBruteForceRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the defense rule against brute-force attacks that is applied to a specified server.</p>
     * 
     * @param request ModifyInstanceAntiBruteForceRuleRequest
     * @return ModifyInstanceAntiBruteForceRuleResponse
     */
    public ModifyInstanceAntiBruteForceRuleResponse modifyInstanceAntiBruteForceRule(ModifyInstanceAntiBruteForceRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInstanceAntiBruteForceRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a proactive defense rule for containers.</p>
     * 
     * @param tmpReq ModifyInterceptionRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInterceptionRuleResponse
     */
    public ModifyInterceptionRuleResponse modifyInterceptionRuleWithOptions(ModifyInterceptionRuleRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyInterceptionRuleShrinkRequest request = new ModifyInterceptionRuleShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.dstTarget)) {
            request.dstTargetShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.dstTarget, "DstTarget", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.srcTarget)) {
            request.srcTargetShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, "SrcTarget", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dstTargetShrink)) {
            query.put("DstTarget", request.dstTargetShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interceptType)) {
            query.put("InterceptType", request.interceptType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.orderIndex)) {
            query.put("OrderIndex", request.orderIndex);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.srcTargetShrink)) {
            query.put("SrcTarget", request.srcTargetShrink);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInterceptionRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInterceptionRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyInterceptionRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a proactive defense rule for containers.</p>
     * 
     * @param request ModifyInterceptionRuleRequest
     * @return ModifyInterceptionRuleResponse
     */
    public ModifyInterceptionRuleResponse modifyInterceptionRule(ModifyInterceptionRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInterceptionRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a proactive defense rule for containers.</p>
     * 
     * @param request ModifyInterceptionRuleSwitchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInterceptionRuleSwitchResponse
     */
    public ModifyInterceptionRuleSwitchResponse modifyInterceptionRuleSwitchWithOptions(ModifyInterceptionRuleSwitchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleIds)) {
            query.put("RuleIds", request.ruleIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleSwitch)) {
            query.put("RuleSwitch", request.ruleSwitch);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInterceptionRuleSwitch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInterceptionRuleSwitchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyInterceptionRuleSwitchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a proactive defense rule for containers.</p>
     * 
     * @param request ModifyInterceptionRuleSwitchRequest
     * @return ModifyInterceptionRuleSwitchResponse
     */
    public ModifyInterceptionRuleSwitchResponse modifyInterceptionRuleSwitch(ModifyInterceptionRuleSwitchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInterceptionRuleSwitchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the information about a network object of the container firewall feature.</p>
     * 
     * @param request ModifyInterceptionTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyInterceptionTargetResponse
     */
    public ModifyInterceptionTargetResponse modifyInterceptionTargetWithOptions(ModifyInterceptionTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appName)) {
            query.put("AppName", request.appName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageList)) {
            query.put("ImageList", request.imageList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.namespace)) {
            query.put("Namespace", request.namespace);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetId)) {
            query.put("TargetId", request.targetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetName)) {
            query.put("TargetName", request.targetName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyInterceptionTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyInterceptionTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyInterceptionTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the information about a network object of the container firewall feature.</p>
     * 
     * @param request ModifyInterceptionTargetRequest
     * @return ModifyInterceptionTargetResponse
     */
    public ModifyInterceptionTargetResponse modifyInterceptionTarget(ModifyInterceptionTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyInterceptionTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables the log analysis feature.</p>
     * 
     * @param request ModifyLogMetaStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyLogMetaStatusResponse
     */
    public ModifyLogMetaStatusResponse modifyLogMetaStatusWithOptions(ModifyLogMetaStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logStore)) {
            query.put("LogStore", request.logStore);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.project)) {
            query.put("Project", request.project);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyLogMetaStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyLogMetaStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyLogMetaStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables the log analysis feature.</p>
     * 
     * @param request ModifyLogMetaStatusRequest
     * @return ModifyLogMetaStatusResponse
     */
    public ModifyLogMetaStatusResponse modifyLogMetaStatus(ModifyLogMetaStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyLogMetaStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the logon configuration for a specified asset.</p>
     * 
     * @param request ModifyLoginBaseConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyLoginBaseConfigResponse
     */
    public ModifyLoginBaseConfigResponse modifyLoginBaseConfigWithOptions(ModifyLoginBaseConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyLoginBaseConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyLoginBaseConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyLoginBaseConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the logon configuration for a specified asset.</p>
     * 
     * @param request ModifyLoginBaseConfigRequest
     * @return ModifyLoginBaseConfigResponse
     */
    public ModifyLoginBaseConfigResponse modifyLoginBaseConfig(ModifyLoginBaseConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyLoginBaseConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables the logon security settings for an asset.</p>
     * 
     * @param request ModifyLoginSwitchConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyLoginSwitchConfigResponse
     */
    public ModifyLoginSwitchConfigResponse modifyLoginSwitchConfigWithOptions(ModifyLoginSwitchConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.item)) {
            query.put("Item", request.item);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyLoginSwitchConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyLoginSwitchConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyLoginSwitchConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables the logon security settings for an asset.</p>
     * 
     * @param request ModifyLoginSwitchConfigRequest
     * @return ModifyLoginSwitchConfigResponse
     */
    public ModifyLoginSwitchConfigResponse modifyLoginSwitchConfig(ModifyLoginSwitchConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyLoginSwitchConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies notification settings.</p>
     * 
     * @param request ModifyNoticeConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyNoticeConfigResponse
     */
    public ModifyNoticeConfigResponse modifyNoticeConfigWithOptions(ModifyNoticeConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.project)) {
            query.put("Project", request.project);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.route)) {
            query.put("Route", request.route);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.timeLimit)) {
            query.put("TimeLimit", request.timeLimit);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyNoticeConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyNoticeConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyNoticeConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies notification settings.</p>
     * 
     * @param request ModifyNoticeConfigRequest
     * @return ModifyNoticeConfigResponse
     */
    public ModifyNoticeConfigResponse modifyNoticeConfig(ModifyNoticeConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyNoticeConfigWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p><em>Prerequisites</em>* <a href="https://www.alibabacloud.com/help/en/log-service/latest/billable-items">Simple Log Service</a> is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the <a href="~~CreateServiceLinkedRole~~">CreateServiceLinkedRole</a> operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. <strong>Scenarios</strong> Before you use the log analysis feature of Security Center, you must call the <a href="~~ModifyOpenLogShipper~~">ModifyOpenLogShipper</a> operation to activate Simple Log Service.</p>
     * 
     * <b>summary</b> : 
     * <p>Activates Simple Log Service.</p>
     * 
     * @param request ModifyOpenLogShipperRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyOpenLogShipperResponse
     */
    public ModifyOpenLogShipperResponse modifyOpenLogShipperWithOptions(ModifyOpenLogShipperRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryAccountId)) {
            query.put("ResourceDirectoryAccountId", request.resourceDirectoryAccountId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyOpenLogShipper"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyOpenLogShipperResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyOpenLogShipperResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p><em>Prerequisites</em>* <a href="https://www.alibabacloud.com/help/en/log-service/latest/billable-items">Simple Log Service</a> is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the <a href="~~CreateServiceLinkedRole~~">CreateServiceLinkedRole</a> operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. <strong>Scenarios</strong> Before you use the log analysis feature of Security Center, you must call the <a href="~~ModifyOpenLogShipper~~">ModifyOpenLogShipper</a> operation to activate Simple Log Service.</p>
     * 
     * <b>summary</b> : 
     * <p>Activates Simple Log Service.</p>
     * 
     * @param request ModifyOpenLogShipperRequest
     * @return ModifyOpenLogShipperResponse
     */
    public ModifyOpenLogShipperResponse modifyOpenLogShipper(ModifyOpenLogShipperRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyOpenLogShipperWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.</p>
     * 
     * @param request ModifyOperateVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyOperateVulResponse
     */
    public ModifyOperateVulResponse modifyOperateVulWithOptions(ModifyOperateVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.info)) {
            query.put("Info", request.info);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyOperateVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyOperateVulResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyOperateVulResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.</p>
     * 
     * @param request ModifyOperateVulRequest
     * @return ModifyOperateVulResponse
     */
    public ModifyOperateVulResponse modifyOperateVul(ModifyOperateVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyOperateVulWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the switch settings of pay-as-you-go modules.</p>
     * 
     * @param request ModifyPostPayModuleSwitchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyPostPayModuleSwitchResponse
     */
    public ModifyPostPayModuleSwitchResponse modifyPostPayModuleSwitchWithOptions(ModifyPostPayModuleSwitchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.postPayInstanceId)) {
            query.put("PostPayInstanceId", request.postPayInstanceId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.postPayModuleSwitch)) {
            query.put("PostPayModuleSwitch", request.postPayModuleSwitch);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyPostPayModuleSwitch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyPostPayModuleSwitchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyPostPayModuleSwitchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the switch settings of pay-as-you-go modules.</p>
     * 
     * @param request ModifyPostPayModuleSwitchRequest
     * @return ModifyPostPayModuleSwitchResponse
     */
    public ModifyPostPayModuleSwitchResponse modifyPostPayModuleSwitch(ModifyPostPayModuleSwitchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyPostPayModuleSwitchWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Adds a process to or removes a process from the whitelist by using the application whitelist feature.</p>
     * 
     * @param request ModifyProcessWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyProcessWhiteListResponse
     */
    public ModifyProcessWhiteListResponse modifyProcessWhiteListWithOptions(ModifyProcessWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.md5s)) {
            query.put("Md5s", request.md5s);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyProcessWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyProcessWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyProcessWhiteListResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Adds a process to or removes a process from the whitelist by using the application whitelist feature.</p>
     * 
     * @param request ModifyProcessWhiteListRequest
     * @return ModifyProcessWhiteListResponse
     */
    public ModifyProcessWhiteListResponse modifyProcessWhiteList(ModifyProcessWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyProcessWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.</p>
     * 
     * @param request ModifyPropertyScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyPropertyScheduleConfigResponse
     */
    public ModifyPropertyScheduleConfigResponse modifyPropertyScheduleConfigWithOptions(ModifyPropertyScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scheduleTime)) {
            query.put("ScheduleTime", request.scheduleTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyPropertyScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyPropertyScheduleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyPropertyScheduleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.</p>
     * 
     * @param request ModifyPropertyScheduleConfigRequest
     * @return ModifyPropertyScheduleConfigResponse
     */
    public ModifyPropertyScheduleConfigResponse modifyPropertyScheduleConfig(ModifyPropertyScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyPropertyScheduleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Performs security check tasks on servers with a few clicks.</p>
     * 
     * @param request ModifyPushAllTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyPushAllTaskResponse
     */
    public ModifyPushAllTaskResponse modifyPushAllTaskWithOptions(ModifyPushAllTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tasks)) {
            query.put("Tasks", request.tasks);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyPushAllTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyPushAllTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyPushAllTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Performs security check tasks on servers with a few clicks.</p>
     * 
     * @param request ModifyPushAllTaskRequest
     * @return ModifyPushAllTaskResponse
     */
    public ModifyPushAllTaskResponse modifyPushAllTask(ModifyPushAllTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyPushAllTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Refreshes the list of processes that are associated with a Linux software vulnerability.</p>
     * 
     * @param request ModifyRefreshProcessInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyRefreshProcessInfoResponse
     */
    public ModifyRefreshProcessInfoResponse modifyRefreshProcessInfoWithOptions(ModifyRefreshProcessInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyRefreshProcessInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyRefreshProcessInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyRefreshProcessInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Refreshes the list of processes that are associated with a Linux software vulnerability.</p>
     * 
     * @param request ModifyRefreshProcessInfoRequest
     * @return ModifyRefreshProcessInfoResponse
     */
    public ModifyRefreshProcessInfoResponse modifyRefreshProcessInfo(ModifyRefreshProcessInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyRefreshProcessInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a rule for container tamper-proofing.</p>
     * 
     * @param request ModifySasContainerWebDefenseRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySasContainerWebDefenseRuleResponse
     */
    public ModifySasContainerWebDefenseRuleResponse modifySasContainerWebDefenseRuleWithOptions(ModifySasContainerWebDefenseRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pathConfDTOList)) {
            query.put("PathConfDTOList", request.pathConfDTOList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySasContainerWebDefenseRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySasContainerWebDefenseRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifySasContainerWebDefenseRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a rule for container tamper-proofing.</p>
     * 
     * @param request ModifySasContainerWebDefenseRuleRequest
     * @return ModifySasContainerWebDefenseRuleResponse
     */
    public ModifySasContainerWebDefenseRuleResponse modifySasContainerWebDefenseRule(ModifySasContainerWebDefenseRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySasContainerWebDefenseRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies common filter conditions to search for assets.</p>
     * 
     * @param request ModifySearchConditionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySearchConditionResponse
     */
    public ModifySearchConditionResponse modifySearchConditionWithOptions(ModifySearchConditionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.filterConditions)) {
            query.put("FilterConditions", request.filterConditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySearchCondition"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySearchConditionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifySearchConditionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies common filter conditions to search for assets.</p>
     * 
     * @param request ModifySearchConditionRequest
     * @return ModifySearchConditionResponse
     */
    public ModifySearchConditionResponse modifySearchCondition(ModifySearchConditionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySearchConditionWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ChangeCheckConfig operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Specifies the time when an automatic configuration check is performed on cloud services.</p>
     * 
     * @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
     * 
     * @param request ModifySecurityCheckScheduleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySecurityCheckScheduleConfigResponse
     */
    @Deprecated
    // Deprecated
    public ModifySecurityCheckScheduleConfigResponse modifySecurityCheckScheduleConfigWithOptions(ModifySecurityCheckScheduleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.daysOfWeek)) {
            query.put("DaysOfWeek", request.daysOfWeek);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySecurityCheckScheduleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySecurityCheckScheduleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifySecurityCheckScheduleConfigResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This operation is phased out. You can use the ChangeCheckConfig operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Specifies the time when an automatic configuration check is performed on cloud services.</p>
     * 
     * @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
     * 
     * @param request ModifySecurityCheckScheduleConfigRequest
     * @return ModifySecurityCheckScheduleConfigResponse
     */
    @Deprecated
    // Deprecated
    public ModifySecurityCheckScheduleConfigResponse modifySecurityCheckScheduleConfig(ModifySecurityCheckScheduleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySecurityCheckScheduleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the alert handling rule for alerts that are added to the whitelist by asset.</p>
     * 
     * @param request ModifySecurityEventMarkMissIndividuallyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySecurityEventMarkMissIndividuallyResponse
     */
    public ModifySecurityEventMarkMissIndividuallyResponse modifySecurityEventMarkMissIndividuallyWithOptions(ModifySecurityEventMarkMissIndividuallyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.deleteMarkMissParam)) {
            body.put("DeleteMarkMissParam", request.deleteMarkMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            body.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.insertMarkMissParam)) {
            body.put("InsertMarkMissParam", request.insertMarkMissParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySecurityEventMarkMissIndividually"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySecurityEventMarkMissIndividuallyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifySecurityEventMarkMissIndividuallyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the alert handling rule for alerts that are added to the whitelist by asset.</p>
     * 
     * @param request ModifySecurityEventMarkMissIndividuallyRequest
     * @return ModifySecurityEventMarkMissIndividuallyResponse
     */
    public ModifySecurityEventMarkMissIndividuallyResponse modifySecurityEventMarkMissIndividually(ModifySecurityEventMarkMissIndividuallyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySecurityEventMarkMissIndividuallyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Manage Serverless Asset Authorization</p>
     * 
     * @param request ModifyServerlessAuthToMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyServerlessAuthToMachineResponse
     */
    public ModifyServerlessAuthToMachineResponse modifyServerlessAuthToMachineWithOptions(ModifyServerlessAuthToMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.appCriteria)) {
            query.put("AppCriteria", request.appCriteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.authItem)) {
            query.put("AuthItem", request.authItem);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.autoBind)) {
            query.put("AutoBind", request.autoBind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindAll)) {
            query.put("BindAll", request.bindAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindAppList)) {
            query.put("BindAppList", request.bindAppList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindAssetType)) {
            query.put("BindAssetType", request.bindAssetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindUuidList)) {
            query.put("BindUuidList", request.bindUuidList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.criteria)) {
            query.put("Criteria", request.criteria);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logicalExp)) {
            query.put("LogicalExp", request.logicalExp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ntmVersion)) {
            query.put("NtmVersion", request.ntmVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.preBind)) {
            query.put("PreBind", request.preBind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.preBindOrderId)) {
            query.put("PreBindOrderId", request.preBindOrderId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceDirectoryUid)) {
            query.put("ResourceDirectoryUid", request.resourceDirectoryUid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unBindAppList)) {
            query.put("UnBindAppList", request.unBindAppList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unBindUuidList)) {
            query.put("UnBindUuidList", request.unBindUuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyServerlessAuthToMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyServerlessAuthToMachineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyServerlessAuthToMachineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Manage Serverless Asset Authorization</p>
     * 
     * @param request ModifyServerlessAuthToMachineRequest
     * @return ModifyServerlessAuthToMachineResponse
     */
    public ModifyServerlessAuthToMachineResponse modifyServerlessAuthToMachine(ModifyServerlessAuthToMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyServerlessAuthToMachineWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates or deletes a policy template on the My Policies tab of the Playbook page.</p>
     * 
     * @param request ModifySoarStrategySubscribeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySoarStrategySubscribeResponse
     */
    public ModifySoarStrategySubscribeResponse modifySoarStrategySubscribeWithOptions(ModifySoarStrategySubscribeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subscribeStatus)) {
            query.put("SubscribeStatus", request.subscribeStatus);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifySoarStrategySubscribe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifySoarStrategySubscribeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifySoarStrategySubscribeResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Only the Enterprise and Ultimate editions of Security Center support this API operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates or deletes a policy template on the My Policies tab of the Playbook page.</p>
     * 
     * @param request ModifySoarStrategySubscribeRequest
     * @return ModifySoarStrategySubscribeResponse
     */
    public ModifySoarStrategySubscribeResponse modifySoarStrategySubscribe(ModifySoarStrategySubscribeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifySoarStrategySubscribeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.</p>
     * 
     * @param request ModifyStartVulScanRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyStartVulScanResponse
     */
    public ModifyStartVulScanResponse modifyStartVulScanWithOptions(ModifyStartVulScanRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.types)) {
            query.put("Types", request.types);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyStartVulScan"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyStartVulScanResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyStartVulScanResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.</p>
     * 
     * @param request ModifyStartVulScanRequest
     * @return ModifyStartVulScanResponse
     */
    public ModifyStartVulScanResponse modifyStartVulScan(ModifyStartVulScanRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyStartVulScanWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a baseline check policy.</p>
     * 
     * @param request ModifyStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyStrategyResponse
     */
    public ModifyStrategyResponse modifyStrategyWithOptions(ModifyStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.customType)) {
            query.put("CustomType", request.customType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cycleDays)) {
            query.put("CycleDays", request.cycleDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cycleStartTime)) {
            query.put("CycleStartTime", request.cycleStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskCustomParams)) {
            query.put("RiskCustomParams", request.riskCustomParams);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskSubTypeName)) {
            query.put("RiskSubTypeName", request.riskSubTypeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a baseline check policy.</p>
     * 
     * @param request ModifyStrategyRequest
     * @return ModifyStrategyResponse
     */
    public ModifyStrategyResponse modifyStrategy(ModifyStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the servers to which a baseline check policy is applied.</p>
     * 
     * @param request ModifyStrategyTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyStrategyTargetResponse
     */
    public ModifyStrategyTargetResponse modifyStrategyTargetWithOptions(ModifyStrategyTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyStrategyTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyStrategyTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyStrategyTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the servers to which a baseline check policy is applied.</p>
     * 
     * @param request ModifyStrategyTargetRequest
     * @return ModifyStrategyTargetResponse
     */
    public ModifyStrategyTargetResponse modifyStrategyTarget(ModifyStrategyTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyStrategyTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the names of the tags that are added to assets, or modifies the tags for assets.</p>
     * 
     * @param request ModifyTagWithUuidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyTagWithUuidResponse
     */
    public ModifyTagWithUuidResponse modifyTagWithUuidWithOptions(ModifyTagWithUuidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.machineTypes)) {
            query.put("MachineTypes", request.machineTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagId)) {
            query.put("TagId", request.tagId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tagList)) {
            query.put("TagList", request.tagList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyTagWithUuid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyTagWithUuidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyTagWithUuidResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the names of the tags that are added to assets, or modifies the tags for assets.</p>
     * 
     * @param request ModifyTagWithUuidRequest
     * @return ModifyTagWithUuidResponse
     */
    public ModifyTagWithUuidResponse modifyTagWithUuid(ModifyTagWithUuidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyTagWithUuidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an anti-ransomware policy for databases.</p>
     * 
     * @param tmpReq ModifyUniBackupPolicyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyUniBackupPolicyResponse
     */
    public ModifyUniBackupPolicyResponse modifyUniBackupPolicyWithOptions(ModifyUniBackupPolicyRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        ModifyUniBackupPolicyShrinkRequest request = new ModifyUniBackupPolicyShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.fullPlan)) {
            request.fullPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, "FullPlan", "json");
        }

        if (!com.aliyun.teautil.Common.isUnset(tmpReq.incPlan)) {
            request.incPlanShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, "IncPlan", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountName)) {
            query.put("AccountName", request.accountName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.accountPassword)) {
            query.put("AccountPassword", request.accountPassword);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fullPlanShrink)) {
            query.put("FullPlan", request.fullPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.incPlanShrink)) {
            query.put("IncPlan", request.incPlanShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyName)) {
            query.put("PolicyName", request.policyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.policyStatus)) {
            query.put("PolicyStatus", request.policyStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.retention)) {
            query.put("Retention", request.retention);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.speedLimiter)) {
            query.put("SpeedLimiter", request.speedLimiter);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyUniBackupPolicy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyUniBackupPolicyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyUniBackupPolicyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an anti-ransomware policy for databases.</p>
     * 
     * @param request ModifyUniBackupPolicyRequest
     * @return ModifyUniBackupPolicyResponse
     */
    public ModifyUniBackupPolicyResponse modifyUniBackupPolicy(ModifyUniBackupPolicyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyUniBackupPolicyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a honeypot.</p>
     * 
     * @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
     * 
     * @param request ModifyVpcHoneyPotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVpcHoneyPotResponse
     */
    @Deprecated
    // Deprecated
    public ModifyVpcHoneyPotResponse modifyVpcHoneyPotWithOptions(ModifyVpcHoneyPotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeyPotAction)) {
            query.put("HoneyPotAction", request.honeyPotAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vpcId)) {
            query.put("VpcId", request.vpcId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVpcHoneyPot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVpcHoneyPotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyVpcHoneyPotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a honeypot.</p>
     * 
     * @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
     * 
     * @param request ModifyVpcHoneyPotRequest
     * @return ModifyVpcHoneyPotResponse
     */
    @Deprecated
    // Deprecated
    public ModifyVpcHoneyPotResponse modifyVpcHoneyPot(ModifyVpcHoneyPotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVpcHoneyPotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of the vulnerability scan feature.</p>
     * 
     * @param request ModifyVulConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulConfigResponse
     */
    public ModifyVulConfigResponse modifyVulConfigWithOptions(ModifyVulConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyVulConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of the vulnerability scan feature.</p>
     * 
     * @param request ModifyVulConfigRequest
     * @return ModifyVulConfigResponse
     */
    public ModifyVulConfigResponse modifyVulConfig(ModifyVulConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of the vulnerability scan feature for a server.</p>
     * 
     * @param request ModifyVulTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulTargetResponse
     */
    public ModifyVulTargetResponse modifyVulTargetWithOptions(ModifyVulTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyVulTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of the vulnerability scan feature for a server.</p>
     * 
     * @param request ModifyVulTargetRequest
     * @return ModifyVulTargetResponse
     */
    public ModifyVulTargetResponse modifyVulTarget(ModifyVulTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Configures vulnerability scan for a server.</p>
     * 
     * @param request ModifyVulTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulTargetConfigResponse
     */
    public ModifyVulTargetConfigResponse modifyVulTargetConfigWithOptions(ModifyVulTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulTargetConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyVulTargetConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Configures vulnerability scan for a server.</p>
     * 
     * @param request ModifyVulTargetConfigRequest
     * @return ModifyVulTargetConfigResponse
     */
    public ModifyVulTargetConfigResponse modifyVulTargetConfig(ModifyVulTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulTargetConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the servers that are added to a vulnerability whitelist.</p>
     * 
     * @param request ModifyVulWhitelistTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyVulWhitelistTargetResponse
     */
    public ModifyVulWhitelistTargetResponse modifyVulWhitelistTargetWithOptions(ModifyVulWhitelistTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetInfo)) {
            query.put("TargetInfo", request.targetInfo);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyVulWhitelistTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyVulWhitelistTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyVulWhitelistTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the servers that are added to a vulnerability whitelist.</p>
     * 
     * @param request ModifyVulWhitelistTargetRequest
     * @return ModifyVulWhitelistTargetResponse
     */
    public ModifyVulWhitelistTargetResponse modifyVulWhitelistTarget(ModifyVulWhitelistTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyVulWhitelistTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds a directory to protect for a specified server.</p>
     * 
     * @param request ModifyWebLockCreateConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockCreateConfigResponse
     */
    public ModifyWebLockCreateConfigResponse modifyWebLockCreateConfigWithOptions(ModifyWebLockCreateConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defenceMode)) {
            query.put("DefenceMode", request.defenceMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dir)) {
            query.put("Dir", request.dir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveDir)) {
            query.put("ExclusiveDir", request.exclusiveDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFile)) {
            query.put("ExclusiveFile", request.exclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFileType)) {
            query.put("ExclusiveFileType", request.exclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFile)) {
            query.put("InclusiveFile", request.inclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFileType)) {
            query.put("InclusiveFileType", request.inclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.localBackupDir)) {
            query.put("LocalBackupDir", request.localBackupDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockCreateConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockCreateConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockCreateConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds a directory to protect for a specified server.</p>
     * 
     * @param request ModifyWebLockCreateConfigRequest
     * @return ModifyWebLockCreateConfigResponse
     */
    public ModifyWebLockCreateConfigResponse modifyWebLockCreateConfig(ModifyWebLockCreateConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockCreateConfigWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a directory on a specified server from the protected directories of web tamper proofing.</p>
     * 
     * @param request ModifyWebLockDeleteConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockDeleteConfigResponse
     */
    public ModifyWebLockDeleteConfigResponse modifyWebLockDeleteConfigWithOptions(ModifyWebLockDeleteConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockDeleteConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockDeleteConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockDeleteConfigResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.</p>
     * 
     * <b>summary</b> : 
     * <p>Deletes a directory on a specified server from the protected directories of web tamper proofing.</p>
     * 
     * @param request ModifyWebLockDeleteConfigRequest
     * @return ModifyWebLockDeleteConfigResponse
     */
    public ModifyWebLockDeleteConfigResponse modifyWebLockDeleteConfig(ModifyWebLockDeleteConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockDeleteConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of processes for web tamper proofing.</p>
     * 
     * @param request ModifyWebLockProcessStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockProcessStatusResponse
     */
    public ModifyWebLockProcessStatusResponse modifyWebLockProcessStatusWithOptions(ModifyWebLockProcessStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealAll)) {
            query.put("DealAll", request.dealAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateInfo)) {
            query.put("OperateInfo", request.operateInfo);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.processPath)) {
            query.put("ProcessPath", request.processPath);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockProcessStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockProcessStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockProcessStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of processes for web tamper proofing.</p>
     * 
     * @param request ModifyWebLockProcessStatusRequest
     * @return ModifyWebLockProcessStatusResponse
     */
    public ModifyWebLockProcessStatusResponse modifyWebLockProcessStatus(ModifyWebLockProcessStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockProcessStatusWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.</p>
     * 
     * <b>summary</b> : 
     * <p>Refreshes the status of the web tamper proofing feature for a server.</p>
     * 
     * @param request ModifyWebLockRefreshRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockRefreshResponse
     */
    public ModifyWebLockRefreshResponse modifyWebLockRefreshWithOptions(ModifyWebLockRefreshRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockRefresh"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockRefreshResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockRefreshResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.</p>
     * 
     * <b>summary</b> : 
     * <p>Refreshes the status of the web tamper proofing feature for a server.</p>
     * 
     * @param request ModifyWebLockRefreshRequest
     * @return ModifyWebLockRefreshResponse
     */
    public ModifyWebLockRefreshResponse modifyWebLockRefresh(ModifyWebLockRefreshRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockRefreshWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables web tamper proofing for a specified server.</p>
     * 
     * @param request ModifyWebLockStartRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockStartResponse
     */
    public ModifyWebLockStartResponse modifyWebLockStartWithOptions(ModifyWebLockStartRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defenceMode)) {
            query.put("DefenceMode", request.defenceMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dir)) {
            query.put("Dir", request.dir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveDir)) {
            query.put("ExclusiveDir", request.exclusiveDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFile)) {
            query.put("ExclusiveFile", request.exclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFileType)) {
            query.put("ExclusiveFileType", request.exclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFileType)) {
            query.put("InclusiveFileType", request.inclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.localBackupDir)) {
            query.put("LocalBackupDir", request.localBackupDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockStart"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockStartResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockStartResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables web tamper proofing for a specified server.</p>
     * 
     * @param request ModifyWebLockStartRequest
     * @return ModifyWebLockStartResponse
     */
    public ModifyWebLockStartResponse modifyWebLockStart(ModifyWebLockStartRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockStartWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables web tamper proofing for a server.</p>
     * 
     * @param request ModifyWebLockStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockStatusResponse
     */
    public ModifyWebLockStatusResponse modifyWebLockStatusWithOptions(ModifyWebLockStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables web tamper proofing for a server.</p>
     * 
     * @param request ModifyWebLockStatusRequest
     * @return ModifyWebLockStatusResponse
     */
    public ModifyWebLockStatusResponse modifyWebLockStatus(ModifyWebLockStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Disables web tamper proofing for a specified server.</p>
     * 
     * @param request ModifyWebLockUnbindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockUnbindResponse
     */
    public ModifyWebLockUnbindResponse modifyWebLockUnbindWithOptions(ModifyWebLockUnbindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockUnbind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockUnbindResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockUnbindResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Disables web tamper proofing for a specified server.</p>
     * 
     * @param request ModifyWebLockUnbindRequest
     * @return ModifyWebLockUnbindResponse
     */
    public ModifyWebLockUnbindResponse modifyWebLockUnbind(ModifyWebLockUnbindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockUnbindWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the protection policy for a specified server.</p>
     * 
     * @param request ModifyWebLockUpdateConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebLockUpdateConfigResponse
     */
    public ModifyWebLockUpdateConfigResponse modifyWebLockUpdateConfigWithOptions(ModifyWebLockUpdateConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defenceMode)) {
            query.put("DefenceMode", request.defenceMode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dir)) {
            query.put("Dir", request.dir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveDir)) {
            query.put("ExclusiveDir", request.exclusiveDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFile)) {
            query.put("ExclusiveFile", request.exclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.exclusiveFileType)) {
            query.put("ExclusiveFileType", request.exclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFile)) {
            query.put("InclusiveFile", request.inclusiveFile);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.inclusiveFileType)) {
            query.put("InclusiveFileType", request.inclusiveFileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.localBackupDir)) {
            query.put("LocalBackupDir", request.localBackupDir);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebLockUpdateConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebLockUpdateConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebLockUpdateConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the protection policy for a specified server.</p>
     * 
     * @param request ModifyWebLockUpdateConfigRequest
     * @return ModifyWebLockUpdateConfigResponse
     */
    public ModifyWebLockUpdateConfigResponse modifyWebLockUpdateConfig(ModifyWebLockUpdateConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebLockUpdateConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a custom web directory.</p>
     * 
     * @param request ModifyWebPathRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWebPathResponse
     */
    public ModifyWebPathResponse modifyWebPathWithOptions(ModifyWebPathRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ModifyWebPath"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ModifyWebPathResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ModifyWebPathResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a custom web directory.</p>
     * 
     * @param request ModifyWebPathRequest
     * @return ModifyWebPathResponse
     */
    public ModifyWebPathResponse modifyWebPath(ModifyWebPathRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.modifyWebPathWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.</p>
     * 
     * @param request OpenBackupAutoConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OpenBackupAutoConfigResponse
     */
    public OpenBackupAutoConfigResponse openBackupAutoConfigWithOptions(OpenBackupAutoConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.maxBatchSize)) {
            query.put("MaxBatchSize", request.maxBatchSize);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OpenBackupAutoConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OpenBackupAutoConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OpenBackupAutoConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.</p>
     * 
     * @param request OpenBackupAutoConfigRequest
     * @return OpenBackupAutoConfigResponse
     */
    public OpenBackupAutoConfigResponse openBackupAutoConfig(OpenBackupAutoConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.openBackupAutoConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>开启按量购买</p>
     * 
     * @param request OpenPartialBuyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OpenPartialBuyResponse
     */
    public OpenPartialBuyResponse openPartialBuyWithOptions(OpenPartialBuyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            query.put("InstanceId", request.instanceId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OpenPartialBuy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OpenPartialBuyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OpenPartialBuyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>开启按量购买</p>
     * 
     * @param request OpenPartialBuyRequest
     * @return OpenPartialBuyResponse
     */
    public OpenPartialBuyResponse openPartialBuy(OpenPartialBuyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.openPartialBuyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables sensitive file scan.</p>
     * 
     * @param request OpenSensitiveFileScanRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OpenSensitiveFileScanResponse
     */
    public OpenSensitiveFileScanResponse openSensitiveFileScanWithOptions(OpenSensitiveFileScanRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.switchOn)) {
            query.put("SwitchOn", request.switchOn);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OpenSensitiveFileScan"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OpenSensitiveFileScanResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OpenSensitiveFileScanResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables sensitive file scan.</p>
     * 
     * @param request OpenSensitiveFileScanRequest
     * @return OpenSensitiveFileScanResponse
     */
    public OpenSensitiveFileScanResponse openSensitiveFileScan(OpenSensitiveFileScanRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.openSensitiveFileScanWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Installs the Security Center agent on servers.</p>
     * 
     * @param request OperateAgentClientInstallRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateAgentClientInstallResponse
     */
    public OperateAgentClientInstallResponse operateAgentClientInstallWithOptions(OperateAgentClientInstallRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.os)) {
            query.put("Os", request.os);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.region)) {
            query.put("Region", request.region);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateAgentClientInstall"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateAgentClientInstallResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateAgentClientInstallResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Installs the Security Center agent on servers.</p>
     * 
     * @param request OperateAgentClientInstallRequest
     * @return OperateAgentClientInstallResponse
     */
    public OperateAgentClientInstallResponse operateAgentClientInstall(OperateAgentClientInstallRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateAgentClientInstallWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds or deletes container applications for tamper proofing.</p>
     * 
     * @param request OperateApplicationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateApplicationResponse
     */
    public OperateApplicationResponse operateApplicationWithOptions(OperateApplicationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.containerWebDefenseApplicationDTOS)) {
            query.put("ContainerWebDefenseApplicationDTOS", request.containerWebDefenseApplicationDTOS);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateApplication"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateApplicationResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateApplicationResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds or deletes container applications for tamper proofing.</p>
     * 
     * @param request OperateApplicationRequest
     * @return OperateApplicationResponse
     */
    public OperateApplicationResponse operateApplication(OperateApplicationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateApplicationWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Manages an Object Storage Service (OSS) bucket check task.</p>
     * 
     * @param request OperateBucketScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateBucketScanTaskResponse
     */
    public OperateBucketScanTaskResponse operateBucketScanTaskWithOptions(OperateBucketScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bucketName)) {
            query.put("BucketName", request.bucketName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateCode)) {
            query.put("OperateCode", request.operateCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateBucketScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateBucketScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateBucketScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Manages an Object Storage Service (OSS) bucket check task.</p>
     * 
     * @param request OperateBucketScanTaskRequest
     * @return OperateBucketScanTaskResponse
     */
    public OperateBucketScanTaskResponse operateBucketScanTask(OperateBucketScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateBucketScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a feature by type.</p>
     * 
     * @param request OperateCommonOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateCommonOverallConfigResponse
     */
    public OperateCommonOverallConfigResponse operateCommonOverallConfigWithOptions(OperateCommonOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noTargetAsOn)) {
            query.put("NoTargetAsOn", request.noTargetAsOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateCommonOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateCommonOverallConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateCommonOverallConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a feature by type.</p>
     * 
     * @param request OperateCommonOverallConfigRequest
     * @return OperateCommonOverallConfigResponse
     */
    public OperateCommonOverallConfigResponse operateCommonOverallConfig(OperateCommonOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateCommonOverallConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.</p>
     * 
     * @param request OperateCommonTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateCommonTargetConfigResponse
     */
    public OperateCommonTargetConfigResponse operateCommonTargetConfigWithOptions(OperateCommonTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.fieldName)) {
            query.put("FieldName", request.fieldName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetOperations)) {
            query.put("TargetOperations", request.targetOperations);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateCommonTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateCommonTargetConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateCommonTargetConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.</p>
     * 
     * @param request OperateCommonTargetConfigRequest
     * @return OperateCommonTargetConfigResponse
     */
    public OperateCommonTargetConfigResponse operateCommonTargetConfig(OperateCommonTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateCommonTargetConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.</p>
     * 
     * @param request OperateImageBaselineWhitelistRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateImageBaselineWhitelistResponse
     */
    public OperateImageBaselineWhitelistResponse operateImageBaselineWhitelistWithOptions(OperateImageBaselineWhitelistRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineItemKeyList)) {
            query.put("BaselineItemKeyList", request.baselineItemKeyList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuid)) {
            query.put("ImageUuid", request.imageUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operation)) {
            query.put("Operation", request.operation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateImageBaselineWhitelist"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateImageBaselineWhitelistResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateImageBaselineWhitelistResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.</p>
     * 
     * @param request OperateImageBaselineWhitelistRequest
     * @return OperateImageBaselineWhitelistResponse
     */
    public OperateImageBaselineWhitelistResponse operateImageBaselineWhitelist(OperateImageBaselineWhitelistRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateImageBaselineWhitelistWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.</p>
     * 
     * @param request OperateImageVulRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateImageVulResponse
     */
    public OperateImageVulResponse operateImageVulWithOptions(OperateImageVulRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.info)) {
            query.put("Info", request.info);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateImageVul"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateImageVulResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateImageVulResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.</p>
     * 
     * @param request OperateImageVulRequest
     * @return OperateImageVulResponse
     */
    public OperateImageVulResponse operateImageVul(OperateImageVulRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateImageVulWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a feature that detects exceptions.</p>
     * 
     * @param request OperateSuspiciousOverallConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateSuspiciousOverallConfigResponse
     */
    public OperateSuspiciousOverallConfigResponse operateSuspiciousOverallConfigWithOptions(OperateSuspiciousOverallConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.noTargetAsOn)) {
            query.put("NoTargetAsOn", request.noTargetAsOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateSuspiciousOverallConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateSuspiciousOverallConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateSuspiciousOverallConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables a feature that detects exceptions.</p>
     * 
     * @param request OperateSuspiciousOverallConfigRequest
     * @return OperateSuspiciousOverallConfigResponse
     */
    public OperateSuspiciousOverallConfigResponse operateSuspiciousOverallConfig(OperateSuspiciousOverallConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateSuspiciousOverallConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Configures the scope on which proactive defense takes effect.</p>
     * 
     * @param request OperateSuspiciousTargetConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateSuspiciousTargetConfigResponse
     */
    public OperateSuspiciousTargetConfigResponse operateSuspiciousTargetConfigWithOptions(OperateSuspiciousTargetConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetOperations)) {
            query.put("TargetOperations", request.targetOperations);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateSuspiciousTargetConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateSuspiciousTargetConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateSuspiciousTargetConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Configures the scope on which proactive defense takes effect.</p>
     * 
     * @param request OperateSuspiciousTargetConfigRequest
     * @return OperateSuspiciousTargetConfigResponse
     */
    public OperateSuspiciousTargetConfigResponse operateSuspiciousTargetConfig(OperateSuspiciousTargetConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateSuspiciousTargetConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of a rule for container tamper-proofing.</p>
     * 
     * @param request OperateSwitchStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateSwitchStatusResponse
     */
    public OperateSwitchStatusResponse operateSwitchStatusWithOptions(OperateSwitchStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateSwitchStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateSwitchStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateSwitchStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of a rule for container tamper-proofing.</p>
     * 
     * @param request OperateSwitchStatusRequest
     * @return OperateSwitchStatusResponse
     */
    public OperateSwitchStatusResponse operateSwitchStatus(OperateSwitchStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateSwitchStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.</p>
     * 
     * @param request OperateVirusEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateVirusEventsResponse
     */
    public OperateVirusEventsResponse operateVirusEventsWithOptions(OperateVirusEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.operationAll)) {
            query.put("OperationAll", request.operationAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationRange)) {
            query.put("OperationRange", request.operationRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateVirusEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateVirusEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateVirusEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.</p>
     * 
     * @param request OperateVirusEventsRequest
     * @return OperateVirusEventsResponse
     */
    public OperateVirusEventsResponse operateVirusEvents(OperateVirusEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateVirusEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Fixes Linux software vulnerabilities.</p>
     * 
     * @param request OperateVulsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateVulsResponse
     */
    public OperateVulsResponse operateVulsWithOptions(OperateVulsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.operateType)) {
            query.put("OperateType", request.operateType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vulNames)) {
            query.put("VulNames", request.vulNames);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateVuls"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateVulsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateVulsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Fixes Linux software vulnerabilities.</p>
     * 
     * @param request OperateVulsRequest
     * @return OperateVulsResponse
     */
    public OperateVulsResponse operateVuls(OperateVulsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateVulsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles alert events that are generated for web tamper proofing.</p>
     * 
     * @param request OperateWebLockFileEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperateWebLockFileEventsResponse
     */
    public OperateWebLockFileEventsResponse operateWebLockFileEventsWithOptions(OperateWebLockFileEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.dealAll)) {
            query.put("DealAll", request.dealAll);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventIds)) {
            query.put("EventIds", request.eventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            query.put("OperationCode", request.operationCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperateWebLockFileEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperateWebLockFileEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperateWebLockFileEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles alert events that are generated for web tamper proofing.</p>
     * 
     * @param request OperateWebLockFileEventsRequest
     * @return OperateWebLockFileEventsResponse
     */
    public OperateWebLockFileEventsResponse operateWebLockFileEvents(OperateWebLockFileEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operateWebLockFileEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Cancels ignoring alert events.</p>
     * 
     * @param request OperationCancelIgnoreSuspEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperationCancelIgnoreSuspEventResponse
     */
    public OperationCancelIgnoreSuspEventResponse operationCancelIgnoreSuspEventWithOptions(OperationCancelIgnoreSuspEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityEventIds)) {
            query.put("SecurityEventIds", request.securityEventIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperationCancelIgnoreSuspEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperationCancelIgnoreSuspEventResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperationCancelIgnoreSuspEventResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Cancels ignoring alert events.</p>
     * 
     * @param request OperationCancelIgnoreSuspEventRequest
     * @return OperationCancelIgnoreSuspEventResponse
     */
    public OperationCancelIgnoreSuspEventResponse operationCancelIgnoreSuspEvent(OperationCancelIgnoreSuspEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operationCancelIgnoreSuspEventWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the chart of a security report.</p>
     * 
     * @param request OperationCustomizeReportChartRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperationCustomizeReportChartResponse
     */
    public OperationCustomizeReportChartResponse operationCustomizeReportChartWithOptions(OperationCustomizeReportChartRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.chartIds)) {
            query.put("ChartIds", request.chartIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperationCustomizeReportChart"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperationCustomizeReportChartResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperationCustomizeReportChartResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the chart of a security report.</p>
     * 
     * @param request OperationCustomizeReportChartRequest
     * @return OperationCustomizeReportChartResponse
     */
    public OperationCustomizeReportChartResponse operationCustomizeReportChart(OperationCustomizeReportChartRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operationCustomizeReportChartWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Handles multiple exceptions at a time.</p>
     * 
     * @param request OperationSuspEventsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OperationSuspEventsResponse
     */
    public OperationSuspEventsResponse operationSuspEventsWithOptions(OperationSuspEventsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operation)) {
            query.put("Operation", request.operation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.subOperation)) {
            query.put("SubOperation", request.subOperation);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.suspiciousEventIds)) {
            query.put("SuspiciousEventIds", request.suspiciousEventIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.warnType)) {
            query.put("WarnType", request.warnType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "OperationSuspEvents"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new OperationSuspEventsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new OperationSuspEventsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Handles multiple exceptions at a time.</p>
     * 
     * @param request OperationSuspEventsRequest
     * @return OperationSuspEventsResponse
     */
    public OperationSuspEventsResponse operationSuspEvents(OperationSuspEventsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.operationSuspEventsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries image repositories by page.</p>
     * 
     * @param request PageImageRegistryRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PageImageRegistryResponse
     */
    public PageImageRegistryResponse pageImageRegistryWithOptions(PageImageRegistryRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            body.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            body.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryNameLike)) {
            body.put("RegistryNameLike", request.registryNameLike);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypeInList)) {
            body.put("RegistryTypeInList", request.registryTypeInList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypeNotInList)) {
            body.put("RegistryTypeNotInList", request.registryTypeNotInList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PageImageRegistry"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new PageImageRegistryResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new PageImageRegistryResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries image repositories by page.</p>
     * 
     * @param request PageImageRegistryRequest
     * @return PageImageRegistryResponse
     */
    public PageImageRegistryResponse pageImageRegistry(PageImageRegistryRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.pageImageRegistryWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables the Security Center agent.</p>
     * 
     * @param request PauseClientRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PauseClientResponse
     */
    public PauseClientResponse pauseClientWithOptions(PauseClientRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.value)) {
            query.put("Value", request.value);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PauseClient"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new PauseClientResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new PauseClientResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables the Security Center agent.</p>
     * 
     * @param request PauseClientRequest
     * @return PauseClientResponse
     */
    public PauseClientResponse pauseClient(PauseClientRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.pauseClientWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Modify the status of strategy tasks</p>
     * 
     * @param request ProcessSoarStrategyTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ProcessSoarStrategyTaskResponse
     */
    public ProcessSoarStrategyTaskResponse processSoarStrategyTaskWithOptions(ProcessSoarStrategyTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.strategyTaskId)) {
            query.put("StrategyTaskId", request.strategyTaskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskAction)) {
            query.put("TaskAction", request.taskAction);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ProcessSoarStrategyTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ProcessSoarStrategyTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ProcessSoarStrategyTaskResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.</p>
     * 
     * <b>summary</b> : 
     * <p>Modify the status of strategy tasks</p>
     * 
     * @param request ProcessSoarStrategyTaskRequest
     * @return ProcessSoarStrategyTaskResponse
     */
    public ProcessSoarStrategyTaskResponse processSoarStrategyTask(ProcessSoarStrategyTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.processSoarStrategyTaskWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>Before you call the PublicCreateImageScanTask operation, we recommend that you call the <a href="~~PublicPreCheckImageScanTask~~">PublicPreCheckImageScanTask</a> operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an image scan task.</p>
     * 
     * @param request PublicCreateImageScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PublicCreateImageScanTaskResponse
     */
    public PublicCreateImageScanTaskResponse publicCreateImageScanTaskWithOptions(PublicCreateImageScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.digests)) {
            query.put("Digests", request.digests);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIds)) {
            query.put("RegionIds", request.regionIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypes)) {
            query.put("RegistryTypes", request.registryTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoIds)) {
            query.put("RepoIds", request.repoIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNames)) {
            query.put("RepoNames", request.repoNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespaces)) {
            query.put("RepoNamespaces", request.repoNamespaces);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PublicCreateImageScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new PublicCreateImageScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new PublicCreateImageScanTaskResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>Before you call the PublicCreateImageScanTask operation, we recommend that you call the <a href="~~PublicPreCheckImageScanTask~~">PublicPreCheckImageScanTask</a> operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an image scan task.</p>
     * 
     * @param request PublicCreateImageScanTaskRequest
     * @return PublicCreateImageScanTaskResponse
     */
    public PublicCreateImageScanTaskResponse publicCreateImageScanTask(PublicCreateImageScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.publicCreateImageScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
     * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.</p>
     * 
     * @param request PublicPreCheckImageScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PublicPreCheckImageScanTaskResponse
     */
    public PublicPreCheckImageScanTaskResponse publicPreCheckImageScanTaskWithOptions(PublicPreCheckImageScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.digests)) {
            query.put("Digests", request.digests);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIds)) {
            query.put("RegionIds", request.regionIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryTypes)) {
            query.put("RegistryTypes", request.registryTypes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoIds)) {
            query.put("RepoIds", request.repoIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNames)) {
            query.put("RepoNames", request.repoNames);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repoNamespaces)) {
            query.put("RepoNamespaces", request.repoNamespaces);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.tags)) {
            query.put("Tags", request.tags);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PublicPreCheckImageScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new PublicPreCheckImageScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new PublicPreCheckImageScanTaskResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
     * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.</p>
     * 
     * @param request PublicPreCheckImageScanTaskRequest
     * @return PublicPreCheckImageScanTaskResponse
     */
    public PublicPreCheckImageScanTaskResponse publicPreCheckImageScanTask(PublicPreCheckImageScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.publicPreCheckImageScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds images to Security Center and creates an image scan task to scan the images.</p>
     * 
     * @param request PublicSyncAndCreateImageScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return PublicSyncAndCreateImageScanTaskResponse
     */
    public PublicSyncAndCreateImageScanTaskResponse publicSyncAndCreateImageScanTaskWithOptions(PublicSyncAndCreateImageScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.images)) {
            query.put("Images", request.images);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "PublicSyncAndCreateImageScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new PublicSyncAndCreateImageScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new PublicSyncAndCreateImageScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds images to Security Center and creates an image scan task to scan the images.</p>
     * 
     * @param request PublicSyncAndCreateImageScanTaskRequest
     * @return PublicSyncAndCreateImageScanTaskResponse
     */
    public PublicSyncAndCreateImageScanTaskResponse publicSyncAndCreateImageScanTask(PublicSyncAndCreateImageScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.publicSyncAndCreateImageScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of assets by using asset UUIDs. Cross-account query is supported.</p>
     * 
     * @param request QueryAssetDetailByUUIDRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAssetDetailByUUIDResponse
     */
    public QueryAssetDetailByUUIDResponse queryAssetDetailByUUIDWithOptions(QueryAssetDetailByUUIDRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.requests)) {
            body.put("Requests", request.requests);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAssetDetailByUUID"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAssetDetailByUUIDResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryAssetDetailByUUIDResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the details of assets by using asset UUIDs. Cross-account query is supported.</p>
     * 
     * @param request QueryAssetDetailByUUIDRequest
     * @return QueryAssetDetailByUUIDResponse
     */
    public QueryAssetDetailByUUIDResponse queryAssetDetailByUUID(QueryAssetDetailByUUIDRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryAssetDetailByUUIDWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of alert events in each attack phase.</p>
     * 
     * @param request QueryAttackCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAttackCountResponse
     */
    public QueryAttackCountResponse queryAttackCountWithOptions(QueryAttackCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            body.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryAttackCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryAttackCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryAttackCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the number of alert events in each attack phase.</p>
     * 
     * @param request QueryAttackCountRequest
     * @return QueryAttackCountResponse
     */
    public QueryAttackCountResponse queryAttackCount(QueryAttackCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryAttackCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a database scan task.</p>
     * 
     * @param request QueryDiscoverDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDiscoverDatabaseResponse
     */
    public QueryDiscoverDatabaseResponse queryDiscoverDatabaseWithOptions(QueryDiscoverDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.createMark)) {
            query.put("CreateMark", request.createMark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryDiscoverDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryDiscoverDatabaseResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryDiscoverDatabaseResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the progress of a database scan task.</p>
     * 
     * @param request QueryDiscoverDatabaseRequest
     * @return QueryDiscoverDatabaseResponse
     */
    public QueryDiscoverDatabaseResponse queryDiscoverDatabase(QueryDiscoverDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryDiscoverDatabaseWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as <a href="~~GetSuspiciousStatistics~~">GetSuspiciousStatistics</a> and <a href="~~DeleteGroup~~">DeleteGroup</a>, you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.</p>
     * <h3>Limits</h3>
     * <p>You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the ID of an asset group by using the name of the asset group.</p>
     * 
     * @param request QueryGroupIdByGroupNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupIdByGroupNameResponse
     */
    public QueryGroupIdByGroupNameResponse queryGroupIdByGroupNameWithOptions(QueryGroupIdByGroupNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupName)) {
            query.put("GroupName", request.groupName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGroupIdByGroupName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGroupIdByGroupNameResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryGroupIdByGroupNameResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as <a href="~~GetSuspiciousStatistics~~">GetSuspiciousStatistics</a> and <a href="~~DeleteGroup~~">DeleteGroup</a>, you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.</p>
     * <h3>Limits</h3>
     * <p>You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Queries the ID of an asset group by using the name of the asset group.</p>
     * 
     * @param request QueryGroupIdByGroupNameRequest
     * @return QueryGroupIdByGroupNameResponse
     */
    public QueryGroupIdByGroupNameResponse queryGroupIdByGroupName(QueryGroupIdByGroupNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryGroupIdByGroupNameWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries whitelist rules.</p>
     * 
     * @param request QueryGroupedSecurityEventMarkMissListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupedSecurityEventMarkMissListResponse
     */
    public QueryGroupedSecurityEventMarkMissListResponse queryGroupedSecurityEventMarkMissListWithOptions(QueryGroupedSecurityEventMarkMissListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.disposalWay)) {
            query.put("DisposalWay", request.disposalWay);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            body.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            body.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            body.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            body.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            body.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGroupedSecurityEventMarkMissList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGroupedSecurityEventMarkMissListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryGroupedSecurityEventMarkMissListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries whitelist rules.</p>
     * 
     * @param request QueryGroupedSecurityEventMarkMissListRequest
     * @return QueryGroupedSecurityEventMarkMissListResponse
     */
    public QueryGroupedSecurityEventMarkMissListResponse queryGroupedSecurityEventMarkMissList(QueryGroupedSecurityEventMarkMissListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryGroupedSecurityEventMarkMissListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.</p>
     * 
     * @param request QueryGuidTaskListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGuidTaskListResponse
     */
    public QueryGuidTaskListResponse queryGuidTaskListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryGuidTaskList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryGuidTaskListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryGuidTaskListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.</p>
     * @return QueryGuidTaskListResponse
     */
    public QueryGuidTaskListResponse queryGuidTaskList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryGuidTaskListWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the icons that correspond to nodes and edges.</p>
     * 
     * @param request QueryIncidentIconListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentIconListResponse
     */
    public QueryIncidentIconListResponse queryIncidentIconListWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentIconList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentIconListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryIncidentIconListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the icons that correspond to nodes and edges.</p>
     * @return QueryIncidentIconListResponse
     */
    public QueryIncidentIconListResponse queryIncidentIconList() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentIconListWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether a node can be drilled down.</p>
     * 
     * @param request QueryIncidentSubNodesCountRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentSubNodesCountResponse
     */
    public QueryIncidentSubNodesCountResponse queryIncidentSubNodesCountWithOptions(QueryIncidentSubNodesCountRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.body)) {
            body.put("body", request.body);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentSubNodesCount"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentSubNodesCountResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryIncidentSubNodesCountResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether a node can be drilled down.</p>
     * 
     * @param request QueryIncidentSubNodesCountRequest
     * @return QueryIncidentSubNodesCountResponse
     */
    public QueryIncidentSubNodesCountResponse queryIncidentSubNodesCount(QueryIncidentSubNodesCountRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentSubNodesCountWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the provenance graph of an event by using the event ID.</p>
     * 
     * @param request QueryIncidentTracingDetailRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentTracingDetailResponse
     */
    public QueryIncidentTracingDetailResponse queryIncidentTracingDetailWithOptions(QueryIncidentTracingDetailRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.incidentId)) {
            body.put("IncidentId", request.incidentId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentTracingDetail"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentTracingDetailResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryIncidentTracingDetailResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the provenance graph of an event by using the event ID.</p>
     * 
     * @param request QueryIncidentTracingDetailRequest
     * @return QueryIncidentTracingDetailResponse
     */
    public QueryIncidentTracingDetailResponse queryIncidentTracingDetail(QueryIncidentTracingDetailRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentTracingDetailWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether an event has a provenance graph based on the event ID.</p>
     * 
     * @param request QueryIncidentTracingJudgeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentTracingJudgeResponse
     */
    public QueryIncidentTracingJudgeResponse queryIncidentTracingJudgeWithOptions(QueryIncidentTracingJudgeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.incidentId)) {
            body.put("IncidentId", request.incidentId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentTracingJudge"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentTracingJudgeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryIncidentTracingJudgeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries whether an event has a provenance graph based on the event ID.</p>
     * 
     * @param request QueryIncidentTracingJudgeRequest
     * @return QueryIncidentTracingJudgeResponse
     */
    public QueryIncidentTracingJudgeResponse queryIncidentTracingJudge(QueryIncidentTracingJudgeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentTracingJudgeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the extended information about an event node.</p>
     * 
     * @param request QueryIncidentVertexExtendInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentVertexExtendInfoResponse
     */
    public QueryIncidentVertexExtendInfoResponse queryIncidentVertexExtendInfoWithOptions(QueryIncidentVertexExtendInfoRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.offset)) {
            body.put("Offset", request.offset);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.relationType)) {
            body.put("RelationType", request.relationType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.size)) {
            body.put("Size", request.size);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            body.put("VertexId", request.vertexId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexLabel)) {
            body.put("VertexLabel", request.vertexLabel);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentVertexExtendInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentVertexExtendInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryIncidentVertexExtendInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the extended information about an event node.</p>
     * 
     * @param request QueryIncidentVertexExtendInfoRequest
     * @return QueryIncidentVertexExtendInfoResponse
     */
    public QueryIncidentVertexExtendInfoResponse queryIncidentVertexExtendInfo(QueryIncidentVertexExtendInfoRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentVertexExtendInfoWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the detailed information about an event node.</p>
     * 
     * @param tmpReq QueryIncidentVertexNodesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryIncidentVertexNodesResponse
     */
    public QueryIncidentVertexNodesResponse queryIncidentVertexNodesWithOptions(QueryIncidentVertexNodesRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        QueryIncidentVertexNodesShrinkRequest request = new QueryIncidentVertexNodesShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.edgeLabelList)) {
            request.edgeLabelListShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.edgeLabelList, "EdgeLabelList", "simple");
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.edgeLabelListShrink)) {
            body.put("EdgeLabelList", request.edgeLabelListShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.offset)) {
            body.put("Offset", request.offset);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.size)) {
            body.put("Size", request.size);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexId)) {
            body.put("VertexId", request.vertexId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vertexLabel)) {
            body.put("VertexLabel", request.vertexLabel);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryIncidentVertexNodes"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryIncidentVertexNodesResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryIncidentVertexNodesResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the detailed information about an event node.</p>
     * 
     * @param request QueryIncidentVertexNodesRequest
     * @return QueryIncidentVertexNodesResponse
     */
    public QueryIncidentVertexNodesResponse queryIncidentVertexNodes(QueryIncidentVertexNodesRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryIncidentVertexNodesWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the retention period of images that are stored in a Jenkins image repository.</p>
     * 
     * @param request QueryJenkinsImageRegistryPersistenceDayRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryJenkinsImageRegistryPersistenceDayResponse
     */
    public QueryJenkinsImageRegistryPersistenceDayResponse queryJenkinsImageRegistryPersistenceDayWithOptions(QueryJenkinsImageRegistryPersistenceDayRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryJenkinsImageRegistryPersistenceDay"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryJenkinsImageRegistryPersistenceDayResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryJenkinsImageRegistryPersistenceDayResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the retention period of images that are stored in a Jenkins image repository.</p>
     * 
     * @param request QueryJenkinsImageRegistryPersistenceDayRequest
     * @return QueryJenkinsImageRegistryPersistenceDayResponse
     */
    public QueryJenkinsImageRegistryPersistenceDayResponse queryJenkinsImageRegistryPersistenceDay(QueryJenkinsImageRegistryPersistenceDayRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the result of a database precheck task.</p>
     * 
     * @param request QueryPreCheckDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPreCheckDatabaseResponse
     */
    public QueryPreCheckDatabaseResponse queryPreCheckDatabaseWithOptions(QueryPreCheckDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.instanceUuid)) {
            query.put("InstanceUuid", request.instanceUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "QueryPreCheckDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new QueryPreCheckDatabaseResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new QueryPreCheckDatabaseResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the result of a database precheck task.</p>
     * 
     * @param request QueryPreCheckDatabaseRequest
     * @return QueryPreCheckDatabaseResponse
     */
    public QueryPreCheckDatabaseResponse queryPreCheckDatabase(QueryPreCheckDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.queryPreCheckDatabaseWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Restarts a server. Only Windows servers are supported.</p>
     * 
     * @param request RebootMachineRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RebootMachineResponse
     */
    public RebootMachineResponse rebootMachineWithOptions(RebootMachineRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RebootMachine"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RebootMachineResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RebootMachineResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Restarts a server. Only Windows servers are supported.</p>
     * 
     * @param request RebootMachineRequest
     * @return RebootMachineResponse
     */
    public RebootMachineResponse rebootMachine(RebootMachineRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.rebootMachineWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.</p>
     * 
     * @param request ReceiveFunctionTrialRewardByAliUidRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReceiveFunctionTrialRewardByAliUidResponse
     */
    public ReceiveFunctionTrialRewardByAliUidResponse receiveFunctionTrialRewardByAliUidWithOptions(ReceiveFunctionTrialRewardByAliUidRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.functionName)) {
            query.put("FunctionName", request.functionName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ReceiveFunctionTrialRewardByAliUid"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ReceiveFunctionTrialRewardByAliUidResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ReceiveFunctionTrialRewardByAliUidResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.</p>
     * 
     * @param request ReceiveFunctionTrialRewardByAliUidRequest
     * @return ReceiveFunctionTrialRewardByAliUidResponse
     */
    public ReceiveFunctionTrialRewardByAliUidResponse receiveFunctionTrialRewardByAliUid(ReceiveFunctionTrialRewardByAliUidRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.receiveFunctionTrialRewardByAliUidWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Synchronizes assets.</p>
     * 
     * @param request RefreshAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RefreshAssetsResponse
     */
    public RefreshAssetsResponse refreshAssetsWithOptions(RefreshAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetSubType)) {
            query.put("CloudAssetSubType", request.cloudAssetSubType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cloudAssetType)) {
            query.put("CloudAssetType", request.cloudAssetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RefreshAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RefreshAssetsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RefreshAssetsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Synchronizes assets.</p>
     * 
     * @param request RefreshAssetsRequest
     * @return RefreshAssetsResponse
     */
    public RefreshAssetsResponse refreshAssets(RefreshAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.refreshAssetsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Refreshes the statistics of container assets in the Assets module.</p>
     * 
     * @param request RefreshContainerAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RefreshContainerAssetsResponse
     */
    public RefreshContainerAssetsResponse refreshContainerAssetsWithOptions(RefreshContainerAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.assetType)) {
            query.put("AssetType", request.assetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RefreshContainerAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RefreshContainerAssetsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RefreshContainerAssetsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Refreshes the statistics of container assets in the Assets module.</p>
     * 
     * @param request RefreshContainerAssetsRequest
     * @return RefreshContainerAssetsResponse
     */
    public RefreshContainerAssetsResponse refreshContainerAssets(RefreshContainerAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.refreshContainerAssetsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Refreshes the list of Object Storage Service (OSS) buckets.</p>
     * 
     * @param request RefreshOssBucketScanInfoRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RefreshOssBucketScanInfoResponse
     */
    public RefreshOssBucketScanInfoResponse refreshOssBucketScanInfoWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RefreshOssBucketScanInfo"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RefreshOssBucketScanInfoResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RefreshOssBucketScanInfoResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Refreshes the list of Object Storage Service (OSS) buckets.</p>
     * @return RefreshOssBucketScanInfoResponse
     */
    public RefreshOssBucketScanInfoResponse refreshOssBucketScanInfo() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.refreshOssBucketScanInfoWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates an image token.</p>
     * 
     * @param request RefreshRegistryTokenRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RefreshRegistryTokenResponse
     */
    public RefreshRegistryTokenResponse refreshRegistryTokenWithOptions(RefreshRegistryTokenRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            query.put("RegistryId", request.registryId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RefreshRegistryToken"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RefreshRegistryTokenResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RefreshRegistryTokenResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates an image token.</p>
     * 
     * @param request RefreshRegistryTokenRequest
     * @return RefreshRegistryTokenResponse
     */
    public RefreshRegistryTokenResponse refreshRegistryToken(RefreshRegistryTokenRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.refreshRegistryTokenWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>释放云安全中心实例</p>
     * 
     * @param request ReleaseSasInstanceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReleaseSasInstanceResponse
     */
    public ReleaseSasInstanceResponse releaseSasInstanceWithOptions(ReleaseSasInstanceRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.chargeType)) {
            body.put("ChargeType", request.chargeType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceId)) {
            body.put("InstanceId", request.instanceId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ReleaseSasInstance"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ReleaseSasInstanceResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ReleaseSasInstanceResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>释放云安全中心实例</p>
     * 
     * @param request ReleaseSasInstanceRequest
     * @return ReleaseSasInstanceResponse
     */
    public ReleaseSasInstanceResponse releaseSasInstance(ReleaseSasInstanceRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.releaseSasInstanceWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Removes an instance from the whitelist.</p>
     * 
     * @param request RemoveCheckInstanceResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveCheckInstanceResultWhiteListResponse
     */
    public RemoveCheckInstanceResultWhiteListResponse removeCheckInstanceResultWhiteListWithOptions(RemoveCheckInstanceResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RemoveCheckInstanceResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RemoveCheckInstanceResultWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RemoveCheckInstanceResultWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Removes an instance from the whitelist.</p>
     * 
     * @param request RemoveCheckInstanceResultWhiteListRequest
     * @return RemoveCheckInstanceResultWhiteListResponse
     */
    public RemoveCheckInstanceResultWhiteListResponse removeCheckInstanceResultWhiteList(RemoveCheckInstanceResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.removeCheckInstanceResultWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Removes the check items of the configuration assessment feature from the whitelist.</p>
     * 
     * @param request RemoveCheckResultWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveCheckResultWhiteListResponse
     */
    public RemoveCheckResultWhiteListResponse removeCheckResultWhiteListWithOptions(RemoveCheckResultWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkGroupId)) {
            query.put("CheckGroupId", request.checkGroupId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleId)) {
            query.put("RuleId", request.ruleId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RemoveCheckResultWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RemoveCheckResultWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RemoveCheckResultWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Removes the check items of the configuration assessment feature from the whitelist.</p>
     * 
     * @param request RemoveCheckResultWhiteListRequest
     * @return RemoveCheckResultWhiteListResponse
     */
    public RemoveCheckResultWhiteListResponse removeCheckResultWhiteList(RemoveCheckResultWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.removeCheckResultWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Resets a honeypot.</p>
     * 
     * @param request ResetHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ResetHoneypotResponse
     */
    public ResetHoneypotResponse resetHoneypotWithOptions(ResetHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ResetHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ResetHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ResetHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Resets a honeypot.</p>
     * 
     * @param request ResetHoneypotRequest
     * @return ResetHoneypotResponse
     */
    public ResetHoneypotResponse resetHoneypot(ResetHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.resetHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.</p>
     * 
     * @param request ResetLogShipperRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ResetLogShipperResponse
     */
    public ResetLogShipperResponse resetLogShipperWithOptions(ResetLogShipperRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.hotTtl)) {
            query.put("HotTtl", request.hotTtl);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.logMetaList)) {
            query.put("LogMetaList", request.logMetaList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ttl)) {
            query.put("Ttl", request.ttl);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ResetLogShipper"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ResetLogShipperResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ResetLogShipperResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.</p>
     * 
     * @param request ResetLogShipperRequest
     * @return ResetLogShipperResponse
     */
    public ResetLogShipperResponse resetLogShipper(ResetLogShipperRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.resetLogShipperWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Retries agentless detection tasks.</p>
     * 
     * @param request RetryAgentlessTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RetryAgentlessTaskResponse
     */
    public RetryAgentlessTaskResponse retryAgentlessTaskWithOptions(RetryAgentlessTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.taskId)) {
            query.put("TaskId", request.taskId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RetryAgentlessTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RetryAgentlessTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RetryAgentlessTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Retries agentless detection tasks.</p>
     * 
     * @param request RetryAgentlessTaskRequest
     * @return RetryAgentlessTaskResponse
     */
    public RetryAgentlessTaskResponse retryAgentlessTask(RetryAgentlessTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.retryAgentlessTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Retry installing the honeypot probe.</p>
     * 
     * @param request RetryInstallProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RetryInstallProbeResponse
     */
    public RetryInstallProbeResponse retryInstallProbeWithOptions(RetryInstallProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RetryInstallProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RetryInstallProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RetryInstallProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Retry installing the honeypot probe.</p>
     * 
     * @param request RetryInstallProbeRequest
     * @return RetryInstallProbeResponse
     */
    public RetryInstallProbeResponse retryInstallProbe(RetryInstallProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.retryInstallProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Restores a quarantined file.</p>
     * 
     * @param request RollbackSuspEventQuaraFileRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return RollbackSuspEventQuaraFileResponse
     */
    public RollbackSuspEventQuaraFileResponse rollbackSuspEventQuaraFileWithOptions(RollbackSuspEventQuaraFileRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.quaraFileId)) {
            query.put("QuaraFileId", request.quaraFileId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "RollbackSuspEventQuaraFile"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new RollbackSuspEventQuaraFileResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new RollbackSuspEventQuaraFileResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Restores a quarantined file.</p>
     * 
     * @param request RollbackSuspEventQuaraFileRequest
     * @return RollbackSuspEventQuaraFileResponse
     */
    public RollbackSuspEventQuaraFileResponse rollbackSuspEventQuaraFile(RollbackSuspEventQuaraFileRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.rollbackSuspEventQuaraFileWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation verification code that is used to run the installation command of the Security Center agent.</p>
     * 
     * @param request SasInstallCodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SasInstallCodeResponse
     */
    public SasInstallCodeResponse sasInstallCodeWithOptions(SasInstallCodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SasInstallCode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SasInstallCodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SasInstallCodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Queries the installation verification code that is used to run the installation command of the Security Center agent.</p>
     * 
     * @param request SasInstallCodeRequest
     * @return SasInstallCodeResponse
     */
    public SasInstallCodeResponse sasInstallCode(SasInstallCodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.sasInstallCodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Saves the configurations of a custom security report.</p>
     * 
     * @param request SaveCustomizeReportConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveCustomizeReportConfigResponse
     */
    public SaveCustomizeReportConfigResponse saveCustomizeReportConfigWithOptions(SaveCustomizeReportConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.groupType)) {
            query.put("GroupType", request.groupType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pinnedTime)) {
            query.put("PinnedTime", request.pinnedTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.recipients)) {
            query.put("Recipients", request.recipients);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportDays)) {
            query.put("ReportDays", request.reportDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportEndDate)) {
            query.put("ReportEndDate", request.reportEndDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportLang)) {
            query.put("ReportLang", request.reportLang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportSendType)) {
            query.put("ReportSendType", request.reportSendType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportStartDate)) {
            query.put("ReportStartDate", request.reportStartDate);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportStatus)) {
            query.put("ReportStatus", request.reportStatus);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportType)) {
            query.put("ReportType", request.reportType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportVersion)) {
            query.put("ReportVersion", request.reportVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sendEndTime)) {
            query.put("SendEndTime", request.sendEndTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sendPeriodDays)) {
            query.put("SendPeriodDays", request.sendPeriodDays);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sendPeriodType)) {
            query.put("SendPeriodType", request.sendPeriodType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sendStartTime)) {
            query.put("SendStartTime", request.sendStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetGroups)) {
            query.put("TargetGroups", request.targetGroups);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetUids)) {
            query.put("TargetUids", request.targetUids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.title)) {
            query.put("Title", request.title);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SaveCustomizeReportConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SaveCustomizeReportConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SaveCustomizeReportConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Saves the configurations of a custom security report.</p>
     * 
     * @param request SaveCustomizeReportConfigRequest
     * @return SaveCustomizeReportConfigResponse
     */
    public SaveCustomizeReportConfigResponse saveCustomizeReportConfig(SaveCustomizeReportConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.saveCustomizeReportConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Saves a baseline check policy for images.</p>
     * 
     * @param request SaveImageBaselineStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveImageBaselineStrategyResponse
     */
    public SaveImageBaselineStrategyResponse saveImageBaselineStrategyWithOptions(SaveImageBaselineStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.baselineItemList)) {
            query.put("BaselineItemList", request.baselineItemList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SaveImageBaselineStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SaveImageBaselineStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SaveImageBaselineStrategyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Saves a baseline check policy for images.</p>
     * 
     * @param request SaveImageBaselineStrategyRequest
     * @return SaveImageBaselineStrategyResponse
     */
    public SaveImageBaselineStrategyResponse saveImageBaselineStrategy(SaveImageBaselineStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.saveImageBaselineStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Saves alert settings.</p>
     * 
     * @param request SaveSuspEventUserSettingRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveSuspEventUserSettingResponse
     */
    public SaveSuspEventUserSettingResponse saveSuspEventUserSettingWithOptions(SaveSuspEventUserSettingRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.from)) {
            query.put("From", request.from);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.levelsOn)) {
            query.put("LevelsOn", request.levelsOn);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SaveSuspEventUserSetting"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SaveSuspEventUserSettingResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SaveSuspEventUserSettingResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Saves alert settings.</p>
     * 
     * @param request SaveSuspEventUserSettingRequest
     * @return SaveSuspEventUserSettingResponse
     */
    public SaveSuspEventUserSettingResponse saveSuspEventUserSetting(SaveSuspEventUserSettingRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.saveSuspEventUserSettingWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an application whitelist policy.</p>
     * 
     * @param request SaveWhiteListStrategyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveWhiteListStrategyResponse
     */
    public SaveWhiteListStrategyResponse saveWhiteListStrategyWithOptions(SaveWhiteListStrategyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.studyTime)) {
            query.put("StudyTime", request.studyTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SaveWhiteListStrategy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SaveWhiteListStrategyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SaveWhiteListStrategyResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Creates an application whitelist policy.</p>
     * 
     * @param request SaveWhiteListStrategyRequest
     * @return SaveWhiteListStrategyResponse
     */
    public SaveWhiteListStrategyResponse saveWhiteListStrategy(SaveWhiteListStrategyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.saveWhiteListStrategyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Manages the servers to which an application whitelist policy is applied.</p>
     * 
     * @param request SaveWhiteListStrategyAssetsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveWhiteListStrategyAssetsResponse
     */
    public SaveWhiteListStrategyAssetsResponse saveWhiteListStrategyAssetsWithOptions(SaveWhiteListStrategyAssetsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operations)) {
            query.put("Operations", request.operations);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.relationType)) {
            query.put("RelationType", request.relationType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SaveWhiteListStrategyAssets"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SaveWhiteListStrategyAssetsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SaveWhiteListStrategyAssetsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Manages the servers to which an application whitelist policy is applied.</p>
     * 
     * @param request SaveWhiteListStrategyAssetsRequest
     * @return SaveWhiteListStrategyAssetsResponse
     */
    public SaveWhiteListStrategyAssetsResponse saveWhiteListStrategyAssets(SaveWhiteListStrategyAssetsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.saveWhiteListStrategyAssetsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.</p>
     * 
     * @param request SendCustomizeReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendCustomizeReportResponse
     */
    public SendCustomizeReportResponse sendCustomizeReportWithOptions(SendCustomizeReportRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SendCustomizeReport"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SendCustomizeReportResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SendCustomizeReportResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.</p>
     * 
     * @param request SendCustomizeReportRequest
     * @return SendCustomizeReportResponse
     */
    public SendCustomizeReportResponse sendCustomizeReport(SendCustomizeReportRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.sendCustomizeReportWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies configurations for scanning image build command risks.</p>
     * 
     * @param request SetBuildRiskDefineRuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetBuildRiskDefineRuleConfigResponse
     */
    public SetBuildRiskDefineRuleConfigResponse setBuildRiskDefineRuleConfigWithOptions(SetBuildRiskDefineRuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetBuildRiskDefineRuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SetBuildRiskDefineRuleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SetBuildRiskDefineRuleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies configurations for scanning image build command risks.</p>
     * 
     * @param request SetBuildRiskDefineRuleConfigRequest
     * @return SetBuildRiskDefineRuleConfigResponse
     */
    public SetBuildRiskDefineRuleConfigResponse setBuildRiskDefineRuleConfig(SetBuildRiskDefineRuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setBuildRiskDefineRuleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Configures the status of the container firewall feature.</p>
     * 
     * @param request SetClusterInterceptionConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetClusterInterceptionConfigResponse
     */
    public SetClusterInterceptionConfigResponse setClusterInterceptionConfigWithOptions(SetClusterInterceptionConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterIds)) {
            query.put("ClusterIds", request.clusterIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchOn)) {
            query.put("SwitchOn", request.switchOn);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.switchType)) {
            query.put("SwitchType", request.switchType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetClusterInterceptionConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SetClusterInterceptionConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SetClusterInterceptionConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Configures the status of the container firewall feature.</p>
     * 
     * @param request SetClusterInterceptionConfigRequest
     * @return SetClusterInterceptionConfigResponse
     */
    public SetClusterInterceptionConfigResponse setClusterInterceptionConfig(SetClusterInterceptionConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setClusterInterceptionConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Specifies the status of an image build command risk.</p>
     * 
     * @param request SetImageBuildRiskStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetImageBuildRiskStatusResponse
     */
    public SetImageBuildRiskStatusResponse setImageBuildRiskStatusWithOptions(SetImageBuildRiskStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.imageUuids)) {
            query.put("ImageUuids", request.imageUuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskKey)) {
            query.put("RiskKey", request.riskKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetImageBuildRiskStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SetImageBuildRiskStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SetImageBuildRiskStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Specifies the status of an image build command risk.</p>
     * 
     * @param request SetImageBuildRiskStatusRequest
     * @return SetImageBuildRiskStatusResponse
     */
    public SetImageBuildRiskStatusResponse setImageBuildRiskStatus(SetImageBuildRiskStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setImageBuildRiskStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the status of sensitive files in an image.</p>
     * 
     * @param tmpReq SetImageSensitiveFileStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetImageSensitiveFileStatusResponse
     */
    public SetImageSensitiveFileStatusResponse setImageSensitiveFileStatusWithOptions(SetImageSensitiveFileStatusRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        SetImageSensitiveFileStatusShrinkRequest request = new SetImageSensitiveFileStatusShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.scanRange)) {
            request.scanRangeShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.idList)) {
            query.put("IdList", request.idList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageUuids)) {
            query.put("ImageUuids", request.imageUuids);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanRangeShrink)) {
            query.put("ScanRange", request.scanRangeShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sensitiveFileKey)) {
            query.put("SensitiveFileKey", request.sensitiveFileKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetImageSensitiveFileStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SetImageSensitiveFileStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SetImageSensitiveFileStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the status of sensitive files in an image.</p>
     * 
     * @param request SetImageSensitiveFileStatusRequest
     * @return SetImageSensitiveFileStatusResponse
     */
    public SetImageSensitiveFileStatusResponse setImageSensitiveFileStatus(SetImageSensitiveFileStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setImageSensitiveFileStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Specifies a cycle to scan images for image repositories. Unit: days.</p>
     * 
     * @param request SetRegistryScanDayNumRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetRegistryScanDayNumResponse
     */
    public SetRegistryScanDayNumResponse setRegistryScanDayNumWithOptions(SetRegistryScanDayNumRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scanDayNum)) {
            query.put("ScanDayNum", request.scanDayNum);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetRegistryScanDayNum"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SetRegistryScanDayNumResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SetRegistryScanDayNumResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Specifies a cycle to scan images for image repositories. Unit: days.</p>
     * 
     * @param request SetRegistryScanDayNumRequest
     * @return SetRegistryScanDayNumResponse
     */
    public SetRegistryScanDayNumResponse setRegistryScanDayNum(SetRegistryScanDayNumRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setRegistryScanDayNumWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Configure the check rules of sensitive files.</p>
     * 
     * @param request SetSensitiveDefineRuleConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetSensitiveDefineRuleConfigResponse
     */
    public SetSensitiveDefineRuleConfigResponse setSensitiveDefineRuleConfigWithOptions(SetSensitiveDefineRuleConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.config)) {
            query.put("Config", request.config);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enableNewRule)) {
            query.put("EnableNewRule", request.enableNewRule);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetSensitiveDefineRuleConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SetSensitiveDefineRuleConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SetSensitiveDefineRuleConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Configure the check rules of sensitive files.</p>
     * 
     * @param request SetSensitiveDefineRuleConfigRequest
     * @return SetSensitiveDefineRuleConfigResponse
     */
    public SetSensitiveDefineRuleConfigResponse setSensitiveDefineRuleConfig(SetSensitiveDefineRuleConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setSensitiveDefineRuleConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Configures the regions from which you want to synchronize assets.</p>
     * 
     * @param request SetSyncRefreshRegionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetSyncRefreshRegionResponse
     */
    public SetSyncRefreshRegionResponse setSyncRefreshRegionWithOptions(SetSyncRefreshRegionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.defaultRegion)) {
            query.put("DefaultRegion", request.defaultRegion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.regionIds)) {
            query.put("RegionIds", request.regionIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.vendor)) {
            query.put("Vendor", request.vendor);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SetSyncRefreshRegion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SetSyncRefreshRegionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SetSyncRefreshRegionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Configures the regions from which you want to synchronize assets.</p>
     * 
     * @param request SetSyncRefreshRegionRequest
     * @return SetSyncRefreshRegionResponse
     */
    public SetSyncRefreshRegionResponse setSyncRefreshRegion(SetSyncRefreshRegionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.setSyncRefreshRegionWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.</p>
     * 
     * @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
     * 
     * @param request StartBaselineSecurityCheckRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartBaselineSecurityCheckResponse
     */
    @Deprecated
    // Deprecated
    public StartBaselineSecurityCheckResponse startBaselineSecurityCheckWithOptions(StartBaselineSecurityCheckRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.itemIds)) {
            query.put("ItemIds", request.itemIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.resourceOwnerId)) {
            query.put("ResourceOwnerId", request.resourceOwnerId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartBaselineSecurityCheck"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new StartBaselineSecurityCheckResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new StartBaselineSecurityCheckResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.</p>
     * 
     * @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
     * 
     * @param request StartBaselineSecurityCheckRequest
     * @return StartBaselineSecurityCheckResponse
     */
    @Deprecated
    // Deprecated
    public StartBaselineSecurityCheckResponse startBaselineSecurityCheck(StartBaselineSecurityCheckRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startBaselineSecurityCheckWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Starts a database scan task.</p>
     * 
     * @param request StartDiscoverDatabaseTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartDiscoverDatabaseTaskResponse
     */
    public StartDiscoverDatabaseTaskResponse startDiscoverDatabaseTaskWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartDiscoverDatabaseTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new StartDiscoverDatabaseTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new StartDiscoverDatabaseTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Starts a database scan task.</p>
     * @return StartDiscoverDatabaseTaskResponse
     */
    public StartDiscoverDatabaseTaskResponse startDiscoverDatabaseTask() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startDiscoverDatabaseTaskWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Starts a honeypot.</p>
     * 
     * @param request StartHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartHoneypotResponse
     */
    public StartHoneypotResponse startHoneypotWithOptions(StartHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new StartHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new StartHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Starts a honeypot.</p>
     * 
     * @param request StartHoneypotRequest
     * @return StartHoneypotResponse
     */
    public StartHoneypotResponse startHoneypot(StartHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Starts an IDC scan task.</p>
     * 
     * @param request StartIdcProbeScanRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartIdcProbeScanResponse
     */
    public StartIdcProbeScanResponse startIdcProbeScanWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartIdcProbeScan"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new StartIdcProbeScanResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new StartIdcProbeScanResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Starts an IDC scan task.</p>
     * @return StartIdcProbeScanResponse
     */
    public StartIdcProbeScanResponse startIdcProbeScan() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startIdcProbeScanWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Starts a database precheck task.</p>
     * 
     * @param request StartPreCheckDatabaseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartPreCheckDatabaseResponse
     */
    public StartPreCheckDatabaseResponse startPreCheckDatabaseWithOptions(StartPreCheckDatabaseRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.databaseType)) {
            query.put("DatabaseType", request.databaseType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceUuid)) {
            query.put("InstanceUuid", request.instanceUuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uniRegionId)) {
            query.put("UniRegionId", request.uniRegionId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartPreCheckDatabase"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new StartPreCheckDatabaseResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new StartPreCheckDatabaseResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Starts a database precheck task.</p>
     * 
     * @param request StartPreCheckDatabaseRequest
     * @return StartPreCheckDatabaseResponse
     */
    public StartPreCheckDatabaseResponse startPreCheckDatabase(StartPreCheckDatabaseRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startPreCheckDatabaseWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Performs a virus scan task on a server or multiple servers.</p>
     * 
     * @param request StartVirusScanTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartVirusScanTaskResponse
     */
    public StartVirusScanTaskResponse startVirusScanTaskWithOptions(StartVirusScanTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetInfo)) {
            query.put("TargetInfo", request.targetInfo);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StartVirusScanTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new StartVirusScanTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new StartVirusScanTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Performs a virus scan task on a server or multiple servers.</p>
     * 
     * @param request StartVirusScanTaskRequest
     * @return StartVirusScanTaskResponse
     */
    public StartVirusScanTaskResponse startVirusScanTask(StartVirusScanTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.startVirusScanTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Stops a honeypot.</p>
     * 
     * @param request StopHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return StopHoneypotResponse
     */
    public StopHoneypotResponse stopHoneypotWithOptions(StopHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "StopHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new StopHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new StopHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Stops a honeypot.</p>
     * 
     * @param request StopHoneypotRequest
     * @return StopHoneypotResponse
     */
    public StopHoneypotResponse stopHoneypot(StopHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.stopHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Submits a configuration assessment task.</p>
     * 
     * @param request SubmitCheckRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubmitCheckResponse
     */
    public SubmitCheckResponse submitCheckWithOptions(SubmitCheckRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.scanRange)) {
            query.put("ScanRange", request.scanRange);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SubmitCheck"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SubmitCheckResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SubmitCheckResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Submits a configuration assessment task.</p>
     * 
     * @param request SubmitCheckRequest
     * @return SubmitCheckResponse
     */
    public SubmitCheckResponse submitCheck(SubmitCheckRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.submitCheckWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.</p>
     * 
     * @param request SubmitOperationTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubmitOperationTaskResponse
     */
    public SubmitOperationTaskResponse submitOperationTaskWithOptions(SubmitOperationTaskRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.dimensionType)) {
            query.put("DimensionType", request.dimensionType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationTaskInstances)) {
            query.put("OperationTaskInstances", request.operationTaskInstances);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.relationKey)) {
            query.put("RelationKey", request.relationKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repairTempParam)) {
            query.put("RepairTempParam", request.repairTempParam);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SubmitOperationTask"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SubmitOperationTaskResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SubmitOperationTaskResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.</p>
     * 
     * @param request SubmitOperationTaskRequest
     * @return SubmitOperationTaskResponse
     */
    public SubmitOperationTaskResponse submitOperationTask(SubmitOperationTaskRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.submitOperationTaskWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).</p>
     * 
     * @param request SubmitTenantCheckRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubmitTenantCheckResponse
     */
    public SubmitTenantCheckResponse submitTenantCheckWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "SubmitTenantCheck"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new SubmitTenantCheckResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new SubmitTenantCheckResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).</p>
     * @return SubmitTenantCheckResponse
     */
    public SubmitTenantCheckResponse submitTenantCheck() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.submitTenantCheckWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Triggers ISO 27001 compliance checks of Security Center.</p>
     * 
     * @param request TriggerCheckRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TriggerCheckResponse
     */
    public TriggerCheckResponse triggerCheckWithOptions(com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teaopenapi.models.OpenApiRequest req = new com.aliyun.teaopenapi.models.OpenApiRequest();
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "TriggerCheck"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new TriggerCheckResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new TriggerCheckResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Triggers ISO 27001 compliance checks of Security Center.</p>
     * @return TriggerCheckResponse
     */
    public TriggerCheckResponse triggerCheck() throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.triggerCheckWithOptions(runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>解绑客户端代理</p>
     * 
     * @param request UnBindHybridProxyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnBindHybridProxyResponse
     */
    public UnBindHybridProxyResponse unBindHybridProxyWithOptions(UnBindHybridProxyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.yundunUuids)) {
            query.put("YundunUuids", request.yundunUuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UnBindHybridProxy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UnBindHybridProxyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UnBindHybridProxyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>解绑客户端代理</p>
     * 
     * @param request UnBindHybridProxyRequest
     * @return UnBindHybridProxyResponse
     */
    public UnBindHybridProxyResponse unBindHybridProxy(UnBindHybridProxyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.unBindHybridProxyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.</p>
     * 
     * @param request UnMarkMonitorAccountsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnMarkMonitorAccountsResponse
     */
    public UnMarkMonitorAccountsResponse unMarkMonitorAccountsWithOptions(UnMarkMonitorAccountsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.accountIds)) {
            query.put("AccountIds", request.accountIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UnMarkMonitorAccounts"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UnMarkMonitorAccountsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UnMarkMonitorAccountsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.</p>
     * 
     * @param request UnMarkMonitorAccountsRequest
     * @return UnMarkMonitorAccountsResponse
     */
    public UnMarkMonitorAccountsResponse unMarkMonitorAccounts(UnMarkMonitorAccountsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.unMarkMonitorAccountsWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.</p>
     * <blockquote>
     * <p>You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
     * <strong>Prerequisites</strong></p>
     * </blockquote>
     * <ul>
     * <li>The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the <a href="~~PauseClient~~">PauseClient</a> operation to disable the agent.</li>
     * <li>The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see <a href="https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine">Use the client protection feature</a>.</li>
     * </ul>
     * 
     * <b>summary</b> : 
     * <p>Unbinds servers that are not deployed on Alibaba Cloud from Security Center.</p>
     * 
     * @param request UnbindAegisRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnbindAegisResponse
     */
    public UnbindAegisResponse unbindAegisWithOptions(UnbindAegisRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UnbindAegis"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UnbindAegisResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UnbindAegisResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.</p>
     * <blockquote>
     * <p>You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
     * <strong>Prerequisites</strong></p>
     * </blockquote>
     * <ul>
     * <li>The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the <a href="~~PauseClient~~">PauseClient</a> operation to disable the agent.</li>
     * <li>The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see <a href="https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine">Use the client protection feature</a>.</li>
     * </ul>
     * 
     * <b>summary</b> : 
     * <p>Unbinds servers that are not deployed on Alibaba Cloud from Security Center.</p>
     * 
     * @param request UnbindAegisRequest
     * @return UnbindAegisResponse
     */
    public UnbindAegisResponse unbindAegis(UnbindAegisRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.unbindAegisWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Uninstalls the anti-ransomware agent.</p>
     * 
     * @param request UninstallBackupClientRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UninstallBackupClientResponse
     */
    public UninstallBackupClientResponse uninstallBackupClientWithOptions(UninstallBackupClientRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyVersion)) {
            query.put("PolicyVersion", request.policyVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuid)) {
            query.put("Uuid", request.uuid);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UninstallBackupClient"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UninstallBackupClientResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UninstallBackupClientResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Uninstalls the anti-ransomware agent.</p>
     * 
     * @param request UninstallBackupClientRequest
     * @return UninstallBackupClientResponse
     */
    public UninstallBackupClientResponse uninstallBackupClient(UninstallBackupClientRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.uninstallBackupClientWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Uninstalls the database backup agent.</p>
     * 
     * @param request UninstallUniBackupAgentRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UninstallUniBackupAgentResponse
     */
    public UninstallUniBackupAgentResponse uninstallUniBackupAgentWithOptions(UninstallUniBackupAgentRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.policyId)) {
            query.put("PolicyId", request.policyId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UninstallUniBackupAgent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UninstallUniBackupAgentResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UninstallUniBackupAgentResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Uninstalls the database backup agent.</p>
     * 
     * @param request UninstallUniBackupAgentRequest
     * @return UninstallUniBackupAgentResponse
     */
    public UninstallUniBackupAgentResponse uninstallUniBackupAgent(UninstallUniBackupAgentRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.uninstallUniBackupAgentWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates the status of the honeypot installation time.</p>
     * 
     * @param request UpdateAlarmEventRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateAlarmEventResponse
     */
    public UpdateAlarmEventResponse updateAlarmEventWithOptions(UpdateAlarmEventRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmEventIdList)) {
            body.put("AlarmEventIdList", request.alarmEventIdList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            body.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationCode)) {
            body.put("OperationCode", request.operationCode);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateAlarmEvent"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateAlarmEventResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateAlarmEventResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates the status of the honeypot installation time.</p>
     * 
     * @param request UpdateAlarmEventRequest
     * @return UpdateAlarmEventResponse
     */
    public UpdateAlarmEventResponse updateAlarmEvent(UpdateAlarmEventRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateAlarmEventWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates the whitelist rule for a baseline check item.</p>
     * 
     * @param request UpdateBaselineCheckWhiteRecordRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateBaselineCheckWhiteRecordResponse
     */
    public UpdateBaselineCheckWhiteRecordResponse updateBaselineCheckWhiteRecordWithOptions(UpdateBaselineCheckWhiteRecordRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.recordId)) {
            query.put("RecordId", request.recordId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateBaselineCheckWhiteRecord"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateBaselineCheckWhiteRecordResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateBaselineCheckWhiteRecordResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates the whitelist rule for a baseline check item.</p>
     * 
     * @param request UpdateBaselineCheckWhiteRecordRequest
     * @return UpdateBaselineCheckWhiteRecordResponse
     */
    public UpdateBaselineCheckWhiteRecordResponse updateBaselineCheckWhiteRecord(UpdateBaselineCheckWhiteRecordRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateBaselineCheckWhiteRecordWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies alerting settings for servers.</p>
     * 
     * @param request UpdateClientAlertModeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateClientAlertModeResponse
     */
    public UpdateClientAlertModeResponse updateClientAlertModeWithOptions(UpdateClientAlertModeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.mode)) {
            query.put("Mode", request.mode);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateClientAlertMode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateClientAlertModeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateClientAlertModeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies alerting settings for servers.</p>
     * 
     * @param request UpdateClientAlertModeRequest
     * @return UpdateClientAlertModeResponse
     */
    public UpdateClientAlertModeResponse updateClientAlertMode(UpdateClientAlertModeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateClientAlertModeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the settings of common switches.</p>
     * 
     * @param request UpdateCommonSwitchConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateCommonSwitchConfigResponse
     */
    public UpdateCommonSwitchConfigResponse updateCommonSwitchConfigWithOptions(UpdateCommonSwitchConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.targetDefault)) {
            query.put("TargetDefault", request.targetDefault);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.type)) {
            query.put("Type", request.type);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateCommonSwitchConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateCommonSwitchConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateCommonSwitchConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the settings of common switches.</p>
     * 
     * @param request UpdateCommonSwitchConfigRequest
     * @return UpdateCommonSwitchConfigResponse
     */
    public UpdateCommonSwitchConfigResponse updateCommonSwitchConfig(UpdateCommonSwitchConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateCommonSwitchConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of a security report.</p>
     * 
     * @param request UpdateCustomizeReportStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateCustomizeReportStatusResponse
     */
    public UpdateCustomizeReportStatusResponse updateCustomizeReportStatusWithOptions(UpdateCustomizeReportStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.pinnedTime)) {
            query.put("PinnedTime", request.pinnedTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportId)) {
            query.put("ReportId", request.reportId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reportStatus)) {
            query.put("ReportStatus", request.reportStatus);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateCustomizeReportStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateCustomizeReportStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateCustomizeReportStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Changes the status of a security report.</p>
     * 
     * @param request UpdateCustomizeReportStatusRequest
     * @return UpdateCustomizeReportStatusResponse
     */
    public UpdateCustomizeReportStatusResponse updateCustomizeReportStatus(UpdateCustomizeReportStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateCustomizeReportStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the status of core file monitoring events reported by the Security Center agent.</p>
     * 
     * @param request UpdateFileProtectEventStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileProtectEventStatusResponse
     */
    public UpdateFileProtectEventStatusResponse updateFileProtectEventStatusWithOptions(UpdateFileProtectEventStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileProtectEventStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileProtectEventStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateFileProtectEventStatusResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the status of core file monitoring events reported by the Security Center agent.</p>
     * 
     * @param request UpdateFileProtectEventStatusRequest
     * @return UpdateFileProtectEventStatusResponse
     */
    public UpdateFileProtectEventStatusResponse updateFileProtectEventStatus(UpdateFileProtectEventStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileProtectEventStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Adds remarks to core file monitoring events reported by the Security Center agent.</p>
     * 
     * @param request UpdateFileProtectRemarkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileProtectRemarkResponse
     */
    public UpdateFileProtectRemarkResponse updateFileProtectRemarkWithOptions(UpdateFileProtectRemarkRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.remark)) {
            query.put("Remark", request.remark);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileProtectRemark"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileProtectRemarkResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateFileProtectRemarkResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Adds remarks to core file monitoring events reported by the Security Center agent.</p>
     * 
     * @param request UpdateFileProtectRemarkRequest
     * @return UpdateFileProtectRemarkResponse
     */
    public UpdateFileProtectRemarkResponse updateFileProtectRemark(UpdateFileProtectRemarkRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileProtectRemarkWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the content of a core file monitoring rule based on the ID of the rule.</p>
     * 
     * @param request UpdateFileProtectRuleRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileProtectRuleResponse
     */
    public UpdateFileProtectRuleResponse updateFileProtectRuleWithOptions(UpdateFileProtectRuleRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alertLevel)) {
            query.put("AlertLevel", request.alertLevel);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileOps)) {
            query.put("FileOps", request.fileOps);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.filePaths)) {
            query.put("FilePaths", request.filePaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.procPaths)) {
            query.put("ProcPaths", request.procPaths);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleName)) {
            query.put("RuleName", request.ruleName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileProtectRule"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileProtectRuleResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateFileProtectRuleResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the content of a core file monitoring rule based on the ID of the rule.</p>
     * 
     * @param request UpdateFileProtectRuleRequest
     * @return UpdateFileProtectRuleResponse
     */
    public UpdateFileProtectRuleResponse updateFileProtectRule(UpdateFileProtectRuleRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileProtectRuleWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the queries per second (QPS) limit on the files uploaded from the client.</p>
     * 
     * @param request UpdateFileUploadLimitRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateFileUploadLimitResponse
     */
    public UpdateFileUploadLimitResponse updateFileUploadLimitWithOptions(UpdateFileUploadLimitRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.limit)) {
            query.put("Limit", request.limit);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateFileUploadLimit"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateFileUploadLimitResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateFileUploadLimitResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the queries per second (QPS) limit on the files uploaded from the client.</p>
     * 
     * @param request UpdateFileUploadLimitRequest
     * @return UpdateFileUploadLimitResponse
     */
    public UpdateFileUploadLimitResponse updateFileUploadLimit(UpdateFileUploadLimitRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateFileUploadLimitWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of a specified honeypot.</p>
     * 
     * @param request UpdateHoneypotRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotResponse
     */
    public UpdateHoneypotResponse updateHoneypotWithOptions(UpdateHoneypotRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotName)) {
            query.put("HoneypotName", request.honeypotName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypot"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateHoneypotResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of a specified honeypot.</p>
     * 
     * @param request UpdateHoneypotRequest
     * @return UpdateHoneypotResponse
     */
    public UpdateHoneypotResponse updateHoneypot(UpdateHoneypotRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of a specified management node.</p>
     * 
     * @param request UpdateHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotNodeResponse
     */
    public UpdateHoneypotNodeResponse updateHoneypotNodeWithOptions(UpdateHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.availableProbeNum)) {
            query.put("AvailableProbeNum", request.availableProbeNum);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeName)) {
            query.put("NodeName", request.nodeName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.securityGroupProbeIpList)) {
            query.put("SecurityGroupProbeIpList", request.securityGroupProbeIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateHoneypotNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of a specified management node.</p>
     * 
     * @param request UpdateHoneypotNodeRequest
     * @return UpdateHoneypotNodeResponse
     */
    public UpdateHoneypotNodeResponse updateHoneypotNode(UpdateHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of the specified honeypot template.</p>
     * 
     * @param request UpdateHoneypotPresetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotPresetResponse
     */
    public UpdateHoneypotPresetResponse updateHoneypotPresetWithOptions(UpdateHoneypotPresetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotPresetId)) {
            query.put("HoneypotPresetId", request.honeypotPresetId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.meta)) {
            query.put("Meta", request.meta);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.presetName)) {
            query.put("PresetName", request.presetName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotPreset"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotPresetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateHoneypotPresetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configurations of the specified honeypot template.</p>
     * 
     * @param request UpdateHoneypotPresetRequest
     * @return UpdateHoneypotPresetResponse
     */
    public UpdateHoneypotPresetResponse updateHoneypotPreset(UpdateHoneypotPresetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotPresetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the attributes of a specified probe.</p>
     * 
     * @param request UpdateHoneypotProbeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotProbeResponse
     */
    public UpdateHoneypotProbeResponse updateHoneypotProbeWithOptions(UpdateHoneypotProbeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.arp)) {
            query.put("Arp", request.arp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.displayName)) {
            query.put("DisplayName", request.displayName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ping)) {
            query.put("Ping", request.ping);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceIpList)) {
            query.put("ServiceIpList", request.serviceIpList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotProbe"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotProbeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateHoneypotProbeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the attributes of a specified probe.</p>
     * 
     * @param request UpdateHoneypotProbeRequest
     * @return UpdateHoneypotProbeResponse
     */
    public UpdateHoneypotProbeResponse updateHoneypotProbe(UpdateHoneypotProbeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotProbeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a probe service.</p>
     * 
     * @param request UpdateHoneypotProbeBindRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHoneypotProbeBindResponse
     */
    public UpdateHoneypotProbeBindResponse updateHoneypotProbeBindWithOptions(UpdateHoneypotProbeBindRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.bindId)) {
            query.put("BindId", request.bindId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindPortList)) {
            query.put("BindPortList", request.bindPortList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindType)) {
            query.put("BindType", request.bindType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.currentPage)) {
            query.put("CurrentPage", request.currentPage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotId)) {
            query.put("HoneypotId", request.honeypotId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.pageSize)) {
            query.put("PageSize", request.pageSize);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ports)) {
            query.put("Ports", request.ports);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.probeId)) {
            query.put("ProbeId", request.probeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.serviceIpList)) {
            query.put("ServiceIpList", request.serviceIpList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.setStatus)) {
            query.put("SetStatus", request.setStatus);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHoneypotProbeBind"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHoneypotProbeBindResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateHoneypotProbeBindResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a probe service.</p>
     * 
     * @param request UpdateHoneypotProbeBindRequest
     * @return UpdateHoneypotProbeBindResponse
     */
    public UpdateHoneypotProbeBindResponse updateHoneypotProbeBind(UpdateHoneypotProbeBindRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHoneypotProbeBindWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.</p>
     * 
     * @param request UpdateHybridProxyRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateHybridProxyResponse
     */
    public UpdateHybridProxyResponse updateHybridProxyWithOptions(UpdateHybridProxyRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.proxyUuid)) {
            query.put("ProxyUuid", request.proxyUuid);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateHybridProxy"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateHybridProxyResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateHybridProxyResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.</p>
     * 
     * @param request UpdateHybridProxyRequest
     * @return UpdateHybridProxyResponse
     */
    public UpdateHybridProxyResponse updateHybridProxy(UpdateHybridProxyRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateHybridProxyWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates an alert handling rule.</p>
     * 
     * @param request UpdateImageEventOperationRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateImageEventOperationResponse
     */
    public UpdateImageEventOperationResponse updateImageEventOperationWithOptions(UpdateImageEventOperationRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.conditions)) {
            query.put("Conditions", request.conditions);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.note)) {
            query.put("Note", request.note);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scenarios)) {
            query.put("Scenarios", request.scenarios);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateImageEventOperation"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateImageEventOperationResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateImageEventOperationResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates an alert handling rule.</p>
     * 
     * @param request UpdateImageEventOperationRequest
     * @return UpdateImageEventOperationResponse
     */
    public UpdateImageEventOperationResponse updateImageEventOperation(UpdateImageEventOperationRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateImageEventOperationWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates the vulnerability whitelist of an image.</p>
     * 
     * @param request UpdateImageVulWhitelistTargetRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateImageVulWhitelistTargetResponse
     */
    public UpdateImageVulWhitelistTargetResponse updateImageVulWhitelistTargetWithOptions(UpdateImageVulWhitelistTargetRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.reason)) {
            query.put("Reason", request.reason);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.target)) {
            query.put("Target", request.target);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateImageVulWhitelistTarget"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateImageVulWhitelistTargetResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateImageVulWhitelistTargetResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates the vulnerability whitelist of an image.</p>
     * 
     * @param request UpdateImageVulWhitelistTargetRequest
     * @return UpdateImageVulWhitelistTargetResponse
     */
    public UpdateImageVulWhitelistTargetResponse updateImageVulWhitelistTarget(UpdateImageVulWhitelistTargetRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateImageVulWhitelistTargetWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the name of a Jenkins image repository.</p>
     * 
     * @param request UpdateJenkinsImageRegistryNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateJenkinsImageRegistryNameResponse
     */
    public UpdateJenkinsImageRegistryNameResponse updateJenkinsImageRegistryNameWithOptions(UpdateJenkinsImageRegistryNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            body.put("RegistryId", request.registryId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryName)) {
            body.put("RegistryName", request.registryName);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateJenkinsImageRegistryName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateJenkinsImageRegistryNameResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateJenkinsImageRegistryNameResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the name of a Jenkins image repository.</p>
     * 
     * @param request UpdateJenkinsImageRegistryNameRequest
     * @return UpdateJenkinsImageRegistryNameResponse
     */
    public UpdateJenkinsImageRegistryNameResponse updateJenkinsImageRegistryName(UpdateJenkinsImageRegistryNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateJenkinsImageRegistryNameWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the retention period of images that are stored in a Jenkins image repository.</p>
     * 
     * @param request UpdateJenkinsImageRegistryPersistenceDayRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateJenkinsImageRegistryPersistenceDayResponse
     */
    public UpdateJenkinsImageRegistryPersistenceDayResponse updateJenkinsImageRegistryPersistenceDayWithOptions(UpdateJenkinsImageRegistryPersistenceDayRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        java.util.Map<String, Object> body = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.persistenceDay)) {
            body.put("PersistenceDay", request.persistenceDay);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            body.put("RegistryId", request.registryId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query)),
            new TeaPair("body", com.aliyun.openapiutil.Client.parseToMap(body))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateJenkinsImageRegistryPersistenceDay"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateJenkinsImageRegistryPersistenceDayResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateJenkinsImageRegistryPersistenceDayResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the retention period of images that are stored in a Jenkins image repository.</p>
     * 
     * @param request UpdateJenkinsImageRegistryPersistenceDayRequest
     * @return UpdateJenkinsImageRegistryPersistenceDayResponse
     */
    public UpdateJenkinsImageRegistryPersistenceDayResponse updateJenkinsImageRegistryPersistenceDay(UpdateJenkinsImageRegistryPersistenceDayRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request UpdateMaliciousFileWhitelistConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateMaliciousFileWhitelistConfigResponse
     */
    public UpdateMaliciousFileWhitelistConfigResponse updateMaliciousFileWhitelistConfigWithOptions(UpdateMaliciousFileWhitelistConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.configId)) {
            query.put("ConfigId", request.configId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.eventName)) {
            query.put("EventName", request.eventName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.field)) {
            query.put("Field", request.field);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fieldValue)) {
            query.put("FieldValue", request.fieldValue);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operator)) {
            query.put("Operator", request.operator);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.source)) {
            query.put("Source", request.source);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetType)) {
            query.put("TargetType", request.targetType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.targetValue)) {
            query.put("TargetValue", request.targetValue);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateMaliciousFileWhitelistConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateMaliciousFileWhitelistConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateMaliciousFileWhitelistConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.</p>
     * 
     * @param request UpdateMaliciousFileWhitelistConfigRequest
     * @return UpdateMaliciousFileWhitelistConfigResponse
     */
    public UpdateMaliciousFileWhitelistConfigResponse updateMaliciousFileWhitelistConfig(UpdateMaliciousFileWhitelistConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateMaliciousFileWhitelistConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates the blocking rule for at-risk images.</p>
     * 
     * @param tmpReq UpdateOpaStrategyNewRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateOpaStrategyNewResponse
     */
    public UpdateOpaStrategyNewResponse updateOpaStrategyNewWithOptions(UpdateOpaStrategyNewRequest tmpReq, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(tmpReq);
        UpdateOpaStrategyNewShrinkRequest request = new UpdateOpaStrategyNewShrinkRequest();
        com.aliyun.openapiutil.Client.convert(tmpReq, request);
        if (!com.aliyun.teautil.Common.isUnset(tmpReq.alarmDetail)) {
            request.alarmDetailShrink = com.aliyun.openapiutil.Client.arrayToStringWithSpecifiedStyle(tmpReq.alarmDetail, "AlarmDetail", "json");
        }

        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.alarmDetailShrink)) {
            query.put("AlarmDetail", request.alarmDetailShrink);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterId)) {
            query.put("ClusterId", request.clusterId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.clusterName)) {
            query.put("ClusterName", request.clusterName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.description)) {
            query.put("Description", request.description);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.imageName)) {
            query.put("ImageName", request.imageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.label)) {
            query.put("Label", request.label);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.maliciousImage)) {
            query.put("MaliciousImage", request.maliciousImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.ruleAction)) {
            query.put("RuleAction", request.ruleAction);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scopes)) {
            query.put("Scopes", request.scopes);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyId)) {
            query.put("StrategyId", request.strategyId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyName)) {
            query.put("StrategyName", request.strategyName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyTemplateId)) {
            query.put("StrategyTemplateId", request.strategyTemplateId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.unScanedImage)) {
            query.put("UnScanedImage", request.unScanedImage);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteList)) {
            query.put("WhiteList", request.whiteList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateOpaStrategyNew"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateOpaStrategyNewResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateOpaStrategyNewResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates the blocking rule for at-risk images.</p>
     * 
     * @param request UpdateOpaStrategyNewRequest
     * @return UpdateOpaStrategyNewResponse
     */
    public UpdateOpaStrategyNewResponse updateOpaStrategyNew(UpdateOpaStrategyNewRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateOpaStrategyNewWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.</p>
     * 
     * @param request UpdateOssScanConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateOssScanConfigResponse
     */
    public UpdateOssScanConfigResponse updateOssScanConfigWithOptions(UpdateOssScanConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allKeyPrefix)) {
            query.put("AllKeyPrefix", request.allKeyPrefix);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bucketNameList)) {
            query.put("BucketNameList", request.bucketNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxFileCount)) {
            query.put("DecompressMaxFileCount", request.decompressMaxFileCount);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decompressMaxLayer)) {
            query.put("DecompressMaxLayer", request.decompressMaxLayer);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.decryptionList)) {
            query.put("DecryptionList", request.decryptionList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.enable)) {
            query.put("Enable", request.enable);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.endTime)) {
            query.put("EndTime", request.endTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keyPrefixList)) {
            query.put("KeyPrefixList", request.keyPrefixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.keySuffixList)) {
            query.put("KeySuffixList", request.keySuffixList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lastModifiedStartTime)) {
            query.put("LastModifiedStartTime", request.lastModifiedStartTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.name)) {
            query.put("Name", request.name);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.scanDayList)) {
            query.put("ScanDayList", request.scanDayList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.startTime)) {
            query.put("StartTime", request.startTime);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateOssScanConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateOssScanConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateOssScanConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.</p>
     * 
     * @param request UpdateOssScanConfigRequest
     * @return UpdateOssScanConfigResponse
     */
    public UpdateOssScanConfigResponse updateOssScanConfig(UpdateOssScanConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateOssScanConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Change Postpaid Asset Authorization Version</p>
     * 
     * @param request UpdatePostPaidBindRelRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdatePostPaidBindRelResponse
     */
    public UpdatePostPaidBindRelResponse updatePostPaidBindRelWithOptions(UpdatePostPaidBindRelRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.autoBind)) {
            query.put("AutoBind", request.autoBind);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.autoBindVersion)) {
            query.put("AutoBindVersion", request.autoBindVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.bindAction)) {
            query.put("BindAction", request.bindAction);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdatePostPaidBindRel"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdatePostPaidBindRelResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdatePostPaidBindRelResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Change Postpaid Asset Authorization Version</p>
     * 
     * @param request UpdatePostPaidBindRelRequest
     * @return UpdatePostPaidBindRelResponse
     */
    public UpdatePostPaidBindRelResponse updatePostPaidBindRel(UpdatePostPaidBindRelRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updatePostPaidBindRelWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables automatic upgrade.</p>
     * 
     * @param request UpdatePublishAutoUpgradeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdatePublishAutoUpgradeResponse
     */
    public UpdatePublishAutoUpgradeResponse updatePublishAutoUpgradeWithOptions(UpdatePublishAutoUpgradeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.autoUpgrade)) {
            query.put("AutoUpgrade", request.autoUpgrade);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdatePublishAutoUpgrade"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdatePublishAutoUpgradeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdatePublishAutoUpgradeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Enables or disables automatic upgrade.</p>
     * 
     * @param request UpdatePublishAutoUpgradeRequest
     * @return UpdatePublishAutoUpgradeResponse
     */
    public UpdatePublishAutoUpgradeResponse updatePublishAutoUpgrade(UpdatePublishAutoUpgradeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updatePublishAutoUpgradeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates a release batch.</p>
     * 
     * @param request UpdatePublishBatchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdatePublishBatchResponse
     */
    public UpdatePublishBatchResponse updatePublishBatchWithOptions(UpdatePublishBatchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.batchId)) {
            query.put("BatchId", request.batchId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.batchName)) {
            query.put("BatchName", request.batchName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.interval)) {
            query.put("Interval", request.interval);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationBase)) {
            query.put("OperationBase", request.operationBase);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdatePublishBatch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdatePublishBatchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdatePublishBatchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates a release batch.</p>
     * 
     * @param request UpdatePublishBatchRequest
     * @return UpdatePublishBatchResponse
     */
    public UpdatePublishBatchResponse updatePublishBatch(UpdatePublishBatchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updatePublishBatchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.</p>
     * 
     * @param request UpdatePublishCronRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdatePublishCronResponse
     */
    public UpdatePublishCronResponse updatePublishCronWithOptions(UpdatePublishCronRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.cron)) {
            query.put("Cron", request.cron);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cronDay)) {
            query.put("CronDay", request.cronDay);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cronTime)) {
            query.put("CronTime", request.cronTime);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.cronType)) {
            query.put("CronType", request.cronType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.duration)) {
            query.put("Duration", request.duration);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdatePublishCron"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdatePublishCronResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdatePublishCronResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.</p>
     * 
     * @param request UpdatePublishCronRequest
     * @return UpdatePublishCronResponse
     */
    public UpdatePublishCronResponse updatePublishCron(UpdatePublishCronRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updatePublishCronWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.</p>
     * 
     * @param request UpdatePublishGraySwitchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdatePublishGraySwitchResponse
     */
    public UpdatePublishGraySwitchResponse updatePublishGraySwitchWithOptions(UpdatePublishGraySwitchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.graySwitchStatus)) {
            query.put("GraySwitchStatus", request.graySwitchStatus);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdatePublishGraySwitch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdatePublishGraySwitchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdatePublishGraySwitchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.</p>
     * 
     * @param request UpdatePublishGraySwitchRequest
     * @return UpdatePublishGraySwitchResponse
     */
    public UpdatePublishGraySwitchResponse updatePublishGraySwitch(UpdatePublishGraySwitchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updatePublishGraySwitchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates the unique identifier of an asset selection.</p>
     * 
     * @param request UpdateSelectionKeyByTypeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateSelectionKeyByTypeResponse
     */
    public UpdateSelectionKeyByTypeResponse updateSelectionKeyByTypeWithOptions(UpdateSelectionKeyByTypeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.businessType)) {
            query.put("BusinessType", request.businessType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.selectionKey)) {
            query.put("SelectionKey", request.selectionKey);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateSelectionKeyByType"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateSelectionKeyByTypeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateSelectionKeyByTypeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates the unique identifier of an asset selection.</p>
     * 
     * @param request UpdateSelectionKeyByTypeRequest
     * @return UpdateSelectionKeyByTypeResponse
     */
    public UpdateSelectionKeyByTypeResponse updateSelectionKeyByType(UpdateSelectionKeyByTypeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateSelectionKeyByTypeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Update the selected strict events in strict mode</p>
     * 
     * @param request UpdateStrictEventNameRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateStrictEventNameResponse
     */
    public UpdateStrictEventNameResponse updateStrictEventNameWithOptions(UpdateStrictEventNameRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.eventNameList)) {
            query.put("EventNameList", request.eventNameList);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operator)) {
            query.put("Operator", request.operator);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateStrictEventName"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateStrictEventNameResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateStrictEventNameResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Update the selected strict events in strict mode</p>
     * 
     * @param request UpdateStrictEventNameRequest
     * @return UpdateStrictEventNameResponse
     */
    public UpdateStrictEventNameResponse updateStrictEventName(UpdateStrictEventNameRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateStrictEventNameWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Updates machines in a release batch.</p>
     * 
     * @param request UpdateTargetListByBatchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateTargetListByBatchResponse
     */
    public UpdateTargetListByBatchResponse updateTargetListByBatchWithOptions(UpdateTargetListByBatchRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.batchId)) {
            query.put("BatchId", request.batchId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.operationList)) {
            query.put("OperationList", request.operationList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateTargetListByBatch"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateTargetListByBatchResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateTargetListByBatchResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Updates machines in a release batch.</p>
     * 
     * @param request UpdateTargetListByBatchRequest
     * @return UpdateTargetListByBatchResponse
     */
    public UpdateTargetListByBatchResponse updateTargetListByBatch(UpdateTargetListByBatchRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateTargetListByBatchWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Modify Image Service Whitelist.</p>
     * 
     * @param request UpdateWhiteListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateWhiteListResponse
     */
    public UpdateWhiteListResponse updateWhiteListWithOptions(UpdateWhiteListRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.registryId)) {
            query.put("RegistryId", request.registryId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.whiteList)) {
            query.put("WhiteList", request.whiteList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateWhiteList"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateWhiteListResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateWhiteListResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Modify Image Service Whitelist.</p>
     * 
     * @param request UpdateWhiteListRequest
     * @return UpdateWhiteListResponse
     */
    public UpdateWhiteListResponse updateWhiteList(UpdateWhiteListRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateWhiteListWithOptions(request, runtime);
    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Updates the status of an application whitelist policy.</p>
     * 
     * @param request UpdateWhiteListStrategyStatusRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateWhiteListStrategyStatusResponse
     */
    public UpdateWhiteListStrategyStatusResponse updateWhiteListStrategyStatusWithOptions(UpdateWhiteListStrategyStatusRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.sourceIp)) {
            query.put("SourceIp", request.sourceIp);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.strategyIds)) {
            query.put("StrategyIds", request.strategyIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpdateWhiteListStrategyStatus"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpdateWhiteListStrategyStatusResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpdateWhiteListStrategyStatusResponse());
        }

    }

    /**
     * <b>description</b> :
     * <p>The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.</p>
     * 
     * <b>summary</b> : 
     * <p>Updates the status of an application whitelist policy.</p>
     * 
     * @param request UpdateWhiteListStrategyStatusRequest
     * @return UpdateWhiteListStrategyStatusResponse
     */
    public UpdateWhiteListStrategyStatusResponse updateWhiteListStrategyStatus(UpdateWhiteListStrategyStatusRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.updateWhiteListStrategyStatusWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Upgrades the version of an anti-ransomware policy.</p>
     * 
     * @param request UpgradeBackupPolicyVersionRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpgradeBackupPolicyVersionResponse
     */
    public UpgradeBackupPolicyVersionResponse upgradeBackupPolicyVersionWithOptions(UpgradeBackupPolicyVersionRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.id)) {
            query.put("Id", request.id);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpgradeBackupPolicyVersion"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpgradeBackupPolicyVersionResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpgradeBackupPolicyVersionResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Upgrades the version of an anti-ransomware policy.</p>
     * 
     * @param request UpgradeBackupPolicyVersionRequest
     * @return UpgradeBackupPolicyVersionResponse
     */
    public UpgradeBackupPolicyVersionResponse upgradeBackupPolicyVersion(UpgradeBackupPolicyVersionRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.upgradeBackupPolicyVersionWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Upgrades the version of the management node to which a honeypot belongs.</p>
     * 
     * @param request UpgradeHoneypotNodeRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpgradeHoneypotNodeResponse
     */
    public UpgradeHoneypotNodeResponse upgradeHoneypotNodeWithOptions(UpgradeHoneypotNodeRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.allowHoneypotAccessInternet)) {
            query.put("AllowHoneypotAccessInternet", request.allowHoneypotAccessInternet);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpgradeHoneypotNode"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpgradeHoneypotNodeResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpgradeHoneypotNodeResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Upgrades the version of the management node to which a honeypot belongs.</p>
     * 
     * @param request UpgradeHoneypotNodeRequest
     * @return UpgradeHoneypotNodeResponse
     */
    public UpgradeHoneypotNodeResponse upgradeHoneypotNode(UpgradeHoneypotNodeRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.upgradeHoneypotNodeWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Manually upgrades the client version on assets.</p>
     * 
     * @param request UpgradeVersionByUuidsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpgradeVersionByUuidsResponse
     */
    public UpgradeVersionByUuidsResponse upgradeVersionByUuidsWithOptions(UpgradeVersionByUuidsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.upgradeVersion)) {
            query.put("UpgradeVersion", request.upgradeVersion);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuidList)) {
            query.put("UuidList", request.uuidList);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UpgradeVersionByUuids"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UpgradeVersionByUuidsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UpgradeVersionByUuidsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Manually upgrades the client version on assets.</p>
     * 
     * @param request UpgradeVersionByUuidsRequest
     * @return UpgradeVersionByUuidsResponse
     */
    public UpgradeVersionByUuidsResponse upgradeVersionByUuids(UpgradeVersionByUuidsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.upgradeVersionByUuidsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Uploads a honeypot file.</p>
     * 
     * @param request UploadedHoneyPotFileRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UploadedHoneyPotFileResponse
     */
    public UploadedHoneyPotFileResponse uploadedHoneyPotFileWithOptions(UploadedHoneyPotFileRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.fileKey)) {
            query.put("FileKey", request.fileKey);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileName)) {
            query.put("FileName", request.fileName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.fileType)) {
            query.put("FileType", request.fileType);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.honeypotImageName)) {
            query.put("HoneypotImageName", request.honeypotImageName);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.lang)) {
            query.put("Lang", request.lang);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.nodeId)) {
            query.put("NodeId", request.nodeId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.templateExtra)) {
            query.put("TemplateExtra", request.templateExtra);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "UploadedHoneyPotFile"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new UploadedHoneyPotFileResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new UploadedHoneyPotFileResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Uploads a honeypot file.</p>
     * 
     * @param request UploadedHoneyPotFileRequest
     * @return UploadedHoneyPotFileResponse
     */
    public UploadedHoneyPotFileResponse uploadedHoneyPotFile(UploadedHoneyPotFileRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.uploadedHoneyPotFileWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.</p>
     * 
     * @param request ValidateHcWarningsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ValidateHcWarningsResponse
     */
    public ValidateHcWarningsResponse validateHcWarningsWithOptions(ValidateHcWarningsRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.riskIds)) {
            query.put("RiskIds", request.riskIds);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.status)) {
            query.put("Status", request.status);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.uuids)) {
            query.put("Uuids", request.uuids);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "ValidateHcWarnings"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new ValidateHcWarningsResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new ValidateHcWarningsResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.</p>
     * 
     * @param request ValidateHcWarningsRequest
     * @return ValidateHcWarningsResponse
     */
    public ValidateHcWarningsResponse validateHcWarnings(ValidateHcWarningsRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.validateHcWarningsWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Customization and validation of check items and repair parameters</p>
     * 
     * @param request VerifyCheckCustomConfigRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return VerifyCheckCustomConfigResponse
     */
    public VerifyCheckCustomConfigResponse verifyCheckCustomConfigWithOptions(VerifyCheckCustomConfigRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.customConfigs)) {
            query.put("CustomConfigs", request.customConfigs);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.repairConfigs)) {
            query.put("RepairConfigs", request.repairConfigs);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "VerifyCheckCustomConfig"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new VerifyCheckCustomConfigResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new VerifyCheckCustomConfigResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Customization and validation of check items and repair parameters</p>
     * 
     * @param request VerifyCheckCustomConfigRequest
     * @return VerifyCheckCustomConfigResponse
     */
    public VerifyCheckCustomConfigResponse verifyCheckCustomConfig(VerifyCheckCustomConfigRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.verifyCheckCustomConfigWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Verifies the instances on which risks are detected based on a check item.</p>
     * 
     * @param request VerifyCheckInstanceResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return VerifyCheckInstanceResultResponse
     */
    public VerifyCheckInstanceResultResponse verifyCheckInstanceResultWithOptions(VerifyCheckInstanceResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkId)) {
            query.put("CheckId", request.checkId);
        }

        if (!com.aliyun.teautil.Common.isUnset(request.instanceIds)) {
            query.put("InstanceIds", request.instanceIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "VerifyCheckInstanceResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new VerifyCheckInstanceResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new VerifyCheckInstanceResultResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Verifies the instances on which risks are detected based on a check item.</p>
     * 
     * @param request VerifyCheckInstanceResultRequest
     * @return VerifyCheckInstanceResultResponse
     */
    public VerifyCheckInstanceResultResponse verifyCheckInstanceResult(VerifyCheckInstanceResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.verifyCheckInstanceResultWithOptions(request, runtime);
    }

    /**
     * <b>summary</b> : 
     * <p>Verifies risk items that are detected based on check items.</p>
     * 
     * @param request VerifyCheckResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return VerifyCheckResultResponse
     */
    public VerifyCheckResultResponse verifyCheckResultWithOptions(VerifyCheckResultRequest request, com.aliyun.teautil.models.RuntimeOptions runtime) throws Exception {
        com.aliyun.teautil.Common.validateModel(request);
        java.util.Map<String, Object> query = new java.util.HashMap<>();
        if (!com.aliyun.teautil.Common.isUnset(request.checkIds)) {
            query.put("CheckIds", request.checkIds);
        }

        com.aliyun.teaopenapi.models.OpenApiRequest req = com.aliyun.teaopenapi.models.OpenApiRequest.build(TeaConverter.buildMap(
            new TeaPair("query", com.aliyun.openapiutil.Client.query(query))
        ));
        com.aliyun.teaopenapi.models.Params params = com.aliyun.teaopenapi.models.Params.build(TeaConverter.buildMap(
            new TeaPair("action", "VerifyCheckResult"),
            new TeaPair("version", "2018-12-03"),
            new TeaPair("protocol", "HTTPS"),
            new TeaPair("pathname", "/"),
            new TeaPair("method", "POST"),
            new TeaPair("authType", "AK"),
            new TeaPair("style", "RPC"),
            new TeaPair("reqBodyType", "formData"),
            new TeaPair("bodyType", "json")
        ));
        if (com.aliyun.teautil.Common.isUnset(_signatureVersion) || !com.aliyun.teautil.Common.equalString(_signatureVersion, "v4")) {
            return TeaModel.toModel(this.callApi(params, req, runtime), new VerifyCheckResultResponse());
        } else {
            return TeaModel.toModel(this.execute(params, req, runtime), new VerifyCheckResultResponse());
        }

    }

    /**
     * <b>summary</b> : 
     * <p>Verifies risk items that are detected based on check items.</p>
     * 
     * @param request VerifyCheckResultRequest
     * @return VerifyCheckResultResponse
     */
    public VerifyCheckResultResponse verifyCheckResult(VerifyCheckResultRequest request) throws Exception {
        com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions();
        return this.verifyCheckResultWithOptions(request, runtime);
    }
}
