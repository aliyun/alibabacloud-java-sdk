// This file is auto-generated, don't edit it. Thanks.
package com.aliyun.cloudauth20190307.models;

import com.aliyun.tea.*;

public class InitFaceVerifyRequest extends TeaModel {
    /**
     * <p>Whether the SDK enables strict face quality detection:</p>
     * <ul>
     * <li><p><strong>Y</strong>: Enable</p>
     * </li>
     * <li><p><strong>N</strong> (default): Disable</p>
     * </li>
     * </ul>
     * <blockquote>
     * <ul>
     * <li>If this parameter is enabled, the SDK needs to integrate the <a href="https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/description-of-sdk-package-clipping?spm=a2c4g.11186623.0.0.1a9d35c6ySFUPW">strict face quality detection module</a>. Enabling strict quality detection may decrease the success rate of user face recognition.</li>
     * <li>Only supported in Android SDK version 2.3.24 and above.</li>
     * </ul>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>N</p>
     */
    @NameInMap("AppQualityCheck")
    public String appQualityCheck;

    /**
     * <p>User authorization ID, with a maximum length of 64 characters.</p>
     * 
     * <strong>example:</strong>
     * <p>92d46b9e9e2d703f2897f350d5bd4149</p>
     */
    @NameInMap("AuthId")
    public String authId;

    /**
     * <p>Date of birth on the document.</p>
     * <p>This field is required when the document type <strong>CertType</strong> is <strong>PASSPORT</strong> and <strong>Mode</strong> is <strong>3</strong>.</p>
     * 
     * <strong>example:</strong>
     * <p>1993-10-10</p>
     */
    @NameInMap("Birthday")
    public String birthday;

    /**
     * <p>Security token, generated by you, used for preventing duplication and tampering.</p>
     * <p>If this value is set, the <strong>CallbackToken</strong> field will be displayed in the callback address.</p>
     * 
     * <strong>example:</strong>
     * <p>NMjvQanQgplBSaEI0sL86WnQplB</p>
     */
    @NameInMap("CallbackToken")
    public String callbackToken;

    /**
     * <p>Callback notification address for the authentication result, with the default callback request method being GET. The callback address must start with <code>https</code>. After completing the authentication, the platform will call back this address and automatically add the <code>certifyId</code> and <code>passed</code> fields, where the value of the <code>passed</code> field is the subcode, for example: <code>https://www.aliyun.com?callbackToken=1000004826&amp;certifyId=shaxxxx&amp;passed=200</code>.</p>
     * <notice>
     * 
     * <ul>
     * <li>Callbacks are triggered only when the authentication is completed (including both successful and unsuccessful authentications). If the authentication is abandoned, interrupted abnormally, or not performed, no notification will be sent. It is recommended that you retrieve detailed authentication information through a query interface if needed after receiving the callback notification.</li>
     * <li>The accessibility of the provided address will be verified before the API call. If the address cannot be accessed over the public network, a 401 error will be returned.</li>
     * <li>The callback interface must return an HTTP status code of 200; otherwise, it will trigger a retry, with two callbacks within 3 seconds.</li>
     * </ul>
     * </notice>
     * 
     * <strong>example:</strong>
     * <p><a href="https://www.aliyun.com">https://www.aliyun.com</a></p>
     */
    @NameInMap("CallbackUrl")
    public String callbackUrl;

    /**
     * <p>Whether to enable the camera selection feature:</p>
     * <ul>
     * <li><p><strong>Y</strong>: Enable</p>
     * </li>
     * <li><p><strong>N</strong> (default): Disable</p>
     * </li>
     * </ul>
     * <blockquote>
     * <p>This feature only takes effect in PC integration mode. When enabled, it allows users to select the camera for authentication.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>N</p>
     */
    @NameInMap("CameraSelection")
    public String cameraSelection;

    /**
     * <p>Real name.</p>
     * 
     * <strong>example:</strong>
     * <p>张三</p>
     */
    @NameInMap("CertName")
    public String certName;

    /**
     * <p>Document number.</p>
     * 
     * <strong>example:</strong>
     * <p>330103xxxxxxxxxxxx</p>
     */
    @NameInMap("CertNo")
    public String certNo;

    /**
     * <p>Document type.
     * Currently, only IDENTITY_CARD (ID card) is supported.</p>
     * 
     * <strong>example:</strong>
     * <p>IDENTITY_CARD</p>
     */
    @NameInMap("CertType")
    public String certType;

    /**
     * <blockquote>
     * <p>Warning: To be deprecated</p>
     * </blockquote>
     * <p>Previously passed CertifyId for real-person authentication, where the photo taken during authentication is used as the comparison photo.</p>
     * <blockquote>
     * <p>Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>0bfa7c493f850e5178b9f8613634c9xx</p>
     */
    @NameInMap("CertifyId")
    public String certifyId;

    /**
     * <p>Types of <strong>CertifyUrl</strong> returned, including:</p>
     * <ul>
     * <li><p><strong>L</strong>: Original long link</p>
     * </li>
     * <li><p><strong>S</strong> (default): Short link</p>
     * </li>
     * </ul>
     * 
     * <strong>example:</strong>
     * <p>L</p>
     */
    @NameInMap("CertifyUrlStyle")
    public String certifyUrlStyle;

    /**
     * <p>Web SDK device type, with values <strong>WEB</strong> or <strong>H5</strong>.</p>
     * <blockquote>
     * <p>Only Web SDK device types are supported.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>WEB</p>
     */
    @NameInMap("CertifyUrlType")
    public String certifyUrlType;

    /**
     * <p>Whether to allow cropping of the face image, with the default being not allowed.</p>
     * <ul>
     * <li><p>T: Indicates allowing cropping.</p>
     * </li>
     * <li><p>F: Indicates not allowing cropping.</p>
     * </li>
     * </ul>
     * <blockquote>
     * <p>If the image you are requesting is not from a standard liveness detection SDK, it is recommended to allow face image cropping. When this feature is enabled, the requested image will first undergo face cropping and alignment, and then the service request will be initiated.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>T</p>
     */
    @NameInMap("Crop")
    public String crop;

    /**
     * <p>Encryption algorithm to be used, currently supporting only the SM2 national encryption algorithm.</p>
     * <p>After enabling encrypted transmission, you need to pass in the encrypted CertName and CertNo. For how to encrypt, please refer to <a href="https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/description-of-parameter-encryption?spm=a2c4g.11186623.0.0.1a9d566eWdqwy8#task-2229332">Parameter Encryption Instructions</a>.</p>
     * 
     * <strong>example:</strong>
     * <p>SM2</p>
     */
    @NameInMap("EncryptType")
    public String encryptType;

    /**
     * <p>Base64 encoded photo.</p>
     * <blockquote>
     * <p>Choose one of the following methods to upload the image: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>/9j/4AAQSkZJRgABAQAASxxxxxxx</p>
     */
    @NameInMap("FaceContrastPicture")
    public String faceContrastPicture;

    /**
     * <p>OSS photo address, currently only supports authorized OSS photo addresses.</p>
     * <blockquote>
     * <p>Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p><a href="https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg">https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg</a></p>
     */
    @NameInMap("FaceContrastPictureUrl")
    public String faceContrastPictureUrl;

    /**
     * <p>Device assistant label type, with the value: <strong>DeviceRisk</strong>.</p>
     * <blockquote>
     * <ul>
     * <li>Choosing to output the device assistant will incur additional costs. For details, see <a href="https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/face-guard?spm=a2c4g.11186623.0.0.443e5522rbHsR4">Paid Value-Added Services</a>.</li>
     * <li>If you do not need to output the device assistant label, you can either not pass the parameter or pass an empty value.</li>
     * </ul>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>DeviceRisk</p>
     */
    @NameInMap("FaceGuardOutput")
    public String faceGuardOutput;

    /**
     * <p>User\&quot;s IP address.</p>
     * 
     * <strong>example:</strong>
     * <p>114.xxx.xxx.xxx</p>
     */
    @NameInMap("Ip")
    public String ip;

    /**
     * <p>Metainfo environment parameter, which needs to be obtained through the client SDK.</p>
     * 
     * <strong>example:</strong>
     * <p>{&quot;zimVer&quot;:&quot;3.0.0&quot;,&quot;appVersion&quot;: &quot;1&quot;,&quot;bioMetaInfo&quot;: &quot;4.1.0:11501568,0&quot;,&quot;appName&quot;: &quot;com.aliyun.antcloudauth&quot;,&quot;deviceType&quot;: &quot;ios&quot;,&quot;osVersion&quot;: &quot;iOS 10.3.2&quot;,&quot;apdidToken&quot;: &quot;&quot;,&quot;deviceModel&quot;: &quot;iPhone9,1&quot;}</p>
     */
    @NameInMap("MetaInfo")
    public String metaInfo;

    /**
     * <p>User\&quot;s phone number.</p>
     * 
     * <strong>example:</strong>
     * <p>130xxxxxxxx</p>
     */
    @NameInMap("Mobile")
    public String mobile;

    /**
     * <p>Method to obtain passport NFC verification elements:</p>
     * <ul>
     * <li><p><strong>1</strong>: User input, where the end-user manually inputs the document information using the UI interface provided by the Alibaba Cloud SDK.</p>
     * </li>
     * <li><p><strong>3</strong>: External parameter input, where the document information is passed through external parameters.</p>
     * </li>
     * </ul>
     * <blockquote>
     * <p>When decoding the encrypted information from the passport chip using NFC, three elements of the passport need to be obtained, including name, date of birth, and document expiration date.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>1</p>
     */
    @NameInMap("Mode")
    public String mode;

    /**
     * <p>Liveness detection type, with values:</p>
     * <blockquote>
     * <p>Only the following liveness detection types are supported; custom actions or combinations are not supported at this time.</p>
     * </blockquote>
     * <p>Note
     * Only the following liveness detection types are supported; custom actions or combinations are not supported at this time.</p>
     * <ul>
     * <li><p><strong>LIVENESS</strong> (default): Blinking</p>
     * </li>
     * <li><p><strong>PHOTINUS_LIVENESS</strong>: Blinking + Colorful Light</p>
     * </li>
     * <li><p><strong>MULTI_ACTION</strong>: Blinking + Head Shaking (the order of blinking and head shaking is random)</p>
     * </li>
     * <li><p><strong>MOVE_ACTION</strong> (recommended): Moving Closer and Farther + Blinking</p>
     * </li>
     * <li><p><strong>MOVE_PHOTINUS</strong>: Moving Closer and Farther + Colorful Light</p>
     * </li>
     * </ul>
     * <blockquote>
     * <ul>
     * <li>The <strong>default liveness detection type</strong> is supported in the following versions:<ul>
     * <li>Android SDK 1.2.6 and above</li>
     * <li>iOS SDK 1.2.4 and above</li>
     * <li>Harmony SDK 1.0.0 and above</li>
     * </ul>
     * </li>
     * <li>Other types are supported in the latest SDK versions for Android/iOS/Harmony. It is recommended to integrate the latest version.</li>
     * </ul>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>MOVE_ACTION</p>
     */
    @NameInMap("Model")
    public String model;

    /**
     * <p>Whether to intercept when multiple faces are detected, with the following values:</p>
     * <ul>
     * <li><p><strong>Y</strong>: Intercept, and the client prompts the user to re-scan their face.</p>
     * </li>
     * <li><p><strong>N</strong> (default): Do not intercept, and send the largest face in the scanned image to the server for security checks.</p>
     * </li>
     * </ul>
     * 
     * <strong>example:</strong>
     * <p>Y</p>
     */
    @NameInMap("NeedMultiFaceCheck")
    public String needMultiFaceCheck;

    /**
     * <p>Authorized OSS bucket name.</p>
     * <blockquote>
     * <p>Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>cn-shanghai-aliyun-cloudauth-xxxxx</p>
     */
    @NameInMap("OssBucketName")
    public String ossBucketName;

    /**
     * <p>Authorized OSS object name.</p>
     * <blockquote>
     * <p>Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>verify/xxxxx/xxxxxx.jpeg</p>
     */
    @NameInMap("OssObjectName")
    public String ossObjectName;

    /**
     * <p>Unique identifier for the merchant\&quot;s request.</p>
     * <p>The value is a 32-character alphanumeric combination. The first few characters are a custom abbreviation defined by the merchant, followed by a period, and the latter part can be a random or incremental sequence.</p>
     * 
     * <strong>example:</strong>
     * <p>e0c34a77f5ac40a5aa5e6ed20c353888</p>
     */
    @NameInMap("OuterOrderNo")
    public String outerOrderNo;

    /**
     * <p>Degradation configuration for mobile H5 authentication when WebRTC or Webassembly is incompatible.</p>
     * <ul>
     * <li><p><strong>keep</strong>: Does not support degradation, returns directly.</p>
     * </li>
     * <li><p><strong>url</strong> (default): Supports degradation, returns an authentication URL. Users can use this URL to open or switch browsers for authentication.</p>
     * </li>
     * <li><p><strong>video</strong>: Supports degradation, uses the system camera to record a 3~5 second blinking video for authentication.</p>
     * </li>
     * </ul>
     * <blockquote>
     * <p>When the degradation mode is Video, the following functions will be disabled, and the product security will decrease. It is recommended to configure it only for secure scenarios.</p>
     * <ul>
     * <li>Liveness detection type settings will not take effect.</li>
     * <li>The VideoEvidence function is not supported.</li>
     * </ul>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>url</p>
     */
    @NameInMap("ProcedurePriority")
    public String procedurePriority;

    /**
     * <p>Fixed value. The parameter value differs based on the product solution:</p>
     * <ul>
     * <li>APP Authentication Scheme: Fixed value is ID_PRO</li>
     * <li>Live Face Verification Scheme: Fixed value is PV_FV</li>
     * <li>Liveness Detection Scheme: Fixed value is LR_FR</li>
     * </ul>
     * 
     * <strong>example:</strong>
     * <p>ID_PRO</p>
     */
    @NameInMap("ProductCode")
    public String productCode;

    /**
     * <p>Whether to enable rare character mode:</p>
     * <ul>
     * <li><p><strong>Y</strong>: Enable. A message input box will pop up before the user authenticates, requiring the input of the rare character name and ID number. The user must agree to the terms before starting the authentication process.</p>
     * </li>
     * <li><p><strong>N</strong>: Not enabled (default)</p>
     * </li>
     * </ul>
     * 
     * <strong>example:</strong>
     * <p>Y</p>
     */
    @NameInMap("RarelyCharacters")
    public String rarelyCharacters;

    /**
     * <p>Whether to read the document photo:</p>
     * <ul>
     * <li><p><strong>Y</strong>: Read</p>
     * </li>
     * <li><p><strong>N</strong>: Do not read</p>
     * </li>
     * </ul>
     * <blockquote>
     * <p>If the document face photo is needed in subsequent authentication steps, it is recommended to set this parameter to Y.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>Y</p>
     */
    @NameInMap("ReadImg")
    public String readImg;

    /**
     * <p>Target URL for the merchant\&quot;s business page to redirect to.</p>
     * 
     * <strong>example:</strong>
     * <p><a href="http://www.aliyun.com">www.aliyun.com</a></p>
     */
    @NameInMap("ReturnUrl")
    public String returnUrl;

    /**
     * <p>Authentication Scene ID.</p>
     * 
     * <strong>example:</strong>
     * <p>1000000006</p>
     */
    @NameInMap("SceneId")
    public Long sceneId;

    /**
     * <p>Aging-friendly configuration parameters that take effect for each authentication request. You can choose different parameters based on your app\&quot;s business attributes, customer distribution, operational characteristics, etc., for each authentication request. The options include the following, with the default being 0.</p>
     * <ul>
     * <li><p><strong>0</strong>: Not enabled, indicating that the current authentication request does not enable aging-friendly mode.</p>
     * </li>
     * <li><p><strong>1</strong>: Enabled, indicating that the current authentication request enables aging-friendly mode.</p>
     * </li>
     * <li><p><strong>2</strong>: User choice.</p>
     * </li>
     * </ul>
     * <p>Supports end-users in choosing the authentication mode. The product guide page provides two authentication entry points: \&quot;Enable Authentication\&quot; and \&quot;Elderly Authentication Mode\&quot;. When the user selects \&quot;Elderly Authentication Mode\&quot;, the system enters aging-friendly mode.</p>
     * <blockquote>
     * <ul>
     * <li>Aging-friendly parameters are only effective when the liveness detection type <strong>Model</strong> is set to <strong>LIVENESS</strong> or <strong>MULTI_ACTION</strong>.</li>
     * </ul>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>0</p>
     */
    @NameInMap("SuitableType")
    public String suitableType;

    /**
     * <p>UI configuration file URL.</p>
     * <p>You can view the complete configuration in the <a href="https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/web-sdk-ui-custom-configuration-description?spm=a2c4g.11186623.0.0.4c683f5c8K3I9p">Web SDK UI Customization Description</a>.</p>
     * 
     * <strong>example:</strong>
     * <p><a href="http://www.aliyundoc.com">www.aliyundoc.com</a></p>
     */
    @NameInMap("UiCustomUrl")
    public String uiCustomUrl;

    /**
     * <p>Custom user ID for the customer\&quot;s business, please ensure it is unique.</p>
     * 
     * <strong>example:</strong>
     * <p>123456789</p>
     */
    @NameInMap("UserId")
    public String userId;

    /**
     * <p>Document expiration date.</p>
     * <p>This field is required when the document type <strong>CertType</strong> is <strong>PASSPORT</strong> and <strong>Mode</strong> is <strong>3</strong>.</p>
     * 
     * <strong>example:</strong>
     * <p>2039-06-10</p>
     */
    @NameInMap("ValidityDate")
    public String validityDate;

    /**
     * <p>Whether to enable video evidence:</p>
     * <ul>
     * <li><p><strong>true</strong>: Enable</p>
     * </li>
     * <li><p><strong>false</strong> (default): Disable</p>
     * </li>
     * </ul>
     * <blockquote>
     * <p>Due to the large size of video files, when the network is unstable, the system will discard the video file to prioritize the transmission of necessary images for authentication. It is recommended that your business set a weak dependency on the video.</p>
     * </blockquote>
     * 
     * <strong>example:</strong>
     * <p>false</p>
     */
    @NameInMap("VideoEvidence")
    public String videoEvidence;

    /**
     * <p>Customized content. Required when personalized settings are enabled. The format is a JSON String of a String List.</p>
     * <ul>
     * <li><p>For the follow-reading scenario: It should not exceed 60 Chinese characters (excluding punctuation), and the List contains only one element.</p>
     * </li>
     * <li><p>For the Q&amp;A scenario: Up to 3 questions can be set, with each question not exceeding 30 Chinese characters, and each question being an element in the List.</p>
     * </li>
     * </ul>
     * 
     * <strong>example:</strong>
     * <p>[&quot;本人王先生同意***协议。&quot;]</p>
     */
    @NameInMap("VoluntaryCustomizedContent")
    public String voluntaryCustomizedContent;

    public static InitFaceVerifyRequest build(java.util.Map<String, ?> map) throws Exception {
        InitFaceVerifyRequest self = new InitFaceVerifyRequest();
        return TeaModel.build(map, self);
    }

    public InitFaceVerifyRequest setAppQualityCheck(String appQualityCheck) {
        this.appQualityCheck = appQualityCheck;
        return this;
    }
    public String getAppQualityCheck() {
        return this.appQualityCheck;
    }

    public InitFaceVerifyRequest setAuthId(String authId) {
        this.authId = authId;
        return this;
    }
    public String getAuthId() {
        return this.authId;
    }

    public InitFaceVerifyRequest setBirthday(String birthday) {
        this.birthday = birthday;
        return this;
    }
    public String getBirthday() {
        return this.birthday;
    }

    public InitFaceVerifyRequest setCallbackToken(String callbackToken) {
        this.callbackToken = callbackToken;
        return this;
    }
    public String getCallbackToken() {
        return this.callbackToken;
    }

    public InitFaceVerifyRequest setCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    public String getCallbackUrl() {
        return this.callbackUrl;
    }

    public InitFaceVerifyRequest setCameraSelection(String cameraSelection) {
        this.cameraSelection = cameraSelection;
        return this;
    }
    public String getCameraSelection() {
        return this.cameraSelection;
    }

    public InitFaceVerifyRequest setCertName(String certName) {
        this.certName = certName;
        return this;
    }
    public String getCertName() {
        return this.certName;
    }

    public InitFaceVerifyRequest setCertNo(String certNo) {
        this.certNo = certNo;
        return this;
    }
    public String getCertNo() {
        return this.certNo;
    }

    public InitFaceVerifyRequest setCertType(String certType) {
        this.certType = certType;
        return this;
    }
    public String getCertType() {
        return this.certType;
    }

    public InitFaceVerifyRequest setCertifyId(String certifyId) {
        this.certifyId = certifyId;
        return this;
    }
    public String getCertifyId() {
        return this.certifyId;
    }

    public InitFaceVerifyRequest setCertifyUrlStyle(String certifyUrlStyle) {
        this.certifyUrlStyle = certifyUrlStyle;
        return this;
    }
    public String getCertifyUrlStyle() {
        return this.certifyUrlStyle;
    }

    public InitFaceVerifyRequest setCertifyUrlType(String certifyUrlType) {
        this.certifyUrlType = certifyUrlType;
        return this;
    }
    public String getCertifyUrlType() {
        return this.certifyUrlType;
    }

    public InitFaceVerifyRequest setCrop(String crop) {
        this.crop = crop;
        return this;
    }
    public String getCrop() {
        return this.crop;
    }

    public InitFaceVerifyRequest setEncryptType(String encryptType) {
        this.encryptType = encryptType;
        return this;
    }
    public String getEncryptType() {
        return this.encryptType;
    }

    public InitFaceVerifyRequest setFaceContrastPicture(String faceContrastPicture) {
        this.faceContrastPicture = faceContrastPicture;
        return this;
    }
    public String getFaceContrastPicture() {
        return this.faceContrastPicture;
    }

    public InitFaceVerifyRequest setFaceContrastPictureUrl(String faceContrastPictureUrl) {
        this.faceContrastPictureUrl = faceContrastPictureUrl;
        return this;
    }
    public String getFaceContrastPictureUrl() {
        return this.faceContrastPictureUrl;
    }

    public InitFaceVerifyRequest setFaceGuardOutput(String faceGuardOutput) {
        this.faceGuardOutput = faceGuardOutput;
        return this;
    }
    public String getFaceGuardOutput() {
        return this.faceGuardOutput;
    }

    public InitFaceVerifyRequest setIp(String ip) {
        this.ip = ip;
        return this;
    }
    public String getIp() {
        return this.ip;
    }

    public InitFaceVerifyRequest setMetaInfo(String metaInfo) {
        this.metaInfo = metaInfo;
        return this;
    }
    public String getMetaInfo() {
        return this.metaInfo;
    }

    public InitFaceVerifyRequest setMobile(String mobile) {
        this.mobile = mobile;
        return this;
    }
    public String getMobile() {
        return this.mobile;
    }

    public InitFaceVerifyRequest setMode(String mode) {
        this.mode = mode;
        return this;
    }
    public String getMode() {
        return this.mode;
    }

    public InitFaceVerifyRequest setModel(String model) {
        this.model = model;
        return this;
    }
    public String getModel() {
        return this.model;
    }

    public InitFaceVerifyRequest setNeedMultiFaceCheck(String needMultiFaceCheck) {
        this.needMultiFaceCheck = needMultiFaceCheck;
        return this;
    }
    public String getNeedMultiFaceCheck() {
        return this.needMultiFaceCheck;
    }

    public InitFaceVerifyRequest setOssBucketName(String ossBucketName) {
        this.ossBucketName = ossBucketName;
        return this;
    }
    public String getOssBucketName() {
        return this.ossBucketName;
    }

    public InitFaceVerifyRequest setOssObjectName(String ossObjectName) {
        this.ossObjectName = ossObjectName;
        return this;
    }
    public String getOssObjectName() {
        return this.ossObjectName;
    }

    public InitFaceVerifyRequest setOuterOrderNo(String outerOrderNo) {
        this.outerOrderNo = outerOrderNo;
        return this;
    }
    public String getOuterOrderNo() {
        return this.outerOrderNo;
    }

    public InitFaceVerifyRequest setProcedurePriority(String procedurePriority) {
        this.procedurePriority = procedurePriority;
        return this;
    }
    public String getProcedurePriority() {
        return this.procedurePriority;
    }

    public InitFaceVerifyRequest setProductCode(String productCode) {
        this.productCode = productCode;
        return this;
    }
    public String getProductCode() {
        return this.productCode;
    }

    public InitFaceVerifyRequest setRarelyCharacters(String rarelyCharacters) {
        this.rarelyCharacters = rarelyCharacters;
        return this;
    }
    public String getRarelyCharacters() {
        return this.rarelyCharacters;
    }

    public InitFaceVerifyRequest setReadImg(String readImg) {
        this.readImg = readImg;
        return this;
    }
    public String getReadImg() {
        return this.readImg;
    }

    public InitFaceVerifyRequest setReturnUrl(String returnUrl) {
        this.returnUrl = returnUrl;
        return this;
    }
    public String getReturnUrl() {
        return this.returnUrl;
    }

    public InitFaceVerifyRequest setSceneId(Long sceneId) {
        this.sceneId = sceneId;
        return this;
    }
    public Long getSceneId() {
        return this.sceneId;
    }

    public InitFaceVerifyRequest setSuitableType(String suitableType) {
        this.suitableType = suitableType;
        return this;
    }
    public String getSuitableType() {
        return this.suitableType;
    }

    public InitFaceVerifyRequest setUiCustomUrl(String uiCustomUrl) {
        this.uiCustomUrl = uiCustomUrl;
        return this;
    }
    public String getUiCustomUrl() {
        return this.uiCustomUrl;
    }

    public InitFaceVerifyRequest setUserId(String userId) {
        this.userId = userId;
        return this;
    }
    public String getUserId() {
        return this.userId;
    }

    public InitFaceVerifyRequest setValidityDate(String validityDate) {
        this.validityDate = validityDate;
        return this;
    }
    public String getValidityDate() {
        return this.validityDate;
    }

    public InitFaceVerifyRequest setVideoEvidence(String videoEvidence) {
        this.videoEvidence = videoEvidence;
        return this;
    }
    public String getVideoEvidence() {
        return this.videoEvidence;
    }

    public InitFaceVerifyRequest setVoluntaryCustomizedContent(String voluntaryCustomizedContent) {
        this.voluntaryCustomizedContent = voluntaryCustomizedContent;
        return this;
    }
    public String getVoluntaryCustomizedContent() {
        return this.voluntaryCustomizedContent;
    }

}
